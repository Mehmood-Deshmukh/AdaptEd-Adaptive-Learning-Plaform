[{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f5"
  },
  "question": "What is the difference between `==` and `.equals()` when comparing Strings in Java?",
  "options": [
    "Both compare content; `==` is faster",
    "Both compare references; `.equals()` is faster",
    "`==` compares references, `.equals()` compares content",
    "`==` compares content, `.equals()` compares references"
  ],
  "correctOption": "C",
  "explanation": "`==` checks if two String references point to the same object, while `.equals()` compares the actual string content.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f1"
  },
  "question": "Which keyword is used to prevent method overriding in Java?",
  "options": [
    "static",
    "final",
    "abstract",
    "private"
  ],
  "correctOption": "B",
  "explanation": "The `final` keyword prevents a method from being overridden in subclasses.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f2"
  },
  "question": "What is the purpose of the `transient` keyword in Java?",
  "options": [
    "To make a variable immutable",
    "To prevent a variable from being serialized",
    "To make a variable thread-safe",
    "To declare a constant variable"
  ],
  "correctOption": "B",
  "explanation": "`transient` prevents a variable from being included during serialization, ensuring it's not saved or restored.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f6"
  },
  "question": "Which design pattern is used to create objects without specifying the exact class of object that will be created?",
  "options": [
    "Singleton",
    "Factory",
    "Observer",
    "Decorator"
  ],
  "correctOption": "B",
  "explanation": "The Factory pattern decouples object creation from client code, allowing for flexible object instantiation.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f4"
  },
  "question": "What exception is thrown when you try to access an array element outside its bounds?",
  "options": [
    "NullPointerException",
    "IllegalArgumentException",
    "ArrayIndexOutOfBoundsException",
    "ClassCastException"
  ],
  "correctOption": "C",
  "explanation": "An `ArrayIndexOutOfBoundsException` is specifically thrown when an array index is out of range.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f3"
  },
  "question": "Which collection is best suited for storing a key-value pair where keys are unique and retrieval is fast?",
  "options": [
    "ArrayList",
    "LinkedList",
    "HashSet",
    "HashMap"
  ],
  "correctOption": "D",
  "explanation": "HashMap provides fast key-based retrieval due to its hash table implementation, with unique keys.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f7"
  },
  "question": "How do you handle multiple exceptions in a single `try-catch` block?",
  "options": [
    "Use multiple `try` blocks",
    "Use multiple `catch` blocks, each for a specific exception type",
    "Use a single `catch` block with a generic `Exception` type",
    "Exceptions cannot be handled in a single `try-catch` block"
  ],
  "correctOption": "B",
  "explanation": "Multiple `catch` blocks allow specific handling of different exception types within the same `try` block.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298fa"
  },
  "question": "Which keyword is used to create a thread in Java?",
  "options": [
    "thread",
    "process",
    "run",
    "extends"
  ],
  "correctOption": "D",
  "explanation": "A class extending the `Thread` class, or implementing the `Runnable` interface, can create a new thread.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f8"
  },
  "question": "What is the purpose of a Java Interface?",
  "options": [
    "To implement multiple inheritance of classes",
    "To define the behaviour of a class without providing implementation details",
    "To create abstract classes",
    "To declare constants only"
  ],
  "correctOption": "B",
  "explanation": "Interfaces specify methods a class must implement without providing concrete implementations, promoting abstraction and polymorphism.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f9"
  },
  "question": "What is the role of a `finally` block in a `try-catch` statement?",
  "options": [
    "It's executed only if an exception occurs",
    "It's executed only if no exception occurs",
    "It's executed always, whether an exception occurs or not",
    "It's optional and can be omitted"
  ],
  "correctOption": "C",
  "explanation": "A `finally` block guarantees execution of its code regardless of whether an exception was thrown or caught.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29912"
  },
  "question": "Which keyword is used to create a new object in Java?",
  "options": [
    "new",
    "create",
    "object",
    "instance"
  ],
  "correctOption": "A",
  "explanation": "The 'new' keyword allocates memory and creates a new instance of a class.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29910"
  },
  "question": "What symbol is used to denote a single-line comment in Java?",
  "options": [
    "/*",
    "*/",
    "//",
    "#"
  ],
  "correctOption": "C",
  "explanation": "'//' indicates a single-line comment; the compiler ignores everything after it on that line.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29913"
  },
  "question": "What data type is used to store true or false values?",
  "options": [
    "int",
    "char",
    "boolean",
    "String"
  ],
  "correctOption": "C",
  "explanation": "The 'boolean' data type can hold only two values: true or false.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990c"
  },
  "question": "What is the output of System.out.println(5 + 2);?",
  "options": [
    "52",
    "7",
    "5 + 2",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The '+' operator performs addition in this context, resulting in 7. System.out.println() displays the result.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990e"
  },
  "question": "Which statement is used to make a decision in Java based on a condition?",
  "options": [
    "for",
    "while",
    "if",
    "switch"
  ],
  "correctOption": "C",
  "explanation": "The 'if' statement allows execution of a block of code only if a specific condition is true.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29911"
  },
  "question": "What will be printed if you run: System.out.println(\"Hello\" + \" World!\");",
  "options": [
    "Hello World!",
    "HelloWorld!",
    "\"Hello\" + \" World!\"",
    "Error"
  ],
  "correctOption": "A",
  "explanation": "The '+' operator concatenates strings in Java.  The output will be the combined string.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990b"
  },
  "question": "Which keyword is used to declare a class in Java?",
  "options": [
    "class",
    "interface",
    "struct",
    "function"
  ],
  "correctOption": "A",
  "explanation": "The 'class' keyword is used to define a new class in Java.  It's fundamental to object-oriented programming.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990d"
  },
  "question": "What data type is used to store whole numbers in Java?",
  "options": [
    "float",
    "double",
    "int",
    "String"
  ],
  "correctOption": "C",
  "explanation": "The 'int' data type is used to store 32-bit signed integers in Java.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990f"
  },
  "question": "What is the purpose of the 'main' method in a Java program?",
  "options": [
    "To define a class",
    "To create an object",
    "To execute the program",
    "To declare variables"
  ],
  "correctOption": "C",
  "explanation": "The 'main' method is the entry point of execution for a Java program. The JVM starts execution from here.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29914"
  },
  "question": "What is the semicolon's purpose in Java?",
  "options": [
    "To start a statement",
    "To end a statement",
    "To separate statements",
    "To comment out code"
  ],
  "correctOption": "B",
  "explanation": "A semicolon marks the end of a statement in Java; it's essential for correct syntax.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997a"
  },
  "question": "Which keyword is used to prevent method overriding in Java?",
  "options": [
    "static",
    "final",
    "abstract",
    "private"
  ],
  "correctOption": "B",
  "explanation": "The `final` keyword prevents a method from being overridden in subclasses.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997c"
  },
  "question": "Which collection is best suited for implementing a LIFO (Last-In, First-Out) structure?",
  "options": [
    "ArrayList",
    "LinkedList",
    "HashSet",
    "Stack"
  ],
  "correctOption": "D",
  "explanation": "The `Stack` class, a subclass of `Vector`, is specifically designed for LIFO operations.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997b"
  },
  "question": "What is the purpose of the `transient` keyword in Java?",
  "options": [
    "Marks a variable as volatile",
    "Prevents a variable from being serialized",
    "Makes a variable thread-safe",
    "Indicates a variable's immutability"
  ],
  "correctOption": "B",
  "explanation": "`transient` prevents a variable from being included in the serialization process.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997d"
  },
  "question": "What exception is thrown when an array index is out of bounds?",
  "options": [
    "NullPointerException",
    "IllegalArgumentException",
    "ArrayIndexOutOfBoundsException",
    "IndexOutOfBoundsException"
  ],
  "correctOption": "C",
  "explanation": " `ArrayIndexOutOfBoundsException` is specifically for accessing array elements beyond their valid range.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997e"
  },
  "question": "Which design pattern promotes loose coupling between classes by using interfaces?",
  "options": [
    "Singleton",
    "Factory",
    "Observer",
    "Strategy"
  ],
  "correctOption": "C",
  "explanation": "The Strategy pattern uses interfaces to define different algorithms and select them at runtime, fostering loose coupling.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997f"
  },
  "question": "What is the difference between `==` and `.equals()` when comparing Strings in Java?",
  "options": [
    "Both are the same.",
    "`==` compares references, `.equals()` compares content.",
    "`==` compares content, `.equals()` compares references.",
    "`.equals()` is only for null checks."
  ],
  "correctOption": "B",
  "explanation": "`==` checks if two String objects refer to the same memory location, while `.equals()` compares their content.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c29980"
  },
  "question": "How can you ensure thread safety when multiple threads access a shared resource?",
  "options": [
    "Using synchronized blocks or methods.",
    "Using volatile variables only.",
    "Ignoring the issue, Java handles it implicitly.",
    "By using only immutable objects."
  ],
  "correctOption": "A",
  "explanation": "Synchronized blocks or methods provide exclusive access to shared resources, preventing race conditions.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c29981"
  },
  "question": "What does the `finally` block in a `try-catch-finally` statement guarantee?",
  "options": [
    "It always executes, regardless of exceptions.",
    "It executes only if no exceptions are thrown.",
    "It executes only if a specific exception is caught.",
    "It may or may not execute depending on the code within the try block."
  ],
  "correctOption": "A",
  "explanation": "The `finally` block is guaranteed to execute, even if exceptions are thrown or the `try` block terminates early.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c29982"
  },
  "question": "What is the purpose of a Java Stream?",
  "options": [
    "To create new threads.",
    "To handle exceptions more efficiently.",
    "To process collections of data in a declarative way.",
    "To manage network connections."
  ],
  "correctOption": "C",
  "explanation": "Java Streams provide a functional approach to processing collections, enabling declarative and efficient data manipulation.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c29983"
  },
  "question": "Which keyword is used to define a method that can be overridden in a subclass?",
  "options": [
    "static",
    "private",
    "final",
    "virtual"
  ],
  "correctOption": "A",
  "explanation": "While Java doesn't use a `virtual` keyword,  `static` methods cannot be overridden;  the absence of `final` or `private` on a method makes it overridable.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c0"
  },
  "question": "Describe a scenario where using a `WeakHashMap` would be preferable to a `HashMap`.",
  "options": [
    "When you need a thread-safe map.",
    "When key objects should be garbage collected if no strong references exist outside the map.",
    "When you need to maintain insertion order.",
    "When you need a map with a fixed maximum size."
  ],
  "correctOption": "B",
  "explanation": "A `WeakHashMap` allows garbage collection of keys if they are not referenced elsewhere, preventing memory leaks. This is particularly useful in caching scenarios.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c1"
  },
  "question": "How can you effectively serialize and deserialize custom objects in Java without relying on default serialization mechanisms, potentially impacting security or versioning?",
  "options": [
    "Use Java's built-in serialization methods and handle any security concerns later.",
    "Avoid serialization entirely as it's considered an unsafe practice.",
    "Implement custom serialization using external libraries like Jackson or Gson for better control and security.",
    "Utilize Java's `transient` keyword to exclude specific fields from serialization."
  ],
  "correctOption": "C",
  "explanation": "Libraries like Jackson or Gson provide better control over the serialization process, allowing for customized handling of data formats, versioning, and security aspects.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853bd"
  },
  "question": "Which statement accurately describes the behavior of `java.util.concurrent.ConcurrentHashMap` compared to `java.util.HashMap`?",
  "options": [
    "Both are thread-safe, but `ConcurrentHashMap` offers finer-grained locking for better concurrency.",
    "Both are thread-safe, with `ConcurrentHashMap` providing slightly better performance overall.",
    "`HashMap` is thread-safe, while `ConcurrentHashMap` is not, offering better performance in single-threaded environments.",
    "`ConcurrentHashMap` is thread-safe, while `HashMap` is not, offering improved concurrency performance."
  ],
  "correctOption": "D",
  "explanation": "`HashMap` is not thread-safe, while `ConcurrentHashMap` uses segmented locking for improved concurrency under multi-threaded access.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853be"
  },
  "question": "What is the most efficient way to handle exceptions during file I/O in Java, especially when dealing with potentially large files?",
  "options": [
    "Using nested `try-catch` blocks for each I/O operation.",
    "Using a single `try-catch` block encompassing all I/O operations.",
    "Utilizing try-with-resources to ensure automatic resource closure and exception handling.",
    "Ignoring exceptions and relying on default error handling mechanisms."
  ],
  "correctOption": "C",
  "explanation": "Try-with-resources ensures that resources are always closed, even if exceptions occur, preventing resource leaks and simplifying exception handling.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c3"
  },
  "question": "Explain the concept of 'immutability' in Java and its benefits in concurrent programming.",
  "options": [
    "Immutability prevents modification of an object after its creation, preventing race conditions and simplifying concurrency control.",
    "It is a type of mutable object that changes its state frequently.",
    "It refers to objects that have no fields.",
    "It's a performance optimization technique unrelated to concurrency."
  ],
  "correctOption": "A",
  "explanation": "Immutable objects cannot be modified after creation; hence they are inherently thread-safe, eliminating the need for synchronization mechanisms in concurrent scenarios.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c2"
  },
  "question": "What is the purpose of the `CompletableFuture` class in Java and how does it differ from traditional threading mechanisms?",
  "options": [
    "It's a direct replacement for threads, offering no significant advantages.",
    "It simplifies asynchronous programming by providing functional-style APIs for handling results and exceptions.",
    "It's solely for managing complex exception handling across multiple threads.",
    "It provides a lower-level interface for thread management compared to standard Java threads."
  ],
  "correctOption": "B",
  "explanation": "`CompletableFuture` supports functional-style asynchronous programming with methods like `thenApply`, `thenCompose`, and exception handling mechanisms that are more streamlined than traditional threads.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853bf"
  },
  "question": "Explain the difference in functionality and application between `java.lang.Runtime.getRuntime().exec()` and `java.lang.ProcessBuilder`.",
  "options": [
    "Both are functionally identical, with `ProcessBuilder` offering a slightly more modern API.",
    "`Runtime.exec()` provides simpler process creation, while `ProcessBuilder` offers finer control over environment variables and I/O streams.",
    "`ProcessBuilder` is used for internal processes only, while `Runtime.exec()` is for external process execution.",
    "`Runtime.exec()` is deprecated and should always be replaced with `ProcessBuilder`."
  ],
  "correctOption": "B",
  "explanation": "`ProcessBuilder` offers better control over process creation, including environment settings and redirecting input/output streams, addressing limitations of `Runtime.exec()`.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c4"
  },
  "question": "How can you effectively manage memory usage when working with large datasets in Java, avoiding potential `OutOfMemoryError` exceptions?",
  "options": [
    "Use `System.gc()` to explicitly trigger garbage collection frequently.",
    "Rely entirely on Java's automatic garbage collection; manual memory management isn't necessary.",
    "Utilize techniques like object pooling, memory mapping, and off-heap memory solutions for better control.",
    "Increase the JVM's heap size to an arbitrarily large value."
  ],
  "correctOption": "C",
  "explanation": "Object pooling reduces object creation overhead, memory mapping reduces memory consumption for large files, and off-heap solutions move data outside the JVM heap.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c5"
  },
  "question": "What is the significance of the `ForkJoinPool` in Java and what type of problems is it well-suited to solve?",
  "options": [
    "It's a general-purpose thread pool ideal for all types of parallel tasks.",
    "It's a specialized thread pool designed for performing I/O-bound operations.",
    "It's designed for efficiently executing recursive divide-and-conquer algorithms.",
    "It's primarily used for managing thread synchronization in complex applications."
  ],
  "correctOption": "C",
  "explanation": "The `ForkJoinPool` excels at parallelizing recursive algorithms by efficiently dividing tasks into smaller subtasks that can be processed concurrently.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c6"
  },
  "question": "How does Java's module system (introduced in Java 9) improve application development and maintainability?",
  "options": [
    "It has no significant impact on application structure or maintainability.",
    "It simplifies classpath management and promotes better encapsulation and modularity of code.",
    "It replaces the need for dependency management tools like Maven or Gradle.",
    "It introduces a new programming paradigm, significantly changing how Java applications are built."
  ],
  "correctOption": "B",
  "explanation": "Java's module system enhances encapsulation, improves dependency management, reduces classpath conflicts, and strengthens the modularity of applications.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d5"
  },
  "question": "What will be the output of the following code snippet? \n `let x = 10; let y = 5; console.log(x + y);`",
  "options": [
    "105",
    "15",
    "510",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The '+' operator performs addition when used with numbers. 10 + 5 = 15.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d7"
  },
  "question": "What is the purpose of the `this` keyword in JavaScript?",
  "options": [
    "To declare a variable",
    "To refer to the current object",
    "To define a function",
    "To create a new object"
  ],
  "correctOption": "B",
  "explanation": "The `this` keyword refers to the object that the current function is a method of (or, in some cases, the global object).",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d6"
  },
  "question": "Which method is used to add an element to the end of an array?",
  "options": [
    "push()",
    "pop()",
    "shift()",
    "unshift()"
  ],
  "correctOption": "A",
  "explanation": "The `push()` method adds one or more elements to the end of an array and returns the new length of the array.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d8"
  },
  "question": "What does the following code snippet do? \n `const myPromise = new Promise((resolve, reject) => { if (true) { resolve('Success!'); } else { reject('Error!'); } });`",
  "options": [
    "Creates an asynchronous operation that always resolves",
    "Creates an asynchronous operation that always rejects",
    "Creates a synchronous operation that resolves immediately",
    "Does nothing because the if condition is always true"
  ],
  "correctOption": "A",
  "explanation": "The `Promise` resolves with the value 'Success!' because the condition in the `if` statement is true.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d9"
  },
  "question": "How do you prevent default behavior of an event in JavaScript?",
  "options": [
    "`event.preventDefault()`",
    "`event.stopPropagation()`",
    "`event.stop()`",
    "`event.cancel()`"
  ],
  "correctOption": "A",
  "explanation": "`event.preventDefault()` method stops the default action of an event from occurring. For example, preventing a link from navigating.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853da"
  },
  "question": "What is the difference between `==` and `===` in JavaScript?",
  "options": [
    "Both are the same",
    "`==` checks for value equality, `===` checks for both value and type equality",
    "`==` checks for type equality, `===` checks for value equality",
    "`==` is for strings, `===` is for numbers"
  ],
  "correctOption": "B",
  "explanation": "The `==` operator performs type coercion before comparison, while `===` performs a strict equality check without type coercion.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853db"
  },
  "question": "What is a closure in JavaScript?",
  "options": [
    "A type of loop",
    "A way to create private variables",
    "A function that takes another function as an argument",
    "A way to handle events"
  ],
  "correctOption": "B",
  "explanation": "A closure is a function that has access to variables from its surrounding scope, even after that scope has finished executing.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853dc"
  },
  "question": "Which method is used to convert a string to uppercase?",
  "options": [
    "`toUpperCase()`",
    "`toLowerCase()`",
    "`toUpper()`",
    "`toCase()`"
  ],
  "correctOption": "A",
  "explanation": "The `toUpperCase()` method converts a string to uppercase.  `toLowerCase()` converts to lowercase.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853dd"
  },
  "question": "What will be logged to the console? \n`const arr = [1, 2, 3]; const newArr = arr.map(x => x * 2); console.log(newArr);`",
  "options": [
    "[1, 2, 3]",
    "[2, 4, 6]",
    "[1, 4, 9]",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The `map()` method creates a new array by applying a function to each element of the original array.  Here, each element is multiplied by 2.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853de"
  },
  "question": "What is the output of the following code: \n`let a = 0; function f() { let a = 1; return a; } console.log(f(), a);`",
  "options": [
    "1 1",
    "1 0",
    "0 1",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The function `f` has its own local variable `a`, which shadows the global variable `a`. The function returns 1, and the global `a` remains 0.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853ed"
  },
  "question": "Which data structure follows the Last-In, First-Out (LIFO) principle?",
  "options": [
    "Queue",
    "Stack",
    "Linked List",
    "Array"
  ],
  "correctOption": "B",
  "explanation": "A stack operates on the LIFO principle, where the last element added is the first to be removed.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f6"
  },
  "question": "In a binary tree, what is a leaf node?",
  "options": [
    "A node with two children",
    "A node with one child",
    "A node with no children",
    "The root node"
  ],
  "correctOption": "C",
  "explanation": "A leaf node in a binary tree is a node that does not have any children.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f2"
  },
  "question": "A queue follows which principle?",
  "options": [
    "Last-In, First-Out (LIFO)",
    "First-In, First-Out (FIFO)",
    "Random Access",
    "Hierarchical Ordering"
  ],
  "correctOption": "B",
  "explanation": "A queue operates on the FIFO principle, where the first element added is the first to be removed.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f3"
  },
  "question": "What is a node in a linked list?",
  "options": [
    "A pointer to the next node",
    "The data stored in the list",
    "A combination of data and a pointer to the next node",
    "The starting point of the list"
  ],
  "correctOption": "C",
  "explanation": "A node in a linked list comprises data and a pointer (or pointers) to other nodes.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853ef"
  },
  "question": "Which of these is NOT a common type of linked list?",
  "options": [
    "Singly Linked List",
    "Doubly Linked List",
    "Circular Linked List",
    "Binary Search Tree"
  ],
  "correctOption": "D",
  "explanation": "A Binary Search Tree is a tree data structure, not a type of linked list.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f0"
  },
  "question": "What is the primary advantage of using arrays?",
  "options": [
    "Easy implementation of insertion and deletion",
    "Efficient random access to elements",
    "Dynamic resizing capability",
    "Suitable for representing hierarchical data"
  ],
  "correctOption": "B",
  "explanation": "Arrays allow direct access to elements using their index, making random access very efficient.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f1"
  },
  "question": "Which data structure uses pointers to connect elements?",
  "options": [
    "Array",
    "Stack",
    "Queue",
    "Linked List"
  ],
  "correctOption": "D",
  "explanation": "Linked lists use pointers to link nodes together, allowing for dynamic memory allocation.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f4"
  },
  "question": "Which data structure is best suited for implementing a function call stack?",
  "options": [
    "Queue",
    "Linked List",
    "Stack",
    "Tree"
  ],
  "correctOption": "C",
  "explanation": "Stacks are ideal for managing function calls because of their LIFO nature.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853ee"
  },
  "question": "What is a linear data structure?",
  "options": [
    "A structure where elements are arranged in a hierarchical manner",
    "A structure where elements are arranged in a non-linear manner",
    "A structure where elements are arranged sequentially",
    "A structure with no specific arrangement"
  ],
  "correctOption": "C",
  "explanation": "Linear data structures arrange elements in a sequence, one after another.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f5"
  },
  "question": "What does a doubly linked list allow that a singly linked list does not?",
  "options": [
    "Insertion of elements",
    "Deletion of elements",
    "Traversal in both directions",
    "Storage of data"
  ],
  "correctOption": "C",
  "explanation": "Doubly linked lists have pointers in both directions, allowing traversal in both forward and backward directions.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685406"
  },
  "question": "What is the time complexity of searching for a specific element in an unsorted array?",
  "options": [
    "O(1)",
    "O(log n)",
    "O(n)",
    "O(n log n)"
  ],
  "correctOption": "C",
  "explanation": "Linear search is required for unsorted arrays, resulting in a time complexity of O(n).",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540d"
  },
  "question": "Consider implementing a Least Recently Used (LRU) cache. Which data structure combination is best suited for efficient implementation?",
  "options": [
    "Hash Table + Linked List",
    "Binary Search Tree + Queue",
    "Stack + Heap",
    "Array + Stack"
  ],
  "correctOption": "A",
  "explanation": "A hash table allows O(1) lookup for cache hits, while a doubly linked list efficiently manages the order of elements based on recency of access.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540e"
  },
  "question": "Describe a scenario where a Trie data structure would be significantly more efficient than a hash table.  What is the primary advantage Trie offers in that scenario?",
  "options": [
    "Storing a small number of integer keys",
    "Storing a large number of short strings",
    "Implementing a priority queue",
    "Storing a dictionary with frequent key updates"
  ],
  "correctOption": "B",
  "explanation": "Tries excel when searching for prefixes of strings.  If you frequently need to find all strings starting with a particular prefix, Tries' prefix-based search becomes significantly faster than individual hash table lookups.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540c"
  },
  "question": "What is the primary advantage of using a hash table compared to a binary search tree for implementing a dictionary (key-value store)?",
  "options": [
    "Guaranteed O(1) search time",
    "Efficient sorting of keys",
    "Better space utilization",
    "Simplified implementation"
  ],
  "correctOption": "A",
  "explanation": "Hash tables provide average-case O(1) time complexity for insertion, deletion, and search operations, significantly faster than O(log n) for balanced BSTs.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540a"
  },
  "question": "Explain the concept of Amortized Analysis in the context of data structures.  Which of these operations best exemplifies it?",
  "options": [
    "Searching in a balanced binary search tree",
    "Insertion in a dynamic array that doubles in size when full",
    "Deletion in a binary heap",
    "Traversal of a linked list"
  ],
  "correctOption": "B",
  "explanation": "Amortized analysis considers the average cost of an operation over a sequence of operations.  Dynamic array resizing demonstrates this as most insertions are O(1) but occasional resizes are O(n). The average is O(1) making the average case faster despite the occasional costly operation.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540b"
  },
  "question": "Which data structure would be most appropriate for representing a hierarchical relationship, like a file system or an organizational chart?",
  "options": [
    "Array",
    "Linked List",
    "Graph",
    "Tree"
  ],
  "correctOption": "D",
  "explanation": "Trees naturally represent hierarchical structures through parent-child relationships between nodes.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685405"
  },
  "question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?",
  "options": [
    "Linked List",
    "Binary Search Tree",
    "Stack",
    "Heap"
  ],
  "correctOption": "C",
  "explanation": "Stacks inherently follow the LIFO principle, where the last element added is the first to be removed.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685409"
  },
  "question": "You need to implement a data structure that supports efficient insertion, deletion, and retrieval of elements based on their priority. Which data structure is most suitable?",
  "options": [
    "Queue",
    "Stack",
    "Binary Heap",
    "Hash Table"
  ],
  "correctOption": "C",
  "explanation": "Binary heaps efficiently manage elements based on priority, allowing quick access to the highest or lowest priority element.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685407"
  },
  "question": "A B-tree of order m guarantees that all leaf nodes are at the same level and each node (except the root) contains between ⌈m/2⌉ and m keys.  What is the primary advantage of this structure compared to a standard binary search tree in database indexing?",
  "options": [
    "Faster insertion and deletion",
    "Reduced memory overhead",
    "Improved search performance in large datasets",
    "All of the above"
  ],
  "correctOption": "C",
  "explanation": "B-trees minimize disk I/O operations due to their balanced structure, making them superior for database indexing on secondary storage.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685408"
  },
  "question": "In a self-balancing AVL tree, what is the maximum height difference allowed between the left and right subtrees of any node?",
  "options": [
    "0",
    "1",
    "2",
    "It can be any difference"
  ],
  "correctOption": "B",
  "explanation": "AVL trees maintain balance by ensuring the height difference between subtrees never exceeds 1.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685423"
  },
  "question": "Which data structure is ideally suited for representing a hierarchical relationship, like a file system or an organizational chart?",
  "options": [
    "A. Array",
    "B. Hash Table",
    "C. Tree",
    "D. Graph"
  ],
  "correctOption": "C",
  "explanation": "Trees naturally represent hierarchical structures where each node can have multiple children, reflecting parent-child relationships.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d68541d"
  },
  "question": "Which data structure is most efficient for implementing a LRU (Least Recently Used) cache?",
  "options": [
    "A. Binary Search Tree",
    "B. Doubly Linked List with a Hash Map",
    "C. Heap",
    "D. Stack"
  ],
  "correctOption": "B",
  "explanation": "A doubly linked list maintains order of access, while a hash map provides O(1) lookup for quick eviction checks.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d68541f"
  },
  "question": "You need to implement a data structure that supports efficient insertion, deletion, and retrieval of elements based on their priority. Which data structure is best suited?",
  "options": [
    "A. Queue",
    "B. Stack",
    "C. Priority Queue (Heap)",
    "D. Linked List"
  ],
  "correctOption": "C",
  "explanation": "Priority Queues, typically implemented as heaps, efficiently handle priority-based operations.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685421"
  },
  "question": "Which algorithm would be most suitable for efficiently finding the shortest path between two nodes in a graph with non-negative edge weights?",
  "options": [
    "A. Dijkstra's Algorithm",
    "B. Bellman-Ford Algorithm",
    "C. Floyd-Warshall Algorithm",
    "D. Depth-First Search"
  ],
  "correctOption": "A",
  "explanation": "Dijkstra's algorithm efficiently finds the shortest paths from a single source node to all other nodes in a graph with non-negative edge weights.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d68541e"
  },
  "question": "What is the time complexity of finding the kth smallest element in a min-heap of size n?",
  "options": [
    "A. O(n)",
    "B. O(k)",
    "C. O(log n)",
    "D. O(k log n)"
  ],
  "correctOption": "B",
  "explanation": "Finding the kth smallest element in a min-heap involves extracting the minimum element k times, each taking O(log n) time in the worst case; but finding the kth smallest is actually O(k) because only k elements need to be removed and sorted.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685420"
  },
  "question": "Consider a Trie data structure storing strings.  What is the worst-case space complexity for storing n strings, each of maximum length m?",
  "options": [
    "A. O(n)",
    "B. O(m)",
    "C. O(nm)",
    "D. O(n^2)"
  ],
  "correctOption": "C",
  "explanation": "In the worst case, each character of each string could create a new node in the Trie. This leads to O(nm) space complexity.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685424"
  },
  "question": "Explain the concept of amortized analysis in the context of data structures.  Why is it important?",
  "options": [
    "A. It's used to measure the worst-case time complexity of an operation.",
    "B. It averages the cost of operations over a sequence, even if some individual operations are expensive.",
    "C. It determines the space complexity of a data structure.",
    "D. It optimizes the average-case time complexity of a data structure."
  ],
  "correctOption": "B",
  "explanation": "Amortized analysis considers the average cost of operations over a sequence, which can reveal better performance than focusing only on the worst-case scenario of individual operations.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685422"
  },
  "question": "What is the primary advantage of using a self-balancing binary search tree (like AVL or Red-Black tree) over a regular binary search tree?",
  "options": [
    "A. Reduced memory usage",
    "B. Guaranteed logarithmic time complexity for all operations",
    "C. Simplified insertion and deletion algorithms",
    "D. Faster search for specific values"
  ],
  "correctOption": "B",
  "explanation": "Self-balancing trees maintain a balanced structure, ensuring logarithmic time complexity for search, insertion, and deletion, unlike regular BSTs which can degenerate into a linked list in the worst case.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685425"
  },
  "question": "You need to implement a data structure that allows efficient retrieval of elements based on a key, and the number of elements can vary significantly. Which choice balances performance and scalability the best?",
  "options": [
    "A. Array",
    "B. Linked List",
    "C. Dynamic Array (ArrayList)",
    "D. Hash Table"
  ],
  "correctOption": "D",
  "explanation": "Hash tables provide O(1) average-case time complexity for insertion, deletion, and retrieval, making them scalable for varying numbers of elements.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685426"
  },
  "question": "What is the key difference between a graph and a tree data structure?",
  "options": [
    "A. Graphs can contain cycles; trees cannot.",
    "B. Trees are always directed; graphs can be directed or undirected.",
    "C. Graphs are always connected; trees might not be.",
    "D. Trees are always binary; graphs can have any number of edges per node."
  ],
  "correctOption": "A",
  "explanation": "A key distinction is that trees are acyclic (no cycles), while graphs can contain cycles.  This impacts traversal and other algorithms.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685435"
  },
  "question": "What is the time complexity of a linear search algorithm in the worst case?",
  "options": [
    "O(1)",
    "O(log n)",
    "O(n)",
    "O(n log n)"
  ],
  "correctOption": "C",
  "explanation": "Linear search checks each element sequentially, resulting in O(n) complexity in the worst case (element not found).",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685438"
  },
  "question": "What data structure is commonly used to implement a priority queue?",
  "options": [
    "Linked List",
    "Array",
    "Binary Search Tree",
    "Heap"
  ],
  "correctOption": "D",
  "explanation": "Heaps efficiently manage elements based on priority, allowing for quick retrieval of the highest or lowest priority element.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543d"
  },
  "question": "A graph with no cycles is called a(n):",
  "options": [
    "Directed Graph",
    "Undirected Graph",
    "Acyclic Graph",
    "Complete Graph"
  ],
  "correctOption": "C",
  "explanation": "An acyclic graph, also known as a DAG (Directed Acyclic Graph), contains no cycles.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685437"
  },
  "question": "A graph traversal algorithm that explores as far as possible along each branch before backtracking is called:",
  "options": [
    "Breadth-First Search (BFS)",
    "Depth-First Search (DFS)",
    "Dijkstra's Algorithm",
    "Bellman-Ford Algorithm"
  ],
  "correctOption": "B",
  "explanation": "Depth-First Search prioritizes exploring a single branch deeply before moving to other branches.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543e"
  },
  "question": "Which of the following is NOT a common technique used for algorithm analysis?",
  "options": [
    "Asymptotic notation (Big O)",
    "Empirical testing",
    "Code profiling",
    "Formal language verification"
  ],
  "correctOption": "D",
  "explanation": "While formal methods exist, full formal verification of algorithm correctness is rarely practical for complex algorithms.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685439"
  },
  "question": "The problem of finding the shortest path between two nodes in a weighted graph is solved by:",
  "options": [
    "Breadth-First Search",
    "Depth-First Search",
    "Dijkstra's Algorithm",
    "Topological Sort"
  ],
  "correctOption": "C",
  "explanation": "Dijkstra's algorithm finds the shortest paths from a single source node to all other nodes in a graph with non-negative edge weights.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543c"
  },
  "question": "What is the primary advantage of using a greedy algorithm?",
  "options": [
    "Guaranteed optimal solution",
    "Simplicity and efficiency",
    "Handles all types of problems",
    "Requires less memory"
  ],
  "correctOption": "B",
  "explanation": "Greedy algorithms are often simple and efficient, though they don't always guarantee the absolute optimal solution.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543b"
  },
  "question": "Dynamic programming solves problems by breaking them down into:",
  "options": [
    "Independent subproblems",
    "Overlapping subproblems",
    "Recursive subproblems",
    "Both B and C"
  ],
  "correctOption": "D",
  "explanation": "Dynamic programming addresses overlapping subproblems, solving each only once and storing the results to avoid redundant computation.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543a"
  },
  "question": "Which algorithm is best suited for finding the kth smallest element in an unsorted array efficiently?",
  "options": [
    "Merge Sort",
    "Quick Sort",
    "Heap Sort",
    "Quickselect"
  ],
  "correctOption": "D",
  "explanation": "Quickselect is designed for finding the kth smallest element with an average time complexity of O(n).",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685436"
  },
  "question": "Which sorting algorithm consistently exhibits O(n log n) time complexity, even in the worst case?",
  "options": [
    "Bubble Sort",
    "Insertion Sort",
    "Merge Sort",
    "Quick Sort (average case)"
  ],
  "correctOption": "C",
  "explanation": "Merge Sort maintains O(n log n) time complexity regardless of the input data order.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d68544d"
  },
  "question": "Which of the following statements about NP-complete problems is FALSE?",
  "options": [
    "A polynomial-time algorithm for one NP-complete problem implies polynomial-time algorithms for all NP-complete problems.",
    "All NP problems are also in P.",
    "The satisfiability problem (SAT) is NP-complete.",
    "If P=NP, then all NP-complete problems can be solved in polynomial time."
  ],
  "correctOption": "B",
  "explanation": "It's currently unknown if all NP problems are in P.  NP-complete problems are the hardest problems in NP; if one had a polynomial solution, all would.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685451"
  },
  "question": "In amortized analysis, which method focuses on averaging the cost of operations over a sequence of operations?",
  "options": [
    "Aggregate method",
    "Accounting method",
    "Potential method",
    "All of the above"
  ],
  "correctOption": "A",
  "explanation": "The aggregate method sums the costs of all operations and divides by the number of operations to find the average cost.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d68544e"
  },
  "question": "What is the time complexity of the Floyd-Warshall algorithm for finding all-pairs shortest paths in a graph with V vertices?",
  "options": [
    "O(V)",
    "O(V log V)",
    "O(V^2)",
    "O(V^3)"
  ],
  "correctOption": "D",
  "explanation": "Floyd-Warshall uses three nested loops, each iterating V times, resulting in a cubic time complexity.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d68544f"
  },
  "question": "Given a graph G = (V, E), what algorithm would be MOST efficient to determine if G is bipartite?",
  "options": [
    "Dijkstra's Algorithm",
    "Bellman-Ford Algorithm",
    "Breadth-First Search (BFS)",
    "Depth-First Search (DFS)"
  ],
  "correctOption": "C",
  "explanation": "BFS can efficiently determine bipartiteness by coloring vertices during traversal.  A cycle of odd length indicates non-bipartiteness.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685450"
  },
  "question": "Which algorithm uses dynamic programming to find the longest common subsequence (LCS) of two sequences?",
  "options": [
    "KMP Algorithm",
    "Rabin-Karp Algorithm",
    "Needleman-Wunsch Algorithm",
    "Wagner-Fischer Algorithm"
  ],
  "correctOption": "D",
  "explanation": "The Wagner-Fischer algorithm, a dynamic programming approach, is commonly used to find the LCS.  It builds a matrix to track optimal solutions.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685453"
  },
  "question": "Which data structure is best suited for implementing Dijkstra's algorithm for shortest path calculations in a graph with non-negative edge weights?",
  "options": [
    "Stack",
    "Queue",
    "Priority Queue",
    "Binary Search Tree"
  ],
  "correctOption": "C",
  "explanation": "A priority queue allows efficient retrieval of the vertex with the smallest distance, crucial for Dijkstra's greedy approach.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685452"
  },
  "question": "What is the primary difference between Prim's algorithm and Kruskal's algorithm for finding a minimum spanning tree?",
  "options": [
    "Prim's uses BFS, Kruskal's uses DFS.",
    "Prim's is greedy, Kruskal's is not.",
    "Prim's builds the MST from a single vertex, Kruskal's builds it by adding edges.",
    "Prim's has O(V^2) complexity, Kruskal's has O(E log E) complexity."
  ],
  "correctOption": "C",
  "explanation": "Prim's algorithm starts with a single vertex and grows the MST outwards. Kruskal's adds edges one by one, ensuring no cycles are formed.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685454"
  },
  "question": "What is the worst-case time complexity of a naive recursive implementation of the Fibonacci sequence?",
  "options": [
    "O(n)",
    "O(n log n)",
    "O(2^n)",
    "O(n^2)"
  ],
  "correctOption": "C",
  "explanation": "The naive recursive approach recalculates many Fibonacci numbers repeatedly, leading to exponential time complexity.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685455"
  },
  "question": "A decision problem is in the complexity class NP if...",
  "options": [
    "It can be solved in polynomial time.",
    "It can be verified in polynomial time.",
    "It can be solved in exponential time.",
    "It is undecidable."
  ],
  "correctOption": "B",
  "explanation": "A problem is in NP if a given solution can be verified to be correct in polynomial time, even if finding the solution takes exponential time.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685456"
  },
  "question": "Which algorithm is known for its ability to handle dynamic updates (insertions and deletions) efficiently in a balanced binary search tree?",
  "options": [
    "AVL Tree",
    "Red-Black Tree",
    "B-Tree",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "AVL trees, red-black trees, and B-trees all maintain balance during updates, ensuring logarithmic time complexity for search, insertion, and deletion.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685467"
  },
  "question": "Given a directed acyclic graph (DAG), which algorithm is most efficient for finding the longest path?",
  "options": [
    "Dijkstra's algorithm",
    "Bellman-Ford algorithm",
    "Topological sort followed by dynamic programming",
    "Prim's algorithm"
  ],
  "correctOption": "C",
  "explanation": "Topological sort orders the nodes, allowing dynamic programming to efficiently compute the longest path in linear time.  Other algorithms don't handle cycles efficiently.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685466"
  },
  "question": "What is the time complexity of the Floyd-Warshall algorithm for finding all-pairs shortest paths in a graph with V vertices?",
  "options": [
    "O(V)",
    "O(V log V)",
    "O(V^2)",
    "O(V^3)"
  ],
  "correctOption": "D",
  "explanation": "Floyd-Warshall uses three nested loops, each iterating V times, resulting in O(V^3) time complexity.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685468"
  },
  "question": "Which algorithm uses divide and conquer to sort an array in O(n log n) time?",
  "options": [
    "Bubble Sort",
    "Insertion Sort",
    "Merge Sort",
    "Selection Sort"
  ],
  "correctOption": "C",
  "explanation": "Merge Sort recursively divides the array into smaller subarrays, sorts them, and then merges the sorted subarrays.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685465"
  },
  "question": "Which of the following statements about NP-complete problems is FALSE?",
  "options": [
    "If one NP-complete problem is solvable in polynomial time, then all NP problems are solvable in polynomial time.",
    "All NP problems are also in P.",
    "Satisfiability (SAT) is an NP-complete problem.",
    "The Traveling Salesperson Problem (TSP) is an NP-complete problem."
  ],
  "correctOption": "B",
  "explanation": "P is a subset of NP.  If all NP problems were in P, it would imply P=NP, which is a major unsolved problem in computer science.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685469"
  },
  "question": "What is the best-case time complexity of a Quicksort algorithm?",
  "options": [
    "O(n log n)",
    "O(n)",
    "O(n^2)",
    "O(1)"
  ],
  "correctOption": "A",
  "explanation": "While worst-case is O(n^2), the best case occurs when the pivot consistently divides the array in half, leading to O(n log n) complexity.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546a"
  },
  "question": "Which data structure is best suited for implementing a priority queue with efficient insertion and deletion of the highest priority element?",
  "options": [
    "Linked List",
    "Array",
    "Binary Search Tree",
    "Binary Heap"
  ],
  "correctOption": "D",
  "explanation": "A binary heap allows O(log n) time complexity for insertion and deletion of the highest priority element.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546b"
  },
  "question": "What is the primary difference between a greedy algorithm and a dynamic programming algorithm?",
  "options": [
    "Greedy algorithms are always faster.",
    "Dynamic programming solves overlapping subproblems optimally, while greedy algorithms may not.",
    "Greedy algorithms are used for optimization, while dynamic programming is not.",
    "Dynamic programming requires more memory."
  ],
  "correctOption": "B",
  "explanation": "Dynamic programming explicitly stores solutions to subproblems to avoid redundant computations, guaranteeing optimality. Greedy algorithms make locally optimal choices.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546c"
  },
  "question": "Which algorithm is commonly used to detect cycles in a directed graph?",
  "options": [
    "Breadth-First Search (BFS)",
    "Depth-First Search (DFS)",
    "Prim's Algorithm",
    "Kruskal's Algorithm"
  ],
  "correctOption": "B",
  "explanation": "DFS can detect cycles by tracking visited nodes and detecting back edges (edges leading to already visited nodes in the current DFS branch).",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546d"
  },
  "question": "In the context of amortized analysis, what does it mean to have a cost of O(1) for an operation?",
  "options": [
    "The operation always takes constant time.",
    "The average time cost of the operation over a sequence of operations is constant.",
    "The worst-case time cost of the operation is constant.",
    "The operation's time cost is independent of the input size."
  ],
  "correctOption": "B",
  "explanation": "Amortized analysis considers the average cost of an operation over a sequence, not just a single operation's cost. O(1) amortized indicates a constant average cost.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546e"
  },
  "question": "Consider a hash table with separate chaining for collision resolution.  What is the primary factor influencing the performance degradation as the load factor increases?",
  "options": [
    "Increased memory usage",
    "Increased number of collisions",
    "Decreased cache efficiency",
    "Increased complexity of hash function"
  ],
  "correctOption": "B",
  "explanation": "A higher load factor means more collisions, resulting in longer linked lists in separate chaining and thus longer search times.  This is the main cause of performance degradation.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d68547f"
  },
  "question": "Which SQL command is used to add new data into a table?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "B",
  "explanation": "The INSERT statement adds new rows to an existing table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d68547e"
  },
  "question": "What does SQL stand for?",
  "options": [
    "Structured Query Language",
    "Simple Query Language",
    "Statistical Query Language",
    "Standard Query Language"
  ],
  "correctOption": "A",
  "explanation": "SQL stands for Structured Query Language, a language used to interact with databases.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d68547d"
  },
  "question": "Which SQL command is used to retrieve data from a database?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "A",
  "explanation": "The SELECT statement is used to query data from one or more tables.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685481"
  },
  "question": "Which SQL command is used to remove data from a table?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "D",
  "explanation": "The DELETE statement removes rows from a table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685483"
  },
  "question": "What keyword is used to sort the result-set of a query?",
  "options": [
    "ORDER",
    "SORT",
    "ARRANGE",
    "FILTER"
  ],
  "correctOption": "A",
  "explanation": "The ORDER BY clause is used to sort the result-set in ascending or descending order.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685482"
  },
  "question": "What symbol is used to denote a comment in SQL?",
  "options": [
    "//",
    "/*",
    "--",
    "#"
  ],
  "correctOption": "C",
  "explanation": "The double hyphen symbol '--' is used for single-line comments in most SQL dialects.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685485"
  },
  "question": "What does the wildcard character '%' represent in SQL's LIKE operator?",
  "options": [
    "Exactly one character",
    "Zero or more characters",
    "One or more characters",
    "A specific character"
  ],
  "correctOption": "B",
  "explanation": "The '%' wildcard represents zero or more characters in a pattern match.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685484"
  },
  "question": "Which clause is used to filter records based on a condition?",
  "options": [
    "WHERE",
    "HAVING",
    "GROUP BY",
    "ORDER BY"
  ],
  "correctOption": "A",
  "explanation": "The WHERE clause filters records before grouping or sorting occurs.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685480"
  },
  "question": "Which SQL command is used to modify existing data in a table?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "C",
  "explanation": "The UPDATE statement modifies existing records in a table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685486"
  },
  "question": "What is the purpose of a primary key in a database table?",
  "options": [
    "To store large amounts of data",
    "To ensure data uniqueness",
    "To improve query performance",
    "To enforce data integrity"
  ],
  "correctOption": "B",
  "explanation": "A primary key uniquely identifies each record in a table, ensuring data uniqueness and integrity.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685497"
  },
  "question": "What is the main advantage of using a database index?",
  "options": [
    "Reduces data redundancy",
    "Enhances data security",
    "Increases database size",
    "Improves query performance"
  ],
  "correctOption": "D",
  "explanation": "Indexes speed up data retrieval by creating a structured lookup table, avoiding full table scans.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549a"
  },
  "question": "What is the purpose of a database trigger?",
  "options": [
    "To enforce data integrity constraints",
    "To automatically execute actions based on specific events",
    "To improve query performance",
    "To encrypt sensitive data"
  ],
  "correctOption": "B",
  "explanation": "Triggers automate actions like updating related tables or sending notifications upon specific database events (e.g., INSERT, UPDATE, DELETE).",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685499"
  },
  "question": "In database design, what does ACID stand for?",
  "options": [
    "Atomic, Consistent, Isolated, Durable",
    "Accurate, Consistent, Independent, Dependable",
    "Atomic, Complete, Isolated, Dependable",
    "Accurate, Consistent, Isolated, Durable"
  ],
  "correctOption": "A",
  "explanation": "ACID properties ensure database transactions are reliable and maintain data integrity.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549b"
  },
  "question": "What is a candidate key?",
  "options": [
    "A unique identifier for a table row",
    "A key that has null values allowed",
    "A key that is not unique",
    "A subset of a primary key"
  ],
  "correctOption": "A",
  "explanation": "A candidate key uniquely identifies each row, and a primary key is selected from among the candidate keys.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685496"
  },
  "question": "A foreign key constraint is primarily used to:",
  "options": [
    "Prevent data loss",
    "Enforce referential integrity",
    "Improve data retrieval speed",
    "Reduce database size"
  ],
  "correctOption": "B",
  "explanation": "Foreign keys ensure that relationships between tables are valid, maintaining data consistency and preventing orphaned records.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685495"
  },
  "question": "Which database normalization form eliminates redundant data within a single table by ensuring that all attributes are atomic?",
  "options": [
    "First Normal Form (1NF)",
    "Second Normal Form (2NF)",
    "Third Normal Form (3NF)",
    "Boyce-Codd Normal Form (BCNF)"
  ],
  "correctOption": "A",
  "explanation": "1NF addresses atomic attributes, eliminating repeating groups.  Higher normal forms build upon this foundation.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685498"
  },
  "question": "Which type of database relationship represents a 'many-to-many' association between two tables?",
  "options": [
    "One-to-one",
    "One-to-many",
    "Many-to-one",
    "Many-to-many"
  ],
  "correctOption": "D",
  "explanation": "A many-to-many relationship requires a junction table (or linking table) to manage the multiple relationships.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549c"
  },
  "question": "Denormalization is sometimes used in database design to:",
  "options": [
    "Improve data integrity",
    "Increase database size",
    "Enhance query performance",
    "Reduce data redundancy"
  ],
  "correctOption": "C",
  "explanation": "Denormalization involves adding redundancy to improve query speed, although it compromises data integrity slightly.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549d"
  },
  "question": "Which database design approach emphasizes creating small, highly normalized tables and linking them with relationships?",
  "options": [
    "Relational database design",
    "Object-oriented database design",
    "NoSQL database design",
    "Hierarchical database design"
  ],
  "correctOption": "A",
  "explanation": "Relational databases are built on the principles of normalization and relationships between tables.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549e"
  },
  "question": "What is the difference between a stored procedure and a view?",
  "options": [
    "A stored procedure is a pre-compiled SQL query, a view is a virtual table",
    "A stored procedure is a virtual table, a view is a pre-compiled SQL query",
    "Both are pre-compiled queries",
    "Both are virtual tables."
  ],
  "correctOption": "A",
  "explanation": "Stored procedures offer pre-compiled SQL logic for efficiency, while views present customized data as a virtual table.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854ad"
  },
  "question": "Which of the following is NOT a key characteristic of NoSQL databases?",
  "options": [
    "Schema-less design",
    "High scalability",
    "ACID properties",
    "Horizontal scalability"
  ],
  "correctOption": "C",
  "explanation": "While some NoSQL databases offer ACID properties to varying degrees, it's not a universal characteristic.  Most prioritize scalability and flexibility over strict ACID compliance.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854ae"
  },
  "question": "What is the primary advantage of using a document database like MongoDB?",
  "options": [
    "Strict schema enforcement",
    "High transactional integrity",
    "Efficient relational joins",
    "Flexible schema and data modeling"
  ],
  "correctOption": "D",
  "explanation": "Document databases excel at handling semi-structured data and adapting to evolving data structures without requiring schema changes.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b0"
  },
  "question": "What does CAP theorem stand for in the context of distributed databases?",
  "options": [
    "Consistency, Availability, Partition tolerance",
    "Capacity, Availability, Performance",
    "Consistency, Accuracy, Partition tolerance",
    "Capacity, Accuracy, Performance"
  ],
  "correctOption": "A",
  "explanation": "CAP theorem states that in a distributed database, you can only achieve two out of three: Consistency, Availability, and Partition tolerance.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854af"
  },
  "question": "Which NoSQL database model is best suited for managing large graphs of interconnected data?",
  "options": [
    "Key-value store",
    "Document database",
    "Column-family database",
    "Graph database"
  ],
  "correctOption": "D",
  "explanation": "Graph databases are optimized for representing and querying relationships between data points, making them ideal for social networks or recommendation systems.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b1"
  },
  "question": "A key-value store is best suited for which type of application?",
  "options": [
    "Complex social network analysis",
    "E-commerce product catalog with rich descriptions",
    "Real-time analytics dashboards",
    "Session management and caching"
  ],
  "correctOption": "D",
  "explanation": "Key-value stores are excellent for simple data lookups and are often used for caching and session management because of their speed and simplicity.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b3"
  },
  "question": "Which NoSQL database model is known for its excellent performance in handling large datasets with many columns but few rows?",
  "options": [
    "Document database",
    "Key-value store",
    "Graph database",
    "Column-family database"
  ],
  "correctOption": "D",
  "explanation": "Column-family databases excel at handling wide datasets, making them ideal for time-series data or storing user profiles with numerous attributes.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b5"
  },
  "question": "Considering the trade-offs between scalability, consistency, and availability, which approach is often prioritized in NoSQL designs?",
  "options": [
    "Strong consistency over availability",
    "Availability over consistency in distributed environments",
    "Strong consistency over scalability",
    "Scalability over consistency in distributed environments"
  ],
  "correctOption": "B",
  "explanation": "Many NoSQL databases prioritize high availability, accepting the possibility of temporary inconsistencies to ensure continuous operation in a distributed setting.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b2"
  },
  "question": "What is the main difference between vertical and horizontal scaling in NoSQL databases?",
  "options": [
    "Vertical scaling adds more nodes; horizontal scaling increases server resources.",
    "Horizontal scaling adds more nodes; vertical scaling increases server resources.",
    "Both add more nodes.",
    "Both increase server resources."
  ],
  "correctOption": "B",
  "explanation": "Vertical scaling involves upgrading a single server's resources (CPU, RAM, etc.), while horizontal scaling adds more servers to the database cluster.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b4"
  },
  "question": "What is eventual consistency in the context of NoSQL databases?",
  "options": [
    "All data is always consistent across all nodes.",
    "Data consistency is ensured immediately after each write operation.",
    "Data will eventually be consistent across all nodes, but there may be temporary inconsistencies.",
    "Data consistency is not guaranteed at any time."
  ],
  "correctOption": "C",
  "explanation": "Eventual consistency means that data will eventually become consistent across all replicas, but there might be a delay and temporary discrepancies.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b6"
  },
  "question": "Which of the following is a common use case for a wide-column store (like Cassandra)?",
  "options": [
    "Storing and querying complex relationships between objects",
    "Managing a simple key-value store for session data",
    "Handling large-scale time-series data, like sensor readings",
    "Storing and retrieving documents with embedded JSON data"
  ],
  "correctOption": "C",
  "explanation": "Wide-column stores, with their ability to handle many columns efficiently, are well-suited for high-volume time-series data, sensor data, or other data with numerous attributes per row.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c6"
  },
  "question": "What is a deadlock in operating systems?",
  "options": [
    "A state where a process is waiting for a resource held by another process, which is also waiting for a resource held by the first process.",
    "A situation where a process is waiting indefinitely for an I/O operation.",
    "A condition where the system is unresponsive to user input.",
    "An error in the system's memory management."
  ],
  "correctOption": "A",
  "explanation": "A deadlock is a cyclical dependency where two or more processes are blocked indefinitely, waiting for each other.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c5"
  },
  "question": "Which scheduling algorithm prioritizes processes with the shortest expected burst time?",
  "options": [
    "First-Come, First-Served (FCFS)",
    "Shortest Job First (SJF)",
    "Priority Scheduling",
    "Round Robin"
  ],
  "correctOption": "B",
  "explanation": "Shortest Job First (SJF) aims to minimize average waiting time by prioritizing shorter processes.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c8"
  },
  "question": "What is the purpose of a page table in virtual memory management?",
  "options": [
    "To store the contents of physical memory.",
    "To translate virtual addresses to physical addresses.",
    "To manage the CPU's registers.",
    "To schedule processes for execution."
  ],
  "correctOption": "B",
  "explanation": "A page table maps virtual addresses used by a process to their corresponding physical addresses in main memory.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c7"
  },
  "question": "Which memory allocation technique reduces external fragmentation?",
  "options": [
    "First-Fit",
    "Best-Fit",
    "Worst-Fit",
    "Buddy System"
  ],
  "correctOption": "D",
  "explanation": "The Buddy System reduces external fragmentation by allocating memory in powers of 2, better utilizing available space.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c9"
  },
  "question": "Which file access method allows random access to any part of a file?",
  "options": [
    "Sequential access",
    "Direct access",
    "Indexed sequential access",
    "None of the above"
  ],
  "correctOption": "B",
  "explanation": "Direct access allows reading and writing to specific locations within a file without needing to traverse sequentially.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854ca"
  },
  "question": "What is a process control block (PCB)?",
  "options": [
    "A data structure containing information about a process.",
    "A block of code that controls the CPU.",
    "A section of memory reserved for process execution.",
    "A type of interrupt."
  ],
  "correctOption": "A",
  "explanation": "The PCB stores essential information about a process, including its state, priority, and memory allocation.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854cc"
  },
  "question": "What is the role of a device driver?",
  "options": [
    "To manage the system's file system.",
    "To translate virtual addresses.",
    "To provide an interface between the operating system and hardware devices.",
    "To schedule processes onto the CPU."
  ],
  "correctOption": "C",
  "explanation": "Device drivers act as intermediaries allowing the OS to communicate and control hardware devices efficiently.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854ce"
  },
  "question": "How does a system call work?",
  "options": [
    "It's a direct hardware instruction.",
    "It's a software interrupt triggering OS intervention.",
    "It's a high-level programming language function.",
    "It's a user-mode operation."
  ],
  "correctOption": "B",
  "explanation": "A system call generates a software interrupt, transitioning from user mode to kernel mode, allowing the OS to handle the request.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854cb"
  },
  "question": "What is the difference between preemptive and non-preemptive scheduling?",
  "options": [
    "Preemptive allows a process to be interrupted while non-preemptive does not.",
    "Preemptive is faster while non-preemptive is more efficient.",
    "Preemptive uses less memory, non-preemptive uses more.",
    "Preemptive is for I/O bound processes only"
  ],
  "correctOption": "A",
  "explanation": "Preemptive scheduling allows the OS to interrupt a running process and switch to another, unlike non-preemptive where a process runs until completion or blocking.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854cd"
  },
  "question": "Which of the following is NOT a common type of file system?",
  "options": [
    "FAT32",
    "NTFS",
    "ext4",
    "BIOS"
  ],
  "correctOption": "D",
  "explanation": "BIOS (Basic Input/Output System) is firmware, not a file system.  FAT32, NTFS, and ext4 are all file systems.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854de"
  },
  "question": "What is the primary advantage of using a multi-level page table over a single-level page table in virtual memory management?",
  "options": [
    "Reduced memory usage",
    "Increased speed of page table lookups",
    "Simplified page table implementation",
    "Improved process isolation"
  ],
  "correctOption": "A",
  "explanation": "Multi-level page tables reduce memory consumption by only allocating entries for used pages, unlike single-level tables which need entries for the entire address space.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854df"
  },
  "question": "In a distributed file system, what consistency model guarantees that all processes see the same view of the file system, but may involve performance trade-offs?",
  "options": [
    "Sequential consistency",
    "Strict consistency",
    "Eventual consistency",
    "Causal consistency"
  ],
  "correctOption": "B",
  "explanation": "Strict consistency ensures all operations appear to happen in the same order to all processes, providing a simple, yet potentially costly, global view.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e0"
  },
  "question": "Explain the difference between deadlock and livelock.  Which is easier to detect?",
  "options": [
    "Deadlock is a situation where processes are blocked indefinitely; livelock is when processes are continuously changing state but make no progress; Deadlock is easier to detect.",
    "Deadlock is a situation where processes are blocked indefinitely; livelock is when processes are continuously changing state but make no progress; Livelock is easier to detect.",
    "Deadlock and livelock are essentially the same thing.",
    "Neither deadlock nor livelock are easily detectable."
  ],
  "correctOption": "A",
  "explanation": "Deadlock is easier to detect because it involves processes being in a permanent blocked state,  while livelock involves continuous state changes making detection more challenging.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854dd"
  },
  "question": "Which scheduling algorithm is known for its potential for starvation and its simplicity, often used in batch processing systems?",
  "options": [
    "Shortest Job First (SJF)",
    "Round Robin",
    "First-Come, First-Served (FCFS)",
    "Multilevel Queue Scheduling"
  ],
  "correctOption": "C",
  "explanation": "FCFS is simple but can lead to starvation if long processes arrive before short ones.  It's commonly used in batch systems.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e1"
  },
  "question": "What is a key challenge in implementing a distributed shared memory (DSM) system, and how does a lazy release consistency model address it?",
  "options": [
    "Maintaining data consistency; Lazy release consistency minimizes the need for frequent synchronization, thus reducing overhead.",
    "Data fragmentation; Lazy release consistency provides efficient memory allocation strategies.",
    "Scalability; Lazy release consistency uses hierarchical caching to improve performance.",
    "Security; Lazy release consistency employs robust encryption techniques."
  ],
  "correctOption": "A",
  "explanation": "Maintaining data consistency across multiple nodes is a core challenge in DSM. Lazy release consistency mitigates this by delaying the propagation of writes until necessary.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e2"
  },
  "question": "How does a journaling file system improve data integrity compared to a non-journaling file system?",
  "options": [
    "By using redundant arrays of inexpensive disks (RAID).",
    "By automatically backing up data to a remote server.",
    "By recording metadata changes in a separate log before writing to the main file system.",
    "By using checksums to verify data integrity."
  ],
  "correctOption": "C",
  "explanation": "Journaling ensures that metadata changes are logged before being written to the file system, allowing recovery in case of a crash before the changes are fully committed.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e3"
  },
  "question": "Which type of memory management scheme is most likely to suffer from external fragmentation?",
  "options": [
    "Paging",
    "Segmentation",
    "Swapping",
    "Purely contiguous allocation"
  ],
  "correctOption": "D",
  "explanation": "Purely contiguous allocation can lead to external fragmentation where memory space is available but non-contiguous, making it unusable for allocation.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e6"
  },
  "question": "A process is in the 'blocked' state. What does this mean and what event(s) will likely cause it to transition to the 'ready' state?",
  "options": [
    "It's waiting for I/O; completion of I/O operation.",
    "It's running; CPU scheduler allocates CPU time.",
    "It's ready to run; an interrupt occurs.",
    "It's terminated; no event will transition it."
  ],
  "correctOption": "A",
  "explanation": "A blocked process is waiting for an event (like I/O completion). Once the event happens, it transitions to the ready state.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e5"
  },
  "question": "In the context of process synchronization, what problem does the dining philosophers problem illustrate?",
  "options": [
    "Mutual exclusion.",
    "Deadlock.",
    "Race condition.",
    "Starvation."
  ],
  "correctOption": "B",
  "explanation": "The dining philosophers problem highlights the potential for deadlock when multiple processes compete for resources that are held by others (the forks).",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e4"
  },
  "question": "What is the purpose of a system call in an operating system?",
  "options": [
    "To initiate a hardware interrupt.",
    "To manage the CPU scheduler.",
    "To provide an interface between user-level processes and the kernel.",
    "To perform memory allocation."
  ],
  "correctOption": "C",
  "explanation": "System calls are the mechanism by which user-level programs request services from the operating system kernel.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f5"
  },
  "question": "Which OOP principle promotes the idea of hiding internal details and exposing only essential information?",
  "options": [
    "Abstraction",
    "Encapsulation",
    "Inheritance",
    "Polymorphism"
  ],
  "correctOption": "B",
  "explanation": "Encapsulation bundles data and methods that operate on that data within a class, hiding internal implementation details.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fd"
  },
  "question": "What is a potential drawback of using inheritance extensively?",
  "options": [
    "Increased code reusability",
    "Improved code organization",
    "Fragile base class problem",
    "Reduced complexity"
  ],
  "correctOption": "C",
  "explanation": "Changes in the base class can unexpectedly affect derived classes, making the code brittle and difficult to maintain.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fc"
  },
  "question": "Which design pattern promotes creating objects based on a request?",
  "options": [
    "Factory Method",
    "Singleton",
    "Observer",
    "Decorator"
  ],
  "correctOption": "A",
  "explanation": "The Factory Method pattern encapsulates object creation, allowing subclasses to decide which concrete object to create.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fa"
  },
  "question": "Consider a scenario where you need to represent different types of animals (dogs, cats, birds). Which OOP concept is best suited for modeling this?",
  "options": [
    "Abstraction only",
    "Inheritance only",
    "Polymorphism only",
    "Inheritance and Polymorphism"
  ],
  "correctOption": "D",
  "explanation": "Inheritance would create a base 'Animal' class, and subclasses for each type. Polymorphism allows using them generically via a common interface.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fb"
  },
  "question": "What is the difference between composition and aggregation in OOP?",
  "options": [
    "There's no difference, they are synonyms.",
    "Composition implies a 'has-a' relationship; aggregation implies a 'uses-a' relationship.",
    "Composition implies a strong 'owns' relationship where the composed part cannot exist independently; aggregation implies a weaker 'uses' relationship where the aggregated part can exist independently.",
    "Composition is static; aggregation is dynamic."
  ],
  "correctOption": "C",
  "explanation": "Composition represents a stronger relationship where the part cannot exist without the whole, while aggregation allows the part to exist independently.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f8"
  },
  "question": "A class that cannot be instantiated directly but serves as a blueprint for subclasses is known as:",
  "options": [
    "Concrete class",
    "Abstract class",
    "Interface",
    "Super class"
  ],
  "correctOption": "B",
  "explanation": "Abstract classes cannot be instantiated; they define a common interface for subclasses to implement.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f7"
  },
  "question": "Polymorphism allows objects of different classes to be treated as objects of a common type.  Which of the following best illustrates this?",
  "options": [
    "Creating multiple classes with the same name.",
    "Using the same method name with different implementations in subclasses.",
    "Restricting access to class members.",
    "Combining data and methods into a single unit."
  ],
  "correctOption": "B",
  "explanation": "Method overriding enables polymorphism, where a subclass provides a specific implementation of a method inherited from a superclass.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f9"
  },
  "question": "What is the purpose of an interface in OOP?",
  "options": [
    "To define the internal workings of a class.",
    "To provide a way for unrelated classes to interact.",
    "To hide internal details from external users.",
    "To create a copy of an object."
  ],
  "correctOption": "B",
  "explanation": "Interfaces define a contract that classes can implement, providing a common way for unrelated classes to interact.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fe"
  },
  "question": "How does static polymorphism differ from dynamic polymorphism?",
  "options": [
    "Static polymorphism uses method overriding; dynamic polymorphism uses method overloading.",
    "Static polymorphism occurs at compile time; dynamic polymorphism occurs at runtime.",
    "Static polymorphism is more efficient; dynamic polymorphism is more flexible.",
    "There is no practical difference; they are synonyms."
  ],
  "correctOption": "B",
  "explanation": "Static polymorphism (method overloading) is resolved at compile time, while dynamic polymorphism (method overriding) is resolved at runtime.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f6"
  },
  "question": "What is the process of creating new classes from existing ones called?",
  "options": [
    "Abstraction",
    "Encapsulation",
    "Inheritance",
    "Polymorphism"
  ],
  "correctOption": "C",
  "explanation": "Inheritance allows a new class (subclass) to inherit properties and methods from an existing class (superclass).",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d68550e"
  },
  "question": "Which phase of the SDLC involves gathering requirements from stakeholders?",
  "options": [
    "Testing",
    "Deployment",
    "Requirements Gathering",
    "Design"
  ],
  "correctOption": "C",
  "explanation": "The Requirements Gathering phase focuses on understanding the needs and specifications of the software.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d68550d"
  },
  "question": "What does SDLC stand for?",
  "options": [
    "Software Development Life Cycle",
    "System Design Life Cycle",
    "Software Deployment Life Cycle",
    "System Development Logic Cycle"
  ],
  "correctOption": "A",
  "explanation": "SDLC is the acronym for Software Development Life Cycle, encompassing all stages of software creation.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685510"
  },
  "question": "In which SDLC phase is the software actually built?",
  "options": [
    "Planning",
    "Design",
    "Implementation",
    "Testing"
  ],
  "correctOption": "C",
  "explanation": "The implementation phase is where the coding and development of the software takes place.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d68550f"
  },
  "question": "What is a key deliverable of the design phase in the SDLC?",
  "options": [
    "Working software",
    "Test cases",
    "System architecture",
    "User manual"
  ],
  "correctOption": "C",
  "explanation": "The design phase produces a blueprint of the software, including its architecture and structure.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685512"
  },
  "question": "What happens during the deployment phase of the SDLC?",
  "options": [
    "Software is designed",
    "Software is tested",
    "Software is released to users",
    "Software requirements are gathered"
  ],
  "correctOption": "C",
  "explanation": "Deployment involves releasing the finished software to its intended users or environment.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685513"
  },
  "question": "Which model is a linear-sequential approach to the SDLC?",
  "options": [
    "Agile",
    "Spiral",
    "Waterfall",
    "Iterative"
  ],
  "correctOption": "C",
  "explanation": "The Waterfall model follows a rigid, sequential process from start to finish.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685511"
  },
  "question": "What is the purpose of the testing phase in the SDLC?",
  "options": [
    "To write code",
    "To deploy the software",
    "To identify and fix defects",
    "To gather requirements"
  ],
  "correctOption": "C",
  "explanation": "Testing aims to find and resolve bugs and ensure the software meets requirements before release.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685514"
  },
  "question": "What is a potential drawback of the Waterfall model?",
  "options": [
    "Flexibility",
    "Simplicity",
    "Inflexibility",
    "Fast delivery"
  ],
  "correctOption": "C",
  "explanation": "The Waterfall model’s rigidity makes it difficult to adapt to changing requirements.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685515"
  },
  "question": "Which SDLC model emphasizes iterative development and customer collaboration?",
  "options": [
    "Waterfall",
    "Spiral",
    "Agile",
    "RAD"
  ],
  "correctOption": "C",
  "explanation": "Agile methodologies prioritize iterative development, frequent feedback, and collaboration.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685516"
  },
  "question": "Maintenance is considered part of which SDLC phase?",
  "options": [
    "Deployment",
    "Testing",
    "Post-Deployment/Maintenance",
    "Design"
  ],
  "correctOption": "C",
  "explanation": "Maintenance involves ongoing support, bug fixes, and updates after software release.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685526"
  },
  "question": "Which of the following is NOT a type of network?",
  "options": [
    "LAN",
    "WAN",
    "MAN",
    "FAN"
  ],
  "correctOption": "D",
  "explanation": "LAN, WAN, and MAN are common network types.  FAN is not a standard network type.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685525"
  },
  "question": "What is a network?",
  "options": [
    "A single computer",
    "A collection of interconnected devices",
    "A type of software",
    "A large database"
  ],
  "correctOption": "B",
  "explanation": "A network connects two or more devices to share resources and communicate.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685528"
  },
  "question": "What does WAN stand for?",
  "options": [
    "Wide Area Network",
    "Wireless Area Network",
    "World Area Network",
    "Web Area Network"
  ],
  "correctOption": "A",
  "explanation": "WAN stands for Wide Area Network; it covers a large geographic area.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552b"
  },
  "question": "What is the purpose of a network cable?",
  "options": [
    "To connect to the internet",
    "To power a computer",
    "To connect devices within a network",
    "To display images"
  ],
  "correctOption": "C",
  "explanation": "Network cables physically connect devices to create a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685529"
  },
  "question": "Which device connects multiple devices on a network?",
  "options": [
    "Printer",
    "Monitor",
    "Router",
    "Keyboard"
  ],
  "correctOption": "C",
  "explanation": "A router forwards data packets between networks.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685527"
  },
  "question": "What does LAN stand for?",
  "options": [
    "Large Area Network",
    "Local Area Network",
    "Long Area Network",
    "Limited Access Network"
  ],
  "correctOption": "B",
  "explanation": "LAN stands for Local Area Network; it covers a small geographic area.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552a"
  },
  "question": "What is an IP address used for?",
  "options": [
    "Identifying a device on a network",
    "Storing files",
    "Printing documents",
    "Playing games"
  ],
  "correctOption": "A",
  "explanation": "An IP address uniquely identifies a device on a network for communication.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552c"
  },
  "question": "What is a protocol in networking?",
  "options": [
    "A type of computer",
    "A set of rules for communication",
    "A type of software",
    "A type of hardware"
  ],
  "correctOption": "B",
  "explanation": "A protocol defines the rules and standards for data transmission between devices.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552d"
  },
  "question": "Which protocol is commonly used for web browsing?",
  "options": [
    "FTP",
    "SMTP",
    "HTTP",
    "POP3"
  ],
  "correctOption": "C",
  "explanation": "HTTP (Hypertext Transfer Protocol) is used for transferring web pages.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552e"
  },
  "question": "What is a node in a network?",
  "options": [
    "A type of cable",
    "A connecting device",
    "Any device connected to the network",
    "A type of software"
  ],
  "correctOption": "C",
  "explanation": "A node is any device (computer, printer, etc.) connected to a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d68553e"
  },
  "question": "A network is experiencing a denial-of-service attack.  Which mitigation strategy would be MOST effective in preventing future similar attacks by identifying and blocking malicious sources at the network perimeter?",
  "options": [
    "Intrusion Detection System (IDS)",
    "Firewall with stateful inspection",
    "Antivirus software",
    "Network segmentation"
  ],
  "correctOption": "B",
  "explanation": "A stateful firewall inspects network traffic contextually and can effectively block malicious traffic sources based on established connections and patterns, unlike other options that primarily focus on internal threats or less precise filtering.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d68553d"
  },
  "question": "Which cryptographic algorithm is NOT considered suitable for encrypting large datasets due to its computational intensity, especially with longer keys?",
  "options": [
    "AES",
    "RSA",
    "DES",
    "3DES"
  ],
  "correctOption": "B",
  "explanation": "RSA, an asymmetric algorithm, has significantly higher computational overhead compared to symmetric algorithms like AES for large datasets.  Key size also greatly impacts RSA's performance.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d68553f"
  },
  "question": "What is the primary security vulnerability addressed by implementing Certificate Pinning in mobile applications?",
  "options": [
    "Man-in-the-middle attacks",
    "SQL injection",
    "Cross-site scripting (XSS)",
    "Denial-of-service attacks"
  ],
  "correctOption": "A",
  "explanation": "Certificate pinning prevents man-in-the-middle attacks by hardcoding the expected server certificate, making it impossible for an attacker to use a fraudulent certificate to intercept traffic.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685540"
  },
  "question": "You are designing a secure network for a highly sensitive environment. Which security principle focuses on limiting access to resources based on the principle of least privilege?",
  "options": [
    "Confidentiality",
    "Integrity",
    "Availability",
    "Authorization"
  ],
  "correctOption": "D",
  "explanation": "Authorization is the process of verifying if a subject (user, process) is allowed to access a specific resource. Least privilege ensures only necessary access is granted.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685542"
  },
  "question": "Explain how a Zero Trust security model differs from a traditional perimeter-based security model.",
  "options": [
    "Zero Trust verifies every access request regardless of location, while perimeter-based relies on network segmentation.",
    "Zero Trust assumes all devices are untrusted, while perimeter-based assumes all devices inside the network are trusted.",
    "Zero Trust uses advanced threat intelligence, while perimeter-based solely depends on firewalls.",
    "Zero Trust focuses on data protection, while perimeter-based emphasizes network security."
  ],
  "correctOption": "B",
  "explanation": "Zero Trust operates on the principle of 'never trust, always verify,' assuming no implicit trust based on network location, contrasting with traditional models that primarily secure the network perimeter.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685541"
  },
  "question": "What is a significant advantage of using a VPN (Virtual Private Network) for remote access compared to a direct connection to a corporate network?",
  "options": [
    "Increased bandwidth",
    "Reduced latency",
    "Enhanced security through encryption and tunneling",
    "Simplified network configuration"
  ],
  "correctOption": "C",
  "explanation": "VPNs encrypt data and encapsulate it within tunnels, providing secure communication over untrusted networks, unlike a direct connection which exposes traffic.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685543"
  },
  "question": "Which security mechanism is BEST suited for detecting and responding to sophisticated, zero-day exploits that bypass traditional signature-based security systems?",
  "options": [
    "Intrusion Detection System (IDS)",
    "Antivirus software",
    "Behavior-based anomaly detection",
    "Firewall"
  ],
  "correctOption": "C",
  "explanation": "Behavior-based anomaly detection analyzes system behavior for deviations from established baselines, identifying unusual activities indicative of zero-day attacks that evade signature-based systems.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685544"
  },
  "question": "In a public key infrastructure (PKI) system, what is the role of a Certificate Revocation List (CRL)?",
  "options": [
    "To encrypt sensitive data exchanged between parties.",
    "To verify the authenticity of a digital signature.",
    "To identify compromised or revoked digital certificates.",
    "To generate public and private key pairs."
  ],
  "correctOption": "C",
  "explanation": "CRLs list certificates that have been compromised or revoked, preventing their further use and maintaining the integrity of the PKI system.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685545"
  },
  "question": "What is a common vulnerability associated with implementing Multi-Factor Authentication (MFA) that weakens its overall effectiveness?",
  "options": [
    "Phishing attacks targeting user credentials",
    "Poor password hygiene",
    "Social engineering exploiting user trust",
    "Weak or easily guessed secondary authentication factors"
  ],
  "correctOption": "D",
  "explanation": "Weak secondary factors (e.g., easily guessed PINs, predictable SMS codes) undermine the strength of MFA, enabling bypass despite its multi-layered approach.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685546"
  },
  "question": "A company is migrating its on-premise infrastructure to a cloud environment. Which security considerations should be of paramount importance during this transition?",
  "options": [
    "Data encryption in transit and at rest, secure configuration of cloud services, access control and identity management, all of the above.",
    "Only data encryption in transit and at rest.",
    "Only access control and identity management",
    "Only secure configuration of cloud services."
  ],
  "correctOption": "A",
  "explanation": "Cloud migration necessitates comprehensive security planning, encompassing data encryption, secure service configurations, and robust access controls to maintain security parity or improvement in the new environment.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685559"
  },
  "question": "Which JavaScript framework is known for its component-based architecture and virtual DOM?",
  "options": [
    "Angular",
    "React",
    "Vue.js",
    "jQuery"
  ],
  "correctOption": "B",
  "explanation": "React uses a component-based architecture and a virtual DOM for efficient updates to the user interface.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685555"
  },
  "question": "Which CSS property controls the spacing between lines of text?",
  "options": [
    "text-align",
    "line-height",
    "letter-spacing",
    "word-spacing"
  ],
  "correctOption": "B",
  "explanation": "The `line-height` property controls the vertical spacing between lines of text within an element.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685558"
  },
  "question": "What does the term 'DOM' stand for in web development?",
  "options": [
    "Document Object Model",
    "Data Object Model",
    "Digital Object Model",
    "Dynamic Object Manipulation"
  ],
  "correctOption": "A",
  "explanation": "DOM represents the Document Object Model, a programming interface for HTML and XML documents.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555c"
  },
  "question": "Which HTTP method is typically used to submit data to a server to create or update a resource?",
  "options": [
    "GET",
    "POST",
    "PUT",
    "DELETE"
  ],
  "correctOption": "B",
  "explanation": "The POST method is commonly used to send data to the server to create or update resources.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555a"
  },
  "question": "How can you apply a CSS style only to elements with a specific class?",
  "options": [
    "Using the `id` selector",
    "Using the `element` selector",
    "Using the `class` selector",
    "Using the `universal` selector"
  ],
  "correctOption": "C",
  "explanation": "The `class` selector (e.g., `.myClass`) targets HTML elements with the specified class attribute.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555b"
  },
  "question": "What is the purpose of a 'promise' in JavaScript?",
  "options": [
    "To handle asynchronous operations",
    "To define functions",
    "To create objects",
    "To manage events"
  ],
  "correctOption": "A",
  "explanation": "Promises handle asynchronous operations, managing their eventual success or failure and enabling cleaner code.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685557"
  },
  "question": "Which HTML5 element is used for embedding a video player?",
  "options": [
    "<video>",
    "<audio>",
    "<img>",
    "<embed>"
  ],
  "correctOption": "A",
  "explanation": "The `<video>` element is specifically designed for embedding and playing videos in HTML5.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555d"
  },
  "question": "What is the difference between `==` and `===` in JavaScript?",
  "options": [
    "Both are the same",
    "`==` checks for value equality, `===` checks for both value and type equality",
    "`==` checks for type equality, `===` checks for value equality",
    "`==` is for strings, `===` is for numbers"
  ],
  "correctOption": "B",
  "explanation": " `==` performs loose equality (type coercion), while `===` performs strict equality (no type coercion).",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685556"
  },
  "question": "What is the purpose of the `event.preventDefault()` method in JavaScript?",
  "options": [
    "To stop the default behavior of an event",
    "To prevent an event from bubbling",
    "To cancel an event entirely",
    "To trigger an event immediately"
  ],
  "correctOption": "A",
  "explanation": "`event.preventDefault()` prevents the browser's default action for an event (e.g., following a link, submitting a form).",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555e"
  },
  "question": "What does REST stand for in the context of web APIs?",
  "options": [
    "Representational State Transfer",
    "Remote Service Transfer",
    "Resourceful Service Technology",
    "Regular Service Transfer"
  ],
  "correctOption": "A",
  "explanation": "REST stands for Representational State Transfer, an architectural style for designing networked applications.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d68556d"
  },
  "question": "Which architectural pattern is commonly used to separate the business logic from the data access layer in a backend application?",
  "options": [
    "Model-View-Controller (MVC)",
    "Model-View-ViewModel (MVVM)",
    "Layered Architecture",
    "Microservices"
  ],
  "correctOption": "C",
  "explanation": "Layered architecture cleanly separates concerns, making the code more maintainable and testable.  Other patterns often utilize layered architecture.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d68556e"
  },
  "question": "What is a common way to handle asynchronous operations in a Node.js backend?",
  "options": [
    "Synchronous calls",
    "Callbacks",
    "Promises",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "Node.js is event-driven and asynchronous. Callbacks, Promises, and async/await are all methods to manage asynchronous operations effectively.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685574"
  },
  "question": "What is a common strategy for caching frequently accessed data in a backend system?",
  "options": [
    "Using a relational database",
    "Implementing a message queue",
    "Employing a caching layer (e.g., Redis, Memcached)",
    "Using a distributed file system"
  ],
  "correctOption": "C",
  "explanation": "Caching layers store frequently accessed data in memory, significantly reducing the load on the database and improving response times.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685570"
  },
  "question": "In a relational database, what is a foreign key?",
  "options": [
    "A unique identifier for each row in a table",
    "A field that links to the primary key of another table",
    "A constraint ensuring no duplicate values",
    "A type of data storage engine"
  ],
  "correctOption": "B",
  "explanation": "A foreign key establishes a relationship between two tables, enabling efficient data retrieval and database integrity.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685575"
  },
  "question": "What does ORMs (Object-Relational Mappers) simplify in backend development?",
  "options": [
    "Frontend development",
    "Network communication",
    "Database interactions",
    "API design"
  ],
  "correctOption": "C",
  "explanation": "ORMs translate between object-oriented programming languages and relational databases, simplifying database access and reducing boilerplate code.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685576"
  },
  "question": "What is a common approach to securing sensitive information like API keys and database credentials in a backend environment?",
  "options": [
    "Hardcoding them into the application code",
    "Storing them in plain text configuration files",
    "Using environment variables or secure secrets management services",
    "Leaving them exposed in the source code repository"
  ],
  "correctOption": "C",
  "explanation": "Environment variables and dedicated secrets management systems offer a more secure way to manage sensitive information than hardcoding or storing them in plain text.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685572"
  },
  "question": "What is the benefit of using a message queue (e.g., RabbitMQ, Kafka) in a backend system?",
  "options": [
    "Improved database performance",
    "Enhanced security",
    "Asynchronous communication and decoupling of services",
    "Simplified user interface design"
  ],
  "correctOption": "C",
  "explanation": "Message queues allow different parts of the system to communicate asynchronously, improving scalability and resilience. This reduces tight coupling between services.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685573"
  },
  "question": "Which design principle emphasizes keeping components loosely coupled and highly cohesive?",
  "options": [
    "SOLID principles",
    "KISS principle",
    "YAGNI principle",
    "DRY principle"
  ],
  "correctOption": "A",
  "explanation": "SOLID principles, especially the principles of Single Responsibility and Dependency Inversion, promote loose coupling and high cohesion for maintainable and extensible code.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685571"
  },
  "question": "Which of the following is NOT a common method for handling errors in a backend application?",
  "options": [
    "Exception handling",
    "Logging errors to a file",
    "Returning detailed error messages to the client",
    "Ignoring errors and continuing execution"
  ],
  "correctOption": "D",
  "explanation": "Ignoring errors can lead to unexpected behavior and data corruption.  Proper error handling involves catching exceptions, logging, and returning informative error messages.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d68556f"
  },
  "question": "What is the primary purpose of a RESTful API?",
  "options": [
    "To manage databases",
    "To handle user authentication only",
    "To expose backend functionality via HTTP requests",
    "To create complex user interfaces"
  ],
  "correctOption": "C",
  "explanation": "RESTful APIs use standard HTTP methods (GET, POST, PUT, DELETE) to interact with resources, providing a standardized interface to backend data and functionalities.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685585"
  },
  "question": "Which HTTP method is typically used to retrieve data from an API?",
  "options": [
    "POST",
    "PUT",
    "DELETE",
    "GET"
  ],
  "correctOption": "D",
  "explanation": "GET requests are used to retrieve information from a server.  They are idempotent, meaning they can be called multiple times without changing the server state.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685586"
  },
  "question": "What is REST (Representational State Transfer)?",
  "options": [
    "A type of database",
    "A specific API programming language",
    "An architectural style for building web services",
    "A type of network protocol"
  ],
  "correctOption": "C",
  "explanation": "REST is an architectural style that defines a set of constraints for creating web services. It utilizes standard HTTP methods for interaction.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685589"
  },
  "question": "Which of the following is NOT a common API response format?",
  "options": [
    "JSON",
    "XML",
    "HTML",
    "YAML"
  ],
  "correctOption": "C",
  "explanation": "While APIs might use HTML for documentation or specific responses, JSON, XML, and YAML are common data formats for API responses.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685587"
  },
  "question": "What does API stand for?",
  "options": [
    "Application Programming Interface",
    "Advanced Programming Interface",
    "Abstract Programming Interface",
    "Applied Programming Integration"
  ],
  "correctOption": "A",
  "explanation": "API stands for Application Programming Interface; it's a set of rules and specifications that software programs can follow to communicate.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685588"
  },
  "question": "What is an API key used for?",
  "options": [
    "Encrypting API requests",
    "Authenticating API requests and managing access",
    "Storing API data",
    "Defining API data types"
  ],
  "correctOption": "B",
  "explanation": "API keys are used to identify and authenticate users or applications accessing an API, often with rate limiting or access control.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558a"
  },
  "question": "What is rate limiting in the context of APIs?",
  "options": [
    "Limiting the number of requests an application can make within a given time period",
    "Limiting the size of data transmitted in a single request",
    "Limiting the type of data that can be requested",
    "Limiting the number of users accessing the API"
  ],
  "correctOption": "A",
  "explanation": "Rate limiting controls the frequency of API requests to prevent abuse and ensure server stability.  It protects the API from being overwhelmed.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558e"
  },
  "question": "How does OAuth 2.0 improve API security?",
  "options": [
    "By storing API keys directly in client applications",
    "By providing a more secure way to authorize access to protected resources",
    "By reducing the number of API requests",
    "By encrypting all API data"
  ],
  "correctOption": "B",
  "explanation": "OAuth 2.0 allows applications to access user data from another service without requiring them to directly share passwords. This improves security by reducing reliance on direct credentials.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558c"
  },
  "question": "What is a common way to handle errors in an API?",
  "options": [
    "Ignoring errors",
    "Returning HTTP status codes",
    "Closing the API",
    "Displaying an internal server error to the user"
  ],
  "correctOption": "B",
  "explanation": "HTTP status codes (e.g., 404 Not Found, 500 Internal Server Error) provide standardized ways for APIs to communicate errors to clients.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558b"
  },
  "question": "What is the purpose of API documentation?",
  "options": [
    "To provide instructions and examples on how to use the API",
    "To encrypt API responses",
    "To store API data",
    "To manage API users"
  ],
  "correctOption": "A",
  "explanation": "API documentation provides developers with information on endpoints, request methods, parameters, and expected responses, making it easier to integrate with the API.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558d"
  },
  "question": "What is Webhook?",
  "options": [
    "A type of database",
    "A type of API request",
    "A server-sent event mechanism",
    "A method to encrypt data"
  ],
  "correctOption": "C",
  "explanation": "A webhook is a way for an API to push data to a client application automatically whenever an event occurs, rather than the client constantly polling.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d68559e"
  },
  "question": "What is the primary goal of dimensionality reduction in machine learning?",
  "options": [
    "Increasing model complexity",
    "Improving model accuracy",
    "Reducing computational cost and noise",
    "Adding more features to the dataset"
  ],
  "correctOption": "C",
  "explanation": "Dimensionality reduction aims to simplify data by reducing the number of variables, leading to faster processing and less noise.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d68559d"
  },
  "question": "Which of the following is NOT a common type of machine learning?",
  "options": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Reinforcement Learning",
    "Deductive Learning"
  ],
  "correctOption": "D",
  "explanation": "Deductive learning is a philosophical concept, not a machine learning paradigm.  The others are established ML types.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a0"
  },
  "question": "Which algorithm is best suited for handling high-dimensional data with many irrelevant features?",
  "options": [
    "Linear Regression",
    "K-Nearest Neighbors",
    "Support Vector Machines (SVM)",
    "Random Forest"
  ],
  "correctOption": "D",
  "explanation": "Random Forest is robust to high dimensionality and irrelevant features due to its ensemble nature and feature bagging.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d68559f"
  },
  "question": "In a decision tree, what is a leaf node?",
  "options": [
    "A branch point in the tree",
    "The root of the tree",
    "A final decision or prediction",
    "An intermediate node"
  ],
  "correctOption": "C",
  "explanation": "Leaf nodes represent the final outcome or classification made by the decision tree algorithm.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a1"
  },
  "question": "What is the purpose of a validation set in machine learning?",
  "options": [
    "Training the model",
    "Testing the model's final performance",
    "Tuning hyperparameters and preventing overfitting",
    "Evaluating the model's performance on unseen data"
  ],
  "correctOption": "C",
  "explanation": "The validation set is used to tune hyperparameters and to assess the model's performance during training to prevent overfitting to the training data.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a3"
  },
  "question": "What is a common technique to address overfitting in neural networks?",
  "options": [
    "Increasing the number of hidden layers",
    "Using larger datasets",
    "Adding dropout layers",
    "Decreasing the learning rate"
  ],
  "correctOption": "C",
  "explanation": "Dropout randomly deactivates neurons during training, preventing overreliance on specific features and thus mitigating overfitting.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a2"
  },
  "question": "Which metric is commonly used to evaluate the performance of a classification model dealing with imbalanced datasets?",
  "options": [
    "Accuracy",
    "Precision",
    "Recall",
    "F1-score"
  ],
  "correctOption": "D",
  "explanation": "F1-score balances precision and recall, making it suitable for imbalanced datasets where accuracy can be misleading.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a4"
  },
  "question": "What is the main difference between batch gradient descent and stochastic gradient descent?",
  "options": [
    "Batch GD uses the entire dataset in each iteration, SGD uses a single data point.",
    "Batch GD is faster, SGD is slower.",
    "Batch GD is less prone to getting stuck in local minima, SGD is more prone.",
    "Batch GD requires less memory, SGD requires more memory."
  ],
  "correctOption": "A",
  "explanation": "Batch GD updates weights based on the entire dataset, while SGD updates weights after processing each data point individually.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a5"
  },
  "question": "Which technique helps to prevent a model from learning the noise in the training data?",
  "options": [
    "Cross-validation",
    "Regularization",
    "Feature scaling",
    "Data augmentation"
  ],
  "correctOption": "B",
  "explanation": "Regularization adds a penalty to the loss function, discouraging the model from fitting to the noise.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a6"
  },
  "question": "Given a dataset with highly correlated features, which technique might be helpful for improving model performance and interpretability?",
  "options": [
    "Feature scaling",
    "PCA (Principal Component Analysis)",
    "One-hot encoding",
    "Data augmentation"
  ],
  "correctOption": "B",
  "explanation": "PCA reduces the dimensionality by creating uncorrelated principal components, often improving model performance and making it easier to understand.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b5"
  },
  "question": "Which of the following regularization techniques is particularly effective in preventing overfitting in deep neural networks with many parameters, and why?",
  "options": [
    "L1 regularization",
    "Dropout",
    "Early stopping",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "All three methods (L1, dropout, and early stopping) are effective regularization techniques.  They prevent overfitting by reducing model complexity in different ways.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b6"
  },
  "question": "Explain the vanishing gradient problem and describe a solution to mitigate it.",
  "options": [
    "It occurs during backpropagation in shallow networks, solved by using larger learning rates.",
    "It occurs during backpropagation in deep networks, solved by using ReLU activation functions.",
    "It occurs during forward propagation, solved by using batch normalization.",
    "It occurs only in recurrent neural networks, solved by using LSTMs."
  ],
  "correctOption": "B",
  "explanation": "The vanishing gradient problem hinders training deep networks.  ReLU activations, with their non-zero derivative for positive inputs, help alleviate this.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b8"
  },
  "question": "Describe a scenario where transfer learning would be particularly beneficial and explain why.",
  "options": [
    "Training a new model from scratch for image classification on a large dataset.",
    "Fine-tuning a pre-trained model for a similar image classification task with limited data.",
    "Training a model for natural language processing on a completely new language without any prior data.",
    "Using a pre-trained model for a completely unrelated task, such as predicting stock prices based on image data."
  ],
  "correctOption": "B",
  "explanation": "Transfer learning excels when dealing with limited data for a similar task.  Leveraging a pre-trained model reduces training time and improves performance by initializing weights with meaningful values.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b7"
  },
  "question": "How does Batch Normalization contribute to faster and more stable training of deep neural networks?",
  "options": [
    "By normalizing the weights of the network after each epoch.",
    "By normalizing the activations of each layer during training.",
    "By normalizing the input data before feeding it to the network.",
    "By normalizing the output of the network before calculating the loss."
  ],
  "correctOption": "B",
  "explanation": "Batch Normalization normalizes the activations of each layer, reducing internal covariate shift and thus stabilizing and speeding up training.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b9"
  },
  "question": "What is the core difference between Convolutional Neural Networks (CNNs) and Recurrent Neural Networks (RNNs) in terms of their application and data handling?",
  "options": [
    "CNNs handle sequential data, RNNs handle spatial data.",
    "CNNs handle spatial data, RNNs handle sequential data.",
    "Both handle both types equally well.",
    "CNNs are for image classification only, RNNs for NLP only."
  ],
  "correctOption": "B",
  "explanation": "CNNs excel at processing spatial data like images, while RNNs are designed for sequential data like text or time series.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855ba"
  },
  "question": "What is the purpose of an attention mechanism in sequence-to-sequence models, and how does it improve performance?",
  "options": [
    "It prevents vanishing gradients.",
    "It regularizes the network to prevent overfitting.",
    "It allows the model to focus on relevant parts of the input sequence when generating the output.",
    "It speeds up the training process by reducing computational complexity."
  ],
  "correctOption": "C",
  "explanation": "Attention mechanisms enable the model to weigh different parts of the input sequence differently, focusing on the most relevant information for generating each part of the output.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855bb"
  },
  "question": "Explain the concept of a Generative Adversarial Network (GAN) and its two core components.",
  "options": [
    "A network that uses reinforcement learning to generate images.",
    "A network that uses unsupervised learning to classify images.",
    "Two networks, a generator and a discriminator, competing against each other to generate realistic data.",
    "A single network that generates and discriminates data simultaneously."
  ],
  "correctOption": "C",
  "explanation": "GANs consist of a generator that creates synthetic data and a discriminator that tries to distinguish between real and synthetic data.  Their competition leads to improved realism in generated data.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855bc"
  },
  "question": "How does the concept of 'explainability' pose a challenge in the field of deep learning, and what are some approaches to address this?",
  "options": [
    "Explainability is not a challenge, deep learning models are inherently transparent.",
    "Deep learning models are too complex to interpret, and there are no solutions to address this.",
    "Deep learning models are ‘black boxes’, making understanding their decision-making difficult; techniques like SHAP values and LIME try to improve interpretability.",
    "Explainability is only a challenge in specific applications, like medical diagnosis; in others, it is irrelevant."
  ],
  "correctOption": "C",
  "explanation": "The complexity of deep learning models often hinders understanding their predictions.  Methods like SHAP and LIME aim to provide insights into their decision-making processes.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855bd"
  },
  "question": "In the context of hyperparameter optimization, what is the difference between grid search and random search, and when might one be preferred over the other?",
  "options": [
    "Grid search is faster than random search.",
    "Random search is always better than grid search.",
    "Grid search explores all possible combinations of hyperparameters, while random search samples from a distribution of hyperparameters.  Random search can be more efficient for high-dimensional hyperparameter spaces.",
    "There is no difference between the two methods; they achieve the same results."
  ],
  "correctOption": "C",
  "explanation": "Grid search is exhaustive but computationally expensive for many hyperparameters. Random search is often more efficient in high-dimensional spaces by intelligently sampling the hyperparameter space.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855be"
  },
  "question": "What is a common approach to handle imbalanced datasets in deep learning, and why is it effective?",
  "options": [
    "Ignore the imbalance; it doesn't affect model performance.",
    "Use a different loss function, such as mean squared error.",
    "Oversample the minority class or undersample the majority class to balance the class distribution. This ensures the model learns from all classes equally.",
    "Increase the learning rate."
  ],
  "correctOption": "C",
  "explanation": "Imbalanced datasets can bias models toward the majority class. Oversampling/undersampling techniques address this by creating a more balanced representation of classes during training.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d1"
  },
  "question": "How do you add a comment in Python?",
  "options": [
    "// This is a comment",
    "# This is a comment",
    "/* This is a comment */",
    "'This is a comment'"
  ],
  "correctOption": "B",
  "explanation": "The '#' symbol is used to denote single-line comments in Python.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855cf"
  },
  "question": "Which of these is NOT a valid variable name in Python?",
  "options": [
    "my_variable",
    "1st_variable",
    "_private_var",
    "myVariable"
  ],
  "correctOption": "B",
  "explanation": "Variable names cannot start with a number.  '1st_variable' violates this rule.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855ce"
  },
  "question": "What data type is the result of 5 / 2 in Python?",
  "options": [
    "integer",
    "string",
    "float",
    "boolean"
  ],
  "correctOption": "C",
  "explanation": "The `/` operator performs floating-point division in Python, resulting in a float.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d0"
  },
  "question": "What will be the output of `print(type(5))`?",
  "options": [
    "<class 'int'>",
    "<class 'float'>",
    "<class 'str'>",
    "<class 'bool'>"
  ],
  "correctOption": "A",
  "explanation": "`type()` returns the data type of the object. 5 is an integer.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855cd"
  },
  "question": "What is the correct way to print 'Hello, world!' in Python?",
  "options": [
    "print('Hello, world!')",
    "print \"Hello, world!\"",
    "echo 'Hello, world!'",
    "System.out.println('Hello, world!');"
  ],
  "correctOption": "A",
  "explanation": "The `print()` function is Python's built-in function for displaying output to the console.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d2"
  },
  "question": "What is the result of `2 + 2 * 3` in Python?",
  "options": [
    "12",
    "8",
    "10",
    "6"
  ],
  "correctOption": "B",
  "explanation": "Python follows the order of operations (PEMDAS/BODMAS), so multiplication is done before addition: 2 + (2 * 3) = 8",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d3"
  },
  "question": "What does the `len()` function do?",
  "options": [
    "Calculates the sum of elements",
    "Finds the largest element",
    "Determines the length of a sequence",
    "Prints the elements of a sequence"
  ],
  "correctOption": "C",
  "explanation": "`len()` returns the number of items (length) in a sequence like a string, list, or tuple.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d4"
  },
  "question": "Which statement correctly creates a list named 'my_list' containing the numbers 1, 2, and 3?",
  "options": [
    "my_list = 1, 2, 3",
    "my_list = [1 2 3]",
    "my_list = {1, 2, 3}",
    "my_list = [1, 2, 3]"
  ],
  "correctOption": "D",
  "explanation": "Square brackets `[]` are used to create lists in Python.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d6"
  },
  "question": "What will be the output of `print(bool(0))`?",
  "options": [
    "0",
    "True",
    "False",
    "Error"
  ],
  "correctOption": "C",
  "explanation": "In Python, 0 evaluates to False in a boolean context; any other number evaluates to True.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d5"
  },
  "question": "What keyword is used to define a function in Python?",
  "options": [
    "function",
    "def",
    "method",
    "procedure"
  ],
  "correctOption": "B",
  "explanation": "`def` is the keyword used to create a function definition.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e6"
  },
  "question": "What is the primary purpose of the `volatile` keyword in Java?",
  "options": [
    "To prevent method overriding.",
    "To enforce thread safety for mutable objects.",
    "To indicate that a variable's value is stored in a specific memory location.",
    "To optimize garbage collection for a specific variable."
  ],
  "correctOption": "B",
  "explanation": "Ensures that changes to a variable are immediately visible to other threads, preventing data inconsistencies.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e5"
  },
  "question": "Which statement regarding Java's garbage collection is FALSE?",
  "options": [
    "Garbage collection reclaims memory occupied by unreachable objects.",
    "The JVM's garbage collector is deterministic and runs on a fixed schedule.",
    "Different garbage collection algorithms exist (e.g., mark-and-sweep, generational).",
    "System.gc() is a request, not a guarantee, of garbage collection."
  ],
  "correctOption": "B",
  "explanation": "The JVM's garbage collector is non-deterministic; its execution timing is not predictable.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e7"
  },
  "question": "Explain the difference between `HashMap` and `ConcurrentHashMap` in Java.",
  "options": [
    "They are functionally identical; `ConcurrentHashMap` is just a more descriptive name.",
    "`HashMap` is thread-safe, while `ConcurrentHashMap` is not.",
    "`ConcurrentHashMap` provides better performance for concurrent access compared to `HashMap`.",
    "`HashMap` allows null keys and values, while `ConcurrentHashMap` does not."
  ],
  "correctOption": "C",
  "explanation": "`ConcurrentHashMap` uses internal locking mechanisms to avoid concurrency issues, unlike `HashMap` which is not thread-safe.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e8"
  },
  "question": "How does Java's `java.util.concurrent.locks.ReentrantLock` differ fundamentally from synchronized blocks?",
  "options": [
    "They offer identical functionality; `ReentrantLock` is just a more modern alternative.",
    "`ReentrantLock` allows for more granular control over locking, including timed locks and interruptible locks.",
    "Synchronized blocks always have a finer granularity of locking than `ReentrantLock`.",
    "Only `ReentrantLock` supports the use of Condition objects for advanced synchronization."
  ],
  "correctOption": "B",
  "explanation": "`ReentrantLock` provides features like tryLock(), lockInterruptibly(), and timed waiting that synchronized blocks lack.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e9"
  },
  "question": "Which design pattern is BEST suited for managing access to a limited resource (e.g., a database connection pool)?",
  "options": [
    "Factory Pattern",
    "Singleton Pattern",
    "Observer Pattern",
    "Decorator Pattern"
  ],
  "correctOption": "B",
  "explanation": "The Singleton pattern ensures only one instance of the resource manager exists, controlling access efficiently.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855eb"
  },
  "question": "In Java, what is the primary difference between a checked and an unchecked exception?",
  "options": [
    "Checked exceptions can be caught using a `try-catch` block, while unchecked exceptions cannot.",
    "Checked exceptions are runtime exceptions, and unchecked exceptions are compile-time exceptions.",
    "The compiler requires explicit handling (e.g., using `try-catch` or `throws`) for checked exceptions but not for unchecked exceptions.",
    "Unchecked exceptions always indicate programming errors, whereas checked exceptions signal recoverable conditions."
  ],
  "correctOption": "C",
  "explanation": "Checked exceptions (like `IOException`) must be declared or handled, while unchecked exceptions (like `NullPointerException`) do not require explicit handling at compile time.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855ea"
  },
  "question": "What is the significance of the `transient` keyword in Java serialization?",
  "options": [
    "It indicates that a field should be serialized using a custom serialization method.",
    "It marks a field as immutable, preventing accidental modification after serialization.",
    "It prevents a field from being serialized, making it unsuitable for storing in a persistent state.",
    "It ensures a field is serialized in a specific order relative to other fields."
  ],
  "correctOption": "C",
  "explanation": "Fields declared `transient` are excluded from the serialization process; their values are not saved or restored.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855ed"
  },
  "question": "What is a common strategy to optimize Java code for performance when dealing with large datasets?",
  "options": [
    "Always use nested loops for iteration.",
    "Employing efficient data structures like ArrayLists for all data.",
    "Using streams and parallel streams for efficient processing.",
    "Avoid using generics as they introduce runtime overhead."
  ],
  "correctOption": "C",
  "explanation": "Streams and parallel streams can leverage multi-core processors, significantly speeding up operations on large datasets.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855ec"
  },
  "question": "How can you ensure thread safety when multiple threads access and modify the same object in Java, beyond using synchronized blocks or `ReentrantLock`?",
  "options": [
    "Using `volatile` keyword for all fields.",
    "Employing Immutable objects.",
    "Using `ThreadLocal` to store object copies per thread.",
    "Re-designing the system to eliminate shared mutable state entirely."
  ],
  "correctOption": "D",
  "explanation": "This is the most robust solution; removing shared mutable state eliminates the root cause of concurrency problems.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855ee"
  },
  "question": "What is the purpose of the `java.lang.instrument` package?",
  "options": [
    "To facilitate debugging and profiling of Java applications.",
    "To provide tools for memory management and garbage collection tuning.",
    "To manage the classpath during the runtime of a Java application.",
    "To enable manipulation of loaded class bytecode at runtime."
  ],
  "correctOption": "D",
  "explanation": "This package allows agents to intercept and modify the bytecode of classes during loading, altering their behavior.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685600"
  },
  "question": "What is the difference between `==` and `===` in JavaScript?",
  "options": [
    "No difference.",
    "`==` checks for value equality, `===` checks for strict equality (value and type).",
    "`==` checks for type equality, `===` checks for value equality.",
    "`===` is faster than `==`."
  ],
  "correctOption": "B",
  "explanation": "`==` performs type coercion before comparison, while `===` performs a strict comparison without type coercion.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d6855ff"
  },
  "question": "What will be the output of the following code: `console.log(typeof null);`?",
  "options": [
    "null",
    "object",
    "undefined",
    "string"
  ],
  "correctOption": "B",
  "explanation": "This is a common JavaScript quirk.  `typeof null` returns 'object', a historical error that remains for backward compatibility.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d6855fe"
  },
  "question": "Which method is used to convert a string to an array of characters in JavaScript?",
  "options": [
    "string.split()",
    "string.toCharArray()",
    "string.toArray()",
    "string.split('')"
  ],
  "correctOption": "D",
  "explanation": "`string.split('')` splits the string into an array of individual characters using an empty string as the separator.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d6855fd"
  },
  "question": "What is the primary purpose of the `this` keyword in JavaScript?",
  "options": [
    "To declare a variable.",
    "To refer to the current function.",
    "To refer to the current object's context.",
    "To define a global variable."
  ],
  "correctOption": "C",
  "explanation": "`this` refers to the object that is executing the current function. Its value depends on how the function is called.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685602"
  },
  "question": "What will the following code output?  `console.log([1, 2, 3].map(x => x * 2));`",
  "options": [
    "[1, 2, 3]",
    "[2, 4, 6]",
    "[1, 4, 9]",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The `map()` method applies the provided function to each element of the array and returns a new array with the results.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685604"
  },
  "question": "How can you prevent default browser behavior on an event?",
  "options": [
    "Using `preventDefault()`",
    "Using `stopPropagation()`",
    "Using `return false;`",
    "Both A and C are correct."
  ],
  "correctOption": "D",
  "explanation": "Both `preventDefault()` (more modern) and `return false;` (older method) can stop default browser actions from an event handler.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685605"
  },
  "question": "What is the purpose of closures in JavaScript?",
  "options": [
    "To improve code readability.",
    "To create private variables within functions.",
    "To enhance function performance.",
    "To make functions asynchronous."
  ],
  "correctOption": "B",
  "explanation": "Closures allow inner functions to access variables from their outer (enclosing) function's scope, even after the outer function has finished executing, creating private variables.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685603"
  },
  "question": "What does the `reduce()` method do in JavaScript?",
  "options": [
    "Filters elements from an array.",
    "Maps elements to new values.",
    "Reduces an array to a single value.",
    "Sorts elements in an array."
  ],
  "correctOption": "C",
  "explanation": "`reduce()` iterates through an array and accumulates the result into a single value, using a callback function.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685606"
  },
  "question": "Explain the difference between synchronous and asynchronous JavaScript operations.",
  "options": [
    "Synchronous operations wait for each task to complete before moving on, while asynchronous operations run concurrently.",
    "Synchronous operations run concurrently, while asynchronous operations wait for each task to complete.",
    "There is no difference.",
    "Synchronous operations handle user interface updates, while asynchronous operations handle network requests."
  ],
  "correctOption": "A",
  "explanation": "Synchronous code executes line by line, blocking further execution until each step finishes. Asynchronous code allows multiple operations to proceed without waiting for each other, utilizing callbacks, promises, or async/await.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685601"
  },
  "question": "How do you create a new array in JavaScript?",
  "options": [
    "newArray = new Array();",
    "newArray = [];",
    "newArray = Array();",
    "All of the above are correct."
  ],
  "correctOption": "D",
  "explanation": "All three options create a new empty array. The literal notation `[]` is generally preferred for readability.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685615"
  },
  "question": "What is the purpose of the `const` keyword when applied to a member function in C++?",
  "options": [
    "It prevents the member function from modifying any member variables of the class.",
    "It makes the member function static.",
    "It prevents the member function from being inherited by derived classes.",
    "It makes the member function inline."
  ],
  "correctOption": "A",
  "explanation": "A `const` member function promises not to modify the object's state.  It cannot modify any non-`mutable` member variables.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685616"
  },
  "question": "Which of the following is NOT a valid way to initialize a `std::vector`?",
  "options": [
    "std::vector<int> vec = {1, 2, 3};",
    "std::vector<int> vec(5);",
    "std::vector<int> vec(5, 10);",
    "std::vector<int> vec(5, {1,2});"
  ],
  "correctOption": "D",
  "explanation": "You cannot initialize a vector of integers with a vector of integers as the second argument of the constructor.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685618"
  },
  "question": "What is polymorphism in C++?",
  "options": [
    "The ability of a class to inherit from multiple base classes.",
    "The ability of an object to take on many forms.",
    "The ability to overload operators.",
    "The ability to use templates."
  ],
  "correctOption": "B",
  "explanation": "Polymorphism allows objects of different classes to be treated as objects of a common type.  This is often achieved through virtual functions.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685619"
  },
  "question": "What is the difference between a class and a struct in C++?",
  "options": [
    "Structs are always smaller than classes.",
    "Structs can't have member functions, only classes can.",
    "The default access specifier for members is `public` in structs and `private` in classes.",
    "There is no practical difference between structs and classes in C++."
  ],
  "correctOption": "C",
  "explanation": "The only difference is the default access specifier: `public` for structs, `private` for classes.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685617"
  },
  "question": "What does the `new` operator do in C++?",
  "options": [
    "It declares a variable.",
    "It allocates memory dynamically on the heap.",
    "It deallocates memory from the stack.",
    "It initializes a static variable."
  ],
  "correctOption": "B",
  "explanation": "The `new` operator dynamically allocates memory;  `delete` is used for deallocation.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561c"
  },
  "question": "What does `std::move` do?",
  "options": [
    "It physically moves an object in memory.",
    "It creates a copy of an object.",
    "It transfers ownership of an object, avoiding unnecessary copying.",
    "It deletes an object."
  ],
  "correctOption": "C",
  "explanation": "`std::move` casts an object to an rvalue reference, allowing move semantics to be used, which typically avoids copying.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561b"
  },
  "question": "What is a lambda expression in C++?",
  "options": [
    "A type of loop.",
    "A way to define anonymous functions.",
    "A type of pointer.",
    "A form of exception handling."
  ],
  "correctOption": "B",
  "explanation": "Lambda expressions provide a concise way to create unnamed functions, often used with standard algorithms.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561d"
  },
  "question": "How do you prevent a copy constructor from being called?",
  "options": [
    "Declare the copy constructor as private and don't define it.",
    "Use the `delete` keyword.",
    "Use the `override` keyword.",
    "Declare the class as `final`."
  ],
  "correctOption": "A",
  "explanation": "Declaring the copy constructor as private prevents external entities from creating copies;  the compiler will give an error if you attempt a copy.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561a"
  },
  "question": "Which keyword is used to prevent a class from being inherited from?",
  "options": [
    "static",
    "virtual",
    "final",
    "private"
  ],
  "correctOption": "C",
  "explanation": "The `final` keyword (C++11 and later) prevents inheritance.  `private` inheritance restricts access, but doesn't prevent inheritance itself.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561e"
  },
  "question": "What is RAII (Resource Acquisition Is Initialization)?",
  "options": [
    "A design pattern that uses smart pointers to manage resources.",
    "A method for initializing static variables.",
    "A technique for improving code readability.",
    "A type of exception handling."
  ],
  "correctOption": "A",
  "explanation": "RAII ties resource allocation to object lifetime, ensuring resources are automatically released when the object is destroyed (e.g., using smart pointers).",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d68562e"
  },
  "question": "What is a fundamental characteristic of an array?",
  "options": [
    "Elements are accessed randomly",
    "Elements are stored contiguously in memory",
    "Elements are sorted automatically",
    "Elements can be of different data types"
  ],
  "correctOption": "B",
  "explanation": "Arrays store elements in consecutive memory locations, enabling direct access via index.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685630"
  },
  "question": "Which data structure is best suited for representing hierarchical relationships?",
  "options": [
    "Array",
    "Linked List",
    "Queue",
    "Tree"
  ],
  "correctOption": "D",
  "explanation": "Trees naturally represent hierarchical structures with nodes and branches showcasing parent-child relationships.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d68562f"
  },
  "question": "Which data structure uses pointers to connect elements?",
  "options": [
    "Array",
    "Stack",
    "Linked List",
    "Queue"
  ],
  "correctOption": "C",
  "explanation": "Linked lists utilize pointers to link each node to the next, unlike arrays which use contiguous memory.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685632"
  },
  "question": "In a binary tree, what is a node with no children called?",
  "options": [
    "Root",
    "Parent",
    "Leaf",
    "Branch"
  ],
  "correctOption": "C",
  "explanation": "Leaf nodes are terminal nodes in a binary tree, lacking any child nodes.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685634"
  },
  "question": "Which data structure allows efficient insertion and deletion of elements at any position?",
  "options": [
    "Array",
    "Linked List",
    "Stack",
    "Queue"
  ],
  "correctOption": "B",
  "explanation": "Linked lists offer flexibility in inserting/deleting elements, unlike arrays which require shifting elements.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685631"
  },
  "question": "What is the primary operation performed on a queue?",
  "options": [
    "Push",
    "Pop",
    "Enqueue",
    "Dequeue"
  ],
  "correctOption": "C",
  "explanation": "Enqueue adds an element to the rear of the queue, while dequeue removes from the front (FIFO).",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d68562d"
  },
  "question": "Which data structure follows the LIFO (Last-In, First-Out) principle?",
  "options": [
    "Queue",
    "Stack",
    "Linked List",
    "Tree"
  ],
  "correctOption": "B",
  "explanation": "A stack operates on the LIFO principle, meaning the last element added is the first one removed.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685633"
  },
  "question": "What does FIFO stand for in the context of data structures?",
  "options": [
    "First In, First Out",
    "Last In, First Out",
    "First Out, First In",
    "Last Out, First In"
  ],
  "correctOption": "A",
  "explanation": "FIFO (First-In, First-Out) is the operating principle for queues.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685635"
  },
  "question": "A graph where all edges have the same weight is called:",
  "options": [
    "Weighted Graph",
    "Unweighted Graph",
    "Directed Graph",
    "Undirected Graph"
  ],
  "correctOption": "B",
  "explanation": "An unweighted graph doesn't assign weights to its edges; all edges are considered equal.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685636"
  },
  "question": "What is the time complexity of accessing an element in an array using its index?",
  "options": [
    "O(n)",
    "O(log n)",
    "O(1)",
    "O(n^2)"
  ],
  "correctOption": "C",
  "explanation": "Accessing an array element by index is a constant time operation, independent of the array size.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685645"
  },
  "question": "Which data structure is most efficient for implementing a LRU (Least Recently Used) cache?",
  "options": [
    "A. Binary Search Tree",
    "B. Doubly Linked List with a Hash Map",
    "C. Heap",
    "D. Stack"
  ],
  "correctOption": "B",
  "explanation": "A doubly linked list maintains order of access, while a hash map provides O(1) lookup for quick eviction of least recently used elements.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685649"
  },
  "question": "Consider implementing a graph using an adjacency matrix.  What is the space complexity for a graph with V vertices and E edges?",
  "options": [
    "A. O(V)",
    "B. O(E)",
    "C. O(V^2)",
    "D. O(V + E)"
  ],
  "correctOption": "C",
  "explanation": "An adjacency matrix requires a V x V matrix to represent all possible edges, resulting in O(V^2) space complexity.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685647"
  },
  "question": "You need to efficiently manage a dynamic set of integers where insertions, deletions, and finding the minimum element must all be O(1) on average.  Which data structure is best suited?",
  "options": [
    "A. Sorted Array",
    "B. Skip List",
    "C. Self-Balancing Binary Search Tree",
    "D. Hash Table with a Min-Heap"
  ],
  "correctOption": "D",
  "explanation": "A hash table allows for O(1) average-case insertion and deletion.  A min-heap tracks the minimum in O(1) time.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685648"
  },
  "question": "A B-tree of order m is designed to optimize disk access. What is the maximum number of children a node in a B-tree of order 5 can have?",
  "options": [
    "A. 4",
    "B. 5",
    "C. 6",
    "D. 10"
  ],
  "correctOption": "C",
  "explanation": "A B-tree node of order m can have a maximum of m children.  Therefore, a B-tree of order 5 can have a maximum of 5 children.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685646"
  },
  "question": "What is the time complexity of finding the kth smallest element in a min-heap of size n using a standard heap algorithm?",
  "options": [
    "A. O(n)",
    "B. O(k log n)",
    "C. O(n log k)",
    "D. O(log n)"
  ],
  "correctOption": "B",
  "explanation": "Extracting the kth smallest element requires k extract-min operations, each taking O(log n) time in a min-heap.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564a"
  },
  "question": "In a Trie data structure used for efficient string searching, how are prefixes handled to optimize search time?",
  "options": [
    "A.  Using linked lists to store prefixes.",
    "B. Using a separate hash table for prefixes.",
    "C.  Storing prefixes at the nodes of the Trie.",
    "D. Prefixes are not explicitly stored; only suffixes are."
  ],
  "correctOption": "C",
  "explanation": "Trie nodes store prefixes, allowing efficient search by traversing down the tree based on matching characters.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564b"
  },
  "question": "What is the worst-case time complexity for finding the closest pair of points in a two-dimensional plane using a divide-and-conquer approach?",
  "options": [
    "A. O(n log n)",
    "B. O(n^2)",
    "C. O(n log^2 n)",
    "D. O(n)"
  ],
  "correctOption": "A",
  "explanation": "The divide-and-conquer algorithm for closest pair of points achieves O(n log n) worst-case time complexity.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564c"
  },
  "question": "What data structure is typically used to implement Dijkstra's algorithm for finding the shortest path in a graph?",
  "options": [
    "A. Stack",
    "B. Queue",
    "C. Priority Queue",
    "D. Binary Search Tree"
  ],
  "correctOption": "C",
  "explanation": "A priority queue efficiently manages vertices based on their distances from the source, allowing for selection of the vertex with the smallest distance at each step.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564d"
  },
  "question": "Given a self-balancing AVL tree with n nodes, what is the maximum height of the tree?",
  "options": [
    "A. n",
    "B. log n",
    "C. 1.44 log n",
    "D. n log n"
  ],
  "correctOption": "C",
  "explanation": "The height of an AVL tree is guaranteed to be less than or equal to 1.44 log n, due to its balancing properties.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564e"
  },
  "question": "Which data structure is best suited for representing a sparse matrix where most of the elements are zero?",
  "options": [
    "A. Adjacency Matrix",
    "B. Adjacency List",
    "C. Compressed Sparse Row (CSR) format",
    "D. Dense Array"
  ],
  "correctOption": "C",
  "explanation": "CSR format efficiently stores only the non-zero elements, significantly reducing memory usage compared to representing the entire matrix.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d68565d"
  },
  "question": "Which data structure is most efficient for implementing a LRU (Least Recently Used) cache?",
  "options": [
    "A. Binary Search Tree",
    "B. Singly Linked List",
    "C. Doubly Linked List with a Hash Map",
    "D. Heap"
  ],
  "correctOption": "C",
  "explanation": "A doubly linked list maintains order of access, while a hash map provides O(1) lookup for quick eviction of least recently used items.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d68565e"
  },
  "question": "You need to implement a data structure that supports efficient insertion, deletion, and retrieval of elements based on their priority. Which data structure would be the most suitable?",
  "options": [
    "A. Queue",
    "B. Stack",
    "C. Binary Search Tree",
    "D. Priority Queue (Heap)"
  ],
  "correctOption": "D",
  "explanation": "Priority Queues, typically implemented as heaps, provide O(log n) time complexity for insertion, deletion, and retrieval of the highest-priority element.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685661"
  },
  "question": "Which data structure is best suited for representing a hierarchical relationship between data, such as a file system or an organizational chart?",
  "options": [
    "A. Array",
    "B. Stack",
    "C. Queue",
    "D. Tree"
  ],
  "correctOption": "D",
  "explanation": "Trees naturally model hierarchical relationships with parent-child nodes, allowing efficient traversal and manipulation of the hierarchical structure.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685662"
  },
  "question": "Explain the difference between a trie and a hash table, considering their efficiency for prefix searches?",
  "options": [
    "A. Both offer O(1) prefix search time complexity.",
    "B. Hash tables are more efficient for prefix searches than tries.",
    "C. Tries are more efficient for prefix searches than hash tables.",
    "D.  Neither is efficient for prefix searches."
  ],
  "correctOption": "C",
  "explanation": "Tries allow for efficient prefix searching in O(m) time where m is the length of the prefix, while hash tables require iterating through all keys.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685660"
  },
  "question": "What is the time complexity of searching for an element in a balanced AVL tree?",
  "options": [
    "A. O(n)",
    "B. O(log n)",
    "C. O(n^2)",
    "D. O(1)"
  ],
  "correctOption": "B",
  "explanation": "Balanced AVL trees maintain a logarithmic height, resulting in O(log n) time complexity for search, insertion, and deletion operations.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d68565f"
  },
  "question": "Consider a scenario where you need to store and retrieve data based on a key-value pair, but you also need to maintain the order of insertion. What data structure would best suit this need?",
  "options": [
    "A. Hash Table",
    "B. Ordered Array",
    "C. Linked List",
    "D. Ordered Map (e.g., TreeMap in Java)"
  ],
  "correctOption": "D",
  "explanation": "Ordered Maps maintain key-value pairs while preserving the insertion order, providing efficient retrieval by key and ordered traversal.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685663"
  },
  "question": "In graph traversal algorithms, which algorithm explores the graph by prioritizing breadth before depth?",
  "options": [
    "A. Depth-First Search (DFS)",
    "B. Breadth-First Search (BFS)",
    "C. Dijkstra's Algorithm",
    "D. A* Search"
  ],
  "correctOption": "B",
  "explanation": "Breadth-First Search (BFS) uses a queue to visit all neighbors of a node before moving to the next level, ensuring breadth-first exploration.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685666"
  },
  "question": "You need to design a system that efficiently manages a large number of concurrent requests.  Which data structure could efficiently handle this concurrent access to shared resources?",
  "options": [
    "A. Simple Linked List",
    "B. Concurrent Hash Map",
    "C. Single Stack",
    "D. Unordered Array"
  ],
  "correctOption": "B",
  "explanation": "Concurrent hash maps are designed to handle multiple threads accessing and modifying the data structure concurrently without causing race conditions or data corruption.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685665"
  },
  "question": "Which data structure is particularly well-suited for implementing an undo/redo functionality in a text editor?",
  "options": [
    "A. Queue",
    "B. Stack",
    "C. Heap",
    "D. Trie"
  ],
  "correctOption": "B",
  "explanation": "Stacks' LIFO (Last-In, First-Out) nature makes them ideal for implementing undo/redo, as the most recent actions are undone/redone first.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685664"
  },
  "question": "What is the primary advantage of using a self-balancing binary search tree (like AVL or Red-Black) over a regular binary search tree?",
  "options": [
    "A. Faster insertion.",
    "B. Guaranteed logarithmic time complexity for all operations.",
    "C. Lower memory consumption.",
    "D. Ability to store duplicate keys."
  ],
  "correctOption": "B",
  "explanation": "Self-balancing trees guarantee logarithmic time complexity for search, insertion, and deletion, unlike regular BSTs which can degrade to linear time in worst-case scenarios.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685675"
  },
  "question": "Which algorithm is best suited for searching a sorted array?",
  "options": [
    "Linear Search",
    "Bubble Sort",
    "Binary Search",
    "Merge Sort"
  ],
  "correctOption": "C",
  "explanation": "Binary search efficiently searches a sorted array by repeatedly dividing the search interval in half.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685676"
  },
  "question": "What is the time complexity of a well-implemented quick sort in the average case?",
  "options": [
    "O(n)",
    "O(n log n)",
    "O(n^2)",
    "O(log n)"
  ],
  "correctOption": "B",
  "explanation": "Quick sort's average time complexity is O(n log n), while its worst-case is O(n^2).",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685677"
  },
  "question": "Which data structure is commonly used to implement a breadth-first search (BFS)?",
  "options": [
    "Stack",
    "Queue",
    "Heap",
    "Linked List"
  ],
  "correctOption": "B",
  "explanation": "A queue is used in BFS to maintain the order of nodes to be visited, ensuring a level-by-level traversal.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685678"
  },
  "question": "What does the term 'greedy algorithm' refer to?",
  "options": [
    "An algorithm that always makes the locally optimal choice.",
    "An algorithm that uses dynamic programming.",
    "An algorithm that guarantees the globally optimal solution.",
    "An algorithm that uses backtracking."
  ],
  "correctOption": "A",
  "explanation": "Greedy algorithms make locally optimal choices at each step, hoping to find a globally optimal solution, but not guaranteeing it.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567a"
  },
  "question": "What is the primary difference between a recursive and an iterative algorithm?",
  "options": [
    "Recursive algorithms use loops; iterative algorithms use function calls.",
    "Recursive algorithms use function calls; iterative algorithms use loops.",
    "Recursive algorithms are always faster.",
    "Iterative algorithms always use less memory."
  ],
  "correctOption": "B",
  "explanation": "Recursive algorithms solve a problem by breaking it down into smaller, self-similar subproblems, using function calls; iterative algorithms use loops.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685679"
  },
  "question": "In graph algorithms, Dijkstra's algorithm is used to find:",
  "options": [
    "Shortest paths between all pairs of nodes",
    "A minimum spanning tree",
    "Strongly connected components",
    "The shortest path from a single source node to all other nodes"
  ],
  "correctOption": "D",
  "explanation": "Dijkstra's algorithm efficiently computes the shortest paths from a single source node to all other reachable nodes in a weighted graph.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567b"
  },
  "question": "Which algorithm is known for its efficiency in finding the kth smallest element in an unsorted array?",
  "options": [
    "Merge Sort",
    "Quick Sort",
    "Heap Sort",
    "Selection Algorithm (like Quickselect)"
  ],
  "correctOption": "D",
  "explanation": "Selection algorithms, such as Quickselect, are designed to efficiently find the kth smallest (or largest) element without fully sorting the array.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567d"
  },
  "question": "Dynamic programming optimizes solutions by:",
  "options": [
    "Dividing a problem into independent subproblems.",
    "Making locally optimal choices at each step.",
    "Storing and reusing solutions to overlapping subproblems.",
    "Using backtracking to explore all possible solutions."
  ],
  "correctOption": "C",
  "explanation": "Dynamic programming avoids redundant computations by storing and reusing solutions to common subproblems.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567e"
  },
  "question": "The traveling salesman problem (TSP) is an example of which type of problem?",
  "options": [
    "Greedy problem",
    "Dynamic Programming problem",
    "NP-hard problem",
    "Linear Programming problem"
  ],
  "correctOption": "C",
  "explanation": "The TSP is a classic example of an NP-hard problem, meaning there's no known polynomial-time algorithm to solve it optimally for all instances.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567c"
  },
  "question": "A graph with cycles is called:",
  "options": [
    "Acyclic",
    "Directed",
    "Undirected",
    "Cyclic"
  ],
  "correctOption": "D",
  "explanation": "A cyclic graph contains at least one cycle, a path that starts and ends at the same node.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d68568e"
  },
  "question": "What is the primary advantage of using a Fibonacci heap over a binary heap in Dijkstra's algorithm?",
  "options": [
    "A. Faster node deletion.",
    "B. Better space complexity.",
    "C. Simpler implementation.",
    "D.  Support for decrease-key operation in amortized O(1) time."
  ],
  "correctOption": "D",
  "explanation": "Fibonacci heaps provide amortized O(1) decrease-key, crucial for Dijkstra's efficiency on sparse graphs, unlike binary heaps' O(log n).",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d68568d"
  },
  "question": "Which of the following statements is TRUE regarding the time complexity of finding the kth smallest element in an unsorted array using QuickSelect?",
  "options": [
    "A. Always O(n log n)",
    "B. Always O(n)",
    "C. Average case O(n), worst case O(n^2)",
    "D. Average case O(n log n), worst case O(n^2)"
  ],
  "correctOption": "C",
  "explanation": "QuickSelect's average-case time complexity is O(n), but a poor pivot selection can lead to a worst-case O(n^2) scenario.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685690"
  },
  "question": "Which algorithm uses dynamic programming to find the longest common subsequence (LCS) of two sequences?",
  "options": [
    "A. Greedy algorithm",
    "B.  Merge sort",
    "C.  Needleman-Wunsch algorithm",
    "D.  KMP algorithm"
  ],
  "correctOption": "C",
  "explanation": "The Needleman-Wunsch algorithm employs dynamic programming to build an optimal alignment matrix and efficiently determine the LCS.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d68568f"
  },
  "question": "Given a directed acyclic graph (DAG), which algorithm is most suitable for finding the shortest path from a single source vertex to all other vertices?",
  "options": [
    "A. Bellman-Ford algorithm",
    "B. Dijkstra's algorithm",
    "C. Topological sort followed by a single-pass relaxation",
    "D. Floyd-Warshall algorithm"
  ],
  "correctOption": "C",
  "explanation": "Topological sort orders the vertices; a single pass then suffices for shortest path calculation due to the acyclic nature, unlike other algorithms' iterative approaches.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685691"
  },
  "question": "Consider a problem that exhibits optimal substructure and overlapping subproblems. Which algorithmic paradigm is best suited to solve it?",
  "options": [
    "A. Divide and Conquer",
    "B. Greedy approach",
    "C. Dynamic Programming",
    "D. Backtracking"
  ],
  "correctOption": "C",
  "explanation": "Dynamic programming excels at problems with optimal substructure (optimal solution built from optimal subsolutions) and overlapping subproblems (repetitive subcomputations).",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685692"
  },
  "question": "What is the primary difference between a heuristic and an admissible heuristic in A* search?",
  "options": [
    "A. A heuristic is always admissible.",
    "B. An admissible heuristic never overestimates the cost to reach the goal.",
    "C. An admissible heuristic is always more computationally expensive.",
    "D. Heuristics are used in A*, but admissible heuristics are only used in Dijkstra's algorithm."
  ],
  "correctOption": "B",
  "explanation": "An admissible heuristic guarantees that the estimated cost to reach the goal is never greater than the actual cost, ensuring A* finds the optimal solution.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685693"
  },
  "question": "In the context of NP-completeness, which statement is accurate regarding the relationship between P and NP?",
  "options": [
    "A. P = NP has been proven true.",
    "B. P = NP has been proven false.",
    "C.  It's currently unknown whether P = NP or P ≠ NP.",
    "D.  NP problems are always solvable in polynomial time."
  ],
  "correctOption": "C",
  "explanation": "The P versus NP problem is a major unsolved problem in computer science. Whether polynomial-time solutions exist for all NP problems is currently unknown.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685695"
  },
  "question": "What is the primary purpose of amortized analysis in algorithm analysis?",
  "options": [
    "A. To determine the average-case time complexity.",
    "B. To analyze the worst-case time complexity of a single operation.",
    "C. To analyze the average time complexity of a sequence of operations.",
    "D. To determine the space complexity of an algorithm."
  ],
  "correctOption": "C",
  "explanation": "Amortized analysis considers the average time complexity over a sequence of operations, even if individual operations might have high complexity, providing a more realistic performance picture.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685694"
  },
  "question": "Which algorithm efficiently solves the all-pairs shortest path problem in a weighted directed graph with no negative cycles?",
  "options": [
    "A. Breadth-First Search",
    "B. Depth-First Search",
    "C. Floyd-Warshall algorithm",
    "D. Prim's algorithm"
  ],
  "correctOption": "C",
  "explanation": "The Floyd-Warshall algorithm uses dynamic programming to compute shortest paths between all pairs of vertices in a graph, handling positive and negative weights (excluding negative cycles).",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685696"
  },
  "question": "Which data structure is most commonly used to implement a priority queue efficiently for algorithms like Dijkstra's and Prim's?",
  "options": [
    "A.  Linked List",
    "B.  Array",
    "C.  Binary Heap",
    "D.  Hash Table"
  ],
  "correctOption": "C",
  "explanation": "Binary heaps efficiently support the priority queue operations (insertion, deletion of minimum element) required for Dijkstra's and Prim's algorithms with logarithmic time complexity.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856a5"
  },
  "question": "Which of the following statements is TRUE regarding the time complexity of finding the kth smallest element in an unsorted array using QuickSelect?",
  "options": [
    "A. Always O(n), regardless of the pivot selection.",
    "B.  Worst-case O(n^2), but average-case O(n).",
    "C. Always O(n log n), due to inherent sorting.",
    "D.  Best-case O(n), worst-case O(n log n)."
  ],
  "correctOption": "B",
  "explanation": "QuickSelect's average-case time complexity is O(n), but a poor pivot selection can lead to a worst-case O(n^2) scenario. It doesn't inherently sort the entire array.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856a7"
  },
  "question": "What is the primary advantage of using a Fibonacci heap in Dijkstra's algorithm compared to a binary heap?",
  "options": [
    "A. Reduced space complexity.",
    "B. Improved worst-case time complexity for decrease-key operations.",
    "C.  Simpler implementation.",
    "D. Better performance for graphs with many edges."
  ],
  "correctOption": "B",
  "explanation": "Fibonacci heaps offer amortized O(1) time for decrease-key operations, improving the overall performance of Dijkstra's algorithm, especially in dense graphs.  Binary heaps have O(log n) for decrease-key.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856ad"
  },
  "question": "In the context of NP-completeness, which statement is TRUE?",
  "options": [
    "A. All NP problems are also P problems.",
    "B. If a problem is NP-complete, it can always be solved in polynomial time.",
    "C.  If P=NP, then every NP-complete problem is solvable in polynomial time.",
    "D. NP-complete problems are always easier to solve than NP-hard problems."
  ],
  "correctOption": "C",
  "explanation": "If P=NP (a major unsolved problem in computer science), it would imply that all problems in NP, including NP-complete problems, are solvable in polynomial time.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856a9"
  },
  "question": "You are given a large dataset and need to find frequent itemsets.  Which algorithm is best suited for this task, considering efficiency and scalability?",
  "options": [
    "A. Breadth-First Search",
    "B. Apriori Algorithm",
    "C. Depth-First Search",
    "D. Kruskal's Algorithm"
  ],
  "correctOption": "B",
  "explanation": "The Apriori algorithm efficiently finds frequent itemsets by using the property that if an itemset is infrequent, then all of its supersets are also infrequent. It's widely used for large datasets.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856a6"
  },
  "question": "Given a graph represented by an adjacency matrix, which algorithm would be MOST efficient for finding the shortest path between all pairs of vertices?",
  "options": [
    "A. Dijkstra's Algorithm",
    "B. Bellman-Ford Algorithm",
    "C. Floyd-Warshall Algorithm",
    "D. Prim's Algorithm"
  ],
  "correctOption": "C",
  "explanation": "Floyd-Warshall efficiently solves the all-pairs shortest path problem in O(V^3) time, where V is the number of vertices.  Dijkstra's is single-source, Bellman-Ford handles negative weights but is slower, and Prim's is for minimum spanning trees.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856ab"
  },
  "question": "Which algorithm is best suited for finding the strongly connected components in a directed graph?",
  "options": [
    "A. Dijkstra's Algorithm",
    "B. Topological Sort",
    "C. Kosaraju's Algorithm",
    "D. Prim's Algorithm"
  ],
  "correctOption": "C",
  "explanation": "Kosaraju's algorithm (or Tarjan's algorithm, another efficient option) is specifically designed for finding strongly connected components in a directed graph using Depth-First Search and graph reversal.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856aa"
  },
  "question": "What is the primary difference between a heuristic and an admissible heuristic in A* search?",
  "options": [
    "A. Heuristics are deterministic, admissible heuristics are probabilistic.",
    "B. Admissible heuristics never overestimate the cost to reach the goal.",
    "C. Heuristics guide the search, admissible heuristics prune the search space.",
    "D. Heuristics are used in informed search, admissible heuristics are used in uninformed search."
  ],
  "correctOption": "B",
  "explanation": "An admissible heuristic is one that never overestimates the actual cost to reach the goal. This guarantees that A* search will find the optimal solution if one exists.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856ae"
  },
  "question": "How does the Master Theorem help analyze the time complexity of divide-and-conquer algorithms?",
  "options": [
    "A. By recursively solving the recurrence relation.",
    "B. By providing a closed-form solution for specific recurrence relations.",
    "C. By analyzing the base case of the recursion.",
    "D. By approximating the complexity using experimental data."
  ],
  "correctOption": "B",
  "explanation": "The Master Theorem provides a direct formula to determine the time complexity of divide-and-conquer algorithms whose recurrence relations fit a specific pattern.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856ac"
  },
  "question": "Consider the problem of finding the maximum flow in a network.  Which algorithm provides an optimal solution but might not be the most efficient for very large graphs?",
  "options": [
    "A. Ford-Fulkerson Algorithm",
    "B. Edmonds-Karp Algorithm",
    "C. Dinic's Algorithm",
    "D. Push-Relabel Algorithm"
  ],
  "correctOption": "A",
  "explanation": "The Ford-Fulkerson algorithm guarantees finding the maximum flow but its runtime depends on the augmenting path selection.  Edmonds-Karp, Dinic's, and Push-Relabel offer better performance guarantees.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856b8"
  },
  "question": "Which SQL keyword is used to select data from a database?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "A",
  "explanation": "The SELECT statement is fundamental in SQL for retrieving data.  Other keywords are used for modifying data.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856bb"
  },
  "question": "Which clause is used to filter records in a SQL SELECT statement?",
  "options": [
    "WHERE",
    "FROM",
    "GROUP BY",
    "ORDER BY"
  ],
  "correctOption": "A",
  "explanation": "The WHERE clause specifies conditions to filter the results returned by SELECT.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856ba"
  },
  "question": "Which SQL command is used to add new data into a table?",
  "options": [
    "SELECT",
    "INSERT INTO",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "B",
  "explanation": "INSERT INTO is used to insert new rows into an existing table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856be"
  },
  "question": "Which SQL command is used to delete data from a table?",
  "options": [
    "SELECT",
    "INSERT INTO",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "D",
  "explanation": "DELETE removes rows from a table based on specified criteria.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856bc"
  },
  "question": "What does the asterisk (*) represent in a SELECT statement?",
  "options": [
    "A specific column",
    "All columns",
    "No columns",
    "The table name"
  ],
  "correctOption": "B",
  "explanation": "Using * in SELECT selects all columns from the specified table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856bd"
  },
  "question": "Which SQL command is used to modify existing data in a table?",
  "options": [
    "SELECT",
    "INSERT INTO",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "C",
  "explanation": "The UPDATE statement alters existing rows within a table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856b9"
  },
  "question": "What does SQL stand for?",
  "options": [
    "Structured Query Language",
    "Simple Query Language",
    "Statistical Query Language",
    "Standard Query Language"
  ],
  "correctOption": "A",
  "explanation": "SQL's full name is Structured Query Language, a language for managing and manipulating databases.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856bf"
  },
  "question": "The command `SELECT COUNT(*) FROM employees;` will return what?",
  "options": [
    "The names of all employees",
    "The number of employees",
    "The salary of all employees",
    "The employee IDs"
  ],
  "correctOption": "B",
  "explanation": "COUNT(*) counts all rows in the specified table (employees in this case).",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856c0"
  },
  "question": "Which clause orders the results of a SELECT query?",
  "options": [
    "WHERE",
    "FROM",
    "GROUP BY",
    "ORDER BY"
  ],
  "correctOption": "D",
  "explanation": "ORDER BY sorts the result set according to the specified column(s).",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856c1"
  },
  "question": "What is a primary key in a database table?",
  "options": [
    "A column that can contain NULL values",
    "A column that can contain duplicate values",
    "A column that uniquely identifies each row",
    "A column that is not essential for the table"
  ],
  "correctOption": "C",
  "explanation": "A primary key is a unique identifier for each record within a database table ensuring data integrity.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d5"
  },
  "question": "What does ACID stand for in the context of database transactions?",
  "options": [
    "Atomic, Consistent, Isolated, Durable",
    "Accurate, Consistent, Immediate, Dependable",
    "Atomic, Complete, Independent, Dependable",
    "Accurate, Consistent, Isolated, Durable"
  ],
  "correctOption": "A",
  "explanation": "ACID properties guarantee reliable database transactions: Atomicity, Consistency, Isolation, and Durability.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d0"
  },
  "question": "Which database normalization form eliminates redundant data within a single table by ensuring that all attributes depend only on the primary key?",
  "options": [
    "1NF",
    "2NF",
    "3NF",
    "BCNF"
  ],
  "correctOption": "B",
  "explanation": "2NF addresses redundancy by removing transitive dependencies.  Attributes should depend directly on the primary key, not on other non-key attributes.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d3"
  },
  "question": "What is the purpose of an index in a database?",
  "options": [
    "To encrypt data for security",
    "To physically sort the data in a table",
    "To speed up data retrieval",
    "To ensure data integrity"
  ],
  "correctOption": "C",
  "explanation": "Indexes create data structures that speed up searches by reducing the need to scan the entire table.  They work like an index in a book.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d4"
  },
  "question": "Which of the following is NOT a characteristic of a well-designed database?",
  "options": [
    "Data redundancy is minimized",
    "Data consistency is maintained",
    "Data is easily accessible",
    "Data is frequently duplicated for backup"
  ],
  "correctOption": "D",
  "explanation": "Data duplication should be avoided to maintain data consistency and integrity. Redundancy leads to inconsistencies and update anomalies.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d2"
  },
  "question": "A database is in Boyce-Codd Normal Form (BCNF) if it is in 3NF and which additional condition is met?",
  "options": [
    "Every non-key attribute is functionally dependent on the entire primary key.",
    "Every determinant is a candidate key.",
    "There are no transitive dependencies.",
    "All attributes are atomic."
  ],
  "correctOption": "B",
  "explanation": "BCNF is a stricter form than 3NF.  It requires that every determinant (attribute that determines other attributes) must be a candidate key.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d1"
  },
  "question": "What is a foreign key used for in database design?",
  "options": [
    "To uniquely identify each record in a table",
    "To establish a relationship between two tables",
    "To enforce data types within a column",
    "To index a table for faster searching"
  ],
  "correctOption": "B",
  "explanation": "A foreign key creates a link between tables, referencing the primary key of a related table. This enforces referential integrity.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d7"
  },
  "question": "What is the primary difference between a clustered index and a non-clustered index?",
  "options": [
    "Clustered indexes sort data physically; non-clustered indexes don't.",
    "Clustered indexes are faster; non-clustered indexes are slower.",
    "Clustered indexes are used for smaller tables; non-clustered for larger tables.",
    "Clustered indexes use B+ trees; non-clustered indexes use hash tables."
  ],
  "correctOption": "A",
  "explanation": "A clustered index dictates the physical order of data rows; a non-clustered index provides a separate lookup structure without changing data order.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d9"
  },
  "question": "What is a disadvantage of denormalization in database design?",
  "options": [
    "Improved query performance",
    "Reduced data redundancy",
    "Simplified data model",
    "Increased data inconsistency"
  ],
  "correctOption": "D",
  "explanation": "Denormalization introduces redundancy, which can lead to inconsistencies when updating data in multiple places.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d6"
  },
  "question": "You need to design a database for a library system. Which of the following relationships would likely be represented using a many-to-many relationship?",
  "options": [
    "Books to Authors",
    "Books to Members",
    "Members to Loans",
    "Authors to Publishers"
  ],
  "correctOption": "A",
  "explanation": "A book can have multiple authors, and an author can write multiple books.  This requires a junction table to resolve the many-to-many relationship.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d8"
  },
  "question": "In database design, what is a data warehouse primarily used for?",
  "options": [
    "Online transaction processing (OLTP)",
    "Online analytical processing (OLAP)",
    "Storing temporary data",
    "Managing database security"
  ],
  "correctOption": "B",
  "explanation": "Data warehouses are designed for analytical processing, enabling complex queries and reporting on historical data. OLTP focuses on transactional operations.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856e8"
  },
  "question": "Which of the following is NOT a key characteristic of NoSQL databases?",
  "options": [
    "Schema-less design",
    "Horizontal scalability",
    "ACID properties",
    "High availability"
  ],
  "correctOption": "C",
  "explanation": "While some NoSQL databases offer ACID-like properties, it's not a defining characteristic.  Most prioritize scalability and availability over strict ACID compliance.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ea"
  },
  "question": "What type of NoSQL database is best suited for managing large volumes of time-series data, like sensor readings?",
  "options": [
    "Key-value store",
    "Graph database",
    "Column-family database",
    "Document database"
  ],
  "correctOption": "C",
  "explanation": "Column-family databases are optimized for storing and querying data with many columns, ideal for time-series data where each column represents a time point.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ef"
  },
  "question": "A graph database is particularly well-suited for modeling which type of data?",
  "options": [
    "Structured data with well-defined relationships.",
    "Unstructured textual data like documents and emails.",
    "Time-series data with regular intervals.",
    "Hierarchical data, such as organizational charts or file systems."
  ],
  "correctOption": "A",
  "explanation": "Graph databases excel at representing entities (nodes) and their relationships (edges), making them suitable for social networks, recommendation systems, and knowledge graphs.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856e9"
  },
  "question": "What is the primary advantage of using a document database like MongoDB?",
  "options": [
    "Strict schema enforcement for data integrity",
    "High transaction throughput for financial applications",
    "Flexible schema allowing for evolving data structures",
    "Excellent support for relational joins between data"
  ],
  "correctOption": "C",
  "explanation": "Document databases excel at handling semi-structured or unstructured data, adapting easily to changing data requirements without schema migrations.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ed"
  },
  "question": "CAP theorem states that a distributed database system can only satisfy two out of three properties: Consistency, Availability, and Partition tolerance.  Which property is often sacrificed in NoSQL systems designed for high availability?",
  "options": [
    "Consistency",
    "Availability",
    "Partition tolerance",
    "Scalability"
  ],
  "correctOption": "A",
  "explanation": "To achieve high availability in a distributed system (especially across network partitions), some degree of consistency is often relaxed.  This is often the tradeoff in NoSQL systems.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856eb"
  },
  "question": "In a key-value store, what is the key's role?",
  "options": [
    "It's a complex data structure containing multiple fields.",
    "It uniquely identifies a value within the database.",
    "It is an index used for efficient querying across multiple values.",
    "It represents a relationship between two or more values."
  ],
  "correctOption": "B",
  "explanation": "The key serves as a unique identifier to quickly retrieve its associated value.  Think of it like a dictionary where the key is the word and the value is its definition.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ec"
  },
  "question": "Which consistency model prioritizes availability over strong consistency in distributed NoSQL systems?",
  "options": [
    "Strong consistency",
    "Eventual consistency",
    "Read-your-writes consistency",
    "Strict serializability"
  ],
  "correctOption": "B",
  "explanation": "Eventual consistency ensures that data will eventually be consistent across all nodes, but allows for temporary inconsistencies to maintain high availability.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ee"
  },
  "question": "What is sharding in the context of NoSQL databases?",
  "options": [
    "A technique for compressing data to reduce storage costs.",
    "A method for replicating data across multiple servers for redundancy.",
    "A strategy for distributing data across multiple servers to improve scalability.",
    "A process for encrypting sensitive data stored in the database."
  ],
  "correctOption": "C",
  "explanation": "Sharding horizontally partitions a database across multiple servers, improving scalability by distributing the load and data.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856f0"
  },
  "question": "Which NoSQL database is known for its use in Google's BigTable?",
  "options": [
    "MongoDB",
    "Cassandra",
    "Redis",
    "HBase"
  ],
  "correctOption": "D",
  "explanation": "HBase is a widely used, open-source, distributed, versioned, column-oriented store.  It's inspired by Google's BigTable.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856f1"
  },
  "question": "You need a database for a social media application where relationships between users are crucial. Which NoSQL database type would be most appropriate?",
  "options": [
    "Key-value store",
    "Document database",
    "Column-family database",
    "Graph database"
  ],
  "correctOption": "D",
  "explanation": "The relational nature of a social network—users following other users—maps perfectly to the nodes and edges of a graph database.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685700"
  },
  "question": "Which of the following is NOT a core function of an operating system?",
  "options": [
    "Memory management",
    "Process management",
    "Data encryption",
    "File system management"
  ],
  "correctOption": "C",
  "explanation": "While OSes may *interface* with encryption, it's not a core function like managing processes or memory.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685703"
  },
  "question": "What is the purpose of a page table in virtual memory management?",
  "options": [
    "To store the physical addresses of all memory locations",
    "To translate virtual addresses to physical addresses",
    "To manage the CPU registers",
    "To control access to the hard drive"
  ],
  "correctOption": "B",
  "explanation": "Page tables map virtual addresses used by processes to the corresponding physical addresses in RAM.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685702"
  },
  "question": "A deadlock situation requires which of the following conditions?",
  "options": [
    "Mutual exclusion, Hold and wait, No preemption, Circular wait",
    "Mutual exclusion, Hold and wait, Preemption, Circular wait",
    "Mutual exclusion, Release and wait, No preemption, Circular wait",
    "Mutual exclusion, Hold and wait, No preemption, Linear wait"
  ],
  "correctOption": "A",
  "explanation": "The four necessary conditions for deadlock are mutual exclusion, hold and wait, no preemption, and circular wait.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685701"
  },
  "question": "What scheduling algorithm prioritizes processes with the shortest expected burst time?",
  "options": [
    "FIFO",
    "SJF",
    "Round Robin",
    "Priority Scheduling"
  ],
  "correctOption": "B",
  "explanation": "Shortest Job First (SJF) aims to minimize average waiting time by prioritizing shorter processes.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685704"
  },
  "question": "Which file system is commonly used in Linux systems?",
  "options": [
    "NTFS",
    "FAT32",
    "ext4",
    "HFS+"
  ],
  "correctOption": "C",
  "explanation": "ext4 is a widely used journaling file system in Linux distributions.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685705"
  },
  "question": "What does a 'context switch' refer to in operating systems?",
  "options": [
    "Switching between different applications",
    "Switching between different users",
    "Switching between different processes",
    "Switching between different hardware devices"
  ],
  "correctOption": "C",
  "explanation": "A context switch involves saving the state of one process and loading the state of another, allowing the OS to switch between them.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685707"
  },
  "question": "What is a process control block (PCB)?",
  "options": [
    "A data structure containing information about a process",
    "A block of code that controls the CPU",
    "A type of memory management algorithm",
    "A method for preventing deadlocks"
  ],
  "correctOption": "A",
  "explanation": "The PCB holds crucial information about a running process, such as its ID, state, registers, and memory allocation.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685706"
  },
  "question": "Which type of memory is typically faster, but more expensive, than RAM?",
  "options": [
    "Hard drive storage",
    "Cache memory",
    "Virtual memory",
    "Secondary storage"
  ],
  "correctOption": "B",
  "explanation": "Cache memory is a small, fast memory that stores frequently accessed data for quicker retrieval.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685708"
  },
  "question": "What is a key difference between a thread and a process?",
  "options": [
    "Threads share the same memory space, while processes have separate memory spaces.",
    "Processes share the same memory space, while threads have separate memory spaces.",
    "Threads are always faster than processes.",
    "There is no significant difference between threads and processes."
  ],
  "correctOption": "A",
  "explanation": "Threads within a process share the same memory space, improving efficiency but also requiring careful synchronization.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685709"
  },
  "question": "Which of the following is a common method for handling I/O operations?",
  "options": [
    "Polling",
    "Interrupts",
    "Direct Memory Access (DMA)",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "All three options—polling, interrupts, and DMA—are used to manage Input/Output operations in various operating systems.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d685718"
  },
  "question": "Which scheduling algorithm is best suited for minimizing average waiting time in a real-time system with hard deadlines, and why?",
  "options": [
    "A. First-Come, First-Served (FCFS)",
    "B. Shortest Job First (SJF)",
    "C. Rate Monotonic Scheduling (RMS)",
    "D. Round Robin"
  ],
  "correctOption": "C",
  "explanation": "RMS guarantees schedulability for a set of periodic tasks if their utilization is below a certain threshold.  It's optimal for hard real-time systems.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571e"
  },
  "question": "Compare and contrast different approaches to process synchronization, such as semaphores, monitors, and message passing, highlighting their strengths and weaknesses in different contexts.",
  "options": [
    "A. All three are identical in functionality and performance.",
    "B. Semaphores offer simple low-level synchronization; monitors provide higher-level abstraction; message passing allows for communication between processes and is best for distributed systems.",
    "C. Monitors are faster than semaphores, which are faster than message passing.",
    "D. Semaphores are only useful for single-processor systems, while monitors and message passing are suitable for multiprocessor systems."
  ],
  "correctOption": "B",
  "explanation": "Each method offers different tradeoffs between simplicity, expressiveness, and suitability for diverse concurrency challenges. Semaphores are simple; monitors offer better structure; message passing is essential for distributed systems.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571b"
  },
  "question": "Describe the challenges in designing a distributed file system, particularly concerning consistency and data availability.  What are some common approaches to addressing these issues?",
  "options": [
    "A. No significant challenges exist in modern distributed file systems.",
    "B. Consistency and availability are mutually exclusive; choosing one necessitates sacrificing the other.",
    "C. Maintaining data consistency across multiple nodes and ensuring high availability in case of node failures are major challenges. Solutions include replication, quorum systems, and distributed consensus algorithms.",
    "D. The primary challenge is network latency; consistency and availability are easily managed."
  ],
  "correctOption": "C",
  "explanation": "Distributed file systems must handle concurrent access, network partitions, and node failures to maintain consistency and availability. Techniques like replication and consensus protocols are crucial for this.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571f"
  },
  "question": "Discuss the challenges of designing a real-time operating system (RTOS) and the key features that distinguish it from a general-purpose OS.",
  "options": [
    "A. RTOS design is no different from a general-purpose OS; all OS designs focus on identical features.",
    "B.  RTOS design faces challenges in predictability, determinism, and response times.  Key features include priority scheduling, minimal interrupt latency, and real-time task management.",
    "C. RTOS is only used in embedded systems and has no relevance to other OS categories.",
    "D. The main challenge of an RTOS is memory management; other features are less important."
  ],
  "correctOption": "B",
  "explanation": "RTOS prioritizes timely responses, unlike general-purpose OS.  This demands careful consideration of scheduling algorithms, interrupt handling, and resource allocation to guarantee deterministic behavior.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571d"
  },
  "question": "How does a demand paging system work, and what are the advantages and disadvantages compared to swapping?",
  "options": [
    "A. Demand paging loads entire processes into memory at once; swapping is more efficient.",
    "B. Demand paging loads pages only when needed; it reduces memory usage but can suffer from high latency on page faults, unlike swapping which involves less overhead but may have lower overall efficiency.",
    "C. Demand paging is slower than swapping; there are no advantages to demand paging.",
    "D. Both demand paging and swapping are obsolete; modern systems do not use either method."
  ],
  "correctOption": "B",
  "explanation": "Demand paging loads pages on demand, improving memory utilization. However, page faults can lead to significant overhead.  Swapping trades speed for reduced memory footprint.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d685720"
  },
  "question": "Explain how I/O buffering improves system performance. What are the different types of I/O buffering, and when would each be most appropriate?",
  "options": [
    "A. I/O buffering has no impact on system performance; it only adds overhead.",
    "B. I/O buffering reduces the frequency of I/O operations; types include single buffering, double buffering, and circular buffering, with each appropriate for various I/O patterns.",
    "C. I/O buffering increases the amount of data transferred; only single buffering is practical.",
    "D. I/O buffering is only used in network I/O, not for disk or other peripherals."
  ],
  "correctOption": "B",
  "explanation": "Buffering decouples the speed of I/O devices from the CPU, allowing for more efficient use of resources.  Different buffering techniques are suited to different I/O characteristics and speeds.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571a"
  },
  "question": "How does a virtual memory system handle a page fault, and what are the potential performance implications of different page replacement algorithms?",
  "options": [
    "A. It immediately terminates the process; performance is unaffected by page replacement.",
    "B. It retrieves the needed page from secondary storage; different algorithms (FIFO, LRU, etc.) have varying performance impacts on hit ratios and thrashing.",
    "C. It allocates a new page in RAM; performance is improved irrespective of the algorithm.",
    "D. It ignores the fault; performance is degraded only if the fault happens multiple times."
  ],
  "correctOption": "B",
  "explanation": "A page fault triggers the OS to fetch the missing page from disk. The choice of page replacement algorithm (like LRU or FIFO) significantly affects the frequency of page faults and overall system performance.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d685719"
  },
  "question": "Explain the difference between deadlock prevention and deadlock avoidance, providing specific examples of techniques used in each.",
  "options": [
    "A. Prevention avoids deadlocks by preventing the four necessary conditions; avoidance uses algorithms to ensure safe states.",
    "B. Avoidance is a more efficient method than prevention; prevention is only useful for simpler systems.",
    "C. Prevention uses algorithms to ensure safe states, whereas avoidance avoids deadlocks by preventing the four necessary conditions.",
    "D. There is no practical difference; both achieve the same result through different means."
  ],
  "correctOption": "A",
  "explanation": "Prevention (e.g., mutual exclusion breaking) stops deadlocks from occurring; avoidance (e.g., Banker's algorithm) allows them to be possible but ensures the system remains in a safe state.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571c"
  },
  "question": "Explain the concept of a kernel and its role in managing system resources.  Discuss the differences between monolithic and microkernels.",
  "options": [
    "A. The kernel is a simple program; monolithic and microkernels are functionally identical.",
    "B. The kernel is the core of the OS, managing hardware and software resources; monolithic kernels integrate all services, while microkernels provide minimal services and rely on user-space servers.",
    "C. The kernel is only responsible for memory management; monolithic and microkernels are differentiated by the amount of RAM they use.",
    "D. The kernel is irrelevant in modern operating systems; all functions are handled by user-space processes."
  ],
  "correctOption": "B",
  "explanation": "The kernel acts as an intermediary between hardware and software. Monolithic kernels are typically more efficient but less modular; microkernels prioritize modularity and security.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d685721"
  },
  "question": "Describe the various types of file system structures (e.g., FAT, NTFS, ext4) and their relative strengths and weaknesses in terms of performance, security, and scalability.",
  "options": [
    "A. All file systems are functionally identical.",
    "B. FAT is best for all applications; NTFS and ext4 are obsolete.",
    "C. Different file systems use different approaches to managing files on storage; their strengths vary based on their specific features; for instance, NTFS generally offers better security features compared to FAT, while ext4 often excels in performance and scalability for Linux systems.",
    "D. File systems are irrelevant to OS performance."
  ],
  "correctOption": "C",
  "explanation": "Each file system (FAT, NTFS, ext4, etc.) has its own trade-offs regarding performance, security, and scalability.  Choosing an appropriate file system depends on specific system requirements.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685731"
  },
  "question": "What is the purpose of encapsulation in object-oriented programming?",
  "options": [
    "Hiding internal implementation details",
    "Defining data types",
    "Creating abstract classes",
    "Managing memory allocation"
  ],
  "correctOption": "A",
  "explanation": "Encapsulation protects data integrity by bundling data and methods that operate on that data within a class, preventing direct access from outside.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685730"
  },
  "question": "Which OOP principle promotes code reusability through the creation of classes that serve as blueprints for objects?",
  "options": [
    "Abstraction",
    "Encapsulation",
    "Inheritance",
    "Polymorphism"
  ],
  "correctOption": "C",
  "explanation": "Inheritance allows classes to inherit properties and methods from parent classes, promoting reusability and reducing redundancy.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685736"
  },
  "question": "In the context of object-oriented programming, what is a 'constructor'?",
  "options": [
    "A method used to destroy an object.",
    "A special method used to initialize an object.",
    "A method used to copy an object.",
    "A type of data member in a class."
  ],
  "correctOption": "B",
  "explanation": "A constructor is a special method automatically called when an object of a class is created.  It is used to initialize the object's member variables.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685733"
  },
  "question": "Which design pattern allows a single class to interact with multiple subclasses without needing to know their specific class types?",
  "options": [
    "Singleton",
    "Factory",
    "Observer",
    "Strategy"
  ],
  "correctOption": "C",
  "explanation": "The Strategy pattern defines a family of algorithms, encapsulates each one as an object, and makes them interchangeable. The context uses the selected strategy without knowing its concrete type.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685732"
  },
  "question": "What is the difference between an abstract class and an interface?",
  "options": [
    "Abstract classes can have instance variables, interfaces cannot.",
    "Abstract classes can have concrete methods, interfaces cannot.",
    "Interfaces can have constructors, abstract classes cannot.",
    "There is no difference, they are interchangeable."
  ],
  "correctOption": "A",
  "explanation": "Abstract classes can contain both abstract and concrete methods and instance variables, while interfaces can only contain abstract methods (and constants since Java 8).",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685735"
  },
  "question": "Polymorphism allows objects of different classes to be treated as objects of a common type.  Which of the following is NOT a common way polymorphism is achieved?",
  "options": [
    "Method Overriding",
    "Method Overloading",
    "Interface Implementation",
    "Static Binding"
  ],
  "correctOption": "D",
  "explanation": "Static binding (or early binding) resolves method calls at compile time, whereas polymorphism typically relies on dynamic binding (or late binding) at runtime.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685734"
  },
  "question": "What is method overriding?",
  "options": [
    "Redefining a method in a subclass with the same signature",
    "Defining a method with multiple parameters",
    "Defining a method within a parent class only",
    "Creating a new method with a different name"
  ],
  "correctOption": "A",
  "explanation": "Method overriding allows a subclass to provide a specific implementation for a method that is already defined in its superclass.  It’s a key part of polymorphism.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685739"
  },
  "question": "What is the significance of the `this` keyword in object-oriented programming (e.g., in Java or C#)?",
  "options": [
    "It refers to the current instance of the class.",
    "It refers to the class itself.",
    "It refers to the parent class.",
    "It's a keyword used only for static methods."
  ],
  "correctOption": "A",
  "explanation": "The `this` keyword provides a reference to the current object within the class’s methods. It's crucial for disambiguating between instance variables and method parameters with the same name.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685737"
  },
  "question": "What does the term 'Abstraction' refer to in the context of OOP?",
  "options": [
    "The process of hiding complex implementation details.",
    "The process of creating multiple instances of a class.",
    "The process of inheriting properties from a parent class.",
    "The process of combining data and methods into a single unit."
  ],
  "correctOption": "A",
  "explanation": "Abstraction simplifies complex systems by providing a simplified view.  Users interact with essential features without needing to know the intricate internal workings.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685738"
  },
  "question": "Which of the following best describes the concept of 'coupling' in OOP?",
  "options": [
    "The level of dependence between classes.",
    "The level of cohesion within a class.",
    "The number of methods in a class.",
    "The number of classes in a project."
  ],
  "correctOption": "A",
  "explanation": "Coupling refers to the degree of interdependence between different modules (classes, functions, etc.). Low coupling is generally desirable for maintainability and reusability.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d685748"
  },
  "question": "What does SDLC stand for?",
  "options": [
    "Software Development Life Cycle",
    "System Development Life Cycle",
    "Software Design Life Cycle",
    "System Data Life Cycle"
  ],
  "correctOption": "B",
  "explanation": "SDLC stands for System Development Life Cycle.  It encompasses all stages of a system's development.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574c"
  },
  "question": "What is the purpose of testing in the SDLC?",
  "options": [
    "To deploy the software",
    "To identify and fix bugs",
    "To write documentation",
    "To gather requirements"
  ],
  "correctOption": "B",
  "explanation": "Testing aims to find and resolve defects in the software before it's released.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d685749"
  },
  "question": "Which phase in the SDLC involves gathering requirements from stakeholders?",
  "options": [
    "Testing",
    "Deployment",
    "Design",
    "Requirements Gathering"
  ],
  "correctOption": "D",
  "explanation": "The Requirements Gathering phase focuses on understanding the needs and expectations of the system's users.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574a"
  },
  "question": "What is a primary goal of the design phase in the SDLC?",
  "options": [
    "Writing code",
    "Testing the system",
    "Creating a blueprint of the system",
    "Deploying the system"
  ],
  "correctOption": "C",
  "explanation": "The design phase creates a detailed plan – a blueprint – of how the system will be built.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574b"
  },
  "question": "In which phase of the SDLC is the software actually built?",
  "options": [
    "Planning",
    "Design",
    "Implementation",
    "Testing"
  ],
  "correctOption": "C",
  "explanation": "The implementation phase involves the actual coding and development of the software.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574f"
  },
  "question": "Which model follows a sequential approach where each phase must be completed before the next begins?",
  "options": [
    "Agile",
    "Waterfall",
    "Spiral",
    "Prototyping"
  ],
  "correctOption": "B",
  "explanation": "The Waterfall model is a linear, sequential approach to SDLC.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d685750"
  },
  "question": "Which SDLC model is iterative and incremental, allowing for flexibility and changes?",
  "options": [
    "Waterfall",
    "Spiral",
    "Agile",
    "RAD"
  ],
  "correctOption": "C",
  "explanation": "Agile methodologies prioritize iterative development and collaboration.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d685751"
  },
  "question": "What is a key characteristic of the RAD (Rapid Application Development) model?",
  "options": [
    "Sequential phases",
    "Long development cycles",
    "Quick prototyping and user feedback",
    "Extensive documentation"
  ],
  "correctOption": "C",
  "explanation": "RAD emphasizes rapid prototyping and iterative development to quickly deliver functional software.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574d"
  },
  "question": "What typically happens during the deployment phase of the SDLC?",
  "options": [
    "Gathering user feedback",
    "Writing code",
    "Releasing the software to users",
    "Designing the system"
  ],
  "correctOption": "C",
  "explanation": "Deployment is the process of releasing the finished software to its intended users or environment.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574e"
  },
  "question": "What is maintenance in the context of the SDLC?",
  "options": [
    "Fixing bugs after release",
    "Planning the project",
    "Designing the database",
    "Writing user manuals"
  ],
  "correctOption": "A",
  "explanation": "Maintenance involves ongoing updates, bug fixes, and improvements after the software is released.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685760"
  },
  "question": "Which Agile framework emphasizes time-boxed iterations and daily stand-up meetings?",
  "options": [
    "Lean",
    "Kanban",
    "Scrum",
    "Crystal"
  ],
  "correctOption": "C",
  "explanation": "Scrum is known for its sprints (time-boxed iterations) and daily stand-up meetings for daily progress tracking.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685761"
  },
  "question": "What is the primary purpose of a Sprint Retrospective in Scrum?",
  "options": [
    "To plan the next sprint's work",
    "To review the sprint backlog",
    "To identify areas for improvement in the process",
    "To demonstrate working software to stakeholders"
  ],
  "correctOption": "C",
  "explanation": "The Sprint Retrospective focuses on inspecting and adapting the Scrum process to improve future sprints' effectiveness.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685762"
  },
  "question": "In Kanban, what does WIP limit stand for?",
  "options": [
    "Work In Progress limit",
    "Work Item Prioritization limit",
    "Work In Process log",
    "Work Item Progression limit"
  ],
  "correctOption": "A",
  "explanation": "WIP limit restricts the number of tasks in progress at any given time, promoting focus and reducing multitasking.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685763"
  },
  "question": "Which Agile principle emphasizes responding to change over following a plan?",
  "options": [
    "Embrace change",
    "Continuous improvement",
    "Customer collaboration",
    "Individuals and interactions"
  ],
  "correctOption": "A",
  "explanation": "The Agile Manifesto explicitly prioritizes responding to change over following a plan, highlighting adaptability.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685764"
  },
  "question": "What is a user story's typical format?",
  "options": [
    "Task: [Action]",
    "Use case: [Scenario]",
    "As a [role], I want [goal] so that [benefit]",
    "Requirement: [Description]"
  ],
  "correctOption": "C",
  "explanation": "The 'As a..., I want..., so that...' format provides context, goal, and benefit, making user stories clear and understandable.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685765"
  },
  "question": "What technique helps visualize the workflow and identify bottlenecks in a Kanban system?",
  "options": [
    "Sprint Planning",
    "Daily Stand-up",
    "Burn-down Chart",
    "Cumulative Flow Diagram"
  ],
  "correctOption": "D",
  "explanation": "A Cumulative Flow Diagram visually represents the workflow and helps pinpoint bottlenecks affecting throughput.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685767"
  },
  "question": "The concept of 'Definition of Done' (DoD) is crucial in which Agile framework?",
  "options": [
    "Kanban only",
    "Scrum only",
    "Both Scrum and Kanban",
    "Neither Scrum nor Kanban"
  ],
  "correctOption": "C",
  "explanation": "Both Scrum and Kanban benefit from a clear DoD to ensure consistency and quality of deliverables.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685768"
  },
  "question": "What does INVEST stand for in relation to user stories?",
  "options": [
    "Independent, Valuable, Estimable, Simple, Small, Testable",
    "Independent, Versatile, Efficient, Simple, Small, Testable",
    "Important, Valuable, Estimated, Small, Testable",
    "Independent, Valuable, Estimated, Simple, Small, Testable"
  ],
  "correctOption": "A",
  "explanation": "INVEST is a mnemonic for creating high-quality user stories that are easily manageable.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685766"
  },
  "question": "Which Agile practice involves regularly demonstrating working software to stakeholders?",
  "options": [
    "Sprint Review",
    "Daily Scrum",
    "Sprint Retrospective",
    "Planning Poker"
  ],
  "correctOption": "A",
  "explanation": "The Sprint Review is a formal event in Scrum where the team demonstrates the completed work to stakeholders.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685769"
  },
  "question": "Which of the following is NOT a core value of the Agile Manifesto?",
  "options": [
    "Responding to change over following a plan",
    "Working software over comprehensive documentation",
    "Customer collaboration over contract negotiation",
    "Processes and tools over individuals and interactions"
  ],
  "correctOption": "D",
  "explanation": "The Agile Manifesto values individuals and interactions over processes and tools; it prioritizes people and communication.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577a"
  },
  "question": "What does LAN stand for?",
  "options": [
    "Local Area Network",
    "Long Area Network",
    "Large Area Network",
    "Limited Area Network"
  ],
  "correctOption": "A",
  "explanation": "LAN refers to Local Area Network, a network covering a small geographical area.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577c"
  },
  "question": "Which device connects multiple devices on a network?",
  "options": [
    "Modem",
    "Router",
    "Switch",
    "Both Router and Switch"
  ],
  "correctOption": "D",
  "explanation": "Both routers and switches connect multiple devices, with routers focusing on routing between networks and switches handling connections within a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d685779"
  },
  "question": "Which of the following is NOT a type of network?",
  "options": [
    "LAN",
    "WAN",
    "MAN",
    "PAN"
  ],
  "correctOption": "C",
  "explanation": "While MAN (Metropolitan Area Network) exists, it's less frequently discussed at a beginner level compared to LAN, WAN, and PAN.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d685778"
  },
  "question": "What is a network?",
  "options": [
    "A single computer",
    "A collection of interconnected devices",
    "A type of software",
    "A specific website"
  ],
  "correctOption": "B",
  "explanation": "A network connects two or more devices to share resources and information.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577b"
  },
  "question": "What does WAN stand for?",
  "options": [
    "Wide Area Network",
    "Wireless Area Network",
    "World Area Network",
    "Web Area Network"
  ],
  "correctOption": "A",
  "explanation": "WAN stands for Wide Area Network, covering a large geographical area.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577e"
  },
  "question": "What does TCP/IP stand for?",
  "options": [
    "Transmission Control Protocol/Internet Protocol",
    "Transfer Control Protocol/Internet Protocol",
    "Transmission Control Protocol/Intranet Protocol",
    "Transfer Control Protocol/Intranet Protocol"
  ],
  "correctOption": "A",
  "explanation": "TCP/IP is the fundamental communication protocol suite for the internet.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d685780"
  },
  "question": "Which of these is a common wired network connection?",
  "options": [
    "Wi-Fi",
    "Bluetooth",
    "Ethernet",
    "Infrared"
  ],
  "correctOption": "C",
  "explanation": "Ethernet uses physical cables to connect devices to a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577d"
  },
  "question": "What is an IP address?",
  "options": [
    "A person's email address",
    "A unique address for a device on a network",
    "A website's name",
    "A password"
  ],
  "correctOption": "B",
  "explanation": "An IP address identifies a device on a network, allowing communication between devices.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577f"
  },
  "question": "What is a protocol?",
  "options": [
    "A type of computer",
    "A set of rules governing data transmission",
    "A type of software",
    "A type of hardware"
  ],
  "correctOption": "B",
  "explanation": "Protocols define the rules and standards for communication on a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d685781"
  },
  "question": "Which of these is a common wireless network connection?",
  "options": [
    "Coaxial Cable",
    "Fiber Optic Cable",
    "Wi-Fi",
    "DSL"
  ],
  "correctOption": "C",
  "explanation": "Wi-Fi is a common wireless technology for connecting devices to a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685790"
  },
  "question": "Which cryptographic algorithm is most vulnerable to known-plaintext attacks when implemented without proper padding schemes?",
  "options": [
    "AES-256",
    "RSA",
    "SHA-256",
    "DES"
  ],
  "correctOption": "B",
  "explanation": "RSA, particularly with insufficient padding, is highly susceptible to known-plaintext attacks which can reveal the private key.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685791"
  },
  "question": "A network is experiencing a high volume of SYN packets without corresponding ACK packets. What type of attack is likely occurring?",
  "options": [
    "DoS",
    "Man-in-the-middle",
    "SQL Injection",
    "Phishing"
  ],
  "correctOption": "A",
  "explanation": "This describes a SYN flood, a common Denial-of-Service (DoS) attack that exhausts server resources by overwhelming it with incomplete connection requests.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685793"
  },
  "question": "What protocol is primarily used for secure remote access to a network, typically employing public-key cryptography for authentication?",
  "options": [
    "FTP",
    "Telnet",
    "SSH",
    "HTTP"
  ],
  "correctOption": "C",
  "explanation": "SSH (Secure Shell) uses public-key cryptography for authentication and provides secure remote login capabilities over an unsecured network.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685795"
  },
  "question": "What is a honeypot and what is its primary purpose in a network security context?",
  "options": [
    "A type of firewall, B: A decoy system designed to lure and trap attackers, C: A type of intrusion detection system, D: A physical security device"
  ],
  "correctOption": "B",
  "explanation": "Honeypots are decoy systems designed to attract and trap attackers, allowing security analysts to study their techniques and gather intelligence.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685796"
  },
  "question": "What security mechanism is specifically designed to prevent unauthorized access to resources based on user roles and privileges?",
  "options": [
    "Firewall",
    "Intrusion Detection System (IDS)",
    "Access Control List (ACL)",
    "Virtual Private Network (VPN)"
  ],
  "correctOption": "C",
  "explanation": "Access Control Lists (ACLs) define which users or groups have permission to access specific resources or perform certain actions.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685794"
  },
  "question": "Explain the difference between symmetric and asymmetric encryption and provide a suitable example for each.",
  "options": [
    "A: Symmetric uses one key; Asymmetric uses two; Example: Symmetric - AES, Asymmetric - RSA. B: Symmetric uses two keys; Asymmetric uses one; Example: Symmetric - RSA, Asymmetric - AES. C: Symmetric uses two keys for encryption and decryption; Asymmetric uses one key for encryption and decryption; Example: Symmetric - DES, Asymmetric - SHA-256. D: Symmetric uses one key for encryption and decryption; Asymmetric uses different keys for encryption and decryption; Example: Symmetric - 3DES, Asymmetric - ECC"
  ],
  "correctOption": "A",
  "explanation": "Symmetric encryption uses the same key for encryption and decryption (e.g., AES). Asymmetric encryption uses a public key for encryption and a private key for decryption (e.g., RSA).",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685797"
  },
  "question": "Explain the concept of 'perfect forward secrecy' (PFS) and its importance in securing communications.",
  "options": [
    "A: The ability to restore data after a security breach, B: The process of securing data in transit, C: A cryptographic property ensuring that compromise of long-term secrets doesn't compromise past session keys, D: The authentication process using a single factor"
  ],
  "correctOption": "C",
  "explanation": "Perfect Forward Secrecy (PFS) ensures that even if a long-term key is compromised, past communications remain secure because session keys are independent.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685792"
  },
  "question": "What is the primary security benefit of implementing a multi-layered security approach (defense in depth)?",
  "options": [
    "Increased network speed",
    "Reduced hardware costs",
    "Improved user experience",
    "Enhanced resilience against attacks"
  ],
  "correctOption": "D",
  "explanation": "Defense in depth provides redundancy; if one layer fails, others will continue to protect the system.  It enhances resilience to attacks.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685799"
  },
  "question": "How can a digital signature be used to ensure both authenticity and non-repudiation of a digital document?",
  "options": [
    "A digital signature encrypts the document, ensuring only the recipient can decrypt it, B: A digital signature uses a hash function to create a unique fingerprint of the document, which is then encrypted with the sender's private key; this allows verification of origin and prevents denial of sending it. C: A digital signature adds a timestamp to the document, guaranteeing the authenticity of the date, D: A digital signature uses a symmetric encryption algorithm to ensure data integrity"
  ],
  "correctOption": "B",
  "explanation": "A digital signature uses asymmetric cryptography. The hash of the document is signed with the sender's private key. Verification uses the public key, proving authenticity and preventing repudiation.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685798"
  },
  "question": "What is a significant vulnerability associated with implementing a weak or predictable random number generator (RNG) in cryptographic applications?",
  "options": [
    "Data breaches",
    "Denial-of-service attacks",
    "Man-in-the-middle attacks",
    "Weakening of cryptographic strength and potential key compromise"
  ],
  "correctOption": "D",
  "explanation": "A weak RNG can lead to predictable key generation, making the cryptography vulnerable and easily broken by an attacker.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857ae"
  },
  "question": "Which HTTP method is typically used to submit data to a server to create or update a resource?",
  "options": [
    "GET",
    "POST",
    "PUT",
    "DELETE"
  ],
  "correctOption": "B",
  "explanation": "POST is used to send data to the server, often for creating new resources. PUT updates existing resources.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857b0"
  },
  "question": "In React, what is the purpose of the `useState` hook?",
  "options": [
    "To manage component state",
    "To handle props",
    "To perform side effects",
    "To render components conditionally"
  ],
  "correctOption": "A",
  "explanation": "`useState` is a hook that allows functional components to manage internal state, enabling dynamic updates.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857af"
  },
  "question": "What is a common way to handle asynchronous JavaScript operations without Promises?",
  "options": [
    "Using async/await",
    "Using callbacks",
    "Using generators",
    "Using classes"
  ],
  "correctOption": "B",
  "explanation": "Callbacks were used before Promises to handle asynchronous operations, but they can lead to 'callback hell'.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857aa"
  },
  "question": "What is the primary purpose of the `DOM` (Document Object Model)?",
  "options": [
    "Styling web pages",
    "Handling user input",
    "Providing a structured representation of an HTML or XML document",
    "Managing network requests"
  ],
  "correctOption": "C",
  "explanation": "The DOM represents the page's structure as a tree of objects, allowing JavaScript to interact with it.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857ac"
  },
  "question": "What is the difference between `let` and `const` in JavaScript?",
  "options": [
    "Both declare variables, but `let` is block-scoped and `const` is globally scoped",
    "Both declare constants; `const` is immutable, `let` is mutable",
    "Both declare variables, but `let` is mutable and `const` is immutable after declaration",
    "There is no difference"
  ],
  "correctOption": "C",
  "explanation": "`let` allows reassignment, while `const` declares a constant whose value cannot be changed after initialization.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857a8"
  },
  "question": "Which CSS property is used to control the spacing between elements?",
  "options": [
    "padding",
    "margin",
    "border",
    "width"
  ],
  "correctOption": "B",
  "explanation": "Margin controls the space outside an element, while padding controls the space inside.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857ad"
  },
  "question": "What is the purpose of a `Promise` in JavaScript?",
  "options": [
    "To handle asynchronous operations",
    "To create synchronous functions",
    "To define variables",
    "To handle user input"
  ],
  "correctOption": "A",
  "explanation": "Promises handle the eventual result of an asynchronous operation, allowing for cleaner error handling and chaining.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857a9"
  },
  "question": "What does the acronym REST stand for in the context of web APIs?",
  "options": [
    "Representational State Transfer",
    "Remote Server Technology",
    "Resourceful Service Transfer",
    "Regular Service Transfer"
  ],
  "correctOption": "A",
  "explanation": "REST stands for Representational State Transfer, an architectural style for building web services.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857b1"
  },
  "question": "What is the purpose of `virtual DOM` in frameworks like React?",
  "options": [
    "To improve browser performance by efficiently updating the actual DOM only when necessary",
    "To simplify component rendering",
    "To improve SEO",
    "To handle asynchronous operations"
  ],
  "correctOption": "A",
  "explanation": "The virtual DOM is a lightweight in-memory representation of the actual DOM, used for optimized updates.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857ab"
  },
  "question": "Which JavaScript method is used to add an element to the end of an array?",
  "options": [
    "push()",
    "pop()",
    "shift()",
    "unshift()"
  ],
  "correctOption": "A",
  "explanation": "push() adds elements to the end, while pop() removes from the end. shift() and unshift() work on the beginning.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c4"
  },
  "question": "Which design principle emphasizes separating concerns to improve code modularity and maintainability?",
  "options": [
    "SOLID principles",
    "DRY (Don't Repeat Yourself)",
    "KISS (Keep It Simple, Stupid)",
    "YAGNI (You Ain't Gonna Need It)"
  ],
  "correctOption": "A",
  "explanation": "SOLID principles, particularly the Single Responsibility Principle, guide developers to create modular and maintainable code by separating concerns.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c1"
  },
  "question": "What is the primary function of an API Gateway in a microservices architecture?",
  "options": [
    "Data storage",
    "User authentication",
    "Routing requests to microservices",
    "Load balancing only"
  ],
  "correctOption": "C",
  "explanation": "An API Gateway acts as a single entry point, routing requests to the appropriate microservice and handling cross-cutting concerns.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c3"
  },
  "question": "What is the purpose of message queues in backend systems?",
  "options": [
    "Storing persistent data",
    "Managing user sessions",
    "Asynchronous communication between services",
    "Caching frequently accessed data"
  ],
  "correctOption": "C",
  "explanation": "Message queues enable decoupled communication, allowing services to exchange messages without direct dependencies, improving reliability and scalability.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c0"
  },
  "question": "Which architectural pattern is commonly used for building scalable and maintainable backend systems?",
  "options": [
    "Microservices",
    "Monolith",
    "MVC",
    "Layered"
  ],
  "correctOption": "A",
  "explanation": "Microservices architecture promotes independent deployment and scalability, addressing challenges faced by monolithic systems.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c8"
  },
  "question": "Which technology is commonly used for implementing serverless backend functions?",
  "options": [
    "Apache Tomcat",
    "Nginx",
    "AWS Lambda",
    "MySQL"
  ],
  "correctOption": "C",
  "explanation": "AWS Lambda is a popular example of a serverless computing platform that allows developers to run code without managing servers.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c6"
  },
  "question": "What is the role of a load balancer in a backend infrastructure?",
  "options": [
    "Data caching",
    "Security firewall",
    "Distributing network traffic across multiple servers",
    "Database management"
  ],
  "correctOption": "C",
  "explanation": "Load balancers distribute incoming network traffic across multiple servers, ensuring high availability and preventing server overload.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c2"
  },
  "question": "Which database type is best suited for handling large volumes of structured data with high transactional requirements?",
  "options": [
    "NoSQL (Document Database)",
    "Graph Database",
    "Key-Value Store",
    "Relational Database"
  ],
  "correctOption": "D",
  "explanation": "Relational databases excel at managing structured data and enforcing ACID properties for reliable transactions.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c9"
  },
  "question": "How can you efficiently handle errors and exceptions in a backend system to provide informative responses to clients?",
  "options": [
    "Ignoring errors",
    "Logging only",
    "Using appropriate HTTP status codes and structured error responses",
    "Terminating the application"
  ],
  "correctOption": "C",
  "explanation": "Providing informative error responses with appropriate HTTP status codes enhances the user experience and simplifies debugging.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c7"
  },
  "question": "What is a common approach for handling database transactions to ensure data consistency?",
  "options": [
    "Optimistic Locking",
    "Pessimistic Locking",
    "Both A and B",
    "Neither A nor B"
  ],
  "correctOption": "C",
  "explanation": "Both optimistic and pessimistic locking mechanisms are used to manage concurrent access to database resources and ensure data consistency.  The choice depends on the application's needs.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c5"
  },
  "question": "What is a common approach to handle authentication and authorization in a RESTful API?",
  "options": [
    "Session management only",
    "JWT (JSON Web Tokens)",
    "Basic authentication only",
    "OAuth 2.0"
  ],
  "correctOption": "B",
  "explanation": "JWTs provide a secure and stateless mechanism for authentication and authorization in RESTful APIs, widely used due to their flexibility and scalability.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857dd"
  },
  "question": "Which of the following best describes the concept of API versioning?",
  "options": [
    "Assigning different API keys to different clients",
    "Using different authentication methods for different clients",
    "Maintaining multiple versions of an API to support backward compatibility",
    "Using different data formats for different clients"
  ],
  "correctOption": "C",
  "explanation": "Versioning allows for gradual improvements to an API without breaking existing client applications that rely on older versions.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857da"
  },
  "question": "What does REST stand for in the context of APIs?",
  "options": [
    "Representational State Transfer",
    "Remote Service Transmission",
    "Resourceful Service Technology",
    "Regular Service Transfer"
  ],
  "correctOption": "A",
  "explanation": "REST (Representational State Transfer) is an architectural style for designing networked applications.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857de"
  },
  "question": "What is the role of a 'schema' in defining an API?",
  "options": [
    "Specifies the data types and structure of the data exchanged",
    "Defines the authentication methods used",
    "Controls the rate limiting settings",
    "Manages the API's documentation"
  ],
  "correctOption": "A",
  "explanation": "A schema, like OpenAPI/Swagger, formally describes the data structure, allowing for better understanding, validation and generation of code.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857db"
  },
  "question": "What is a common format for exchanging data between an API and a client?",
  "options": [
    "HTML",
    "CSS",
    "JavaScript",
    "JSON"
  ],
  "correctOption": "D",
  "explanation": "JSON (JavaScript Object Notation) is a lightweight, text-based data-interchange format widely used in APIs due to its simplicity and readability.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857d9"
  },
  "question": "What is the primary purpose of an API key in API authentication?",
  "options": [
    "To encrypt data transmitted to the API",
    "To verify the identity of the client making the request",
    "To limit the number of requests per second",
    "To specify the data format returned by the API"
  ],
  "correctOption": "B",
  "explanation": "API keys act as credentials, allowing the server to identify and authenticate the client application making the request.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857df"
  },
  "question": "What is the difference between synchronous and asynchronous API calls?",
  "options": [
    "Synchronous waits for a response before continuing, asynchronous doesn't",
    "Synchronous uses GET, asynchronous uses POST",
    "Synchronous is faster, asynchronous is slower",
    "Synchronous requires authentication, asynchronous doesn't"
  ],
  "correctOption": "A",
  "explanation": "Synchronous calls block execution until a response is received, while asynchronous calls allow the program to continue executing other tasks.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857dc"
  },
  "question": "What is rate limiting in the context of APIs?",
  "options": [
    "Limiting the number of requests a client can make within a given time frame",
    "Restricting access to specific API endpoints",
    "Enforcing data validation rules",
    "Setting a maximum size for API responses"
  ],
  "correctOption": "A",
  "explanation": "Rate limiting helps prevent abuse and ensures fair access to API resources by controlling the frequency of requests.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857d8"
  },
  "question": "Which HTTP method is typically used to retrieve data from an API endpoint?",
  "options": [
    "POST",
    "PUT",
    "DELETE",
    "GET"
  ],
  "correctOption": "D",
  "explanation": "GET requests are used to retrieve data from a specified resource.  Other methods are for creating, updating, or deleting data.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857e0"
  },
  "question": "How does OAuth 2.0 typically work for API authorization?",
  "options": [
    "The client sends its API key directly",
    "The client requests an access token from an authorization server",
    "The server sends the client's credentials directly to the client",
    "The client uses basic authentication"
  ],
  "correctOption": "B",
  "explanation": "OAuth 2.0 uses an authorization server to grant access tokens, delegating access without sharing the user's credentials directly.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857e1"
  },
  "question": "What is a common approach to handling errors in an API response?",
  "options": [
    "Returning a 200 OK status code even if there was an error",
    "Ignoring errors and continuing execution",
    "Returning a descriptive error message with an appropriate HTTP status code",
    "Displaying the detailed server stack trace in the response"
  ],
  "correctOption": "C",
  "explanation": "Returning informative error messages with proper HTTP status codes (e.g., 400 Bad Request, 500 Internal Server Error) helps clients diagnose and handle issues effectively.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f0"
  },
  "question": "Which of the following is NOT a common type of machine learning?",
  "options": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Reinforcement Learning",
    "Deductive Learning"
  ],
  "correctOption": "D",
  "explanation": "Deductive Learning is a logic-based approach, not a machine learning paradigm.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f2"
  },
  "question": "In k-means clustering, what does the 'k' represent?",
  "options": [
    "The number of iterations",
    "The number of clusters",
    "The distance metric used",
    "The dimensionality of the data"
  ],
  "correctOption": "B",
  "explanation": "'k' in k-means represents the predetermined number of clusters the algorithm will aim to create.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f3"
  },
  "question": "Which metric is best suited for evaluating a binary classification model where the classes are imbalanced?",
  "options": [
    "Accuracy",
    "Precision",
    "Recall",
    "F1-score"
  ],
  "correctOption": "D",
  "explanation": "The F1-score balances precision and recall, making it suitable for imbalanced datasets where accuracy can be misleading.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f1"
  },
  "question": "What is the primary goal of dimensionality reduction in machine learning?",
  "options": [
    "To increase the number of features",
    "To improve model interpretability and reduce computational cost",
    "To add noise to the data",
    "To decrease the accuracy of the model"
  ],
  "correctOption": "B",
  "explanation": "Dimensionality reduction aims to simplify data by reducing the number of features while preserving important information.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f5"
  },
  "question": "Which algorithm is best known for its ability to handle non-linearly separable data?",
  "options": [
    "Linear Regression",
    "Logistic Regression",
    "Support Vector Machine (SVM) with a non-linear kernel",
    "Decision Tree"
  ],
  "correctOption": "C",
  "explanation": "SVMs with non-linear kernels (e.g., RBF kernel) can effectively classify non-linearly separable data by mapping it to a higher-dimensional space.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f6"
  },
  "question": "What is a common technique used to handle missing values in a dataset?",
  "options": [
    "Ignoring the rows with missing values",
    "Imputation (e.g., mean/median imputation)",
    "Leaving the missing values as they are",
    "All of the above are common techniques"
  ],
  "correctOption": "B",
  "explanation": "Imputation involves filling in missing values with estimated values, improving data completeness.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f7"
  },
  "question": "In a decision tree, what is a 'leaf node'?",
  "options": [
    "A decision point",
    "A branch",
    "The final prediction",
    "A root node"
  ],
  "correctOption": "C",
  "explanation": "Leaf nodes represent the final predictions or classifications made by the decision tree.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f9"
  },
  "question": "Which of the following is a common technique for evaluating the performance of a regression model?",
  "options": [
    "Confusion matrix",
    "ROC curve",
    "Mean Squared Error (MSE)",
    "F1-score"
  ],
  "correctOption": "C",
  "explanation": "MSE measures the average squared difference between predicted and actual values, a common metric for regression.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f8"
  },
  "question": "What is a potential drawback of using a very deep neural network?",
  "options": [
    "Faster training time",
    "Lower computational cost",
    "Increased risk of overfitting",
    "Improved interpretability"
  ],
  "correctOption": "C",
  "explanation": "Deep networks have many parameters, making them prone to overfitting the training data and performing poorly on unseen data.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f4"
  },
  "question": "What is the purpose of a regularization technique like L1 or L2 regularization in machine learning?",
  "options": [
    "To increase model complexity",
    "To prevent overfitting by adding penalty to large weights",
    "To introduce bias into the model",
    "To improve computational speed"
  ],
  "correctOption": "B",
  "explanation": "Regularization techniques penalize large weights, preventing overfitting and improving generalization to unseen data.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580c"
  },
  "question": "Explain the role of attention mechanisms in sequence-to-sequence models, particularly in machine translation.",
  "options": [
    "A. They improve computational efficiency by reducing the number of calculations.",
    "B. They allow the model to focus on the most relevant parts of the input sequence when generating the output.",
    "C. They help prevent overfitting by regularizing the model's weights.",
    "D. They introduce non-linearity into the model, improving its expressive power."
  ],
  "correctOption": "B",
  "explanation": "Attention mechanisms allow the decoder to focus on specific parts of the input sequence when generating each output element, improving translation quality and handling long sequences.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580a"
  },
  "question": "What is the main advantage of using transfer learning in deep learning, particularly when dealing with limited datasets for a specific task?",
  "options": [
    "Faster training times",
    "Reduced computational cost",
    "Improved generalization on unseen data",
    "Leveraging pre-trained knowledge from a related task"
  ],
  "correctOption": "D",
  "explanation": "Transfer learning utilizes pre-trained models on large datasets, transferring knowledge to a new task with limited data, significantly improving performance.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d685808"
  },
  "question": "Which of the following regularization techniques is particularly effective in preventing overfitting in deep convolutional neural networks by encouraging sparsity in the learned feature maps?",
  "options": [
    "L1 Regularization",
    "L2 Regularization",
    "Dropout",
    "Batch Normalization"
  ],
  "correctOption": "A",
  "explanation": "L1 regularization adds a penalty proportional to the absolute value of the weights, encouraging sparsity and thus reducing overfitting more effectively than L2 in CNNs.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580b"
  },
  "question": "Which of the following optimization algorithms is known for its adaptive learning rates for each parameter, making it efficient for training deep neural networks with complex loss landscapes?",
  "options": [
    "Stochastic Gradient Descent (SGD)",
    "Adam",
    "RMSprop",
    "Adagrad"
  ],
  "correctOption": "B",
  "explanation": "Adam adapts learning rates based on past gradients, making it robust and efficient in various scenarios compared to other optimization algorithms.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d685809"
  },
  "question": "In recurrent neural networks (RNNs), what is the primary mechanism that addresses the vanishing gradient problem, allowing for learning long-range dependencies in sequential data?",
  "options": [
    "Backpropagation Through Time (BPTT)",
    "Long Short-Term Memory (LSTM) units",
    "Gated Recurrent Units (GRUs)",
    "Adam Optimizer"
  ],
  "correctOption": "B",
  "explanation": "LSTM units utilize gates to control the flow of information, mitigating the vanishing gradient problem and enabling the learning of long-term dependencies more effectively than basic RNNs.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580d"
  },
  "question": "What is the primary challenge addressed by Generative Adversarial Networks (GANs) in generating realistic data?",
  "options": [
    "Overfitting",
    "Vanishing gradients",
    "Mode collapse",
    "Computational complexity"
  ],
  "correctOption": "C",
  "explanation": "Mode collapse is a common failure mode in GANs where the generator produces a limited variety of outputs, failing to capture the full distribution of the training data.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580e"
  },
  "question": "How does batch normalization help accelerate the training process and improve generalization in deep neural networks?",
  "options": [
    "A. By reducing the number of parameters in the network.",
    "B. By normalizing the activations of each layer, reducing internal covariate shift.",
    "C. By adding noise to the input data, improving robustness.",
    "D. By increasing the learning rate."
  ],
  "correctOption": "B",
  "explanation": "Batch normalization normalizes the activations of each layer, stabilizing the training process and reducing internal covariate shift, leading to faster convergence and better generalization.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580f"
  },
  "question": "In the context of autoencoders, what is the primary purpose of the bottleneck layer?",
  "options": [
    "To increase the computational complexity of the model.",
    "To add non-linearity to the model.",
    "To perform dimensionality reduction and extract latent features.",
    "To regularize the model's weights."
  ],
  "correctOption": "C",
  "explanation": "The bottleneck layer forces the autoencoder to learn a compressed representation of the input data, performing dimensionality reduction and extracting essential features.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d685810"
  },
  "question": "Which technique is commonly used to evaluate the performance of object detection models, considering both localization accuracy and classification accuracy?",
  "options": [
    "Precision-Recall curve",
    "F1-score",
    "Mean Average Precision (mAP)",
    "Accuracy"
  ],
  "correctOption": "C",
  "explanation": "Mean Average Precision (mAP) is a standard metric for evaluating object detection models, considering both localization and classification performance across different intersection over union (IoU) thresholds.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d685811"
  },
  "question": "What is a crucial consideration when choosing an activation function for the output layer of a multi-class classification problem?",
  "options": [
    "Computational efficiency",
    "Derivability",
    "Range of output values",
    "Number of hidden layers"
  ],
  "correctOption": "C",
  "explanation": "The output layer activation function should produce outputs in a range suitable for probability interpretation (e.g., softmax for multi-class probabilities).",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e61143"
  },
  "question": "What is the purpose of the 'main' method in a Java program?",
  "options": [
    "To define a class",
    "To create an object",
    "To execute the program",
    "To declare variables"
  ],
  "correctOption": "C",
  "explanation": "The 'main' method is the entry point of execution for a Java program. The JVM starts execution from here.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e61142"
  },
  "question": "Which keyword is used to create a new object in Java?",
  "options": [
    "new",
    "create",
    "object",
    "instance"
  ],
  "correctOption": "A",
  "explanation": "The 'new' keyword allocates memory and creates a new instance of a class.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e61141"
  },
  "question": "Which statement is used to make a decision in Java based on a condition?",
  "options": [
    "for",
    "while",
    "if",
    "switch"
  ],
  "correctOption": "C",
  "explanation": "The 'if' statement allows execution of a block of code only if a specific condition is true.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e61144"
  },
  "question": "Which keyword is used to declare a class in Java?",
  "options": [
    "class",
    "interface",
    "struct",
    "function"
  ],
  "correctOption": "A",
  "explanation": "The 'class' keyword is used to define a new class in Java.  It's fundamental to object-oriented programming.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e61145"
  },
  "question": "What is the purpose of a Java Interface?",
  "options": [
    "To implement multiple inheritance of classes",
    "To define the behaviour of a class without providing implementation details",
    "To create abstract classes",
    "To declare constants only"
  ],
  "correctOption": "B",
  "explanation": "Interfaces specify methods a class must implement without providing concrete implementations, promoting abstraction and polymorphism.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e61146"
  },
  "question": "Which keyword is used to prevent method overriding in Java?",
  "options": [
    "static",
    "final",
    "abstract",
    "private"
  ],
  "correctOption": "B",
  "explanation": "The `final` keyword prevents a method from being overridden in subclasses.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e61149"
  },
  "question": "What data type is used to store whole numbers in Java?",
  "options": [
    "float",
    "double",
    "int",
    "String"
  ],
  "correctOption": "C",
  "explanation": "The 'int' data type is used to store 32-bit signed integers in Java.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e6114a"
  },
  "question": "What is the purpose of a Java Stream?",
  "options": [
    "To create new threads.",
    "To handle exceptions more efficiently.",
    "To process collections of data in a declarative way.",
    "To manage network connections."
  ],
  "correctOption": "C",
  "explanation": "Java Streams provide a functional approach to processing collections, enabling declarative and efficient data manipulation.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e61147"
  },
  "question": "What symbol is used to denote a single-line comment in Java?",
  "options": [
    "/*",
    "*/",
    "//",
    "#"
  ],
  "correctOption": "C",
  "explanation": "'//' indicates a single-line comment; the compiler ignores everything after it on that line.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f369b409be8f67e61148"
  },
  "question": "What will be printed if you run: System.out.println(\"Hello\" + \" World!\");",
  "options": [
    "Hello World!",
    "HelloWorld!",
    "\"Hello\" + \" World!\"",
    "Error"
  ],
  "correctOption": "A",
  "explanation": "The '+' operator concatenates strings in Java.  The output will be the combined string.",
  "tags": [
    "java"
  ],
  "domain": "computer science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade7871868"
  },
  "question": "Which statement is used to make a decision in Java based on a condition?",
  "options": [
    "for",
    "while",
    "if",
    "switch"
  ],
  "correctOption": "C",
  "explanation": "The 'if' statement allows execution of a block of code only if a specific condition is true.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade787186b"
  },
  "question": "Which keyword is used to create a new object in Java?",
  "options": [
    "new",
    "create",
    "object",
    "instance"
  ],
  "correctOption": "A",
  "explanation": "The 'new' keyword allocates memory and creates a new instance of a class.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade7871869"
  },
  "question": "What data type is used to store whole numbers in Java?",
  "options": [
    "float",
    "double",
    "int",
    "String"
  ],
  "correctOption": "C",
  "explanation": "The 'int' data type is used to store 32-bit signed integers in Java.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade787186a"
  },
  "question": "Which keyword is used to declare a class in Java?",
  "options": [
    "class",
    "interface",
    "struct",
    "function"
  ],
  "correctOption": "A",
  "explanation": "The 'class' keyword is used to define a new class in Java. It's fundamental to object-oriented programming.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade787186e"
  },
  "question": "What is the purpose of a Java Interface?",
  "options": [
    "To implement multiple inheritance of classes",
    "To define the behaviour of a class without providing implementation details",
    "To create abstract classes",
    "To declare constants only"
  ],
  "correctOption": "B",
  "explanation": "Interfaces specify methods a class must implement without providing concrete implementations, promoting abstraction and polymorphism.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade787186f"
  },
  "question": "What is the purpose of a Java Stream?",
  "options": [
    "To create new threads.",
    "To handle exceptions more efficiently.",
    "To process collections of data in a declarative way.",
    "To manage network connections."
  ],
  "correctOption": "C",
  "explanation": "Java Streams provide a functional approach to processing collections, enabling declarative and efficient data manipulation.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade7871870"
  },
  "question": "What will be printed if you run: System.out.println(\"Hello\" + \" World!\");",
  "options": [
    "Hello World!",
    "HelloWorld!",
    "\"Hello\" + \" World!\"",
    "Error"
  ],
  "correctOption": "A",
  "explanation": "The '+' operator concatenates strings in Java. The output will be the combined string.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade7871871"
  },
  "question": "What is the output of System.out.println(5 + 2);?",
  "options": [
    "52",
    "7",
    "5 + 2",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The '+' operator performs addition in this context, resulting in 7. System.out.println() displays the result.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade787186c"
  },
  "question": "What is the purpose of the 'main' method in a Java program?",
  "options": [
    "To define a class",
    "To create an object",
    "To execute the program",
    "To declare variables"
  ],
  "correctOption": "C",
  "explanation": "The 'main' method is the entry point of execution for a Java program. The JVM starts execution from here.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d8f3c84b31cfade787186d"
  },
  "question": "Which symbol is used to denote a single-line comment in Java?",
  "options": [
    "/*",
    "*/",
    "//",
    "#"
  ],
  "correctOption": "C",
  "explanation": "'//' indicates a single-line comment; the compiler ignores everything after it on that line.",
  "tags": [
    "algorithms",
    "data-structures"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a4c"
  },
  "question": "What does the term 'cache coherence' refer to in a multiprocessor system?",
  "options": [
    "The ability of the CPU to access cache quickly",
    "The consistency of data stored in multiple caches",
    "The size of the cache memory",
    "The speed of the main memory"
  ],
  "correctOption": "B",
  "explanation": "Cache coherence ensures that all caches containing copies of the same data have consistent values.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a4d"
  },
  "question": "Which addressing mode allows for direct calculation of the memory address using the instruction itself?",
  "options": [
    "Register Indirect",
    "Immediate",
    "Direct",
    "Indirect"
  ],
  "correctOption": "C",
  "explanation": "Direct addressing uses the operand itself as the memory address.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a4e"
  },
  "question": "A pipelined processor improves performance by:",
  "options": [
    "Increasing the clock speed",
    "Reducing the number of instructions",
    "Overlapping instruction execution",
    "Increasing the cache size"
  ],
  "correctOption": "C",
  "explanation": "Pipelining allows multiple instructions to be processed concurrently, overlapping their execution phases.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a50"
  },
  "question": "What is the difference between RISC and CISC architectures?",
  "options": [
    "RISC uses complex instructions, CISC uses simple instructions",
    "RISC has a smaller instruction set, CISC has a larger instruction set",
    "RISC is faster, CISC is slower (always)",
    "RISC uses more registers, CISC uses less registers (always)"
  ],
  "correctOption": "B",
  "explanation": "RISC (Reduced Instruction Set Computer) uses a smaller, simpler instruction set, while CISC (Complex Instruction Set Computer) uses a larger, more complex one. Speed differences are implementation dependent.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a4b"
  },
  "question": "Which of the following is NOT a key component of a Von Neumann architecture?",
  "options": [
    "Arithmetic Logic Unit (ALU)",
    "Control Unit (CU)",
    "Memory",
    "Separate Data and Instruction Buses"
  ],
  "correctOption": "D",
  "explanation": "Von Neumann architecture uses a single bus for both data and instructions.  Separate buses are a characteristic of Harvard architecture.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a4f"
  },
  "question": "What is the primary function of a Memory Management Unit (MMU)?",
  "options": [
    "Managing the CPU registers",
    "Controlling I/O devices",
    "Translating virtual addresses to physical addresses",
    "Caching frequently accessed data"
  ],
  "correctOption": "C",
  "explanation": "The MMU is crucial for virtual memory, mapping virtual addresses used by programs to physical addresses in RAM.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a51"
  },
  "question": "Superscalar processors achieve parallelism by:",
  "options": [
    "Using multiple cores",
    "Pipelining instructions",
    "Executing multiple instructions simultaneously",
    "Increasing clock speed"
  ],
  "correctOption": "C",
  "explanation": "Superscalar processors can execute multiple instructions concurrently in a single clock cycle.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a52"
  },
  "question": "Which type of memory is typically used for the CPU's working space?",
  "options": [
    "Secondary storage",
    "ROM",
    "RAM",
    "Cache"
  ],
  "correctOption": "C",
  "explanation": "RAM (Random Access Memory) is volatile memory used for active data and program instructions during execution.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a53"
  },
  "question": "What is the purpose of an interrupt?",
  "options": [
    "To halt the CPU",
    "To signal the CPU to execute a specific subroutine",
    "To indicate an external event needing attention",
    "To manage memory allocation"
  ],
  "correctOption": "C",
  "explanation": "Interrupts signal the CPU to temporarily suspend its current task and handle an external event or condition.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98533320de848c99b9a54"
  },
  "question": "A system with multiple processors sharing a common memory bus is known as:",
  "options": [
    "Distributed system",
    "Cluster",
    "Multiprocessor system",
    "Network"
  ],
  "correctOption": "C",
  "explanation": "A multiprocessor system is characterized by multiple processors sharing a common bus and resources.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a67"
  },
  "question": "What does the acronym 'ISA' stand for in computer architecture?",
  "options": [
    "Input/Storage Architecture",
    "Instruction Set Architecture",
    "Integrated System Architecture",
    "Interconnected Storage Array"
  ],
  "correctOption": "B",
  "explanation": "ISA defines the instructions a CPU can execute and how it interacts with memory and peripherals.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a65"
  },
  "question": "What is the primary function of a memory address?",
  "options": [
    "To store data",
    "To identify a specific location in memory",
    "To execute instructions",
    "To control the flow of data"
  ],
  "correctOption": "B",
  "explanation": "Memory addresses uniquely identify each memory location, allowing the CPU to access specific data.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a69"
  },
  "question": "What is the purpose of a pipeline in a CPU?",
  "options": [
    "To increase clock speed",
    "To reduce instruction execution time",
    "To improve memory access time",
    "To manage interrupts"
  ],
  "correctOption": "B",
  "explanation": "Pipelines allow multiple instructions to be processed concurrently, significantly reducing overall execution time.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a64"
  },
  "question": "What does the term 'cache' refer to in computer architecture?",
  "options": [
    "A type of RAM",
    "A high-speed storage buffer",
    "A secondary storage device",
    "A type of operating system"
  ],
  "correctOption": "B",
  "explanation": "Cache is a small, fast memory that stores frequently accessed data for quicker retrieval by the CPU.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a68"
  },
  "question": "Which addressing mode calculates the effective address by adding the contents of a register to a constant?",
  "options": [
    "Immediate Addressing",
    "Direct Addressing",
    "Register Indirect Addressing",
    "Base+Offset Addressing"
  ],
  "correctOption": "D",
  "explanation": "Base+Offset addressing uses a base register and an offset constant to calculate the memory address.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a63"
  },
  "question": "Which of the following is NOT a key component of a CPU?",
  "options": [
    "ALU",
    "Control Unit",
    "Memory Unit",
    "Registers"
  ],
  "correctOption": "C",
  "explanation": "The Memory Unit is external to the CPU; the ALU, Control Unit, and Registers are internal components.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a6a"
  },
  "question": "What is the difference between RISC and CISC architectures?",
  "options": [
    "RISC uses complex instructions, CISC uses simple instructions",
    "RISC has a larger instruction set, CISC has a smaller instruction set",
    "RISC uses fewer registers, CISC uses more registers",
    "RISC uses simpler instructions, CISC uses more complex instructions"
  ],
  "correctOption": "D",
  "explanation": "RISC (Reduced Instruction Set Computer) uses simpler instructions, while CISC (Complex Instruction Set Computer) uses more complex, versatile instructions.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a66"
  },
  "question": "What type of memory is typically volatile?",
  "options": [
    "ROM",
    "Hard Disk Drive",
    "RAM",
    "Flash Memory"
  ],
  "correctOption": "C",
  "explanation": "RAM (Random Access Memory) loses its data when the power is turned off, making it volatile.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a6c"
  },
  "question": "What is the role of a memory management unit (MMU)?",
  "options": [
    "To manage CPU registers",
    "To control the flow of data between CPU and memory",
    "To translate logical addresses to physical addresses",
    "To manage the operating system's processes"
  ],
  "correctOption": "C",
  "explanation": "The MMU translates logical addresses used by programs into the physical addresses used by the memory system, enabling virtual memory.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9853b320de848c99b9a6b"
  },
  "question": "Which interrupt is typically used to signal that a device needs immediate attention?",
  "options": [
    "Software Interrupt",
    "Hardware Interrupt",
    "Timer Interrupt",
    "Page Fault Interrupt"
  ],
  "correctOption": "B",
  "explanation": "Hardware interrupts are triggered by external devices, signaling a need for immediate CPU attention.",
  "tags": [
    "CPU",
    "Memory Hierarchy",
    "Instruction Set",
    "Pipelining"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a84"
  },
  "question": "A self-balancing binary search tree is designed to:",
  "options": [
    "Improve space efficiency",
    "Guarantee O(1) search time",
    "Maintain balanced height for efficient operations",
    "Prevent collisions in hash tables"
  ],
  "correctOption": "C",
  "explanation": "Self-balancing trees like AVL trees and red-black trees automatically adjust their structure to maintain a roughly balanced height, ensuring logarithmic time complexity for operations.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a83"
  },
  "question": "Which algorithm is commonly used to find the shortest path in a weighted graph with non-negative edge weights?",
  "options": [
    "Bellman-Ford Algorithm",
    "Floyd-Warshall Algorithm",
    "Dijkstra's Algorithm",
    "Prim's Algorithm"
  ],
  "correctOption": "C",
  "explanation": "Dijkstra's algorithm efficiently finds the shortest paths from a single source node to all other nodes in a graph.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a82"
  },
  "question": "What is the purpose of amortized analysis in algorithm analysis?",
  "options": [
    "Analyzing the worst-case runtime",
    "Analyzing the best-case runtime",
    "Analyzing the average-case runtime over many operations",
    "Analyzing space complexity"
  ],
  "correctOption": "C",
  "explanation": "Amortized analysis considers the average cost of operations over a sequence of operations, not just individual operations.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a81"
  },
  "question": "Which sorting algorithm has a worst-case time complexity of O(n^2) and an average-case time complexity of O(n log n)?",
  "options": [
    "Merge Sort",
    "Quick Sort",
    "Bubble Sort",
    "Insertion Sort"
  ],
  "correctOption": "B",
  "explanation": "Quick Sort's worst-case scenario occurs with already sorted data, while the average case is much more efficient.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a7e"
  },
  "question": "Which graph traversal algorithm uses a queue?",
  "options": [
    "Depth-First Search (DFS)",
    "Breadth-First Search (BFS)",
    "Dijkstra's Algorithm",
    "Topological Sort"
  ],
  "correctOption": "B",
  "explanation": "BFS uses a queue to explore nodes level by level, ensuring that nodes closer to the source are visited first.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a7b"
  },
  "question": "What is the time complexity of searching for an element in a sorted array using binary search?",
  "options": [
    "O(n)",
    "O(log n)",
    "O(n^2)",
    "O(1)"
  ],
  "correctOption": "B",
  "explanation": "Binary search repeatedly divides the search interval in half.  Therefore, the time complexity is logarithmic.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a7c"
  },
  "question": "Which data structure uses the Last-In-First-Out (LIFO) principle?",
  "options": [
    "Queue",
    "Stack",
    "Linked List",
    "Heap"
  ],
  "correctOption": "B",
  "explanation": "A stack follows the LIFO principle, where the last element added is the first to be removed.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a80"
  },
  "question": "What data structure is typically used to implement a priority queue?",
  "options": [
    "Linked List",
    "Array",
    "Binary Heap",
    "Stack"
  ],
  "correctOption": "C",
  "explanation": "Binary heaps efficiently maintain the priority order, allowing for quick access to the highest (or lowest) priority element.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a7d"
  },
  "question": "What is the primary advantage of using a hash table for data storage?",
  "options": [
    "Sorted data access",
    "Guaranteed O(1) insertion and deletion",
    "Space efficiency",
    "Average O(1) search time"
  ],
  "correctOption": "D",
  "explanation": "Hash tables provide an average-case O(1) time complexity for search, insertion, and deletion operations.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98545320de848c99b9a7f"
  },
  "question": "A graph with cycles is called:",
  "options": [
    "Acyclic",
    "Directed",
    "Undirected",
    "Cyclic"
  ],
  "correctOption": "D",
  "explanation": "A cyclic graph contains at least one cycle, meaning a path that starts and ends at the same node.",
  "tags": [
    "Complexity Analysis",
    "Search Algorithms",
    "Sort Algorithms",
    "Data Structures"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a96"
  },
  "question": "Which of these is NOT a common method used in pretexting?",
  "options": [
    "Impersonating a colleague.",
    "Using fabricated stories.",
    "Directly requesting sensitive information.",
    "Employing technical expertise to gain access."
  ],
  "correctOption": "D",
  "explanation": "Pretexting relies on deception and manipulation, not technical skills. Technical skills are more relevant to other attack vectors.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a94"
  },
  "question": "A phishing email claiming to be from your bank asking for login credentials is an example of which social engineering attack?",
  "options": [
    "Baiting",
    "Phishing",
    "Tailgating",
    "Watering Hole"
  ],
  "correctOption": "B",
  "explanation": "Phishing is a common social engineering attack that uses deceptive emails or websites to trick users into revealing sensitive information.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a95"
  },
  "question": "What is 'quid pro quo' in the context of social engineering?",
  "options": [
    "Offering something in exchange for information or assistance.",
    "Impersonating a trusted authority figure.",
    "Leaving a physical device containing malware.",
    "Spreading misinformation through online forums."
  ],
  "correctOption": "A",
  "explanation": "Quid pro quo attacks involve offering something valuable (e.g., help, a favor) in exchange for information or access.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a9c"
  },
  "question": "The effectiveness of baiting as a social engineering technique depends on:",
  "options": [
    "The victim's technical skills.",
    "The urgency of the situation.",
    "The victim's curiosity and desire for something free or appealing.",
    "The victim's social status."
  ],
  "correctOption": "C",
  "explanation": "Baiting uses appealing offers (e.g., free gifts, valuable data) to lure victims into clicking on malicious links or downloading infected files.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a93"
  },
  "question": "Which social engineering technique relies heavily on creating a sense of urgency or importance to manipulate the victim?",
  "options": [
    "Baiting",
    "Pretexting",
    "Quid Pro Quo",
    "Urgency/Scarcity"
  ],
  "correctOption": "D",
  "explanation": "Urgency/Scarcity exploits the victim's fear of missing out or losing an opportunity by creating a sense of immediate need for action.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a9a"
  },
  "question": "How can you best protect yourself from social engineering attacks?",
  "options": [
    "Always click links in emails.",
    "Give out personal information freely.",
    "Verify information with trusted sources before acting.",
    "Ignore all requests for help or information."
  ],
  "correctOption": "C",
  "explanation": "Verifying information with trusted sources helps prevent you from falling victim to deceptive tactics used in social engineering.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a97"
  },
  "question": "The principle of reciprocity in social engineering suggests that:",
  "options": [
    "People are more likely to help those who have previously helped them.",
    "People tend to follow the crowd.",
    "People are more susceptible to attacks at certain times of day.",
    "People are easily manipulated by fear."
  ],
  "correctOption": "A",
  "explanation": "Reciprocity is a psychological principle where people feel obligated to return favors or kindness, making them more susceptible to manipulation.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a9b"
  },
  "question": "Tailgating, a physical form of social engineering, relies on:",
  "options": [
    "Sending malicious emails.",
    "Exploiting a vulnerability in software.",
    "Following someone authorized into a restricted area.",
    "Planting malware on a computer."
  ],
  "correctOption": "C",
  "explanation": "Tailgating involves physically following an authorized person into a restricted area without proper authorization.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a99"
  },
  "question": "Which social engineering principle plays on people's desire to be liked and accepted?",
  "options": [
    "Authority",
    "Scarcity",
    "Liking",
    "Consensus"
  ],
  "correctOption": "C",
  "explanation": "The liking principle exploits the human tendency to comply with requests from people they like or find attractive.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9854f320de848c99b9a98"
  },
  "question": "A 'watering hole' attack targets:",
  "options": [
    "Specific individuals.",
    "A group of individuals sharing a common interest or website.",
    "Random users across the internet.",
    "Employees of a single organization only."
  ],
  "correctOption": "B",
  "explanation": "Watering hole attacks compromise websites frequented by the target group to infect them with malware.",
  "tags": [
    "Phishing",
    "Pretexting",
    "Baiting",
    "Human Factors"
  ],
  "domain": "Computer Science - Cybersecurity",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9ab4"
  },
  "question": "What's the difference between `==` and `===` in JavaScript?",
  "options": [
    "No difference",
    "`==` checks for value equality, `===` checks for strict equality (value and type)",
    "`===` checks for value equality, `==` checks for strict equality",
    "`==` is for numbers, `===` is for strings"
  ],
  "correctOption": "B",
  "explanation": "`==` performs type coercion before comparison, while `===` performs a strict equality check without type coercion.",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9aab"
  },
  "question": "What is the output of the following code snippet?  `console.log(typeof null);`",
  "options": [
    "object",
    "null",
    "undefined",
    "string"
  ],
  "correctOption": "A",
  "explanation": "A historical quirk in JavaScript;  `null` is an object, despite its apparent purpose.",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9aac"
  },
  "question": "Which method is used to add elements to the end of an array?",
  "options": [
    "unshift()",
    "push()",
    "pop()",
    "shift()"
  ],
  "correctOption": "B",
  "explanation": "`push()` adds elements to the end, while `unshift()` adds to the beginning. `pop()` and `shift()` remove elements.",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9ab3"
  },
  "question": "What is the result of `'10' + 5` in JavaScript?",
  "options": [
    "15",
    "510",
    "105",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "JavaScript performs string concatenation when adding a string and a number, resulting in '510'.",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9aae"
  },
  "question": "How do you declare a constant variable in JavaScript?",
  "options": [
    "let x = 10;",
    "var x = 10;",
    "const x = 10;",
    "int x = 10;"
  ],
  "correctOption": "C",
  "explanation": "`const` declares a constant variable whose value cannot be reassigned after initialization.",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9ab2"
  },
  "question": "Which of the following is NOT a way to handle asynchronous operations in JavaScript?",
  "options": [
    "Promises",
    "Async/Await",
    "Callbacks",
    "forEach loop"
  ],
  "correctOption": "D",
  "explanation": "While `forEach` iterates over arrays, it's synchronous and doesn't directly manage asynchronous tasks like Promises or Async/Await.",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9ab0"
  },
  "question": "What is the purpose of a closure in JavaScript?",
  "options": [
    "To create a new scope",
    "To hide variables",
    "To access variables from an outer function's scope even after the outer function has finished executing",
    "To improve performance"
  ],
  "correctOption": "C",
  "explanation": "Closures allow inner functions to retain access to variables in their surrounding scope, even after that scope has been exited.",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9ab1"
  },
  "question": "What does `JSON.parse()` do?",
  "options": [
    "Converts a JSON string to a JavaScript object",
    "Converts a JavaScript object to a JSON string",
    "Parses a URL",
    "Validates a JSON string"
  ],
  "correctOption": "A",
  "explanation": "`JSON.parse()` converts a JSON string into a usable JavaScript object.  `JSON.stringify()` performs the opposite operation.",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9aaf"
  },
  "question": "What does the `this` keyword refer to in a method of an object?",
  "options": [
    "The global object",
    "The method itself",
    "The object the method belongs to",
    "The calling function"
  ],
  "correctOption": "C",
  "explanation": "`this` generally refers to the object that called the method.  However, its behavior can change based on how the function is invoked (e.g., strict mode).",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98559320de848c99b9aad"
  },
  "question": "What will be the value of `x` after executing this code? `let x = 10;  x += 5;`",
  "options": [
    "10",
    "15",
    "5",
    "undefined"
  ],
  "correctOption": "B",
  "explanation": "`x += 5;` is shorthand for `x = x + 5;`, resulting in 15.",
  "tags": [
    "ES6+",
    "Promises",
    "Async/Await",
    "DOM Manipulation"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9acc"
  },
  "question": "What is a vulnerability scan used for?",
  "options": [
    "Detecting active malware infections",
    "Encrypting sensitive data",
    "Identifying security weaknesses in systems",
    "Creating strong passwords automatically"
  ],
  "correctOption": "C",
  "explanation": "Vulnerability scans automatically check systems for known security flaws that could be exploited by attackers.",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9ac3"
  },
  "question": "Which of the following is NOT a common type of phishing attack?",
  "options": [
    "Spear phishing",
    "Whaling",
    "Smishing",
    "Clickjacking"
  ],
  "correctOption": "D",
  "explanation": "Clickjacking is a type of attack where malicious code is used to trick a user into clicking something they didn't intend to, not a type of phishing which involves deception through communication.",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9ac6"
  },
  "question": "A denial-of-service (DoS) attack aims to:",
  "options": [
    "Steal sensitive data",
    "Install malware",
    "Disrupt network availability",
    "Gain unauthorized access"
  ],
  "correctOption": "C",
  "explanation": "DoS attacks flood a network or server with traffic, rendering it unavailable to legitimate users.",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9aca"
  },
  "question": "What is a significant risk associated with using weak passwords?",
  "options": [
    "Data encryption",
    "Firewall breaches",
    "Brute-force attacks",
    "Denial-of-service attacks"
  ],
  "correctOption": "C",
  "explanation": "Weak passwords are easily cracked using brute-force attacks, where attackers try numerous password combinations.",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9ac9"
  },
  "question": "Which type of malware replicates itself and spreads to other systems without user interaction?",
  "options": [
    "Trojan horse",
    "Worm",
    "Virus",
    "Spyware"
  ],
  "correctOption": "B",
  "explanation": "Worms are self-replicating malware that spread through networks without needing to be attached to other files, unlike viruses.",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9ac7"
  },
  "question": "Two-factor authentication (2FA) adds an extra layer of security by requiring:",
  "options": [
    "Two different passwords",
    "Two different usernames",
    "Something you know and something you have",
    "Something you are and something you know"
  ],
  "correctOption": "C",
  "explanation": "2FA typically uses a password (something you know) and a code from a phone or security key (something you have).",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9ac5"
  },
  "question": "Which security protocol is primarily used to encrypt communications between a web browser and a server?",
  "options": [
    "FTP",
    "SMTP",
    "HTTP",
    "HTTPS"
  ],
  "correctOption": "D",
  "explanation": "HTTPS (Hypertext Transfer Protocol Secure) uses TLS/SSL to encrypt data transmitted between a web browser and server, ensuring secure communication.",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9acb"
  },
  "question": "Which security principle emphasizes that access to data should be limited to authorized individuals?",
  "options": [
    "Confidentiality",
    "Integrity",
    "Availability",
    "Least privilege"
  ],
  "correctOption": "D",
  "explanation": "The principle of least privilege dictates that users should only have access to the resources they need to perform their tasks, minimizing the impact of security breaches.",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9ac4"
  },
  "question": "What does the acronym 'VPN' stand for in cybersecurity?",
  "options": [
    "Virtual Private Network",
    "Very Private Network",
    "Virtual Public Network",
    "Versatile Private Network"
  ],
  "correctOption": "A",
  "explanation": "VPN stands for Virtual Private Network, creating a secure connection over a less secure network.",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98562320de848c99b9ac8"
  },
  "question": "What is the primary purpose of a firewall?",
  "options": [
    "To encrypt data",
    "To detect malware",
    "To control network traffic",
    "To store passwords securely"
  ],
  "correctOption": "C",
  "explanation": "Firewalls monitor and filter incoming and outgoing network traffic based on predefined rules, enhancing network security.",
  "tags": [
    "Threat Modeling",
    "Defense in Depth",
    "Security Controls",
    "Risk Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9ade"
  },
  "question": "How does foveated rendering optimize VR performance, and what are its limitations?",
  "options": [
    "A: It renders the entire scene at high resolution; no limitations. B: It renders only the central area in high resolution, blurring the periphery; limited by the precision of eye-tracking. C: It dynamically adjusts the frame rate based on user movement; limited by processor capabilities. D: It uses a lower polygon count for distant objects; limited by the depth of field."
  ],
  "correctOption": "B",
  "explanation": "Foveated rendering prioritizes visual fidelity in the area of focus (fovea), sacrificing resolution in the periphery to boost performance.  Accuracy of eye-tracking is a key limitation.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9adc"
  },
  "question": "In VR development, what does 'perceptual latency' refer to, and why is minimizing it crucial?",
  "options": [
    "The time it takes to load a 3D model",
    "The delay between user input and visual feedback",
    "The frame rate of the VR display",
    "The processing power required by the VR headset"
  ],
  "correctOption": "B",
  "explanation": "Perceptual latency is the delay between a user's action and the system's response; minimizing it enhances immersion and reduces motion sickness.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9ae0"
  },
  "question": "What are the ethical considerations surrounding the use of VR in simulations for training purposes, particularly in high-stakes environments like military or medical training?",
  "options": [
    "A: Cost-effectiveness. B: Accessibility. C: Psychological impact and potential for desensitization. D: Technical limitations."
  ],
  "correctOption": "C",
  "explanation": "The potential for VR simulations to desensitize users to violence or trauma, and the ethical implications of exposing trainees to realistic but potentially harmful scenarios, are major considerations.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9add"
  },
  "question": "Explain the difference between inside-out and outside-in tracking in VR, highlighting their respective advantages and disadvantages.",
  "options": [
    "A: Inside-out uses external cameras; Outside-in uses headset-mounted cameras. B: Inside-out is cheaper; Outside-in offers greater precision. C: Inside-out requires more processing power; Outside-in is less susceptible to occlusion. D: All of the above."
  ],
  "correctOption": "D",
  "explanation": "All statements accurately reflect the key differences between inside-out and outside-in tracking methodologies in VR.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9ae3"
  },
  "question": "What are the key differences between VR and Augmented Reality (AR) and how might they be combined in mixed reality (MR) applications?",
  "options": [
    "A: VR replaces reality; AR overlays digital content on reality; MR combines aspects of both, creating interactive environments where virtual and real objects coexist. B: VR uses sensors; AR uses screens; MR uses both. C: VR is more expensive; AR is cheaper; MR is in between. D: VR is immersive; AR is less immersive; MR is dependent on the application."
  ],
  "correctOption": "A",
  "explanation": "This accurately describes the core distinction between VR, AR, and MR, highlighting how they each manipulate the user's perception of reality.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9adf"
  },
  "question": "Describe the role of spatial audio in enhancing VR immersion, and mention at least two techniques used to achieve it.",
  "options": [
    "A: It simulates sound directionality; Binaural recording and Head-Related Transfer Functions (HRTFs). B: It increases the overall volume; using loudspeakers and headphones. C: It improves sound clarity; using noise cancellation. D: It provides consistent sound; using a single sound source."
  ],
  "correctOption": "A",
  "explanation": "Spatial audio creates a realistic soundscape by simulating how sounds travel and are perceived in 3D space. Binaural recording and HRTFs are common techniques.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9ae1"
  },
  "question": "Discuss the challenges involved in developing realistic haptic feedback systems for VR, including technological limitations and physiological factors.",
  "options": [
    "A: Cost of materials. B: Limited range of tactile sensations and difficulty replicating complex textures, plus user comfort and fatigue. C:  Compatibility issues between different VR headsets. D: Lack of software support."
  ],
  "correctOption": "B",
  "explanation": "Creating realistic haptic sensations is technologically challenging, requiring precise control and a wide range of force feedback. User comfort and fatigue are significant physiological limitations.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9ae2"
  },
  "question": "How can VR technology be utilized to address accessibility challenges for individuals with disabilities?",
  "options": [
    "A: Providing immersive environments to improve mobility. B: Creating interactive experiences to improve cognitive function. C: Offering alternative sensory inputs for users with visual or auditory impairments. D: All of the above."
  ],
  "correctOption": "D",
  "explanation": "VR's versatility allows for the creation of customized experiences addressing various disabilities. It can enhance mobility, cognitive functions, and provide sensory alternatives.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9ae4"
  },
  "question": "Analyze the potential impact of advancements in eye-tracking technology on future VR and AR applications, considering areas such as user interface design, personalized content delivery, and improved immersion.",
  "options": [
    "A: Increased processing power needed. B: Enhanced user experience through more intuitive interfaces, personalized content based on gaze patterns, and better rendering techniques. C: Cost of hardware will increase. D: Improved battery life."
  ],
  "correctOption": "B",
  "explanation": "Advancements in eye-tracking directly impact user experience by allowing for more intuitive interactions, personalized experiences tailored to individual gaze, and more efficient rendering strategies.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9856f320de848c99b9adb"
  },
  "question": "Which of the following advanced VR techniques significantly reduces motion sickness by dynamically adjusting the virtual environment based on user head and body movements?",
  "options": [
    "Stereoscopy",
    "Haptic Feedback",
    "Predictive Tracking",
    "Foviated Rendering"
  ],
  "correctOption": "C",
  "explanation": "Predictive tracking anticipates user movements, minimizing latency and the sensory conflicts that cause motion sickness.",
  "tags": [
    "3D Rendering",
    "Spatial Computing",
    "VR Hardware",
    "Immersive Experiences"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9afb"
  },
  "question": "What is the primary goal of a business logic flaw exploitation?",
  "options": [
    "Gaining unauthorized access to sensitive data",
    "Executing arbitrary code on the server",
    "Disrupting the availability of the web application",
    "Exploiting vulnerabilities in the application's functionality to bypass security controls"
  ],
  "correctOption": "D",
  "explanation": "Business logic flaws exploit weaknesses in how an application handles its processes and data flow rather than technical vulnerabilities like buffer overflows.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9af3"
  },
  "question": "Which of the following techniques is LEAST likely to be effective against a well-configured Web Application Firewall (WAF)?",
  "options": [
    "SQL injection using encoded payloads",
    "Cross-site scripting (XSS) using DOM manipulation",
    "HTTP parameter pollution",
    "Brute-force attacks targeting known vulnerabilities"
  ],
  "correctOption": "D",
  "explanation": "While brute-force attacks can be mitigated by WAFs through rate limiting,  well-crafted SQL injection and XSS attacks often bypass WAFs due to their ability to obfuscate malicious code.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9af6"
  },
  "question": "In a blind SQL injection attack, how does an attacker typically determine the structure of a database?",
  "options": [
    "Error-based techniques",
    "Timing-based attacks",
    "Union-based injections",
    "Direct data extraction"
  ],
  "correctOption": "B",
  "explanation": "Timing-based attacks measure the response time of queries to infer information about the database schema.  Error-based attacks rely on errors revealed by the database.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9afa"
  },
  "question": "How does a 'Session Fixation' attack work?",
  "options": [
    "Manipulating the session ID to gain unauthorized access",
    "Predicting the session ID using brute-force techniques",
    "Using a compromised session cookie to impersonate a user",
    "Exploiting vulnerabilities in session management to hijack sessions"
  ],
  "correctOption": "A",
  "explanation": "Attackers force the victim to use a pre-selected session ID, allowing them to hijack the session once the victim logs in with that ID.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9af9"
  },
  "question": "Which technique is MOST effective for detecting and preventing zero-day exploits in web applications?",
  "options": [
    "Regular security audits and penetration testing",
    "Implementing strong input validation and output encoding",
    "Using a well-configured WAF",
    "Employing runtime application self-protection (RASP)"
  ],
  "correctOption": "D",
  "explanation": "RASP monitors application behavior at runtime, detecting and mitigating suspicious actions that might indicate a zero-day exploit, even if it bypasses other security measures.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9af8"
  },
  "question": "A server-side request forgery (SSRF) attack allows an attacker to make HTTP requests on behalf of the server. Which of the following is NOT a potential consequence?",
  "options": [
    "Accessing internal network resources",
    "Performing denial-of-service attacks against external servers",
    "Retrieving sensitive data from the server's file system",
    "Modifying the server's operating system settings directly"
  ],
  "correctOption": "D",
  "explanation": "SSRF typically allows access to internal or external network resources, and data retrieval. Modifying OS settings usually requires deeper privilege escalation beyond SSRF alone.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9af5"
  },
  "question": "What is a common technique used to bypass Same-Origin Policy restrictions, often leveraged in XSS attacks?",
  "options": [
    "Cross-site tracing",
    "Session hijacking",
    "JSONP (JSON with Padding)",
    "Clickjacking"
  ],
  "correctOption": "C",
  "explanation": "JSONP exploits the fact that `<script>` tags can bypass SOP to load data from other domains.  This allows attackers to retrieve data or execute code.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9af4"
  },
  "question": "You discover a vulnerability allowing you to upload arbitrary files to a web server.  Which file type is MOST likely to provide you with a foothold for further exploitation, assuming the server has weak security?",
  "options": [
    "a .jpg image",
    "a .txt document",
    "a .pdf file",
    "a .php file"
  ],
  "correctOption": "D",
  "explanation": "A .php file can contain server-side code.  Uploading a malicious .php file allows execution of arbitrary code on the server.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9af7"
  },
  "question": "What security measure can effectively prevent most cross-site request forgery (CSRF) attacks?",
  "options": [
    "Input validation",
    "Output encoding",
    "HTTPS",
    "Anti-CSRF tokens"
  ],
  "correctOption": "D",
  "explanation": "Anti-CSRF tokens are unpredictable, unique values that verify requests originate from the legitimate user's browser.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9857b320de848c99b9afc"
  },
  "question": "You suspect a web application is vulnerable to a local file inclusion (LFI) vulnerability. What type of input would you MOST likely manipulate to test for this?",
  "options": [
    "HTTP headers",
    "URL parameters",
    "POST body data",
    "Cookie values"
  ],
  "correctOption": "B",
  "explanation": "URL parameters are frequently used to pass file paths to server-side scripts, making them prime targets for LFI attacks.  Manipulating them allows you to specify different file paths.",
  "tags": [
    "XSS",
    "CSRF",
    "SQL Injection",
    "Authentication Vulnerabilities"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b0b"
  },
  "question": "What is the primary purpose of the `Enum` module in Elixir?",
  "options": [
    "Error handling",
    "Concurrency management",
    "Working with lists and collections",
    "File I/O"
  ],
  "correctOption": "C",
  "explanation": "The `Enum` module provides functions for working with enumerable data structures like lists, providing tools for manipulation and traversal.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b0c"
  },
  "question": "Which of these is NOT a core data structure in Elixir?",
  "options": [
    "List",
    "Map",
    "Tuple",
    "Set"
  ],
  "correctOption": "D",
  "explanation": "While sets are commonly used, they are not a core built-in data structure like lists, maps, and tuples.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b0d"
  },
  "question": "What does the `|>` operator represent in Elixir?",
  "options": [
    "Function composition",
    "Bitwise OR",
    "Conditional operator",
    "Pattern matching"
  ],
  "correctOption": "A",
  "explanation": "The pipe operator (`|>`) chains function calls, passing the result of one function as input to the next.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b0e"
  },
  "question": "How would you create a process in Elixir that does nothing but sleep for 5 seconds?",
  "options": [
    "`Process.sleep(5000)`",
    "`Task.sleep(5000)`",
    "`:timer.sleep(5000)`",
    "`GenServer.sleep(5000)`"
  ],
  "correctOption": "B",
  "explanation": "`Task.sleep/1` pauses the current process for a specified time, appropriate for simple delays within tasks.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b0f"
  },
  "question": "What is the primary difference between `GenServer` and `Agent`?",
  "options": [
    "`GenServer` is synchronous, `Agent` is asynchronous",
    "`GenServer` handles state, `Agent` does not",
    "`Agent` is more efficient for complex state management",
    "`GenServer` supports multiple clients, `Agent` is single-client only"
  ],
  "correctOption": "D",
  "explanation": "While both manage state, `GenServer` is designed for multiple clients and more complex state management, while `Agent` is simpler and better suited for single-client scenarios.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b10"
  },
  "question": "What is the role of a `Supervisor` in Elixir?",
  "options": [
    "Handles network requests",
    "Manages external databases",
    "Starts and monitors child processes",
    "Provides logging capabilities"
  ],
  "correctOption": "C",
  "explanation": "Supervisors are crucial for fault tolerance in Elixir, restarting crashed child processes and ensuring system stability.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b12"
  },
  "question": "Which module provides functions for working with dates and times in Elixir?",
  "options": [
    "`Calendar`",
    "`Time`",
    "`DateTime`",
    "`Date`"
  ],
  "correctOption": "C",
  "explanation": "The `DateTime` module provides comprehensive functions for manipulating dates and times, offering robust features.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b11"
  },
  "question": "What does the `with` statement accomplish in Elixir?",
  "options": [
    "Error handling and short-circuiting",
    "Concurrent process execution",
    "Creating new processes",
    "Defining anonymous functions"
  ],
  "correctOption": "A",
  "explanation": "The `with` statement elegantly handles potential errors in a series of operations; if one fails, the whole sequence stops.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b13"
  },
  "question": "How would you define a function that takes two arguments and returns their sum?",
  "options": [
    "`def sum(a, b), do: a + b`",
    "`sum(a, b) = a + b`",
    "`defmodule Sum, do: def sum(a, b), do: a + b`",
    "`def sum(a, b) -> a + b`"
  ],
  "correctOption": "A",
  "explanation": "This is the standard way to define a function in Elixir using the `def` keyword and the `do` block for function body.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98585320de848c99b9b14"
  },
  "question": "What's the purpose of behaviour in Elixir?",
  "options": [
    "Define data structures",
    "Implement error handling",
    "Provide a common interface for modules",
    "Manage concurrent processes"
  ],
  "correctOption": "C",
  "explanation": "Behaviours (e.g., `GenServer`) define a set of functions that modules can implement, enforcing a consistent interface and structure.",
  "tags": [
    "Functional Programming",
    "Concurrency",
    "Pattern Matching",
    "Phoenix Framework"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b25"
  },
  "question": "What does `NA` represent in R?",
  "options": [
    "a missing value",
    "a character string",
    "a numeric zero",
    "an error"
  ],
  "correctOption": "A",
  "explanation": "`NA` is a special value indicating a missing or undefined data point. It's not a string, zero, or error, but rather a specific indicator of missing data.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b27"
  },
  "question": "Which function is primarily used for creating a data frame in R?",
  "options": [
    "data.frame()",
    "matrix()",
    "list()",
    "array()"
  ],
  "correctOption": "A",
  "explanation": "`data.frame()` specifically creates data frames, a tabular data structure.  The others create different data structures.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b24"
  },
  "question": "What data structure in R is best suited for storing a collection of named elements?",
  "options": [
    "list",
    "vector",
    "matrix",
    "data frame"
  ],
  "correctOption": "A",
  "explanation": "Lists can hold elements of different data types and are often used to represent named collections.  Vectors are homogenous, matrices are 2D, and data frames are tabular.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b2a"
  },
  "question": "What is the purpose of the `apply()` family of functions in R?",
  "options": [
    "To perform loops",
    "To apply a function over array margins",
    "To create vectors",
    "To read files"
  ],
  "correctOption": "B",
  "explanation": "`apply()`, `lapply()`, `sapply()`, etc., apply a function across rows or columns of matrices/arrays or elements of lists.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b29"
  },
  "question": "Given a vector `x <- c(1, 2, NA, 4)`, what will `mean(x)` return?",
  "options": [
    "2.333...",
    "NA",
    "2",
    "an error"
  ],
  "correctOption": "B",
  "explanation": "The `mean()` function, by default, treats `NA` values as missing and returns `NA` if any are present.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b28"
  },
  "question": "What will `dim(matrix(1:9, nrow = 3))` return?",
  "options": [
    "NULL",
    "[1] 3 3",
    "[1] 9",
    "[1] 3"
  ],
  "correctOption": "B",
  "explanation": "`dim()` returns the dimensions of a matrix or array.  A 3x3 matrix will have dimensions 3 rows and 3 columns.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b26"
  },
  "question": "How would you subset the third element of a vector named 'my_vector'?",
  "options": [
    "my_vector[3]",
    "my_vector(3)",
    "my_vector{3}",
    "my_vector$3"
  ],
  "correctOption": "A",
  "explanation": "Square brackets `[]` are used for subsetting in R.  `my_vector[3]` selects the third element. The other options are incorrect syntax.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b2c"
  },
  "question": "You want to exclude the first 2 rows and last 2 rows from a data frame called 'my_data'.  Which R code achieves this?",
  "options": [
    "my_data[-c(1,2, nrow(my_data)-1, nrow(my_data)), ]",
    "my_data[3:(nrow(my_data)-2), ]",
    "my_data[-(1:2), ]",
    "my_data[-c(1:2, (nrow(my_data)-1):nrow(my_data)), ]"
  ],
  "correctOption": "D",
  "explanation": "Option D correctly uses negative indexing to remove the first two and last two rows. Option B is almost correct, but could fail with fewer than 4 rows.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b23"
  },
  "question": "Which function in R is used to create a sequence of numbers?",
  "options": [
    "seq()",
    "rep()",
    "c()",
    "sample()"
  ],
  "correctOption": "A",
  "explanation": "The `seq()` function generates regular sequences of numbers.  `rep()` repeats values, `c()` combines values, and `sample()` draws random samples.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98590320de848c99b9b2b"
  },
  "question": "What function would you use to efficiently read a large CSV file into R?",
  "options": [
    "read.table()",
    "read.csv()",
    "scan()",
    "load()"
  ],
  "correctOption": "B",
  "explanation": "`read.csv()` is optimized for reading comma-separated files. `read.table()` is more general but can be slower for large CSV files.",
  "tags": [
    "Data Manipulation",
    "Statistical Analysis",
    "Data Visualization",
    "Tidyverse"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b3b"
  },
  "question": "Which of the following is NOT a core characteristic of Big Data, as defined by the 5 Vs?",
  "options": [
    "Volume",
    "Velocity",
    "Variability",
    "Veracity",
    "Value"
  ],
  "correctOption": "E",
  "explanation": "While 'Value' is crucial for Big Data's application, it's not considered one of the core defining 5 Vs.  The 5 Vs are Volume, Velocity, Variety, Veracity, and Value.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b40"
  },
  "question": "In a MapReduce framework, what is the primary role of the 'Reduce' phase?",
  "options": [
    "To split the input data into smaller chunks",
    "To perform parallel processing on individual data chunks",
    "To combine the intermediate results from the Map phase",
    "To store the processed data in a distributed file system"
  ],
  "correctOption": "C",
  "explanation": "The Reduce phase aggregates the intermediate key-value pairs generated by the Map phase, performing calculations and producing the final results.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b3c"
  },
  "question": "In the context of NoSQL databases, what is the primary advantage of using a document database like MongoDB over a relational database like MySQL for handling Big Data?",
  "options": [
    "Strict schema enforcement for data integrity",
    "Superior ACID transaction properties",
    "Ease of scaling across multiple servers",
    "Efficient querying of large, complex relational datasets"
  ],
  "correctOption": "C",
  "explanation": "Document databases excel at horizontal scalability, allowing for easier handling of massive datasets compared to the often more complex scaling of relational databases.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b3f"
  },
  "question": "What is a common approach to address the 'Veracity' challenge in Big Data, involving identifying and handling inconsistencies or inaccuracies?",
  "options": [
    "Data virtualization",
    "Data aggregation",
    "Data quality management",
    "Data mining"
  ],
  "correctOption": "C",
  "explanation": "Data quality management focuses on ensuring the accuracy, completeness, consistency, and timeliness of data, directly addressing the veracity challenge.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b3e"
  },
  "question": "Which technique is MOST effective for handling streaming data in a real-time Big Data application requiring immediate insights?",
  "options": [
    "Batch processing with Hadoop",
    "Data warehousing with ETL processes",
    "In-memory data grids",
    "Cloud-based data lakes"
  ],
  "correctOption": "C",
  "explanation": "In-memory data grids provide very low latency access to data, making them ideal for real-time analytics and immediate insights from streaming data.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b3d"
  },
  "question": "What is a significant challenge posed by the 'Variety' aspect of Big Data to data processing pipelines?",
  "options": [
    "Inability to process structured data",
    "Difficulty in maintaining data consistency",
    "Lack of efficient storage solutions",
    "The need for diverse and flexible data processing techniques"
  ],
  "correctOption": "D",
  "explanation": "The diverse nature of Big Data (structured, semi-structured, unstructured) requires flexible and adaptable processing methods, posing a significant development and implementation challenge.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b42"
  },
  "question": "What is a key advantage of using Apache Kafka in a Big Data system?",
  "options": [
    "Provides in-memory data processing",
    "Offers superior data warehousing capabilities",
    "Enables real-time data streaming and ingestion",
    "Is specifically designed for batch data processing"
  ],
  "correctOption": "C",
  "explanation": "Apache Kafka is a distributed streaming platform, perfectly suited for real-time data ingestion and processing pipelines.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b43"
  },
  "question": "Explain the concept of data lineage in the context of Big Data and why it's important.",
  "options": [
    "The process of cleaning and transforming raw data",
    "The method used to store data in a distributed fashion",
    "The ability to track the origins and transformations of data throughout its lifecycle",
    "The technique of predicting future trends from historical data"
  ],
  "correctOption": "C",
  "explanation": "Data lineage allows for traceability and accountability, crucial for data governance, debugging, compliance, and understanding the reliability of insights derived from Big Data.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b41"
  },
  "question": "Which Big Data architecture is best suited for handling both batch and real-time processing of diverse data types at a very large scale?",
  "options": [
    "Lambda architecture",
    "Kappa architecture",
    "Delta architecture",
    "Zeta architecture"
  ],
  "correctOption": "A",
  "explanation": "Lambda architecture combines batch and real-time layers to handle both types of processing, allowing for scalable and comprehensive data analysis.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9859a320de848c99b9b44"
  },
  "question": "How does data anonymization contribute to addressing privacy concerns within Big Data applications?",
  "options": [
    "By encrypting data at rest",
    "By removing personally identifiable information from datasets",
    "By providing access control mechanisms",
    "By storing data in a secure cloud environment"
  ],
  "correctOption": "B",
  "explanation": "Data anonymization removes or masks identifying information, making it harder to link data back to individuals and protecting privacy while allowing data analysis.",
  "tags": [
    "Hadoop",
    "Spark",
    "NoSQL",
    "Data Processing"
  ],
  "domain": "Computer Science - Data Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b56"
  },
  "question": "What is the key difference between stochastic gradient descent (SGD) and mini-batch gradient descent?",
  "options": [
    "SGD uses the entire dataset for each weight update, while mini-batch uses a subset.",
    "Mini-batch uses the entire dataset, while SGD uses a single data point.",
    "They are functionally equivalent; the difference is only in naming.",
    "SGD is used for classification, while mini-batch is used for regression."
  ],
  "correctOption": "B",
  "explanation": "SGD updates weights based on a single data point, while mini-batch uses a small random subset for more efficient and stable updates.",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b53"
  },
  "question": "Which of the following regularization techniques is particularly effective in preventing overfitting in deep neural networks by adding a penalty to the loss function based on the magnitude of the network's weights?",
  "options": [
    "Dropout",
    "Batch Normalization",
    "Early Stopping",
    "L1 and L2 Regularization"
  ],
  "correctOption": "D",
  "explanation": "L1 and L2 regularization add penalties to the loss function proportional to the magnitude of weights, shrinking them and preventing overfitting.",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b57"
  },
  "question": "How does a convolutional neural network (CNN) achieve translation invariance?",
  "options": [
    "By using fully connected layers.",
    "By using max-pooling layers and filters that scan across the input.",
    "Through the use of backpropagation.",
    "By employing recurrent connections between layers."
  ],
  "correctOption": "B",
  "explanation": "Max-pooling and filters create feature maps that are partially translation invariant, meaning the same feature can be recognized regardless of its precise location.",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b54"
  },
  "question": "In backpropagation, what is the primary purpose of the chain rule of calculus?",
  "options": [
    "To calculate the gradient of the activation function",
    "To efficiently compute the gradients of the loss function with respect to the weights",
    "To determine the optimal learning rate",
    "To initialize the weights of the neural network"
  ],
  "correctOption": "B",
  "explanation": "The chain rule allows for efficient calculation of gradients through multiple layers, enabling weight updates during backpropagation.",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b59"
  },
  "question": "What is the purpose of a hyperparameter in a neural network, and how do they differ from parameters?",
  "options": [
    "Hyperparameters are learned during training, while parameters are fixed beforehand.",
    "Parameters are learned during training; hyperparameters control the learning process and are set manually.",
    "They are essentially the same thing.",
    "Hyperparameters determine the network architecture, while parameters define the neuron's activation function."
  ],
  "correctOption": "B",
  "explanation": "Hyperparameters (e.g., learning rate, batch size) control the training process; parameters (weights and biases) are learned during training.",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b58"
  },
  "question": "Describe the role of an activation function in a neuron and why it's crucial for the network's performance.  Which activation function is best suited for the output layer of a binary classification problem and why?",
  "options": [
    "A. Introduces non-linearity; Sigmoid is best for binary classification as its output is between 0 and 1, representing probabilities.",
    "B. Normalizes input data; ReLU is best as it's computationally efficient.",
    "C.  Adds bias to the neuron; Tanh is best because its range is from -1 to 1.",
    "D. It simply sums the weighted inputs;  No specific activation is best."
  ],
  "correctOption": "A",
  "explanation": "Activation functions introduce non-linearity, crucial for learning complex patterns.  Sigmoid's range maps well to binary probabilities (0-1).",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b5a"
  },
  "question": "Explain the concept of a recurrent neural network (RNN) and its suitability for sequential data. What is a common challenge associated with training RNNs?",
  "options": [
    "RNNs process data sequentially, making them suitable for time series; exploding/vanishing gradients are a challenge.",
    "RNNs are only suitable for image data processing.",
    "RNNs are equivalent to feedforward networks, they are not suitable for sequential data.",
    "RNNs process data in parallel, leading to faster processing but poor performance in sequential data."
  ],
  "correctOption": "A",
  "explanation": "RNNs use recurrent connections to process sequences, but vanishing/exploding gradients hinder training deep RNNs.",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b5c"
  },
  "question": "Describe the difference between a generative and a discriminative model in the context of neural networks. Provide an example of each.",
  "options": [
    "A. Generative models learn the data distribution to generate new samples (e.g., GANs), while discriminative models learn to distinguish between classes (e.g., CNNs for image classification).",
    "B. Both model types are identical in their approach to learning and classification.",
    "C. Generative models focus on classifying data, while discriminative models focus on generating new data points.",
    "D. Generative models are faster to train but less accurate than discriminative models."
  ],
  "correctOption": "A",
  "explanation": "Generative models learn the underlying data distribution to generate new samples, while discriminative models focus on separating data points into classes.",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b5b"
  },
  "question": "How does transfer learning improve the training of a neural network, and what are the advantages?",
  "options": [
    "It involves training the network from scratch with new data, improving accuracy.",
    "It uses pre-trained weights from a model trained on a large dataset, speeding up training and requiring less data.",
    "It uses random weights and biases, speeding up the training process.",
    "It has no effect on training time or accuracy."
  ],
  "correctOption": "B",
  "explanation": "Transfer learning leverages knowledge from a pre-trained model, reducing training time and data requirements while often improving performance.",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985a8320de848c99b9b55"
  },
  "question": "Explain the vanishing gradient problem and its impact on training deep neural networks.  Which activation function is less susceptible to this problem and why?",
  "options": [
    "A. It occurs when gradients become very small during backpropagation, hindering learning in deeper layers; ReLU is less susceptible because its derivative is a constant for positive inputs. ",
    "B. It occurs when gradients explode during backpropagation, leading to instability; Sigmoid is less susceptible because it outputs values between 0 and 1.",
    "C. It's a problem in shallow networks where gradients become zero;  Tanh is less susceptible due to its symmetrical output range.",
    "D. It impacts only convolutional neural networks;  Softmax is less susceptible because it outputs probabilities."
  ],
  "correctOption": "A",
  "explanation": "Vanishing gradients prevent weight updates in deeper layers. ReLU's constant derivative for positive inputs avoids this issue.",
  "tags": [
    "Perceptrons",
    "Backpropagation",
    "Activation Functions",
    "Network Architectures"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b6d"
  },
  "question": "In a BSP tree used for hidden surface removal, what is the primary factor determining the efficiency of the algorithm?",
  "options": [
    "A) Number of polygons in the scene",
    "B) The order in which polygons are inserted into the tree",
    "C) The complexity of the polygon shapes",
    "D) The processing power of the computer"
  ],
  "correctOption": "B",
  "explanation": "The efficiency of BSP tree traversal and hidden surface determination is highly dependent on the balance of the tree, directly impacted by the insertion order of polygons.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b6f"
  },
  "question": "Describe a significant advantage and a significant disadvantage of using NURBS curves in computer-aided design (CAD).",
  "options": [
    "A) Advantage: Precise control; Disadvantage: Computationally expensive",
    "B) Advantage: Easy to manipulate; Disadvantage: Limited control over shape",
    "C) Advantage: Fast rendering; Disadvantage: Poor accuracy",
    "D) Advantage: Simple implementation; Disadvantage: Not suitable for complex shapes"
  ],
  "correctOption": "A",
  "explanation": "NURBS curves offer high precision and flexibility, but the mathematical calculations required for rendering and manipulation can be computationally intensive.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b6c"
  },
  "question": "Explain the difference between Gouraud shading and Phong shading, and identify which generally produces higher-quality highlights.",
  "options": [
    "A) Gouraud interpolates colors, Phong interpolates normals; Phong produces higher-quality highlights.",
    "B) Gouraud interpolates normals, Phong interpolates colors; Gouraud produces higher-quality highlights.",
    "C) Both interpolate colors; Phong is faster.",
    "D) Both interpolate normals; Gouraud is more accurate."
  ],
  "correctOption": "A",
  "explanation": "Gouraud shading interpolates colors across polygons, while Phong shading interpolates normals.  Phong shading's normal interpolation leads to smoother and more accurate highlights.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b70"
  },
  "question": "Which texture mapping technique addresses the problem of texture distortion near the edges of polygons, especially noticeable with perspective projection?",
  "options": [
    "A) Environment mapping",
    "B) Bump mapping",
    "C) Parallax mapping",
    "D) Texture filtering"
  ],
  "correctOption": "C",
  "explanation": "Parallax mapping attempts to simulate the effect of surface relief, creating a more realistic appearance of depth and reducing distortion near polygon edges by displacing the texture sampling point based on surface depth.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b6e"
  },
  "question": "What is the purpose of a Z-buffer (depth buffer) in computer graphics?",
  "options": [
    "A) To store texture coordinates",
    "B) To store the color of each pixel",
    "C) To store the depth of each pixel relative to the viewer",
    "D) To store lighting calculations for each polygon"
  ],
  "correctOption": "C",
  "explanation": "The Z-buffer is a crucial component of the rasterization pipeline; it holds the depth value for each pixel, allowing the system to determine which pixel is closest to the viewer and should be visible.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b74"
  },
  "question": "Explain the concept of  aliasing in computer graphics, and describe a common technique used to mitigate it.",
  "options": [
    "A) Aliasing is caused by texture compression; Mitigated by using higher resolution textures.",
    "B) Aliasing is caused by the limited resolution of the display; Mitigated by supersampling.",
    "C) Aliasing is caused by lighting calculations; Mitigated by using more advanced shading techniques.",
    "D) Aliasing is caused by polygon clipping; Mitigated by using a better clipping algorithm."
  ],
  "correctOption": "B",
  "explanation": "Aliasing, specifically jagged edges, arises from undersampling. Supersampling (taking multiple samples per pixel) reduces aliasing by better representing the continuous scene in the discrete pixel grid.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b6b"
  },
  "question": "Which of the following algorithms is best suited for rendering highly complex scenes with millions of polygons, prioritizing speed over absolute realism?",
  "options": [
    "Ray Tracing",
    "Path Tracing",
    "Rasterization",
    "Radiosity"
  ],
  "correctOption": "C",
  "explanation": "Rasterization is significantly faster than ray tracing or path tracing, making it suitable for real-time rendering of complex scenes.  While less realistic, it's the most efficient for high polygon counts.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b71"
  },
  "question": "How does ray tracing handle reflections and refractions in a scene?",
  "options": [
    "A) By approximating surface normals",
    "B) By recursively tracing rays from reflection and refraction points",
    "C) By using pre-computed light maps",
    "D) By interpolating colors between adjacent pixels"
  ],
  "correctOption": "B",
  "explanation": "Ray tracing simulates reflections and refractions by recursively casting new rays from the intersection points, following the paths of light to accurately model these optical phenomena.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b72"
  },
  "question": "What is the key difference between procedural texturing and image-based texturing?",
  "options": [
    "A) Procedural textures are more computationally expensive",
    "B) Image-based textures offer more realism",
    "C) Procedural textures are generated algorithmically, while image-based textures are loaded from an image file",
    "D) Image-based textures are more suitable for complex surfaces"
  ],
  "correctOption": "C",
  "explanation": "Procedural texturing uses algorithms to generate texture patterns, while image-based texturing uses pre-created images applied to surfaces.  The primary difference lies in the method of texture generation and storage.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985b5320de848c99b9b73"
  },
  "question": "In a radiosity algorithm, what is a form factor, and what role does it play in the calculation?",
  "options": [
    "A) A measure of surface area",
    "B) A measure of the fraction of energy leaving one surface that reaches another surface",
    "C) A measure of the surface's reflectivity",
    "D) A measure of the distance between two surfaces"
  ],
  "correctOption": "B",
  "explanation": "The form factor represents the geometric relationship between two surfaces, quantifying how much energy emitted from one surface will directly illuminate the other. It's essential for calculating inter-surface energy exchange in radiosity.",
  "tags": [
    "Rendering",
    "Shading",
    "Transformations",
    "3D Modeling"
  ],
  "domain": "Computer Science - Graphics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b83"
  },
  "question": "Which cloud service model offers complete control over hardware and software infrastructure?",
  "options": [
    "IaaS",
    "PaaS",
    "SaaS",
    "FaaS"
  ],
  "correctOption": "A",
  "explanation": "IaaS (Infrastructure as a Service) provides the most control, offering virtualized compute, storage, and networking resources.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b85"
  },
  "question": "Which of the following is NOT a common cloud deployment model?",
  "options": [
    "Public Cloud",
    "Hybrid Cloud",
    "Private Cloud",
    "Community Cloud"
  ],
  "correctOption": "E",
  "explanation": "These are all common cloud deployment models.  There is no option E.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b88"
  },
  "question": "What is serverless computing?",
  "options": [
    "Managing your own servers",
    "Running applications without managing servers",
    "Using only virtual servers",
    "A type of cloud storage"
  ],
  "correctOption": "B",
  "explanation": "Serverless computing abstracts away server management, allowing developers to focus on code execution.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b8a"
  },
  "question": "Which cloud provider is known for its emphasis on open source technologies?",
  "options": [
    "Amazon Web Services (AWS)",
    "Microsoft Azure",
    "Google Cloud Platform (GCP)",
    "IBM Cloud"
  ],
  "correctOption": "C",
  "explanation": "Google Cloud Platform is heavily invested in and known for its use of open-source technologies.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b84"
  },
  "question": "What is a key advantage of using a Content Delivery Network (CDN)?",
  "options": [
    "Reduced latency for users",
    "Increased server costs",
    "Improved application security",
    "Simplified database management"
  ],
  "correctOption": "A",
  "explanation": "CDNs cache content closer to users, reducing latency and improving website performance.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b86"
  },
  "question": "What does the acronym 'API' stand for in the context of cloud computing?",
  "options": [
    "Application Programming Interface",
    "Advanced Processing Instruction",
    "Automated Processing Interface",
    "Application Protocol Integration"
  ],
  "correctOption": "A",
  "explanation": "API stands for Application Programming Interface, allowing applications to interact with cloud services.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b87"
  },
  "question": "A company chooses to utilize a hybrid cloud strategy. What is a likely motivation for this decision?",
  "options": [
    "Desire for complete control over data",
    "Cost reduction only",
    "Requirement for high scalability and compliance requirements",
    "To combine the benefits of both public and private clouds"
  ],
  "correctOption": "D",
  "explanation": "Hybrid clouds leverage the benefits of both public (scalability, cost-effectiveness) and private (security, control) clouds.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b89"
  },
  "question": "What is a key security concern related to cloud computing?",
  "options": [
    "Data breaches",
    "Lack of scalability",
    "Limited software options",
    "High hardware costs"
  ],
  "correctOption": "A",
  "explanation": "Data breaches are a major concern, especially in public cloud environments where data is shared.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b8b"
  },
  "question": "What is a significant advantage of using a Platform as a Service (PaaS) model?",
  "options": [
    "Reduced infrastructure management",
    "Complete hardware control",
    "Lower security considerations",
    "Simplified end-user management"
  ],
  "correctOption": "A",
  "explanation": "PaaS providers handle underlying infrastructure, allowing developers to focus on application development.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985be320de848c99b9b8c"
  },
  "question": "What is a major challenge associated with migrating applications to a cloud environment?",
  "options": [
    "Increased cost",
    "Improved scalability",
    "Enhanced security",
    "Compatibility and integration issues"
  ],
  "correctOption": "D",
  "explanation": "Migrating applications requires careful consideration of compatibility with cloud services and potential integration challenges.",
  "tags": [
    "IaaS",
    "PaaS",
    "SaaS",
    "Virtualization"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9b9c"
  },
  "question": "What is the primary challenge in scaling up the number of qubits in a quantum computer, besides qubit coherence?",
  "options": [
    "Maintaining qubit entanglement",
    "Reducing qubit decoherence times",
    "Qubit connectivity and control",
    "Developing more efficient quantum gates"
  ],
  "correctOption": "C",
  "explanation": "Controlling and entangling large numbers of qubits requires complex control systems and minimizing crosstalk between qubits, presenting a significant scaling hurdle.",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9ba0"
  },
  "question": "What does the 'topological protection' approach aim to achieve in quantum computing?",
  "options": [
    "Improving qubit connectivity",
    "Reducing gate errors through topological properties",
    "Enhancing qubit coherence times through manipulation of qubit states",
    "Making quantum computers more energy-efficient"
  ],
  "correctOption": "B",
  "explanation": "Topological quantum computation uses non-local properties of quantum states to protect information from local errors, promising inherent fault tolerance.",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9ba3"
  },
  "question": "How does quantum supremacy demonstrate a potential advantage of quantum computation?",
  "options": [
    "By solving currently intractable problems",
    "By demonstrating the construction of fault-tolerant quantum computers",
    "By solving a specific problem faster than the best classical algorithm",
    "By proving quantum computers are superior to classical computers in all tasks"
  ],
  "correctOption": "C",
  "explanation": "Quantum supremacy experiments aim to show that a quantum computer can solve a particular problem faster than any known classical algorithm, though not necessarily solving practically useful problems.",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9b9b"
  },
  "question": "Which of the following quantum algorithms offers a potential exponential speedup over classical algorithms for factoring large numbers?",
  "options": [
    "Grover's Algorithm",
    "Deutsch-Jozsa Algorithm",
    "Shor's Algorithm",
    "Quantum Annealing"
  ],
  "correctOption": "C",
  "explanation": "Shor's algorithm leverages quantum superposition and quantum Fourier transform to factor numbers exponentially faster than the best-known classical algorithms.",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9b9f"
  },
  "question": "What is the significance of the quantum adiabatic theorem in the context of quantum computation?",
  "options": [
    "It guarantees fault-tolerant quantum computation",
    "It describes how quantum systems evolve under slow changes to their Hamiltonian",
    "It determines the optimal qubit arrangement for quantum annealing",
    "It provides an upper bound on quantum speedups"
  ],
  "correctOption": "B",
  "explanation": "The adiabatic theorem underpins adiabatic quantum computation, stating that a system prepared in the ground state will remain in the ground state under slow Hamiltonian changes.",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9b9e"
  },
  "question": "Which type of quantum gate is NOT universally sufficient to construct any quantum circuit?",
  "options": [
    "Hadamard gate",
    "CNOT gate",
    "Phase gate",
    "Toffoli gate"
  ],
  "correctOption": "A",
  "explanation": "While Hadamard gates are crucial, a universal set requires at least one gate that's not single-qubit and can create entanglement (like CNOT).",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9ba2"
  },
  "question": "What is a major difference between quantum gate-based and adiabatic quantum computing?",
  "options": [
    "Use of entanglement",
    "Computational model",
    "Scalability",
    "Error correction"
  ],
  "correctOption": "B",
  "explanation": "Gate-based models use sequences of gates to manipulate qubits, while adiabatic quantum computing relies on the adiabatic theorem to find the ground state of a Hamiltonian.",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9b9d"
  },
  "question": "In quantum error correction, what is the primary goal of encoding information into multiple qubits?",
  "options": [
    "To increase computational speed",
    "To enhance qubit coherence times",
    "To protect quantum information from noise and errors",
    "To reduce the complexity of quantum gates"
  ],
  "correctOption": "C",
  "explanation": "Quantum error correction codes encode information redundantly, enabling the detection and correction of errors caused by decoherence and noise.",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9ba1"
  },
  "question": "In quantum annealing, the system's evolution is driven by which parameter?",
  "options": [
    "The qubit's energy level",
    "The Hamiltonian's transverse field strength",
    "The time-dependent Hamiltonian",
    "The quantum entanglement strength"
  ],
  "correctOption": "C",
  "explanation": "Quantum annealing uses a time-dependent Hamiltonian to gradually reduce the transverse field, moving the system to its ground state, corresponding to the solution of the optimization problem.",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985c9320de848c99b9ba4"
  },
  "question": "What is the primary role of a quantum compiler in quantum computing?",
  "options": [
    "Optimizing quantum algorithms for specific hardware architectures",
    "Translating high-level quantum algorithms into low-level gate sequences",
    "Correcting errors in quantum computations",
    "Managing the flow of data between different components of a quantum computer"
  ],
  "correctOption": "B",
  "explanation": "Quantum compilers translate high-level descriptions of quantum algorithms into sequences of elementary quantum gates that can be executed on a specific quantum computer.",
  "tags": [
    "Qubits",
    "Quantum Gates",
    "Quantum Algorithms",
    "Quantum Entanglement"
  ],
  "domain": "Computer Science - Emerging Technologies",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bb8"
  },
  "question": "Which of the following is a common technique to handle overfitting in machine learning models?",
  "options": [
    "Increasing model complexity",
    "Using more data",
    "Reducing regularization",
    "Increasing the learning rate"
  ],
  "correctOption": "B",
  "explanation": "More data helps a model generalize better, reducing overfitting.  Regularization is also a common technique.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bb7"
  },
  "question": "What is the bias-variance tradeoff?",
  "options": [
    "A technique for feature scaling",
    "A method for model selection",
    "The balance between model complexity and its ability to generalize",
    "A type of regularization technique"
  ],
  "correctOption": "C",
  "explanation": "The bias-variance tradeoff refers to the balance between a model's ability to fit the training data (bias) and its ability to generalize to new data (variance).",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bb4"
  },
  "question": "What is the primary goal of dimensionality reduction in machine learning?",
  "options": [
    "Increasing model complexity",
    "Reducing training time",
    "Improving model accuracy by removing irrelevant features",
    "Adding noise to the data"
  ],
  "correctOption": "C",
  "explanation": "Dimensionality reduction aims to improve model accuracy and efficiency by eliminating irrelevant or redundant features.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bb5"
  },
  "question": "In k-Nearest Neighbors (k-NN), what does the 'k' represent?",
  "options": [
    "The number of dimensions in the data",
    "The distance metric used",
    "The number of nearest neighbors considered",
    "The number of classes in the dataset"
  ],
  "correctOption": "C",
  "explanation": "'k' in k-NN denotes the number of nearest neighbors used to classify or regress a new data point.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bb6"
  },
  "question": "Which algorithm is best suited for handling high-dimensional data with many irrelevant features?",
  "options": [
    "Linear Regression",
    "Decision Tree",
    "Support Vector Machine (SVM)",
    "Principal Component Analysis (PCA)"
  ],
  "correctOption": "D",
  "explanation": "PCA is a dimensionality reduction technique effective in handling high-dimensional data by identifying principal components.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bb3"
  },
  "question": "Which of the following is NOT a type of machine learning?",
  "options": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Reinforcement Learning",
    "Procedural Learning"
  ],
  "correctOption": "D",
  "explanation": "Procedural learning is a cognitive learning process, not a machine learning paradigm.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bb9"
  },
  "question": "What is the purpose of a confusion matrix in machine learning?",
  "options": [
    "To visualize the training process",
    "To evaluate the performance of a classification model",
    "To select the best features",
    "To perform feature scaling"
  ],
  "correctOption": "B",
  "explanation": "A confusion matrix displays the counts of true positive, true negative, false positive, and false negative predictions, allowing for performance evaluation.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bba"
  },
  "question": "Which metric is most suitable for evaluating a binary classification model when the classes are imbalanced?",
  "options": [
    "Accuracy",
    "Precision",
    "Recall",
    "F1-score"
  ],
  "correctOption": "D",
  "explanation": "The F1-score considers both precision and recall, making it more robust to imbalanced datasets than accuracy alone.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bbb"
  },
  "question": "What is a hyperparameter in machine learning?",
  "options": [
    "A parameter learned during model training",
    "A parameter that defines the model's architecture and learning process",
    "A feature in the dataset",
    "A metric used to evaluate model performance"
  ],
  "correctOption": "B",
  "explanation": "Hyperparameters are set before the training process begins, unlike model parameters that are learned during training.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985d3320de848c99b9bbc"
  },
  "question": "How does regularization help prevent overfitting?",
  "options": [
    "By adding noise to the data",
    "By increasing model complexity",
    "By adding penalties to the model's loss function based on the magnitude of the parameters",
    "By reducing the number of training iterations"
  ],
  "correctOption": "C",
  "explanation": "Regularization techniques (like L1 and L2) add penalties to the loss function, discouraging overly complex models and preventing overfitting.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Model Evaluation",
    "Feature Engineering"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bd0"
  },
  "question": "What is the integral of ∫(2x + 1) dx?",
  "options": [
    "x² + x + C",
    "2x² + x + C",
    "x² + 1 + C",
    "2x + C"
  ],
  "correctOption": "A",
  "explanation": "Integrating term by term, the integral is x² + x + C, where C is the constant of integration.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bcb"
  },
  "question": "If a line has a slope of 2 and passes through the point (1, 3), what is its equation in slope-intercept form (y = mx + b)?",
  "options": [
    "y = 2x + 1",
    "y = 2x + 5",
    "y = 2x - 1",
    "y = x + 2"
  ],
  "correctOption": "A",
  "explanation": "Using the point-slope form, y - 3 = 2(x - 1), simplifies to y = 2x + 1.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bcd"
  },
  "question": "Simplify the expression: (3x²y³)² / (xy)",
  "options": [
    "9x³y⁵",
    "9x²y⁴",
    "9x³y⁴",
    "6x³y⁵"
  ],
  "correctOption": "C",
  "explanation": "(3x²y³)² simplifies to 9x⁴y⁶. Dividing by xy gives 9x³y⁵.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bd2"
  },
  "question": "What is the sum of the infinite geometric series 1 + 1/2 + 1/4 + 1/8 + ...?",
  "options": [
    "1",
    "2",
    "3",
    "∞"
  ],
  "correctOption": "B",
  "explanation": "The formula for the sum of an infinite geometric series is a / (1 - r), where a = 1 and r = 1/2.  This gives 1 / (1 - 1/2) = 2.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bd3"
  },
  "question": "Solve the system of equations: x + y = 5 and x - y = 1",
  "options": [
    "x = 3, y = 2",
    "x = 2, y = 3",
    "x = 4, y = 1",
    "x = 1, y = 4"
  ],
  "correctOption": "A",
  "explanation": "Adding the two equations gives 2x = 6, so x = 3. Substituting into the first equation gives y = 2.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bd1"
  },
  "question": "If sin(θ) = 3/5 and θ is in the second quadrant, what is cos(θ)?",
  "options": [
    "4/5",
    "-4/5",
    "3/5",
    "-3/5"
  ],
  "correctOption": "B",
  "explanation": "Using the Pythagorean identity, cos²(θ) = 1 - sin²(θ) = 1 - (9/25) = 16/25.  Since θ is in the second quadrant, cos(θ) = -4/5.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bd4"
  },
  "question": "A bag contains 5 red balls and 3 blue balls.  If two balls are drawn without replacement, what is the probability that both are red?",
  "options": [
    "5/14",
    "25/56",
    "5/8",
    "1/2"
  ],
  "correctOption": "A",
  "explanation": "The probability of drawing a red ball first is 5/8.  The probability of drawing a second red ball is 4/7. Therefore the probability of both being red is (5/8) * (4/7) = 5/14.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bcc"
  },
  "question": "What is the solution to the quadratic equation x² - 5x + 6 = 0?",
  "options": [
    "x = 2, x = 3",
    "x = -2, x = -3",
    "x = 1, x = 6",
    "x = -1, x = -6"
  ],
  "correctOption": "A",
  "explanation": "Factoring the equation gives (x - 2)(x - 3) = 0, resulting in x = 2 and x = 3.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bcf"
  },
  "question": "What is the derivative of f(x) = 3x² - 4x + 5?",
  "options": [
    "f'(x) = 6x - 4",
    "f'(x) = 3x - 4",
    "f'(x) = 6x² - 4",
    "f'(x) = 6x² - 4x"
  ],
  "correctOption": "A",
  "explanation": "Applying the power rule of differentiation, the derivative is 6x - 4.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985df320de848c99b9bce"
  },
  "question": "Find the value of x: log₂(x) = 3",
  "options": [
    "x = 6",
    "x = 8",
    "x = 9",
    "x = 10"
  ],
  "correctOption": "B",
  "explanation": "By definition of logarithms, 2³ = x, therefore x = 8.",
  "tags": [
    "Discrete Math",
    "Linear Algebra",
    "Calculus",
    "Probability"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9be4"
  },
  "question": "What protocol is primarily used for transferring files between computers on a network?",
  "options": [
    "HTTP",
    "SMTP",
    "FTP",
    "DNS"
  ],
  "correctOption": "C",
  "explanation": "FTP (File Transfer Protocol) is designed specifically for uploading and downloading files over a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9be5"
  },
  "question": "In TCP/IP model, which layer is responsible for end-to-end data delivery and connection management?",
  "options": [
    "Network Access Layer",
    "Internet Layer",
    "Transport Layer",
    "Application Layer"
  ],
  "correctOption": "C",
  "explanation": "The Transport Layer (TCP) handles reliable, ordered delivery of data segments between applications on different hosts.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9be8"
  },
  "question": "Which addressing scheme uses a hierarchical structure to organize IP addresses?",
  "options": [
    "Classless Inter-Domain Routing (CIDR)",
    "Address Resolution Protocol (ARP)",
    "Reverse Address Lookup (RAL)",
    "Domain Name System (DNS)"
  ],
  "correctOption": "A",
  "explanation": "CIDR uses prefixes to represent network sizes, enabling efficient IP address allocation and routing.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9be3"
  },
  "question": "Which network topology offers the highest degree of redundancy and fault tolerance?",
  "options": [
    "Bus",
    "Star",
    "Ring",
    "Mesh"
  ],
  "correctOption": "D",
  "explanation": "A mesh topology has multiple paths between devices, ensuring that if one path fails, others remain operational.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9be9"
  },
  "question": "What is the primary function of a router?",
  "options": [
    "To connect devices within a single network",
    "To translate domain names into IP addresses",
    "To forward data packets between different networks",
    "To provide network security through firewalls"
  ],
  "correctOption": "C",
  "explanation": "Routers forward data packets based on their destination IP addresses, enabling communication between different networks.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9beb"
  },
  "question": "What protocol is used to dynamically assign IP addresses to devices on a network?",
  "options": [
    "DHCP",
    "ARP",
    "ICMP",
    "DNS"
  ],
  "correctOption": "A",
  "explanation": "DHCP (Dynamic Host Configuration Protocol) automatically assigns IP addresses, subnet masks, and other network parameters.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9bea"
  },
  "question": "What is a common method used to prevent network congestion?",
  "options": [
    "Using a single large network",
    "Implementing Quality of Service (QoS)",
    "Disabling network security features",
    "Increasing the number of network devices"
  ],
  "correctOption": "B",
  "explanation": "QoS prioritizes certain types of network traffic, ensuring that critical data is delivered even during periods of high congestion.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9bec"
  },
  "question": "What is a major difference between a switch and a hub?",
  "options": [
    "Switches forward data to all connected devices; hubs forward data only to the intended recipient.",
    "Hubs are faster than switches.",
    "Switches use MAC addresses, hubs use IP addresses.",
    "Hubs are more secure than switches."
  ],
  "correctOption": "C",
  "explanation": "Switches use MAC addresses to forward data only to the intended recipient, while hubs broadcast data to all connected devices.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9be6"
  },
  "question": "What does a MAC address uniquely identify?",
  "options": [
    "A network device's physical location",
    "A network device's IP address",
    "A network device's manufacturer",
    "A network device's hardware interface"
  ],
  "correctOption": "D",
  "explanation": "A MAC (Media Access Control) address is a unique identifier assigned to a network interface card (NIC).",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985e9320de848c99b9be7"
  },
  "question": "What is the purpose of a subnet mask?",
  "options": [
    "To encrypt network traffic",
    "To identify the network address from the host address",
    "To translate domain names into IP addresses",
    "To assign unique IP addresses to devices"
  ],
  "correctOption": "B",
  "explanation": "A subnet mask separates the network address portion from the host address portion of an IP address.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Protocols",
    "Network Security"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9bfb"
  },
  "question": "Which regular expression metacharacter matches any single character except a newline?",
  "options": [
    "*",
    ".",
    "^",
    "$"
  ],
  "correctOption": "B",
  "explanation": "The dot (.) metacharacter matches any single character except a newline.  Other options have different meanings (quantifier, beginning of line, end of line).",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9bfe"
  },
  "question": "How would you match the string \"color\" or \"colour\" using a regular expression?",
  "options": [
    "color|colour",
    "colou?r",
    "colou*r",
    "colorcolour"
  ],
  "correctOption": "B",
  "explanation": "The `?` makes the preceding character ('u') optional, accurately matching both spellings.",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9bfd"
  },
  "question": "What is the purpose of the `|` character in regular expressions?",
  "options": [
    "Negation",
    "Concatenation",
    "Alternation",
    "Grouping"
  ],
  "correctOption": "C",
  "explanation": "The `|` character acts as an 'or' operator, allowing you to match either the expression before or after it.",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9c04"
  },
  "question": "Consider the regex `(apple|banana), (orange|grape)`.  How many possible matches could this produce?",
  "options": [
    "2",
    "4",
    "6",
    "8"
  ],
  "correctOption": "B",
  "explanation": "There are 2 options for the first fruit and 2 for the second, resulting in 2 * 2 = 4 possible combinations.",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9c01"
  },
  "question": "Given the string \"My phone number is 123-456-7890\", which regex would extract only the phone number?",
  "options": [
    "\\d+",
    "\\d{3}-\\d{3}-\\d{4}",
    "[0-9]+",
    "\\w+"
  ],
  "correctOption": "B",
  "explanation": "\\d{3}-\\d{3}-\\d{4} specifically matches the three-digit-hyphen-three-digit-hyphen-four-digit pattern of a phone number.",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9c02"
  },
  "question": "What does the `*` quantifier do in a regular expression?",
  "options": [
    "Matches exactly one occurrence",
    "Matches zero or one occurrence",
    "Matches zero or more occurrences",
    "Matches one or more occurrences"
  ],
  "correctOption": "C",
  "explanation": "The `*` quantifier means zero or more occurrences of the preceding character or group.",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9c03"
  },
  "question": "How would you use a regular expression to match an email address (simplified)?",
  "options": [
    "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
    "[a-z]+@[a-z]+\\.[a-z]{2}",
    "\\w+@\\w+\\.\\w+",
    "email"
  ],
  "correctOption": "A",
  "explanation": "This regex covers a basic email structure, though more robust solutions exist for handling all possible valid email formats.",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9c00"
  },
  "question": "What is the function of capturing groups in regular expressions?",
  "options": [
    "To perform case-insensitive matching",
    "To create character sets",
    "To store matched substrings for later use",
    "To specify the number of repetitions"
  ],
  "correctOption": "C",
  "explanation": "Capturing groups, using parentheses `()`, allow you to extract specific parts of a matched string.",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9bff"
  },
  "question": "What does the regular expression `^[A-Z][a-z]+$` match?",
  "options": [
    "Strings starting with a lowercase letter and followed by one or more uppercase letters",
    "Strings containing only uppercase letters",
    "Strings starting with an uppercase letter and followed by one or more lowercase letters",
    "Strings containing only lowercase letters"
  ],
  "correctOption": "C",
  "explanation": "^ anchors to the beginning, [A-Z] matches one uppercase letter, [a-z]+ matches one or more lowercase letters, and $ anchors to the end.",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d985f3320de848c99b9bfc"
  },
  "question": "What does the regular expression `\\d+` match?",
  "options": [
    "One or more digits",
    "Zero or more digits",
    "One or more whitespace characters",
    "One or more alphanumeric characters"
  ],
  "correctOption": "A",
  "explanation": "\\d represents a digit, and + signifies one or more occurrences. Therefore, it matches one or more digits.",
  "tags": [
    "Pattern Matching",
    "Quantifiers",
    "Character Classes",
    "Capture Groups"
  ],
  "domain": "Computer Science - Programming",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c1c"
  },
  "question": "Describe a scenario where using a `State` monad would be beneficial in a Haskell program.",
  "options": [
    "When performing purely mathematical calculations.",
    "When dealing with independent, parallel computations.",
    "When needing to manage mutable state in a pure functional context.",
    "When interacting with external databases, but avoiding any side effects."
  ],
  "correctOption": "C",
  "explanation": "The `State` monad helps manage state changes implicitly, allowing a sequence of state-modifying operations to be composed purely functionally.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c14"
  },
  "question": "Consider the type signature `m a -> (a -> m b) -> m b`.  What typeclass does this signature define?",
  "options": [
    "Functor",
    "Applicative",
    "Monad",
    "Foldable"
  ],
  "correctOption": "C",
  "explanation": "This is the signature of the `>>=` (bind) operator, which is fundamental to the `Monad` typeclass.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c15"
  },
  "question": "What is the primary purpose of the `{-# LANGUAGE ... #-}` pragma in Haskell?",
  "options": [
    "To define new data types.",
    "To import external modules.",
    "To enable language extensions beyond the default Haskell standard.",
    "To declare functions with specific type signatures."
  ],
  "correctOption": "C",
  "explanation": "Language extensions provide access to features not enabled by default, such as type families, or GADTs.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c13"
  },
  "question": "Which of the following best describes the behavior of `Monad` instances in Haskell, specifically regarding their interaction with the `>>=` operator?",
  "options": [
    "They simply sequence computations, ignoring any results.",
    "They provide a mechanism for chaining computations, transforming results from one to the next.",
    "They exclusively handle side effects, preventing pure functional programming.",
    "They enforce strict evaluation of expressions, ensuring immediate results."
  ],
  "correctOption": "B",
  "explanation": "The `>>=` operator (bind) is the heart of the Monad. It allows chaining computations, using the result of one as input to the next.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c19"
  },
  "question": "In a Haskell program, how can you define a function that operates on an infinite list without causing immediate infinite recursion?",
  "options": [
    "By using strict evaluation.",
    "By using lazy evaluation.",
    "It's not possible; infinite lists always cause infinite recursion.",
    "By using explicit memoization."
  ],
  "correctOption": "B",
  "explanation": "Haskell's lazy evaluation allows working with infinite structures; only the necessary parts of the list are evaluated.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c16"
  },
  "question": "How does Haskell's laziness affect the evaluation of expressions?",
  "options": [
    "It enforces immediate evaluation of all expressions.",
    "It delays evaluation until the value is actually needed.",
    "It only evaluates expressions with explicit side effects.",
    "It introduces non-determinism into the evaluation process."
  ],
  "correctOption": "B",
  "explanation": "Laziness is a key feature of Haskell, meaning expressions are only evaluated when their results are required.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c1b"
  },
  "question": "How can you handle exceptions in a pure functional way in Haskell?",
  "options": [
    "Using try-catch blocks as in imperative languages.",
    "By returning `Maybe` or `Either` values to indicate success or failure.",
    "Exceptions are not handled in pure functional programming.",
    "Using mutable state variables to track exceptions."
  ],
  "correctOption": "B",
  "explanation": "The functional approach avoids side effects; `Maybe` and `Either` provide a way to represent potential errors without exceptions.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c1a"
  },
  "question": "What role do type classes play in Haskell's type system?",
  "options": [
    "They define new data types.",
    "They provide a way to define ad-hoc polymorphism, allowing functions to operate on different types that share a common interface.",
    "They enforce strict evaluation of expressions.",
    "They are primarily used for error handling."
  ],
  "correctOption": "B",
  "explanation": "Type classes allow defining a set of operations (methods) that different types can implement, enabling generic programming.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c18"
  },
  "question": "What is the significance of the `RankNTypes` language extension?",
  "options": [
    "It allows for higher-rank polymorphism, enabling more flexible type signatures.",
    "It improves the performance of type inference.",
    "It simplifies the definition of monad transformers.",
    "It is only relevant for concurrent programming."
  ],
  "correctOption": "A",
  "explanation": "RankNTypes allows writing functions that take polymorphic functions as arguments, going beyond simple type variables.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98600320de848c99b9c17"
  },
  "question": "Explain the difference between `Maybe a` and `Either e a` in Haskell.",
  "options": [
    "Both represent the same concept.",
    "`Maybe a` represents success or failure, while `Either e a` represents success or a specific error type `e`.",
    "`Maybe a` is used for IO operations, while `Either e a` is used for pure computations.",
    "`Maybe a` is a monad, but `Either e a` is not."
  ],
  "correctOption": "B",
  "explanation": "`Maybe` signifies success (Just a) or failure (Nothing), whereas `Either` allows specifying the type of error in case of failure.",
  "tags": [
    "Functional Programming",
    "Type System",
    "Monads",
    "Lazy Evaluation"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c2b"
  },
  "question": "Which of the following is NOT a common approach to handling occlusion in object detection?",
  "options": [
    "Part-based models",
    "Contextual information",
    "Data augmentation with occlusion",
    "Directly ignoring occluded regions"
  ],
  "correctOption": "D",
  "explanation": "Ignoring occluded regions loses valuable information.  Other options actively address the challenge of occlusion.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c31"
  },
  "question": "What is the primary purpose of a  'Non-Maximum Suppression' (NMS) algorithm in object detection?",
  "options": [
    "To reduce the computational cost of the detection algorithm",
    "To filter out duplicate detections of the same object",
    "To improve the accuracy of bounding box predictions",
    "To segment objects from the background"
  ],
  "correctOption": "B",
  "explanation": "NMS removes overlapping bounding boxes that likely represent the same object, improving the overall quality of the detection results.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c30"
  },
  "question": "Which of the following is a common challenge in 3D reconstruction from multiple 2D images?",
  "options": [
    "Accurate camera calibration",
    "Handling occlusions",
    "Computational cost",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "All listed options (camera calibration, occlusion handling, and computational cost) are significant challenges in 3D reconstruction from 2D images.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c32"
  },
  "question": "In the context of semantic segmentation, what does the term 'contextual information' refer to?",
  "options": [
    "The spatial relationship between pixels",
    "The color and texture of pixels",
    "The class labels of neighboring pixels",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "Contextual information incorporates all the listed aspects, helping improve segmentation accuracy by understanding the relationships between pixels.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c2f"
  },
  "question": "How does super-resolution differ from image upscaling?",
  "options": [
    "Super-resolution uses AI to infer missing details, upscaling just interpolates pixels",
    "Super-resolution is faster, upscaling is more accurate",
    "Super-resolution is for videos only, upscaling is for images only",
    "There is no significant difference"
  ],
  "correctOption": "A",
  "explanation": "Upscaling simply increases the resolution by interpolation; super-resolution uses learning-based techniques to add detail that wasn't originally present.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c2e"
  },
  "question": "What is the key advantage of using a Siamese network architecture for tasks like object tracking?",
  "options": [
    "Increased computational speed",
    "Improved accuracy in cluttered environments",
    "Ability to handle multiple objects simultaneously",
    "Learning a similarity metric between image patches"
  ],
  "correctOption": "D",
  "explanation": "Siamese networks learn to compare image patches, allowing them to track objects by comparing the current frame to a reference image, effectively learning a similarity function.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c33"
  },
  "question": "What is the fundamental difference between single-stage and two-stage object detectors?",
  "options": [
    "Single-stage detectors are faster, two-stage are more accurate",
    "Single-stage detectors use region proposals, two-stage don't",
    "Single-stage detectors are better for small objects, two-stage for large objects",
    "Single-stage detectors handle occlusions better, two-stage don't"
  ],
  "correctOption": "A",
  "explanation": "Two-stage detectors (e.g., Faster R-CNN) involve separate stages for region proposal and classification, typically leading to higher accuracy but slower speed. Single-stage detectors (e.g., YOLO) perform both tasks simultaneously.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c34"
  },
  "question": "Describe a scenario where using a depth camera would significantly improve the performance of a computer vision system compared to using only a regular RGB camera.",
  "options": [
    "Object Recognition in a cluttered environment.",
    "Scene Understanding for robotic navigation",
    "Facial Recognition in low light conditions.",
    "Image Classification of natural scenes"
  ],
  "correctOption": "B",
  "explanation": "Depth information is crucial for robotic navigation, enabling precise distance estimations and obstacle avoidance, improving performance significantly compared to relying only on RGB images.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c2c"
  },
  "question": "Explain the primary difference between the Hough Transform and RANSAC for line detection?",
  "options": [
    "Hough Transform is deterministic, RANSAC is probabilistic",
    "Hough Transform is faster, RANSAC is more accurate",
    "Hough Transform handles outliers better, RANSAC doesn't",
    "Hough Transform is for lines only, RANSAC is for all shapes"
  ],
  "correctOption": "A",
  "explanation": "The Hough Transform uses a voting scheme, while RANSAC iteratively samples points and fits models probabilistically, making RANSAC robust to outliers.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9860b320de848c99b9c2d"
  },
  "question": "In deep learning-based object detection, what is the role of a Region Proposal Network (RPN)?",
  "options": [
    "To classify objects within detected regions",
    "To generate bounding boxes for potential object locations",
    "To refine the accuracy of object bounding boxes",
    "To segment objects within images"
  ],
  "correctOption": "B",
  "explanation": "RPNs generate region proposals, essentially suggesting potential locations and sizes of objects within an image before classification and bounding box regression.",
  "tags": [
    "Image Processing",
    "Object Detection",
    "Feature Extraction",
    "CNNs"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c4c"
  },
  "question": "What is the primary purpose of Go's `context` package?",
  "options": [
    "To manage memory allocation.",
    "To handle file I/O operations.",
    "To manage deadlines, cancellation signals, and values for requests.",
    "To synchronize access to shared resources."
  ],
  "correctOption": "C",
  "explanation": "The `context` package provides a mechanism to pass context information, such as cancellation signals or deadlines, down the call chain to goroutines.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c4b"
  },
  "question": "What's the most appropriate way to handle errors in Go?",
  "options": [
    "Ignore them.",
    "Print error messages to the console.",
    "Use error-handling patterns like checking for `nil` and returning errors.",
    "Use exceptions (like in Java or Python)."
  ],
  "correctOption": "C",
  "explanation": "Go uses explicit error handling where functions return errors;  check the error value and handle it appropriately or propagate it upward.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c49"
  },
  "question": "How can you ensure that a goroutine completes before the main function exits?",
  "options": [
    "Use `runtime.Gosched()`.",
    "Use a `sync.WaitGroup`.",
    "There's no way to guarantee this.",
    "Use a channel and receive from it."
  ],
  "correctOption": "B",
  "explanation": "A `sync.WaitGroup` allows you to wait for a collection of goroutines to finish before the main function proceeds.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c43"
  },
  "question": "What is the purpose of the `defer` keyword in Go?",
  "options": [
    "To declare a variable.",
    "To execute a function after the surrounding function completes.",
    "To define a constant.",
    "To create a goroutine."
  ],
  "correctOption": "B",
  "explanation": "`defer` schedules a function call to be executed when the surrounding function returns, regardless of whether it returns normally or due to a panic.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c4a"
  },
  "question": "What does the `select` statement do in Go?",
  "options": [
    "It's used for conditional compilation.",
    "It's used for multiplexing communication over channels.",
    "It's similar to a `switch` statement but for strings.",
    "It's a type of loop for iterating over slices."
  ],
  "correctOption": "B",
  "explanation": "The `select` statement allows a goroutine to wait on multiple channels and execute the first one that's ready.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c48"
  },
  "question": "Which statement is TRUE regarding Go's interfaces?",
  "options": [
    "Interfaces must be explicitly implemented.",
    "Interfaces are explicitly declared using the `interface` keyword.",
    "A type can only implement one interface at a time.",
    "Interfaces are only useful for mocking in testing."
  ],
  "correctOption": "B",
  "explanation": "Interfaces are declared with the `interface` keyword and implicitly implemented; a type satisfies an interface if it implements all its methods.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c46"
  },
  "question": "What is the difference between `len(s)` and `cap(s)` for a slice `s`?",
  "options": [
    "Both return the same value: the number of elements in the slice.",
    "`len(s)` returns the number of elements, `cap(s)` returns the allocated capacity.",
    "`len(s)` returns the allocated capacity, `cap(s)` returns the number of elements.",
    "They are unrelated functions."
  ],
  "correctOption": "B",
  "explanation": "`len()` gives the number of elements currently in use, while `cap()` shows the total allocated memory for the slice.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c45"
  },
  "question": "How do you create a new channel in Go?",
  "options": [
    " `channel := make(chan)`",
    " `channel := new(chan)`",
    " `channel := chan()`",
    " `channel := createChannel()`"
  ],
  "correctOption": "A",
  "explanation": " `make(chan)` creates an unbuffered channel.  You can specify the type of data it handles using `make(chan int)` for example.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c44"
  },
  "question": "Which statement best describes the behavior of Go's garbage collector?",
  "options": [
    "It's a mark-and-sweep collector that runs only when memory is exhausted.",
    "It's a reference counting collector that runs continuously.",
    "It's a mark-and-sweep collector that runs concurrently with the application.",
    "It's a manual memory management system requiring explicit deallocation."
  ],
  "correctOption": "C",
  "explanation": "Go's garbage collector is a non-stop, concurrent mark-and-sweep collector, minimizing pauses and improving performance.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98622320de848c99b9c47"
  },
  "question": "What is the purpose of the `sync.Mutex` type?",
  "options": [
    "To handle asynchronous operations.",
    "To synchronize access to shared resources to prevent race conditions.",
    "To manage goroutine scheduling.",
    "To perform file I/O operations."
  ],
  "correctOption": "B",
  "explanation": "`sync.Mutex` provides mutual exclusion, ensuring only one goroutine can access a shared resource at a time, preventing data corruption.",
  "tags": [
    "Concurrency",
    "Goroutines",
    "Interfaces",
    "Error Handling"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c5c"
  },
  "question": "Consider a discrete-time system with impulse response h[n] = (1/2)^n u[n], where u[n] is the unit step function.  What is the system's output y[n] if the input is x[n] = δ[n] - δ[n-1]?",
  "options": [
    "y[n] = (1/2)^n u[n] - (1/2)^(n-1) u[n-1]",
    "y[n] = (1/2)^n u[n] + (1/2)^(n-1) u[n-1]",
    "y[n] = (1/2)^n u[n] - (1/2)^n u[n-1]",
    "y[n] = (1/2)^n u[n-1] - (1/2)^(n-1) u[n]"
  ],
  "correctOption": "A",
  "explanation": "The output is the convolution of the impulse response and input.  This results in the given expression reflecting the shifted and scaled impulse response.",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c62"
  },
  "question": "Given a signal x(t) with Fourier Transform X(jω), what is the Fourier Transform of x(t-t0)?",
  "options": [
    "X(jω - t0)",
    "X(jω)e^(-jωt0)",
    "X(jω)e^(jωt0)",
    "X(jω + t0)"
  ],
  "correctOption": "C",
  "explanation": "Time shifting in the time domain corresponds to phase shifting in the frequency domain.",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c61"
  },
  "question": "Two LTI systems with impulse responses h1[n] and h2[n] are connected in cascade. What is the overall impulse response h[n]?",
  "options": [
    "h1[n] + h2[n]",
    "h1[n] * h2[n]",
    "h1[n] / h2[n]",
    "h1[n] - h2[n]"
  ],
  "correctOption": "B",
  "explanation": "The overall impulse response of cascaded LTI systems is the convolution of their individual impulse responses.",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c64"
  },
  "question": "Consider a system with transfer function H(s) = 1/(s+a).  What type of filter does this represent and what is its cut-off frequency?",
  "options": [
    "Bandpass Filter, a",
    "Highpass Filter, a",
    "Lowpass Filter, a",
    "Bandstop Filter, a"
  ],
  "correctOption": "C",
  "explanation": "This is a first-order lowpass filter with a cutoff frequency of 'a' radians per second.  The magnitude response rolls off at -20dB/decade beyond the cutoff.",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c63"
  },
  "question": "What is the Nyquist sampling rate for a signal containing frequencies up to 10kHz?",
  "options": [
    "5kHz",
    "10kHz",
    "20kHz",
    "40kHz"
  ],
  "correctOption": "C",
  "explanation": "The Nyquist-Shannon sampling theorem states that the sampling rate must be at least twice the maximum frequency to avoid aliasing.",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c5d"
  },
  "question": "A linear time-invariant (LTI) system has a transfer function H(s) = (s+1)/(s^2 + 2s + 5).  What is the system's steady-state response to a sinusoidal input x(t) = 2cos(2t) ?",
  "options": [
    "2cos(2t + φ)",
    "4cos(2t + φ)",
    "2cos(2t)",
    "4cos(2t)"
  ],
  "correctOption": "A",
  "explanation": "Substitute s = jω (ω=2) into H(s) to find the magnitude and phase. The steady-state response will be a sinusoid with the same frequency, scaled by the magnitude and shifted by the phase of H(jω).",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c5f"
  },
  "question": "Determine the region of convergence (ROC) for the Z-transform of the sequence x[n] = (1/3)^n u[n] - (1/2)^n u[-n-1].",
  "options": [
    "|z| < 1/2",
    "|z| > 1/3",
    "1/3 < |z| < 1/2",
    "|z| < 1/3 or |z| > 1/2"
  ],
  "correctOption": "C",
  "explanation": "The ROC for a right-sided sequence is outside a circle. For a left-sided sequence it is inside a circle. The intersection of these gives the overall ROC.",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c60"
  },
  "question": "A system is described by the difference equation y[n] - 0.5y[n-1] = x[n].  Is this system stable, causal, and/or BIBO stable?",
  "options": [
    "Stable, Causal, and BIBO Stable",
    "Causal and BIBO Stable, but not Stable",
    "Causal and Stable, but not BIBO Stable",
    "Only Causal"
  ],
  "correctOption": "A",
  "explanation": "The system is causal because the output depends only on present and past inputs. The pole is within the unit circle, ensuring BIBO stability, implying stability.",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c5e"
  },
  "question": "Which of the following statements is true about the Z-transform of a discrete-time signal?",
  "options": [
    "It is always a rational function.",
    "It always converges for all values of z.",
    "It uniquely represents the discrete-time signal.",
    "It is a linear transform, only if the signal is causal."
  ],
  "correctOption": "C",
  "explanation": "The Z-transform uniquely maps a discrete-time signal to a complex function, enabling analysis in the z-domain.  Note that it does not always converge everywhere, and is a linear transform regardless of causality.",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98630320de848c99b9c5b"
  },
  "question": "A continuous-time system is described by the differential equation y''(t) + 2y'(t) + y(t) = x(t).  Which of the following statements is FALSE regarding its frequency response?",
  "options": [
    "The system is stable.",
    "The system has a resonant frequency.",
    "The magnitude response is monotonically decreasing with increasing frequency.",
    "The phase response is always negative."
  ],
  "correctOption": "B",
  "explanation": "This second-order system's characteristic equation has repeated roots, indicating critically damped behavior, lacking a resonant peak in its frequency response.",
  "tags": [
    "Fourier Transform",
    "Sampling",
    "Filtering",
    "Signal Processing"
  ],
  "domain": "Computer Science - Electrical Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c74"
  },
  "question": "In the context of association rule mining, what does lift measure?",
  "options": [
    "The confidence of a rule",
    "The support of a rule",
    "The frequency of itemsets",
    "The increase in probability of Y given X compared to the probability of Y alone"
  ],
  "correctOption": "D",
  "explanation": "Lift quantifies how much more likely Y is to occur given X than it would be otherwise, indicating rule strength.",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c75"
  },
  "question": "Which clustering algorithm is known for its scalability and ability to handle large datasets efficiently, even with high dimensionality, by using approximate nearest neighbor search?",
  "options": [
    "K-Means",
    "Hierarchical Clustering",
    "DBSCAN",
    "CLARANS (Clustering Large Applications based upon Randomized Search)"
  ],
  "correctOption": "A",
  "explanation": "K-means, with optimizations, can be highly scalable, especially when utilizing approximate nearest neighbor methods.",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c7b"
  },
  "question": "How does the Apriori algorithm optimize the search for frequent itemsets in association rule mining?",
  "options": [
    "Using a depth-first search strategy",
    "Employing a heuristic to estimate support",
    "Leveraging the downward closure property",
    "Utilizing a randomized search approach"
  ],
  "correctOption": "C",
  "explanation": "Apriori uses the downward closure property: if an itemset is infrequent, all its supersets are also infrequent, reducing search space.",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c76"
  },
  "question": "What is a major challenge in applying naive Bayes classifiers to real-world problems?",
  "options": [
    "High computational cost",
    "Inability to handle continuous data",
    "The assumption of feature independence",
    "Lack of scalability to large datasets"
  ],
  "correctOption": "C",
  "explanation": "The naive Bayes assumption of feature independence rarely holds true in real data, impacting accuracy.",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c77"
  },
  "question": "Explain the difference between supervised and unsupervised learning in the context of data mining.  Which is more applicable to anomaly detection?",
  "options": [
    "A) Supervised uses labeled data, unsupervised uses unlabeled; Unsupervised",
    "B) Supervised uses unlabeled data, unsupervised uses labeled; Supervised",
    "C) Supervised uses labeled data, unsupervised uses unlabeled; Supervised",
    "D) Supervised uses unlabeled data, unsupervised uses labeled; Unsupervised"
  ],
  "correctOption": "A",
  "explanation": "Supervised learning uses labeled data for training, while unsupervised learning uses unlabeled data. Anomaly detection typically uses unsupervised techniques as anomalies are often unlabeled.",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c79"
  },
  "question": "In handling missing values in a dataset for data mining, which approach might introduce bias if not carefully considered?",
  "options": [
    "Deletion of rows with missing values",
    "Imputation using mean/median/mode",
    "Imputation using k-Nearest Neighbors",
    "Imputation using model-based techniques"
  ],
  "correctOption": "B",
  "explanation": "Simple mean/median/mode imputation can distort the distribution of the data and introduce bias if the missing data is not Missing Completely At Random (MCAR).",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c78"
  },
  "question": "Which dimensionality reduction technique is best suited for preserving the global structure of the data, often used in visualizing high-dimensional data?",
  "options": [
    "Principal Component Analysis (PCA)",
    "Linear Discriminant Analysis (LDA)",
    "t-distributed Stochastic Neighbor Embedding (t-SNE)",
    "Independent Component Analysis (ICA)"
  ],
  "correctOption": "C",
  "explanation": "t-SNE excels at visualizing high-dimensional data by preserving local neighborhood structures, showing clusters effectively.",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c7a"
  },
  "question": "What is the primary concern when using recursive partitioning methods like CART (Classification and Regression Trees) for building predictive models?",
  "options": [
    "A)High computational cost",
    "B)Sensitivity to outliers",
    "C)Overfitting to the training data",
    "D)Difficulty in handling categorical variables"
  ],
  "correctOption": "C",
  "explanation": "CART models are prone to overfitting if not properly pruned or regularized, leading to poor generalization on unseen data.",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c73"
  },
  "question": "Which of the following techniques is LEAST suitable for handling imbalanced datasets in data mining?",
  "options": [
    "SMOTE (Synthetic Minority Over-sampling Technique)",
    "Cost-sensitive learning",
    "Under-sampling the majority class",
    "Using accuracy as the primary evaluation metric"
  ],
  "correctOption": "D",
  "explanation": "Accuracy is misleading with imbalanced data.  Precision, recall, and F1-score are better metrics.",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98645320de848c99b9c7c"
  },
  "question": "What is a significant drawback of using only the AUC (Area Under the ROC Curve) as a sole metric for evaluating a classifier's performance?",
  "options": [
    "It doesn't consider class imbalance",
    "It's computationally expensive",
    "It only applies to binary classification",
    "It ignores the cost of misclassification"
  ],
  "correctOption": "D",
  "explanation": "AUC summarizes the classifier's performance across all classification thresholds without accounting for the varying costs of different types of misclassifications.",
  "tags": [
    "Pattern Recognition",
    "Classification",
    "Clustering",
    "Association Rules"
  ],
  "domain": "Computer Science - Data Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c8b"
  },
  "question": "Which of the following is NOT a typical characteristic of NoSQL databases?",
  "options": [
    "Schema-less design",
    "High scalability",
    "ACID properties",
    "Horizontal scaling"
  ],
  "correctOption": "C",
  "explanation": "While some NoSQL databases offer ACID properties, it's not a defining characteristic.  Most prioritize scalability and flexibility over strict ACID compliance.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c93"
  },
  "question": "What is the main difference between vertical and horizontal scaling?",
  "options": [
    "Vertical scaling adds more servers, horizontal scaling adds more resources to a single server",
    "Vertical scaling adds more resources to a single server, horizontal scaling adds more servers",
    "Both are the same",
    "Vertical scaling is used for NoSQL, horizontal scaling for SQL"
  ],
  "correctOption": "B",
  "explanation": "Vertical scaling increases the capacity of a single server (e.g., more RAM, CPU), while horizontal scaling adds more servers to distribute the load.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c92"
  },
  "question": "In a column-family store like Cassandra, what is a column family?",
  "options": [
    "A single column of data",
    "A row of data",
    "A table of data organized by columns",
    "A type of data compression"
  ],
  "correctOption": "C",
  "explanation": "A column family in Cassandra is analogous to a table in relational databases but is organized differently, optimizing for column-wise data retrieval.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c94"
  },
  "question": "Which of these scenarios would benefit MOST from using a NoSQL database?",
  "options": [
    "Managing a highly structured financial transaction system requiring strict ACID compliance",
    "Developing a real-time analytics dashboard for high-volume streaming data",
    "Creating a relational database for a small business inventory management system",
    "Building a data warehouse for business intelligence reporting"
  ],
  "correctOption": "B",
  "explanation": "Real-time analytics dashboards often need high scalability and flexibility to handle large volumes of unstructured/semi-structured data, which NoSQL excels at.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c91"
  },
  "question": "Which consistency model guarantees that all reads will return the most recently written data, even if it means some temporary unavailability?",
  "options": [
    "Eventual consistency",
    "Strong consistency",
    "Read-your-writes consistency",
    "Session consistency"
  ],
  "correctOption": "B",
  "explanation": "Strong consistency demands that every read receives the most recent write, ensuring data integrity above availability.  This often comes at the cost of higher latency.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c90"
  },
  "question": "What is sharding in the context of NoSQL databases?",
  "options": [
    "Data encryption technique",
    "Data replication strategy",
    "Data partitioning strategy across multiple servers",
    "Data compression algorithm"
  ],
  "correctOption": "C",
  "explanation": "Sharding horizontally partitions a database across multiple servers to improve scalability and performance by distributing the load.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c8c"
  },
  "question": "What is the primary advantage of using a document database like MongoDB?",
  "options": [
    "Strict schema enforcement",
    "Relational data modeling",
    "Flexible schema and data modeling",
    "High transaction throughput in ACID environments"
  ],
  "correctOption": "C",
  "explanation": "Document databases excel at handling semi-structured or unstructured data due to their flexible schema, allowing for easy adaptation to evolving data structures.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c8f"
  },
  "question": "What is a common use case for a key-value store database?",
  "options": [
    "Managing complex social networks",
    "Storing and retrieving large images or videos",
    "Tracking relationships between entities",
    "Modeling complex business processes"
  ],
  "correctOption": "B",
  "explanation": "Key-value stores are ideal for storing and retrieving unstructured data like images and videos efficiently, using the data as a value and a key to retrieve it.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c8d"
  },
  "question": "Which NoSQL database model is best suited for managing large amounts of interconnected data with complex relationships?",
  "options": [
    "Key-value store",
    "Document database",
    "Graph database",
    "Column-family store"
  ],
  "correctOption": "C",
  "explanation": "Graph databases excel at representing and querying relationships between data points, making them ideal for social networks, recommendation systems, etc.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98650320de848c99b9c8e"
  },
  "question": "CAP theorem states that a distributed database system can only satisfy two out of three properties. Which are these properties?",
  "options": [
    "Consistency, Availability, Partition tolerance",
    "Consistency, Accuracy, Performance",
    "Availability, Scalability, Performance",
    "Scalability, Consistency, Partition tolerance"
  ],
  "correctOption": "A",
  "explanation": "The CAP theorem focuses on Consistency (all nodes see the same data), Availability (system always responds), and Partition tolerance (system functions despite network failures).",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9ca4"
  },
  "question": "What is the purpose of the `transient` keyword in Java?",
  "options": [
    "To make a variable immutable",
    "To prevent a variable from being serialized",
    "To make a variable thread-safe",
    "To declare a variable as a constant"
  ],
  "correctOption": "B",
  "explanation": "`transient` keyword prevents a variable from being included in the serialization process.",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9ca7"
  },
  "question": "Which exception is thrown when a program attempts to access a file that does not exist?",
  "options": [
    "IOException",
    "FileNotFoundException",
    "NullPointerException",
    "ClassNotFoundException"
  ],
  "correctOption": "B",
  "explanation": "`FileNotFoundException` is a specific type of `IOException` that indicates a file could not be found.",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9ca5"
  },
  "question": "Which collection is best suited for implementing a LIFO (Last-In, First-Out) structure?",
  "options": [
    "ArrayList",
    "LinkedList",
    "HashSet",
    "Stack"
  ],
  "correctOption": "D",
  "explanation": "The `Stack` class in Java is specifically designed for LIFO operations.",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9ca6"
  },
  "question": "What will happen if you try to access an element in an ArrayList using an index outside its bounds?",
  "options": [
    "The program will compile but throw an exception at runtime",
    "The program will not compile",
    "The program will return null",
    "The program will return the last element in the list"
  ],
  "correctOption": "A",
  "explanation": "Accessing an element outside the bounds of an ArrayList will result in an `IndexOutOfBoundsException` at runtime.",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9cac"
  },
  "question": "What is the primary purpose of Java's garbage collection?",
  "options": [
    "To compress the heap memory",
    "To manage the JVM's process scheduling",
    "To automatically reclaim memory occupied by unreachable objects",
    "To optimize memory allocation speed"
  ],
  "correctOption": "C",
  "explanation": "Garbage collection automatically frees memory occupied by objects that are no longer referenced by the program.",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9ca8"
  },
  "question": "What is the difference between `==` and `.equals()` when comparing Strings in Java?",
  "options": [
    "Both are equivalent for String comparison",
    "`==` compares references, `.equals()` compares content",
    "`.equals()` compares references, `==` compares content",
    "`==` is faster than `.equals()` but only compares references"
  ],
  "correctOption": "B",
  "explanation": "`==` compares memory addresses, while `.equals()` compares the actual string content.",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9ca9"
  },
  "question": "How does the `finally` block in a `try-catch-finally` statement work?",
  "options": [
    "It executes only if an exception is caught",
    "It executes only if no exception is thrown",
    "It executes always, regardless of exceptions",
    "It executes only if a specific exception type is caught"
  ],
  "correctOption": "C",
  "explanation": "The `finally` block is guaranteed to execute whether an exception is thrown or not, except in the case of abnormal termination (e.g., `System.exit()`).",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9cab"
  },
  "question": "What is a deadlock in Java?",
  "options": [
    "A situation where a thread is waiting for itself",
    "A situation where two or more threads are blocked indefinitely, waiting for each other",
    "A situation where a thread is waiting for a resource that is held by another thread which is not releasing it",
    "A situation where a thread is not responding"
  ],
  "correctOption": "B",
  "explanation": "A deadlock occurs when two or more threads are blocked indefinitely, waiting for each other to release resources.",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9caa"
  },
  "question": "Which design pattern involves creating objects from a prototype instead of creating them from scratch?",
  "options": [
    "Singleton",
    "Factory",
    "Prototype",
    "Observer"
  ],
  "correctOption": "C",
  "explanation": "The Prototype design pattern utilizes cloning to create new objects, saving the overhead of object construction.",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9865a320de848c99b9ca3"
  },
  "question": "Which keyword is used to prevent method overriding in Java?",
  "options": [
    "static",
    "final",
    "abstract",
    "private"
  ],
  "correctOption": "B",
  "explanation": "The `final` keyword prevents a method from being overridden in subclasses.",
  "tags": [
    "Object-Oriented Programming",
    "Collections",
    "Multithreading",
    "JVM"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cbd"
  },
  "question": "Explain the function of a 'stack frame' in the context of procedure calls.",
  "options": [
    "Stores global variables",
    "Stores code segments",
    "Stores local variables and parameters for a function call",
    "Stores interrupt vectors"
  ],
  "correctOption": "C",
  "explanation": "A stack frame is a dedicated area on the stack that manages the local variables and parameters of a function during its execution.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cc1"
  },
  "question": "What advanced assembly technique involves optimizing memory access by strategically arranging data structures to minimize cache misses?",
  "options": [
    "Loop unrolling",
    "Instruction scheduling",
    "Data alignment",
    "Function inlining"
  ],
  "correctOption": "C",
  "explanation": "Data alignment ensures that data structures are placed at memory addresses that are multiples of their size, improving cache efficiency.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cc3"
  },
  "question": "In a system with virtual memory, what structure maps virtual addresses to physical addresses?",
  "options": [
    "Page table",
    "Cache memory",
    "Instruction register",
    "Stack pointer"
  ],
  "correctOption": "A",
  "explanation": "The page table is a data structure used by the memory management unit (MMU) to translate virtual addresses used by the program into actual physical addresses in RAM.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cc2"
  },
  "question": "How can interrupts be used to create a multitasking environment in an operating system?",
  "options": [
    "Interrupts cannot be used for multitasking",
    "Interrupts halt the system, preventing multitasking",
    "Interrupts switch between tasks by saving and restoring context",
    "Interrupts only handle hardware events, not tasks"
  ],
  "correctOption": "C",
  "explanation": "Interrupts provide a mechanism to switch between tasks by saving the current task's state and restoring the state of the next task.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cc0"
  },
  "question": "Describe the difference between position-independent code (PIC) and position-dependent code.",
  "options": [
    "PIC is faster, position-dependent code is smaller",
    "PIC can run at any memory location, position-dependent code needs a fixed location",
    "PIC is easier to debug, position-dependent code is easier to write",
    "There is no significant difference"
  ],
  "correctOption": "B",
  "explanation": "PIC uses relative addressing to avoid hardcoding memory addresses, enabling execution at any memory location; position-dependent code relies on absolute addresses.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cbc"
  },
  "question": "In a pipelined architecture, what is a hazard that occurs when an instruction depends on the result of a preceding instruction that is still in the pipeline?",
  "options": [
    "Data hazard",
    "Control hazard",
    "Structural hazard",
    "Cache hazard"
  ],
  "correctOption": "A",
  "explanation": "A data hazard occurs when an instruction needs data that hasn't been produced yet by a previous instruction in the pipeline.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cbb"
  },
  "question": "Which addressing mode allows for efficient modification of data structures without recalculating addresses each time, particularly beneficial in loops?",
  "options": [
    "Immediate",
    "Direct",
    "Register Indirect",
    "Relative"
  ],
  "correctOption": "C",
  "explanation": "Register indirect addressing uses a register's contents as the memory address, allowing easy modification via register changes.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cc4"
  },
  "question": "What are the potential security risks associated with using self-modifying code, and how can these risks be mitigated?",
  "options": [
    "No security risks are associated with it",
    "Increased vulnerability to buffer overflows and code injection",
    "Improved security due to code obfuscation",
    "It only affects performance, not security"
  ],
  "correctOption": "B",
  "explanation": "Self-modifying code can introduce vulnerabilities as it can be manipulated by malicious actors to alter the program's behavior, potentially leading to code injection or buffer overflows. Mitigation involves rigorous code review and secure coding practices.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cbf"
  },
  "question": "What is the primary purpose of a linker in the assembly development process?",
  "options": [
    "Translates assembly code into machine code",
    "Allocates memory addresses to program segments",
    "Combines multiple object files into an executable",
    "Optimizes the assembly code for performance"
  ],
  "correctOption": "C",
  "explanation": "The linker resolves external references between different object files and combines them into a single executable file.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98665320de848c99b9cbe"
  },
  "question": "How does self-modifying code affect the predictability and optimization potential of a program?",
  "options": [
    "Improves predictability and optimization",
    "Has no effect on predictability and optimization",
    "Reduces predictability and hinders optimization",
    "Increases predictability but hinders optimization"
  ],
  "correctOption": "C",
  "explanation": "Self-modifying code makes it harder for the compiler and CPU to predict instruction flow and optimize execution, leading to inefficiencies.",
  "tags": [
    "Instructions",
    "Registers",
    "Memory Addressing",
    "Low-level Operations"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98673320de848c99b9cd4"
  },
  "question": "Explain the key difference between a Jacobian inverse kinematics solution and a pseudoinverse solution, specifically regarding redundancy and singularity handling.",
  "options": [
    "A Jacobian inverse solution always finds a solution; a pseudoinverse handles redundancy but not singularity. ",
    "A pseudoinverse solution always avoids singularities; a Jacobian inverse only handles redundancy in special cases.",
    "A Jacobian inverse solution is computationally faster, while a pseudoinverse handles both redundancy and singularities more robustly.",
    "Both solve for the same joint angles; there's no practical difference."
  ],
  "correctOption": "C",
  "explanation": "The pseudoinverse offers more robustness in handling singularities and redundancy (multiple solutions) compared to the standard Jacobian inverse, which might fail in such cases.  Computational cost is also a factor.",
  "tags": [
    "Control Systems",
    "Sensors",
    "Actuators",
    "Robot Kinematics"
  ],
  "domain": "Computer Science - Robotics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98673320de848c99b9cd5"
  },
  "question": "In reinforcement learning applied to robotics, what is the significance of the exploration-exploitation dilemma, and how can it be mitigated?",
  "options": [
    "It's irrelevant; optimal policies are found directly through Q-learning.",
    "It involves balancing learning new actions vs. exploiting known good actions; techniques like ε-greedy or softmax action selection can mitigate it.",
    "It arises only in continuous environments; discrete environments avoid this problem completely.",
    "It is a design flaw in reinforcement learning algorithms that cannot be resolved."
  ],
  "correctOption": "B",
  "explanation": "The exploration-exploitation dilemma involves the trade-off between trying new actions (exploration) to discover better strategies versus using already known good actions (exploitation).  Techniques like ε-greedy and softmax help balance this.",
  "tags": [
    "Control Systems",
    "Sensors",
    "Actuators",
    "Robot Kinematics"
  ],
  "domain": "Computer Science - Robotics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98673320de848c99b9cd3"
  },
  "question": "Which control architecture is most suitable for handling complex, dynamic environments with unpredictable disturbances, prioritizing real-time responsiveness and adaptability?",
  "options": [
    "Hierarchical control",
    "Behavior-based control",
    "Subsumption architecture",
    "Reactive control"
  ],
  "correctOption": "B",
  "explanation": "Behavior-based control excels in dynamic environments by allowing concurrent, reactive behaviors to adapt to changing conditions more effectively than hierarchical or reactive approaches alone.",
  "tags": [
    "Control Systems",
    "Sensors",
    "Actuators",
    "Robot Kinematics"
  ],
  "domain": "Computer Science - Robotics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98673320de848c99b9cdb"
  },
  "question": "What is the concept of 'affordances' in robotics, and how does it relate to robot-environment interaction?",
  "options": [
    "It's an obsolete concept from early robotics.",
    "It describes a robot's ability to perform specific actions; it doesn't relate to the environment.",
    "It refers to the relationship between the physical capabilities of a robot and the properties of the environment that enable or constrain its actions. It's crucial for enabling robots to perceive and interact with the world meaningfully.",
    "It's a purely theoretical concept with no practical application in robotics."
  ],
  "correctOption": "C",
  "explanation": "Affordances highlight the possibilities for action offered by the environment relative to the robot's capabilities.  Understanding affordances allows robots to perceive usable objects and interact with them in a goal-directed manner.",
  "tags": [
    "Control Systems",
    "Sensors",
    "Actuators",
    "Robot Kinematics"
  ],
  "domain": "Computer Science - Robotics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98673320de848c99b9cda"
  },
  "question": "In the context of humanoid robotics, explain the challenges related to achieving stable bipedal locomotion, and briefly describe at least one approach to address these.",
  "options": [
    "Bipedal locomotion is inherently unstable; there are no effective solutions.",
    "The only challenge is mechanical design; control algorithms are trivial.",
    "Challenges include maintaining balance, adapting to uneven terrain, and energy efficiency.  Approaches like the Zero Moment Point (ZMP) method help control balance by regulating the center of pressure.",
    "Stability is only a concern at high speeds; low speeds pose no challenge."
  ],
  "correctOption": "C",
  "explanation": "Bipedal locomotion involves complex dynamics.  Methods like ZMP aim to maintain stability by managing the center of pressure to ensure that the robot's center of gravity remains within its support polygon.",
  "tags": [
    "Control Systems",
    "Sensors",
    "Actuators",
    "Robot Kinematics"
  ],
  "domain": "Computer Science - Robotics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98673320de848c99b9cdc"
  },
  "question": "Explain the concept of force/torque sensors in robotics and their importance in advanced manipulation tasks.",
  "options": [
    "They measure only force; torque is irrelevant.",
    "They are only used in simple pick-and-place operations.",
    "They measure both forces and torques acting on the robot's end-effector, providing crucial sensory feedback for tasks requiring precise interaction with objects, particularly in unstructured environments and tasks needing compliance.",
    "They are unnecessary in modern robotics; vision systems suffice."
  ],
  "correctOption": "C",
  "explanation": "Force/torque sensors provide essential sensory information about interactions with the environment, enabling more robust and adaptable robot manipulation in complex scenarios.  This feedback is crucial for tasks requiring delicate manipulation, compliance control, and interaction with unknown objects.",
  "tags": [
    "Control Systems",
    "Sensors",
    "Actuators",
    "Robot Kinematics"
  ],
  "domain": "Computer Science - Robotics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98673320de848c99b9cd8"
  },
  "question": "What are the limitations of using purely kinematic models for robot control, and why might a dynamic model be necessary?",
  "options": [
    "Kinematic models handle only position; dynamic models incorporate acceleration and velocity, enhancing accuracy.",
    "Kinematic models are computationally expensive; dynamic models are faster.",
    "Kinematic models are suitable for all robotic tasks; dynamic models are rarely used.",
    "There are no limitations; kinematic models suffice for all control tasks."
  ],
  "correctOption": "A",
  "explanation": "Kinematic models ignore forces and inertial effects, leading to inaccuracies in control especially under dynamic conditions involving acceleration, velocity, and forces. Dynamic models account for these factors, leading to more precise and robust control.",
  "tags": [
    "Control Systems",
    "Sensors",
    "Actuators",
    "Robot Kinematics"
  ],
  "domain": "Computer Science - Robotics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98673320de848c99b9cd9"
  },
  "question": "Discuss the role of Kalman filtering in robotic state estimation, highlighting its advantages over simpler approaches like moving averages.",
  "options": [
    "Kalman filters are computationally more expensive; moving averages are more efficient.",
    "Both perform equally well; there's no significant difference.",
    "Kalman filtering incorporates a dynamic model and noise characteristics to provide more accurate and robust state estimates than simple moving averages, which don't consider noise or dynamics.",
    "Kalman filters are only useful for linear systems; moving averages can handle non-linear systems better."
  ],
  "correctOption": "C",
  "explanation": "Kalman filters use a dynamic model and knowledge of noise characteristics (process and measurement noise) to produce optimal state estimates, far surpassing the accuracy and robustness of simpler methods like moving averages which are less sensitive to noise and dynamic changes.",
  "tags": [
    "Control Systems",
    "Sensors",
    "Actuators",
    "Robot Kinematics"
  ],
  "domain": "Computer Science - Robotics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98673320de848c99b9cd6"
  },
  "question": "Describe a scenario where a purely reactive control architecture would be insufficient and a more sophisticated approach like hierarchical control would be necessary.",
  "options": [
    "Navigating a simple, obstacle-free corridor.",
    "Picking up a single object from a flat surface.",
    "Playing a simple game of pong.",
    "Executing a complex assembly task requiring multiple coordinated sub-tasks with conditional dependencies."
  ],
  "correctOption": "D",
  "explanation": "Complex assembly tasks necessitate hierarchical control to decompose the overall task into sub-tasks and manage their execution order and dependencies – something beyond the scope of reactive control’s immediate stimulus-response nature.",
  "tags": [
    "Control Systems",
    "Sensors",
    "Actuators",
    "Robot Kinematics"
  ],
  "domain": "Computer Science - Robotics",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9ce6"
  },
  "question": "Which reverse engineering technique is best suited for analyzing the control flow of a heavily obfuscated binary, prioritizing speed over complete code recovery?",
  "options": [
    "Static Disassembly",
    "Dynamic Tracing with instrumentation",
    "Symbolic Execution",
    "Automated program synthesis"
  ],
  "correctOption": "B",
  "explanation": "Dynamic tracing allows real-time observation of program execution, bypassing obfuscation techniques that hinder static analysis. Instrumentation enhances the detail captured.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9ced"
  },
  "question": "In analyzing a complex piece of software, you've identified several functions performing similar operations with slightly different parameters. What code analysis technique best helps to reveal potential code duplication and opportunities for refactoring?",
  "options": [
    "Control flow graph analysis",
    "Data flow analysis",
    "Abstract Syntax Tree (AST) comparison",
    "Call graph analysis"
  ],
  "correctOption": "C",
  "explanation": "AST comparison directly examines the code structure, facilitating the identification of structurally similar functions, even if they have slightly different parameter lists or minor variations in implementation details.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9cec"
  },
  "question": "Which advanced debugging technique helps in understanding the interaction between different software components and identifying potential vulnerabilities related to inter-process communication?",
  "options": [
    "Hardware breakpoints",
    "Software breakpoints",
    "System-call tracing",
    "Memory dumping"
  ],
  "correctOption": "C",
  "explanation": "System-call tracing allows you to monitor the interactions between processes by observing the operating system calls made, revealing how different components communicate.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9ce9"
  },
  "question": "What is the primary challenge in applying machine learning to automated reverse engineering tasks, particularly for identifying code functionality?",
  "options": [
    "Lack of labeled datasets for training",
    "High computational cost of training complex models",
    "Inability to handle obfuscated code effectively",
    "Difficulty in interpreting model predictions"
  ],
  "correctOption": "A",
  "explanation": "The scarcity of large, accurately labeled datasets representing diverse code functionalities significantly hinders the development and accuracy of machine learning models for reverse engineering.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9cee"
  },
  "question": "Which scenario would benefit MOST from employing fuzzing techniques during the reverse engineering process?",
  "options": [
    "Analyzing a heavily obfuscated binary",
    "Understanding the internal data structures of a program",
    "Identifying vulnerabilities in a network protocol",
    "Recovering the source code from a compiled executable"
  ],
  "correctOption": "C",
  "explanation": "Fuzzing is particularly effective for identifying vulnerabilities in network protocols by sending malformed or unexpected input to discover crashes or unexpected behavior, indicating potential security flaws.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9cea"
  },
  "question": "When dealing with packed executables, which technique is LEAST likely to provide accurate information about the underlying code structure before unpacking?",
  "options": [
    "Memory analysis during runtime",
    "Static analysis using a disassembler",
    "Signature-based detection of the packer",
    "Dynamic analysis using a debugger"
  ],
  "correctOption": "B",
  "explanation": "Static analysis struggles with packed executables because the underlying code is hidden within the packed format;  dynamic or memory analysis are more effective.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9ceb"
  },
  "question": "You are analyzing a network protocol using a protocol dissector. Which aspect would significantly improve the accuracy and detail of your analysis?",
  "options": [
    "Increased packet capture speed",
    "A more comprehensive protocol specification",
    "Employing a more powerful computer",
    "Using a larger network capture buffer"
  ],
  "correctOption": "B",
  "explanation": "A comprehensive specification allows the dissector to accurately interpret and decode the protocol fields, leading to a more detailed and accurate analysis.  Speed and buffer size are secondary.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9ce7"
  },
  "question": "You encounter a firmware image with extensive use of anti-debugging techniques.  Which approach would be MOST effective in overcoming these protections for in-depth analysis?",
  "options": [
    "Using a debugger with built-in anti-anti-debugging features",
    "Employing a virtual machine with hardware-assisted virtualization",
    "Patching the firmware to remove anti-debugging code",
    "Relying solely on static analysis techniques"
  ],
  "correctOption": "A",
  "explanation": "Debuggers with anti-anti-debugging features are designed to circumvent common anti-debugging tricks, providing a more robust approach than patching or relying on static analysis alone.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9cef"
  },
  "question": "You are reverse engineering a piece of software suspected of using custom encryption.  You successfully obtain several plaintext-ciphertext pairs. Which cryptanalytic technique is MOST appropriate for attempting to break the encryption?",
  "options": [
    "Linear cryptanalysis",
    "Differential cryptanalysis",
    "Known-plaintext attack",
    "Chosen-ciphertext attack"
  ],
  "correctOption": "C",
  "explanation": "A known-plaintext attack uses known plaintext-ciphertext pairs to deduce the encryption key or algorithm. This is the most appropriate approach when you have this data available.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9867e320de848c99b9ce8"
  },
  "question": "In analyzing a proprietary protocol, you discover encrypted communication.  Which cryptographic attack is MOST likely to succeed against a cipher with a known weakness in its key schedule?",
  "options": [
    "Brute-force attack",
    "Chosen-plaintext attack",
    "Related-key attack",
    "Differential cryptanalysis"
  ],
  "correctOption": "C",
  "explanation": "A related-key attack exploits weaknesses in the key schedule to find relationships between keys, allowing for faster decryption than a brute-force attack.",
  "tags": [
    "Disassembly",
    "Debugging",
    "Binary Analysis",
    "Decompilation"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9d01"
  },
  "question": "What does the JOIN clause do in SQL?",
  "options": [
    "Adds new records to a table",
    "Deletes records from a table",
    "Combines rows from two or more tables based on a related column",
    "Updates records in a table"
  ],
  "correctOption": "C",
  "explanation": "JOIN allows combining data from multiple tables based on a shared attribute (column) to form a meaningful result set.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9cff"
  },
  "question": "What does SQL stand for?",
  "options": [
    "Structured Query Language",
    "Simple Query Language",
    "Statistical Query Language",
    "Standard Query Language"
  ],
  "correctOption": "A",
  "explanation": "SQL's full name is Structured Query Language, a domain-specific language for managing and manipulating data in relational database management systems.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9d02"
  },
  "question": "How do you sort the results of an SQL query in ascending order?",
  "options": [
    "ORDER BY column_name DESC",
    "ORDER BY column_name ASC",
    "SORT BY column_name ASC",
    "SORT column_name"
  ],
  "correctOption": "B",
  "explanation": "The `ORDER BY column_name ASC` clause sorts the result set in ascending order of the specified column.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9d00"
  },
  "question": "Which clause is used to filter records in an SQL query?",
  "options": [
    "ORDER BY",
    "GROUP BY",
    "WHERE",
    "HAVING"
  ],
  "correctOption": "C",
  "explanation": "The WHERE clause allows you to specify conditions to filter the rows returned by the query, based on the values in the columns.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9d07"
  },
  "question": "You need to retrieve all customers who have placed an order with a total value greater than $1000.  Assuming you have tables 'Customers' and 'Orders' with a common field 'CustomerID', which query is most appropriate?",
  "options": [
    "SELECT * FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE TotalValue > 1000);",
    "SELECT * FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID WHERE TotalValue > 1000;",
    "SELECT * FROM Customers WHERE TotalValue > 1000;",
    "SELECT * FROM Orders WHERE TotalValue > 1000;"
  ],
  "correctOption": "A",
  "explanation": "This uses a subquery to efficiently find CustomerIDs from Orders exceeding $1000 and then selects corresponding customers.  Option B is less efficient because it returns all order data, option C lacks the join and option D only returns orders.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9cfe"
  },
  "question": "Which SQL statement is used to retrieve data from a database?",
  "options": [
    "INSERT",
    "UPDATE",
    "SELECT",
    "DELETE"
  ],
  "correctOption": "C",
  "explanation": "The SELECT statement is fundamental for querying and retrieving data from one or more tables.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9d03"
  },
  "question": "What is the purpose of the GROUP BY clause?",
  "options": [
    "To filter rows based on conditions",
    "To sort the result set",
    "To group rows with the same values in specified columns",
    "To join multiple tables"
  ],
  "correctOption": "C",
  "explanation": "The `GROUP BY` clause groups rows with the same values in specified columns into summary rows, enabling aggregate functions like COUNT, SUM, AVG etc.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9d05"
  },
  "question": "Which SQL statement is used to add new data into a table?",
  "options": [
    "SELECT",
    "UPDATE",
    "DELETE",
    "INSERT"
  ],
  "correctOption": "D",
  "explanation": "The INSERT statement is used to add new rows of data into a database table.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9d04"
  },
  "question": "What is the difference between INNER JOIN and LEFT (OUTER) JOIN?",
  "options": [
    "No difference, they are synonyms",
    "INNER JOIN returns only matching rows, LEFT JOIN returns all rows from the left table and matching rows from the right",
    "INNER JOIN returns all rows from both tables, LEFT JOIN only returns matching rows",
    "LEFT JOIN is faster than INNER JOIN"
  ],
  "correctOption": "B",
  "explanation": "An INNER JOIN only includes rows where a match is found in both tables, while a LEFT JOIN includes all rows from the left table, even if there's no match in the right table.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98689320de848c99b9d06"
  },
  "question": "What does the HAVING clause do, and how does it differ from WHERE?",
  "options": [
    "It filters rows before grouping, similar to WHERE",
    "It filters groups after grouping, unlike WHERE which filters rows before grouping",
    "It orders the results, while WHERE filters them",
    "It performs joins, while WHERE filters rows"
  ],
  "correctOption": "B",
  "explanation": "HAVING filters groups *after* they have been formed by GROUP BY, whereas WHERE filters individual rows *before* grouping.",
  "tags": [
    "Queries",
    "Joins",
    "Indexes",
    "Transactions"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d18"
  },
  "question": "What is the primary advantage of using Elliptic Curve Cryptography (ECC) over traditional RSA for key exchange and digital signatures?",
  "options": [
    "Faster computation with smaller key sizes",
    "Better resistance to quantum computing attacks",
    "Simpler mathematical foundation",
    "Greater flexibility in key management"
  ],
  "correctOption": "A",
  "explanation": "ECC achieves comparable security levels with much smaller key sizes than RSA, resulting in faster computation and reduced storage requirements.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d16"
  },
  "question": "Which of the following cryptographic primitives is NOT directly used in the construction of a typical Public Key Infrastructure (PKI)?",
  "options": [
    "Digital Signatures",
    "Hash Functions",
    "Symmetric Encryption",
    "Asymmetric Encryption"
  ],
  "correctOption": "C",
  "explanation": "While symmetric encryption is used in various parts of secure communication, it's not a direct building block of PKI's core components like digital certificates and certificate authorities.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d17"
  },
  "question": "A cipher's resistance to known-plaintext attacks is primarily determined by which of the following properties?",
  "options": [
    "Key Length",
    "Block Size",
    "Diffusion",
    "Confusion"
  ],
  "correctOption": "A",
  "explanation": "While diffusion and confusion are important for security, a sufficiently long key makes it computationally infeasible to derive the key even with known plaintext-ciphertext pairs.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d19"
  },
  "question": "In a chosen-ciphertext attack (CCA), what information does the attacker have access to?",
  "options": [
    "Plaintext",
    "Ciphertext",
    "Key",
    "Plaintext and Ciphertext"
  ],
  "correctOption": "B",
  "explanation": "CCA allows the attacker to obtain ciphertexts of their choosing and obtain the corresponding decryptions, testing the cipher's robustness against selective decryption vulnerabilities.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d1f"
  },
  "question": "What is the purpose of a digital certificate in a PKI?",
  "options": [
    "To encrypt a message",
    "To store a private key securely",
    "To authenticate a user or entity's public key",
    "To generate a random number for encryption"
  ],
  "correctOption": "C",
  "explanation": "Digital certificates bind a public key to an identity, allowing verification of the authenticity of the public key and the associated entity.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d1a"
  },
  "question": "What is the primary weakness addressed by the padding schemes used in block ciphers like AES?",
  "options": [
    "Short input lengths",
    "Key collisions",
    "Data leakage",
    "Vulnerability to chosen-plaintext attacks"
  ],
  "correctOption": "C",
  "explanation": "Padding ensures that the input data is a multiple of the block size.  Without proper padding, information might leak from the last incomplete block, compromising security.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d1b"
  },
  "question": "Which cryptographic hash function is considered insecure and should not be used in new applications?",
  "options": [
    "SHA-256",
    "SHA-3",
    "MD5",
    "SHA-512"
  ],
  "correctOption": "C",
  "explanation": "MD5 has been shown to be vulnerable to various collision attacks and is no longer considered cryptographically secure.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d1d"
  },
  "question": "Homomorphic encryption allows computation on encrypted data without decryption.  What type of operation does fully homomorphic encryption support?",
  "options": [
    "Addition only",
    "Multiplication only",
    "Addition and multiplication",
    "Bitwise operations only"
  ],
  "correctOption": "C",
  "explanation": "Fully homomorphic encryption supports both addition and multiplication operations on encrypted data, enabling complex computations without revealing the underlying data.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d1c"
  },
  "question": "What is a side-channel attack, and what information is exploited?",
  "options": [
    "A mathematical weakness in the encryption algorithm",
    "Information leaked through timing or power consumption",
    "A weakness in the key generation process",
    "A flawed implementation of the encryption protocol"
  ],
  "correctOption": "B",
  "explanation": "Side-channel attacks exploit information leaked through physical characteristics such as timing differences or power consumption during cryptographic operations.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d98694320de848c99b9d1e"
  },
  "question": "Explain the difference between a digital signature and a message authentication code (MAC).",
  "options": [
    "Both provide authentication, but MACs are more efficient; Signatures provide non-repudiation.",
    "Both provide authentication; MACs use secret keys and signatures use public keys; Signatures provide non-repudiation.",
    "Both are used for encryption; signatures are computationally intensive and MACs are fast.",
    "Digital signatures encrypt the message; MACs only provide a check-sum"
  ],
  "correctOption": "B",
  "explanation": "MACs use a shared secret key, offering authentication but not non-repudiation. Digital signatures utilize asymmetric keys, ensuring authenticity and non-repudiation – the signer cannot deny having signed the message.",
  "tags": [
    "Encryption",
    "Hashing",
    "Digital Signatures",
    "Key Management"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d33"
  },
  "question": "Which exploit technique uses existing code segments within a program to execute arbitrary commands, circumventing traditional defenses like DEP?",
  "options": [
    "Return-oriented programming (ROP)",
    "Heap spraying",
    "Code injection",
    "Shellcode injection"
  ],
  "correctOption": "A",
  "explanation": "ROP chains together existing code snippets (gadgets) to execute malicious commands without directly injecting new code.",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d2f"
  },
  "question": "You discover an integer overflow vulnerability in a software's authentication module.  Which sophisticated technique could you leverage to bypass authentication by manipulating the integer value to exceed its maximum limit, potentially leading to privilege escalation?",
  "options": [
    "Return-oriented programming",
    "Heap spraying",
    "Integer overflow exploit",
    "Buffer overflow"
  ],
  "correctOption": "C",
  "explanation": "An integer overflow exploit directly manipulates the integer value to cause unexpected behavior, often leading to unauthorized access.",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d32"
  },
  "question": "An attacker uses a buffer overflow to overwrite the return address on the stack with the address of malicious code.  What mitigation technique is most effective in preventing this type of attack?",
  "options": [
    "Stack Canaries",
    "Address Space Layout Randomization (ASLR)",
    "Data Execution Prevention (DEP)",
    "Control Flow Integrity (CFI)"
  ],
  "correctOption": "A",
  "explanation": "Stack canaries detect stack buffer overflows by placing a special value on the stack; if overwritten, the canary value changes, indicating an attack.",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d2e"
  },
  "question": "A sophisticated exploit targeting a specific vulnerability in a widely used web server achieves remote code execution.  Which exploit development phase best describes the action of confirming the vulnerability's existence and impact before crafting the exploit?",
  "options": [
    "Post-exploitation",
    "Exploit Development",
    "Vulnerability Research",
    "Payload Delivery"
  ],
  "correctOption": "C",
  "explanation": "Vulnerability research involves identifying, verifying, and understanding the weaknesses before exploit creation begins.",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d31"
  },
  "question": "What advanced anti-exploitation technique utilizes code randomization to hinder the reliability of return-oriented programming (ROP) attacks by making it harder to predict the location of gadgets?",
  "options": [
    "Address Space Layout Randomization (ASLR)",
    "Data Execution Prevention (DEP)",
    "Control Flow Integrity (CFI)",
    "Stack Canaries"
  ],
  "correctOption": "A",
  "explanation": "ASLR randomizes memory addresses, making it difficult for ROP attacks to locate and chain together code snippets (gadgets).",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d34"
  },
  "question": "How does a Return-to-libc attack differ from a standard Return-oriented programming (ROP) attack?",
  "options": [
    "It uses existing library functions instead of gadgets from the application itself.",
    "It targets the heap instead of the stack.",
    "It doesn't require control of the instruction pointer.",
    "It's only effective against 32-bit systems."
  ],
  "correctOption": "A",
  "explanation": "Return-to-libc uses existing functions from the C standard library, while ROP uses smaller code snippets (gadgets) from the application itself.",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d30"
  },
  "question": "A newly discovered vulnerability allows an attacker to inject arbitrary shell commands into a web application's database query. This vulnerability is best classified as:",
  "options": [
    "SQL Injection",
    "Cross-Site Scripting (XSS)",
    "Cross-Site Request Forgery (CSRF)",
    "Command Injection"
  ],
  "correctOption": "A",
  "explanation": "SQL Injection directly targets database queries, allowing attackers to inject malicious SQL code.",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d35"
  },
  "question": "A sophisticated exploit leverages a vulnerability in a network protocol to initiate a denial-of-service attack by flooding a target system with malformed packets.  What is this type of attack commonly known as?",
  "options": [
    "SYN flood",
    "Smurf attack",
    "Ping of death",
    "UDP flood"
  ],
  "correctOption": "A",
  "explanation": "A SYN flood is a denial-of-service attack that exploits the TCP three-way handshake to exhaust server resources.",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d36"
  },
  "question": "What is a key difference between a zero-day exploit and a known vulnerability exploit?",
  "options": [
    "Zero-day exploits target unknown vulnerabilities, while known exploits target previously discovered and documented vulnerabilities.",
    "Zero-day exploits are always more effective than known exploits.",
    "Zero-day exploits are only used by nation-state actors, while known exploits are used by cybercriminals.",
    "Zero-day exploits are easier to develop than known exploits."
  ],
  "correctOption": "A",
  "explanation": "The core difference lies in the knowledge of the vulnerability. Zero-day exploits target previously unknown vulnerabilities.",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9869f320de848c99b9d37"
  },
  "question": "You are analyzing a malware sample and discover it uses a technique to obfuscate its malicious payload by encrypting it and decrypting it only when executed.  Which advanced anti-analysis technique is being employed?",
  "options": [
    "Polymorphism",
    "Anti-debugging",
    "Packing",
    "Metasploit"
  ],
  "correctOption": "C",
  "explanation": "Packing compresses and/or encrypts the malware to make reverse engineering more difficult.  Decryption typically happens during execution.",
  "tags": [
    "Buffer Overflows",
    "RCE",
    "Privilege Escalation",
    "Vulnerability Analysis"
  ],
  "domain": "Computer Science - Security",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d4e"
  },
  "question": "What is a 'lambda capture' in C++ and how does it affect the lifetime of captured variables?",
  "options": [
    "A. It's a mechanism for debugging lambda expressions.",
    "B. It specifies which variables from the surrounding scope are accessible within a lambda expression.",
    "C. It determines the return type of a lambda expression.",
    "D. It's used only for exception handling inside lambdas."
  ],
  "correctOption": "B",
  "explanation": "A lambda capture ([=] or [&] or custom) dictates which external variables are accessible within the lambda; by-value captures create copies, while by-reference captures extend the lifetime of the lambda to include the lifetime of the referenced variable (potential for dangling references).",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d4f"
  },
  "question": "How can you leverage C++20's `concepts` to improve template code?",
  "options": [
    "A. Concepts simplify error messages.",
    "B. Concepts improve compile time performance.",
    "C. Concepts allow for early compile-time constraint checking on template arguments, reducing compilation errors and improving code clarity.",
    "D. Concepts are only relevant for large-scale projects."
  ],
  "correctOption": "C",
  "explanation": "Concepts allow you to specify requirements on template parameters at compile time, improving type safety and reducing the complexity of template error messages.",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d46"
  },
  "question": "What is the primary difference between `std::shared_ptr` and `std::unique_ptr` in C++?",
  "options": [
    "A. `std::shared_ptr` allows multiple pointers to manage the same object; `std::unique_ptr` only allows one.",
    "B. `std::unique_ptr` is more efficient than `std::shared_ptr`.",
    "C. Both A and B",
    "D. Neither A nor B"
  ],
  "correctOption": "C",
  "explanation": "`std::shared_ptr` uses reference counting, allowing shared ownership. `std::unique_ptr` provides exclusive ownership, enhancing efficiency in single-owner scenarios.",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d4a"
  },
  "question": "Describe the difference between `static_assert` and `dynamic_assert` in C++.",
  "options": [
    "A. `static_assert` checks compile-time conditions; `dynamic_assert` checks runtime conditions.",
    "B. `dynamic_assert` is always preferable for performance reasons.",
    "C. Both perform the same function.",
    "D. `static_assert` is deprecated."
  ],
  "correctOption": "A",
  "explanation": "`static_assert` performs compile-time checks and will cause a compilation error if the condition is false. `dynamic_assert` performs runtime checks resulting in an assertion failure if the condition is false.",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d4b"
  },
  "question": "How does C++'s `constexpr` keyword impact compile-time computation?",
  "options": [
    "A. It forces variables to be initialized at compile time.",
    "B. It allows expressions to be evaluated at compile time if possible, leading to potential optimizations.",
    "C. It prevents runtime errors.",
    "D. It's primarily used for debugging."
  ],
  "correctOption": "B",
  "explanation": "`constexpr` enables compile-time evaluation of functions and variables when possible, potentially improving performance by reducing runtime overhead.",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d4c"
  },
  "question": "What are the implications of using `std::bind` versus lambda expressions in C++?",
  "options": [
    "A. Lambdas are always more efficient.",
    "B. `std::bind` offers greater flexibility in complex binding scenarios.",
    "C. Lambdas are less readable than `std::bind`.",
    "D. There is no significant difference between the two."
  ],
  "correctOption": "B",
  "explanation": "While lambdas are often more concise, `std::bind` provides greater control and flexibility, particularly in complex scenarios involving placeholders and function argument manipulation.",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d49"
  },
  "question": "What is the purpose of a variadic template in C++?",
  "options": [
    "A. To handle a variable number of template arguments.",
    "B. To create templates that operate on different data types.",
    "C. To implement polymorphism.",
    "D. To enable recursive template instantiation."
  ],
  "correctOption": "A",
  "explanation": "Variadic templates use the ellipsis (`...`) to accept a variable number of template parameters, making functions and classes adaptable to diverse input quantities.",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d47"
  },
  "question": "Explain the concept of 'perfect forwarding' in C++ and its benefits.",
  "options": [
    "A. It involves perfectly copying arguments to a function.",
    "B. It preserves the original argument's value categories (lvalue/rvalue) when passed to another function.",
    "C. It optimizes function call overhead.",
    "D. It's used solely for exception handling."
  ],
  "correctOption": "B",
  "explanation": "Perfect forwarding uses universal references (`&&`) to forward arguments without unnecessary copying or moving, maintaining their original value categories.",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d48"
  },
  "question": "How does the `std::move` function work and when is it beneficial to use it?",
  "options": [
    "A. It physically moves the data in memory.",
    "B. It transfers ownership of an object without copying.",
    "C. It converts an object to a string representation.",
    "D. It only works with `std::unique_ptr`."
  ],
  "correctOption": "B",
  "explanation": "`std::move` casts an lvalue to an rvalue reference, allowing efficient resource transfer in move semantics without deep copying.  Useful for optimizing move constructors and assignments.",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986b8320de848c99b9d4d"
  },
  "question": "Explain the concept of 'template metaprogramming' in C++ and give an example of its application.",
  "options": [
    "A. It is a method of debugging templates.",
    "B. It is a technique for writing code that generates code at compile time.",
    "C. It refers to using templates for runtime polymorphism.",
    "D. It is solely used for optimizing memory allocation."
  ],
  "correctOption": "B",
  "explanation": "Template metaprogramming leverages templates to perform computations and generate code at compile time, useful for creating generic algorithms and data structures with compile-time optimization.",
  "tags": [
    "Object-Oriented Programming",
    "STL",
    "Memory Management",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d67"
  },
  "question": "Which of the following is NOT a fundamental limit in information theory?",
  "options": [
    "Channel capacity",
    "Source coding theorem",
    "Rate distortion function",
    "Shannon-Hartley theorem for AWGN channels",
    "The Nyquist-Shannon sampling theorem"
  ],
  "correctOption": "E",
  "explanation": "The Nyquist-Shannon sampling theorem is from signal processing, dealing with sampling rates, not a fundamental limit in information theory itself.  The other options are core concepts within information theory.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d5f"
  },
  "question": "Consider a channel with capacity C and a source with entropy H. What condition must be met for reliable communication without error correction?",
  "options": [
    "C > H",
    "C < H",
    "C = H",
    "C ≥ 2H"
  ],
  "correctOption": "A",
  "explanation": "The channel capacity must be greater than the source entropy to allow reliable transmission.  Otherwise, information is lost.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d61"
  },
  "question": "Explain the relationship between the mutual information I(X;Y) and conditional entropy H(X|Y)?",
  "options": [
    "I(X;Y) = H(X) - H(X|Y)",
    "I(X;Y) = H(X) + H(X|Y)",
    "I(X;Y) = H(Y) - H(X|Y)",
    "I(X;Y) = H(X|Y) - H(X)"
  ],
  "correctOption": "A",
  "explanation": "Mutual information is the reduction in uncertainty about X given knowledge of Y.  This is equal to the difference between the entropy of X and its conditional entropy given Y.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d60"
  },
  "question": "What is the rate distortion function R(D) for a source? What does D represent?",
  "options": [
    "It's the minimum rate required to achieve a distortion level D; D is the amount of information lost.",
    "It's the maximum rate achievable with distortion D; D is the data compression ratio.",
    "It's the average distortion for a given rate R; D represents redundancy.",
    "It's the entropy of the source given distortion D; D is a measure of noise in the channel."
  ],
  "correctOption": "A",
  "explanation": "R(D) quantifies the trade-off between compression rate and allowed distortion. D represents the acceptable level of information loss.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d62"
  },
  "question": "What is the significance of the Fano inequality in the context of source coding?",
  "options": [
    "It establishes a lower bound on the achievable compression rate.",
    "It proves the optimality of Huffman coding for all source distributions.",
    "It provides an upper bound on the probability of decoding error.",
    "It relates channel capacity to the source entropy."
  ],
  "correctOption": "C",
  "explanation": "The Fano inequality bounds the probability of error in decoding a source code, offering insights into achievable performance.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d63"
  },
  "question": "How does channel coding affect the rate of information transmission?",
  "options": [
    "It always increases the rate of information transmission.",
    "It always decreases the rate of information transmission.",
    "It can increase or decrease the rate depending on the code used.",
    "It has no effect on the rate of information transmission."
  ],
  "correctOption": "B",
  "explanation": "Channel coding adds redundancy to protect against errors, thus reducing the effective rate of information transmission.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d64"
  },
  "question": "What is the capacity of a binary symmetric channel (BSC) with crossover probability p?",
  "options": [
    "1 - p",
    "1 + p",
    "1 - H(p)",
    "1 + H(p) where H(p) is the binary entropy function"
  ],
  "correctOption": "C",
  "explanation": "The capacity of a BSC is given by 1 - H(p), where H(p) is the binary entropy function, reflecting the uncertainty introduced by the crossover probability.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d66"
  },
  "question": "In rate-distortion theory, what is the meaning of a distortion measure?",
  "options": [
    "A measure of the complexity of the compression algorithm.",
    "A metric quantifying the difference between the original and reconstructed data.",
    "A measure of the entropy of the compressed data.",
    "A measure of the channel capacity."
  ],
  "correctOption": "B",
  "explanation": "A distortion measure quantifies the difference or error introduced when compressing data.  This could be mean-squared error, for instance.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d65"
  },
  "question": "Two independent random variables X and Y have entropies H(X) = 2 bits and H(Y) = 3 bits. What is the maximum possible value of the joint entropy H(X,Y)?",
  "options": [
    "2 bits",
    "3 bits",
    "5 bits",
    "6 bits"
  ],
  "correctOption": "C",
  "explanation": "For independent variables, H(X,Y) = H(X) + H(Y).  Therefore, the maximum joint entropy is 2 + 3 = 5 bits.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986c4320de848c99b9d5e"
  },
  "question": "A source emits symbols from an alphabet {x1, x2, x3} with probabilities P(x1) = 0.5, P(x2) = 0.3, P(x3) = 0.2.  What is the entropy of this source, rounded to two decimal places?",
  "options": [
    "1.37 bits",
    "0.88 bits",
    "1.12 bits",
    "0.92 bits"
  ],
  "correctOption": "A",
  "explanation": "Entropy H(X) = - Σ P(xi)log₂P(xi). Calculating this for the given probabilities yields approximately 1.37 bits.",
  "tags": [
    "Entropy",
    "Compression",
    "Channel Capacity",
    "Coding Theory"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d78"
  },
  "question": "How does contextualized word embeddings, such as those produced by BERT, address the limitations of traditional word embeddings like Word2Vec?",
  "options": [
    "A) They don't; both are equally effective. \nB) Contextualized embeddings consider word context, unlike Word2Vec, which relies solely on global word co-occurrence. \nC) Contextualized embeddings are faster to compute than Word2Vec. \nD) Contextualized embeddings handle polysemy better by using a single vector representation for each word."
  ],
  "correctOption": "B",
  "explanation": "BERT and similar models generate different word embeddings based on the surrounding words (context), addressing the issue of polysemy present in static embeddings like Word2Vec.",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d79"
  },
  "question": "Describe a scenario where a transformer-based model would be significantly more effective than a recurrent neural network (RNN) for a Natural Language Processing task.",
  "options": [
    "A) Processing short sequences of text. \nB) Tasks requiring sequential processing where the order of words is crucial. \nC) Translating short sentences. \nD) Processing long sequences of text, like lengthy documents, due to their parallel processing capability."
  ],
  "correctOption": "D",
  "explanation": "Transformers excel at processing long sequences because of their parallel architecture, unlike RNNs which suffer from vanishing/exploding gradients with long sequences.",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d77"
  },
  "question": "Explain the difference between rule-based and statistical approaches to machine translation, highlighting their respective strengths and weaknesses.",
  "options": [
    "A) Rule-based systems rely on linguistic rules; statistical systems on data; Rule-based is faster, Statistical is more adaptable. \nB) Rule-based systems rely on data; statistical systems on linguistic rules; Rule-based is more adaptable, Statistical is faster. \nC) Both rely on linguistic rules but differ in the type of rules used. Statistical systems are always more accurate. \nD) Both use data but differ in how they process it. Rule-based systems are generally more accurate."
  ],
  "correctOption": "A",
  "explanation": "Rule-based systems use handcrafted linguistic rules, offering speed but limited adaptability. Statistical systems learn from data, offering better adaptability but requiring large datasets.",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d76"
  },
  "question": "Which of the following is NOT a common challenge in Named Entity Recognition (NER) systems?",
  "options": [
    "Ambiguity of word senses",
    "Nested entities",
    "Out-of-vocabulary words",
    "Overfitting on training data"
  ],
  "correctOption": "A",
  "explanation": "Ambiguity of word senses is a challenge in Word Sense Disambiguation (WSD), not specifically NER. The other options are common NER challenges.",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d7e"
  },
  "question": "Explain the concept of 'explainable AI' (XAI) in the context of NLP and its importance.",
  "options": [
    "A) It's a technique for increasing the accuracy of NLP models. \nB) It refers to techniques that make the decision-making process of NLP models more transparent and understandable. \nC) It’s a method to make NLP models faster. \nD) It is not relevant to NLP."
  ],
  "correctOption": "B",
  "explanation": "XAI aims to provide insights into how NLP models arrive at their predictions, fostering trust and enabling debugging and improvement.  This is crucial for deploying NLP systems in high-stakes applications.",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d7f"
  },
  "question": "Discuss the ethical considerations surrounding the use of large language models (LLMs) in NLP applications, providing at least two specific examples.",
  "options": [
    "A) There are no ethical considerations. \nB) Bias in training data leading to discriminatory outputs; Privacy concerns related to sensitive data used in training or input. \nC) Only bias in training data is a concern. \nD) Only the speed of processing is an ethical concern."
  ],
  "correctOption": "B",
  "explanation": "LLMs trained on biased data can perpetuate and amplify societal biases.  Furthermore, the use of personal data in training raises significant privacy concerns.",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d7d"
  },
  "question": "How does transfer learning benefit NLP tasks?",
  "options": [
    "A) It requires less data for training new models. \nB) It speeds up training time for new models. \nC) Both A and B are true. \nD) It doesn't offer significant benefits."
  ],
  "correctOption": "C",
  "explanation": "Transfer learning leverages pre-trained models, reducing the need for large training datasets and accelerating the training of new models for specific tasks.",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d7b"
  },
  "question": "In the context of neural machine translation (NMT), what is the role of beam search during decoding?",
  "options": [
    "A) It generates a single translation candidate. \nB) It speeds up the training process. \nC) It explores multiple translation hypotheses simultaneously, selecting the best one based on a scoring function. \nD) It prevents the model from producing repetitive translations."
  ],
  "correctOption": "C",
  "explanation": "Beam search maintains a set of the most promising partial translations at each step, improving the likelihood of finding a high-quality translation compared to greedy search.",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d7c"
  },
  "question": "Which of the following techniques is NOT commonly used for handling sparsity in language models?",
  "options": [
    "A) Word embeddings \nB) Subword tokenization (e.g., BPE) \nC) Recurrent Neural Networks \nD) Bayesian methods"
  ],
  "correctOption": "C",
  "explanation": "While RNNs are used in language modeling, they don't directly address sparsity like subword tokenization or Bayesian methods. Word embeddings help to some extent but are not primary sparsity mitigation techniques.",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986d1320de848c99b9d7a"
  },
  "question": "What is the primary purpose of attention mechanisms in transformer-based models for NLP?",
  "options": [
    "A) To improve training speed. \nB) To reduce the dimensionality of input data. \nC) To focus on the most relevant parts of the input sequence when generating output. \nD) To prevent overfitting during training."
  ],
  "correctOption": "C",
  "explanation": "Attention mechanisms allow the model to weigh the importance of different input tokens, focusing on the most relevant parts for the task at hand (e.g., translation, question answering).",
  "tags": [
    "Text Analysis",
    "Sentiment Analysis",
    "Language Models",
    "Named Entity Recognition"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d96"
  },
  "question": "How can you efficiently check if a key exists in a Julia dictionary?",
  "options": [
    "Using the `contains` function.",
    "Using a `for` loop to iterate through the keys.",
    "Using the `in` operator with the keys.",
    "Using a `try-catch` block to handle potential errors."
  ],
  "correctOption": "A",
  "explanation": "`contains(dict, key)` provides a concise and efficient way to check for key existence.",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d92"
  },
  "question": "What is the role of the `struct` keyword in Julia?",
  "options": [
    "To define a function.",
    "To define a mutable composite data type.",
    "To define an immutable composite data type.",
    "To define a loop."
  ],
  "correctOption": "B",
  "explanation": "Structs in Julia define composite data types. By default they are immutable; you need to add `mutable struct` to make them mutable.",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d93"
  },
  "question": "Which package is commonly used for parallel computing in Julia?",
  "options": [
    "ThreadsX",
    "Distributed",
    "MPI.jl",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "All three packages (`ThreadsX`, `Distributed`, and `MPI.jl`) offer different approaches to parallel computation in Julia.",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d94"
  },
  "question": "How do you create a range of numbers from 1 to 10 (inclusive) in Julia?",
  "options": [
    " `range(1, 10)`",
    " `1:10`",
    " `[1:10]`",
    " `range(1:10)`"
  ],
  "correctOption": "B",
  "explanation": "`1:10` is the concise and efficient way to create a range in Julia.",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d8f"
  },
  "question": "Which of the following is NOT a core data structure in Julia?",
  "options": [
    "Array",
    "Tuple",
    "Dictionary",
    "Stack"
  ],
  "correctOption": "D",
  "explanation": "While stacks can be implemented, they are not a fundamental built-in data structure like arrays, tuples, and dictionaries.",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d91"
  },
  "question": "How would you define a function that takes a variable number of arguments in Julia?",
  "options": [
    "Using the `varargs` keyword.",
    "Using the `...` syntax in the function signature.",
    "Using the `optional` keyword.",
    "Using the `multiple` keyword."
  ],
  "correctOption": "B",
  "explanation": "The `...` syntax (variadic arguments) allows a function to accept any number of arguments, which are collected into a tuple.",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d90"
  },
  "question": "What is the primary difference between `let` and `const` in Julia?",
  "options": [
    "Both are the same",
    "`let` creates a local variable, while `const` declares an immutable variable.",
    "`let` declares an immutable variable, while `const` creates a local variable.",
    "There's no functional difference; it's a matter of coding style."
  ],
  "correctOption": "B",
  "explanation": "`let` creates a variable scoped to a block, while `const` declares a variable whose value cannot be changed after initialization.",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d95"
  },
  "question": "What does the `.` operator typically do when used before a function call in Julia?",
  "options": [
    "It signifies a method call on an object.",
    "It indicates a global function call.",
    "It signals an error.",
    "It's a type declaration."
  ],
  "correctOption": "A",
  "explanation": "The dot (`.`) operator calls a method on a specific object (instance of a type).",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d8e"
  },
  "question": "What is the primary purpose of the `@inbounds` macro in Julia?",
  "options": [
    "To improve code readability.",
    "To perform bounds checking on array accesses.",
    "To bypass bounds checking on array accesses, potentially increasing performance.",
    "To allocate memory for arrays dynamically."
  ],
  "correctOption": "C",
  "explanation": "The `@inbounds` macro skips array bounds checking, leading to faster access but risking errors if indices are out of bounds.  Use with caution!",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986dd320de848c99b9d97"
  },
  "question": "What is the purpose of broadcasting (`.` before a function) in Julia?",
  "options": [
    "To apply a function element-wise to arrays or other iterable objects.",
    "To define a new type.",
    "To create a new scope for variables.",
    "To perform parallel operations."
  ],
  "correctOption": "A",
  "explanation": "Broadcasting applies a function to each element of an array (or other collection) without explicit loops, enhancing code readability and often performance.",
  "tags": [
    "Scientific Computing",
    "Performance",
    "Multiple Dispatch",
    "Type System"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9da8"
  },
  "question": "What is a deadlock in operating systems?",
  "options": [
    "A situation where two or more processes are blocked indefinitely, waiting for each other.",
    "A type of memory error",
    "An efficient way of managing resources",
    "A process that consumes excessive CPU time"
  ],
  "correctOption": "A",
  "explanation": "Deadlock occurs when processes hold resources and wait for resources held by other processes, creating a circular dependency.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9daf"
  },
  "question": "Which of the following is NOT a common method for handling concurrency?",
  "options": [
    "Semaphores",
    "Mutexes",
    "Deadlocks",
    "Monitors"
  ],
  "correctOption": "C",
  "explanation": "Deadlocks are a problem caused by incorrect concurrency management, not a solution or method.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9da9"
  },
  "question": "What is the purpose of a page table in virtual memory management?",
  "options": [
    "To translate logical addresses to physical addresses",
    "To manage the CPU scheduler",
    "To implement file system operations",
    "To handle interrupt requests"
  ],
  "correctOption": "A",
  "explanation": "The page table maps virtual addresses used by a process to the physical addresses in main memory.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9dae"
  },
  "question": "What is a system call?",
  "options": [
    "A software interrupt that requests a service from the operating system kernel",
    "A function call within a user-level program",
    "A hardware component",
    "A type of memory address"
  ],
  "correctOption": "A",
  "explanation": "System calls provide an interface for user-level programs to access kernel services, ensuring controlled access to system resources.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9da6"
  },
  "question": "What is a process control block (PCB)?",
  "options": [
    "A data structure holding the state of a running process",
    "A type of memory management technique",
    "A scheduling algorithm for CPU allocation",
    "A mechanism for inter-process communication"
  ],
  "correctOption": "A",
  "explanation": "A PCB stores information about a process, including its state, registers, and memory allocation.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9dab"
  },
  "question": "What is a race condition?",
  "options": [
    "A situation where multiple processes access and manipulate the same shared resource concurrently without proper synchronization, leading to unpredictable results.",
    "A type of hardware failure",
    "A condition caused by insufficient memory",
    "A deadlock situation"
  ],
  "correctOption": "A",
  "explanation": "Race conditions occur when the final outcome depends on unpredictable order of execution of processes accessing shared resources.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9da7"
  },
  "question": "Which scheduling algorithm prioritizes processes with the shortest burst time?",
  "options": [
    "First-Come, First-Served (FCFS)",
    "Shortest Job First (SJF)",
    "Round Robin",
    "Priority Scheduling"
  ],
  "correctOption": "B",
  "explanation": "SJF aims to minimize average waiting time by scheduling the shortest jobs first.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9dad"
  },
  "question": "What is the role of an interrupt handler?",
  "options": [
    "To handle asynchronous events and signals",
    "To manage file system access",
    "To schedule processes",
    "To allocate memory"
  ],
  "correctOption": "A",
  "explanation": "Interrupt handlers respond to interrupts (signals from hardware or software) and execute specific actions to handle the event.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9dac"
  },
  "question": "What is demand paging?",
  "options": [
    "A memory management technique where pages are loaded into memory only when they are needed.",
    "A technique for managing disk space",
    "A type of CPU scheduling algorithm",
    "A method for preventing deadlocks"
  ],
  "correctOption": "A",
  "explanation": "Demand paging improves efficiency by only loading necessary pages, reducing memory pressure and improving response times.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986e7320de848c99b9daa"
  },
  "question": "Which file system is commonly used in Linux systems?",
  "options": [
    "NTFS",
    "FAT32",
    "ext4",
    "HFS+"
  ],
  "correctOption": "C",
  "explanation": "ext4 is a widely used journaling file system in Linux, known for its robustness and features.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "Scheduling"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dc1"
  },
  "question": "What does the `isset()` function check for?",
  "options": [
    "If a variable is defined and is not NULL.",
    "If a variable is defined regardless of its value.",
    "If a variable is of a specific data type.",
    "If a variable is an array."
  ],
  "correctOption": "A",
  "explanation": "`isset()` checks if a variable is declared and is not NULL.  It returns `false` if the variable is undefined or has the value NULL.",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dc5"
  },
  "question": "What is the difference between `==` and `===` in PHP?",
  "options": [
    "Both are the same; they perform loose comparison.",
    " `==` performs loose comparison, `===` performs strict comparison.",
    "`==` performs strict comparison, `===` performs loose comparison.",
    " `==` checks for type, `===` checks for value."
  ],
  "correctOption": "B",
  "explanation": "`==` performs loose comparison (type juggling), while `===` performs strict comparison (checks both value and type).",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dbe"
  },
  "question": "Which PHP function is used to sanitize user input to prevent SQL injection?",
  "options": [
    "htmlspecialchars()",
    "strip_tags()",
    "mysql_real_escape_string()",
    "addslashes()"
  ],
  "correctOption": "C",
  "explanation": "While others offer some protection, `mysql_real_escape_string()` is specifically designed to escape characters that have special meaning in SQL queries, preventing SQL injection vulnerabilities.  Note:  Using prepared statements is a far superior method for preventing SQL injection.",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dbf"
  },
  "question": "What is the purpose of the `$this` keyword in PHP object-oriented programming?",
  "options": [
    "To access static properties.",
    "To access parent class methods.",
    "To access the current object's properties and methods.",
    "To create a new object instance."
  ],
  "correctOption": "C",
  "explanation": "`$this` refers to the current instance of the class. It's used to access and modify properties and methods within the class's methods.",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dc0"
  },
  "question": "How do you define a constant in PHP?",
  "options": [
    "`const MY_CONSTANT = 'value';`",
    "`define('MY_CONSTANT', 'value');`",
    "`var MY_CONSTANT = 'value';`",
    "`let MY_CONSTANT = 'value';`"
  ],
  "correctOption": "B",
  "explanation": "`define()` is the function used to declare constants in PHP.  `const` is also valid, but was introduced later.",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dc3"
  },
  "question": "What is the purpose of the `include_once()` directive?",
  "options": [
    "Includes a file only once, preventing multiple inclusions.",
    "Includes a file multiple times, even if it's already included.",
    "Includes a file conditionally based on a variable.",
    "Includes a file only if it hasn't been modified."
  ],
  "correctOption": "A",
  "explanation": "`include_once()` ensures a file is included only the first time it's encountered. This prevents errors from duplicate function or class definitions.",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dc4"
  },
  "question": "How can you create an anonymous function (closure) in PHP?",
  "options": [
    "`function myFunction() { ... }`",
    "`$myFunction = function() { ... };`",
    "`$myFunction = new function() { ... };`",
    "`createFunction('...', '...');`"
  ],
  "correctOption": "B",
  "explanation": "Anonymous functions, or closures, are created using the `function()` syntax within a variable assignment.",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dc2"
  },
  "question": "Which error reporting level displays all errors except notices?",
  "options": [
    "`E_ALL`",
    "`E_ALL & ~E_NOTICE`",
    "`E_ERROR`",
    "`E_WARNING`"
  ],
  "correctOption": "B",
  "explanation": "`E_ALL & ~E_NOTICE` combines all error levels except for notices. This is a common setting for development to show potential issues while ignoring minor notices.",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dc6"
  },
  "question": "What does the `spl_autoload_register()` function do?",
  "options": [
    "Registers a function to handle autoloading of classes.",
    "Registers a function to handle error handling.",
    "Registers a function to handle database connections.",
    "Registers a function to handle session management."
  ],
  "correctOption": "A",
  "explanation": "`spl_autoload_register()` allows you to register a function that PHP will call when it encounters a class that hasn't been defined yet, enabling automatic class loading.",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986f3320de848c99b9dc7"
  },
  "question": "Which statement best describes the use of namespaces in PHP?",
  "options": [
    "Namespaces are used to improve code readability only.",
    "Namespaces prevent naming conflicts between classes and functions from different libraries.",
    "Namespaces are used for database management.",
    "Namespaces are used only for object-oriented programming."
  ],
  "correctOption": "B",
  "explanation": "Namespaces provide a way to organize code and prevent naming collisions, particularly when using multiple libraries or frameworks that might have classes or functions with the same name.",
  "tags": [
    "Server-side Scripting",
    "Forms",
    "Databases",
    "Security"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9dd6"
  },
  "question": "A particle of mass m moves in a central potential V(r) = -k/r, where k is a positive constant.  Which of the following statements is NOT true about its orbit?",
  "options": [
    "The orbit is always a conic section.",
    "The orbit is closed only if the eccentricity is less than 1.",
    "The angular momentum is conserved.",
    "The total energy is always positive."
  ],
  "correctOption": "D",
  "explanation": "For a central potential V(r) = -k/r, the total energy can be negative (bound orbits), zero (parabolic orbit), or positive (unbound orbits).",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9ddc"
  },
  "question": "In the context of special relativity, which of the following quantities is NOT invariant under Lorentz transformations?",
  "options": [
    "Speed of light",
    "Proper time",
    "Spacetime interval",
    "Momentum"
  ],
  "correctOption": "D",
  "explanation": "While the spacetime interval (s² = c²t² - x² - y² - z²) is invariant, momentum is not.  Relativistic momentum needs a Lorentz transformation to change reference frames.",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9dd9"
  },
  "question": "Two identical conducting spheres, initially carrying charges +Q and -Q, are brought into contact and then separated.  What is the charge on each sphere after separation?",
  "options": [
    "+Q and -Q",
    "+Q/2 and -Q/2",
    "0 and 0",
    "+Q and 0"
  ],
  "correctOption": "C",
  "explanation": "When the spheres touch, the charges redistribute to equalize the potential, resulting in zero charge on each sphere.",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9dda"
  },
  "question": "A system is described by the Hamiltonian H = p²/2m + 1/2kx². What is the time-independent Schrödinger equation for this system?",
  "options": [
    "-ħ²/2m ∂²ψ/∂x² + 1/2kx²ψ = Eψ",
    "iħ ∂ψ/∂t = -ħ²/2m ∂²ψ/∂x² + 1/2kx²ψ",
    "-ħ²/2m ∂²ψ/∂x² - 1/2kx²ψ = Eψ",
    "iħ ∂ψ/∂t = ħ²/2m ∂²ψ/∂x² - 1/2kx²ψ"
  ],
  "correctOption": "A",
  "explanation": "The time-independent Schrödinger equation is Hψ = Eψ, where H is the Hamiltonian operator, ψ is the wave function, and E is the energy.",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9ddb"
  },
  "question": "A photon of wavelength λ scatters off a stationary electron. After scattering, the photon's wavelength is λ'.  Which of the following equations correctly describes the Compton effect?",
  "options": [
    "λ' - λ = h/mc(1 - cosθ)",
    "λ' + λ = h/mc(1 + cosθ)",
    "λ' - λ = h/mc(1 + cosθ)",
    "λ' + λ = h/mc(1 - cosθ)"
  ],
  "correctOption": "A",
  "explanation": "This is the standard equation for the Compton effect, where h is Planck's constant, m is the electron mass, c is the speed of light, and θ is the scattering angle.",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9ddd"
  },
  "question": "A quantum harmonic oscillator has energy levels given by Eₙ = (n + 1/2)ħω, where n = 0, 1, 2,...  What is the zero-point energy of this oscillator?",
  "options": [
    "0",
    "ħω",
    "ħω/2",
    "2ħω"
  ],
  "correctOption": "C",
  "explanation": "The zero-point energy is the energy of the oscillator in its ground state (n=0), which is (0 + 1/2)ħω = ħω/2.",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9dde"
  },
  "question": "Which of the following phenomena directly demonstrates the wave-particle duality of light?",
  "options": [
    "Reflection",
    "Refraction",
    "Diffraction",
    "Polarization"
  ],
  "correctOption": "C",
  "explanation": "Diffraction shows the wave nature of light (bending around obstacles), while the photoelectric effect (not listed but relevant) demonstrates the particle nature.  Together, these illustrate wave-particle duality.",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9dd7"
  },
  "question": "Consider a relativistic particle with mass m and velocity v.  Its total energy E is given by E² = p²c² + m²c⁴, where p is the momentum and c is the speed of light.  What is the particle's kinetic energy in terms of its rest mass energy (mc²) and its velocity (v)?",
  "options": [
    "mc²(1/√(1-v²/c²) - 1)",
    "mc²(1 - √(1-v²/c²))",
    "mc²(√(1-v²/c²) - 1)",
    "mc²(1 + √(1-v²/c²))"
  ],
  "correctOption": "A",
  "explanation": "The kinetic energy is the difference between the total energy and the rest energy: E - mc² = mc²(1/√(1-v²/c²) - 1).",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9ddf"
  },
  "question": "A particle is confined to a one-dimensional infinite square well of width L. What is the probability of finding the particle in the ground state (n=1) between x = 0 and x = L/2?",
  "options": [
    "1/2",
    "1/4",
    "1/√2",
    "1"
  ],
  "correctOption": "A",
  "explanation": "The probability density for the ground state is constant across the well. Therefore, the probability of finding the particle in the first half of the well is simply 1/2.",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d986ff320de848c99b9dd8"
  },
  "question": "A black hole has a Schwarzschild radius Rₛ.  If the mass of the black hole is doubled, what happens to its Schwarzschild radius?",
  "options": [
    "It remains unchanged.",
    "It is halved.",
    "It is doubled.",
    "It is quadrupled."
  ],
  "correctOption": "C",
  "explanation": "The Schwarzschild radius is directly proportional to the mass: Rₛ = 2GM/c², so doubling the mass doubles the radius.",
  "tags": [
    "Simulation",
    "Computational Physics",
    "Physical Modeling",
    "Quantum Mechanics"
  ],
  "domain": "Computer Science - Theory",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9df0"
  },
  "question": "Which of the following is NOT a Ruby data structure?",
  "options": [
    "Array",
    "Hash",
    "Queue",
    "Stack"
  ],
  "correctOption": "C",
  "explanation": "While Ruby can implement Queues and Stacks, they aren't built-in data structures like Arrays and Hashes.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9df1"
  },
  "question": "What will the following code output?  `puts 10.even?`",
  "options": [
    "true",
    "false",
    "10",
    "nil"
  ],
  "correctOption": "A",
  "explanation": "`even?` is a method that checks if a number is even. 10 is even, so it returns `true`.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9df2"
  },
  "question": "How would you create a symbol in Ruby?",
  "options": [
    "`:my_symbol`",
    "`'my_symbol'`",
    "`my_symbol`",
    "`:my_symbol.to_sym`"
  ],
  "correctOption": "A",
  "explanation": "Symbols are created using a colon preceding the symbol name. They're immutable and often used as keys in hashes.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9df4"
  },
  "question": "What does the `||=` operator do in Ruby?",
  "options": [
    "Performs a bitwise OR assignment.",
    "Performs a logical OR assignment.",
    "Performs an assignment only if the left operand is nil.",
    "Checks if two values are equal."
  ],
  "correctOption": "C",
  "explanation": "It's a shorthand for assigning a value only if the left-hand operand is `nil` or `false`.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9df6"
  },
  "question": "What is the primary purpose of blocks in Ruby?",
  "options": [
    "To define classes.",
    "To handle exceptions.",
    "To encapsulate code to be executed iteratively or conditionally.",
    "To define variables."
  ],
  "correctOption": "C",
  "explanation": "Blocks are used to pass chunks of code as arguments to methods.  They are frequently used with iterators and other methods that need to execute code repeatedly.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9df3"
  },
  "question": "What is the difference between `==` and `===` in Ruby?",
  "options": [
    "There is no difference.",
    "`==` checks for equality, `===` checks for case equality (case statement).",
    "`==` checks for object identity, `===` checks for equality.",
    "`==` checks for equality, `===` is used for pattern matching."
  ],
  "correctOption": "B",
  "explanation": "`==` performs general equality checks, while `===` is primarily used in `case` statements and has context-dependent meaning.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9df5"
  },
  "question": "How do you define a module in Ruby?",
  "options": [
    "class MyModule",
    "module MyModule; end",
    "def MyModule; end",
    "MyModule = {}"
  ],
  "correctOption": "B",
  "explanation": "The `module` keyword is used to define a module, which provides a way to group related methods and constants.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9def"
  },
  "question": "What is the purpose of the `self` keyword in Ruby?",
  "options": [
    "To define a new class.",
    "To refer to the current instance of a class.",
    "To call a method on a different object.",
    "To define a constant."
  ],
  "correctOption": "B",
  "explanation": "It's a reference to the current object within a method or block of code.  Essential for instance methods.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9df7"
  },
  "question": "What will be the output of `[1, 2, 3].inject(:+)`?",
  "options": [
    "[1, 2, 3]",
    "6",
    "12",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The `inject` method, using `:+`, sums up all elements in the array.  `:+` is the symbol for the addition operator.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d9870b320de848c99b9dee"
  },
  "question": "What does the `each` method do when called on an array in Ruby?",
  "options": [
    "Adds an element to the end of the array.",
    "Iterates over each element in the array, passing each element to a block of code.",
    "Removes the first element of the array.",
    "Sorts the array in ascending order."
  ],
  "correctOption": "B",
  "explanation": "`each` is a fundamental iterator. It executes the given block of code once for each element in the array.",
  "tags": [
    "Object-Oriented Programming",
    "Blocks",
    "Rails",
    "Metaprogramming"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
}]
[{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f5"
  },
  "question": "What is the difference between `==` and `.equals()` when comparing Strings in Java?",
  "options": [
    "Both compare content; `==` is faster",
    "Both compare references; `.equals()` is faster",
    "`==` compares references, `.equals()` compares content",
    "`==` compares content, `.equals()` compares references"
  ],
  "correctOption": "C",
  "explanation": "`==` checks if two String references point to the same object, while `.equals()` compares the actual string content.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f1"
  },
  "question": "Which keyword is used to prevent method overriding in Java?",
  "options": [
    "static",
    "final",
    "abstract",
    "private"
  ],
  "correctOption": "B",
  "explanation": "The `final` keyword prevents a method from being overridden in subclasses.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f2"
  },
  "question": "What is the purpose of the `transient` keyword in Java?",
  "options": [
    "To make a variable immutable",
    "To prevent a variable from being serialized",
    "To make a variable thread-safe",
    "To declare a constant variable"
  ],
  "correctOption": "B",
  "explanation": "`transient` prevents a variable from being included during serialization, ensuring it's not saved or restored.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f6"
  },
  "question": "Which design pattern is used to create objects without specifying the exact class of object that will be created?",
  "options": [
    "Singleton",
    "Factory",
    "Observer",
    "Decorator"
  ],
  "correctOption": "B",
  "explanation": "The Factory pattern decouples object creation from client code, allowing for flexible object instantiation.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f4"
  },
  "question": "What exception is thrown when you try to access an array element outside its bounds?",
  "options": [
    "NullPointerException",
    "IllegalArgumentException",
    "ArrayIndexOutOfBoundsException",
    "ClassCastException"
  ],
  "correctOption": "C",
  "explanation": "An `ArrayIndexOutOfBoundsException` is specifically thrown when an array index is out of range.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f3"
  },
  "question": "Which collection is best suited for storing a key-value pair where keys are unique and retrieval is fast?",
  "options": [
    "ArrayList",
    "LinkedList",
    "HashSet",
    "HashMap"
  ],
  "correctOption": "D",
  "explanation": "HashMap provides fast key-based retrieval due to its hash table implementation, with unique keys.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f7"
  },
  "question": "How do you handle multiple exceptions in a single `try-catch` block?",
  "options": [
    "Use multiple `try` blocks",
    "Use multiple `catch` blocks, each for a specific exception type",
    "Use a single `catch` block with a generic `Exception` type",
    "Exceptions cannot be handled in a single `try-catch` block"
  ],
  "correctOption": "B",
  "explanation": "Multiple `catch` blocks allow specific handling of different exception types within the same `try` block.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298fa"
  },
  "question": "Which keyword is used to create a thread in Java?",
  "options": [
    "thread",
    "process",
    "run",
    "extends"
  ],
  "correctOption": "D",
  "explanation": "A class extending the `Thread` class, or implementing the `Runnable` interface, can create a new thread.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f8"
  },
  "question": "What is the purpose of a Java Interface?",
  "options": [
    "To implement multiple inheritance of classes",
    "To define the behaviour of a class without providing implementation details",
    "To create abstract classes",
    "To declare constants only"
  ],
  "correctOption": "B",
  "explanation": "Interfaces specify methods a class must implement without providing concrete implementations, promoting abstraction and polymorphism.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a554f6790fef02c298f9"
  },
  "question": "What is the role of a `finally` block in a `try-catch` statement?",
  "options": [
    "It's executed only if an exception occurs",
    "It's executed only if no exception occurs",
    "It's executed always, whether an exception occurs or not",
    "It's optional and can be omitted"
  ],
  "correctOption": "C",
  "explanation": "A `finally` block guarantees execution of its code regardless of whether an exception was thrown or caught.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29912"
  },
  "question": "Which keyword is used to create a new object in Java?",
  "options": [
    "new",
    "create",
    "object",
    "instance"
  ],
  "correctOption": "A",
  "explanation": "The 'new' keyword allocates memory and creates a new instance of a class.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29910"
  },
  "question": "What symbol is used to denote a single-line comment in Java?",
  "options": [
    "/*",
    "*/",
    "//",
    "#"
  ],
  "correctOption": "C",
  "explanation": "'//' indicates a single-line comment; the compiler ignores everything after it on that line.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29913"
  },
  "question": "What data type is used to store true or false values?",
  "options": [
    "int",
    "char",
    "boolean",
    "String"
  ],
  "correctOption": "C",
  "explanation": "The 'boolean' data type can hold only two values: true or false.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990c"
  },
  "question": "What is the output of System.out.println(5 + 2);?",
  "options": [
    "52",
    "7",
    "5 + 2",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The '+' operator performs addition in this context, resulting in 7. System.out.println() displays the result.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990e"
  },
  "question": "Which statement is used to make a decision in Java based on a condition?",
  "options": [
    "for",
    "while",
    "if",
    "switch"
  ],
  "correctOption": "C",
  "explanation": "The 'if' statement allows execution of a block of code only if a specific condition is true.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29911"
  },
  "question": "What will be printed if you run: System.out.println(\"Hello\" + \" World!\");",
  "options": [
    "Hello World!",
    "HelloWorld!",
    "\"Hello\" + \" World!\"",
    "Error"
  ],
  "correctOption": "A",
  "explanation": "The '+' operator concatenates strings in Java.  The output will be the combined string.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990b"
  },
  "question": "Which keyword is used to declare a class in Java?",
  "options": [
    "class",
    "interface",
    "struct",
    "function"
  ],
  "correctOption": "A",
  "explanation": "The 'class' keyword is used to define a new class in Java.  It's fundamental to object-oriented programming.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990d"
  },
  "question": "What data type is used to store whole numbers in Java?",
  "options": [
    "float",
    "double",
    "int",
    "String"
  ],
  "correctOption": "C",
  "explanation": "The 'int' data type is used to store 32-bit signed integers in Java.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c2990f"
  },
  "question": "What is the purpose of the 'main' method in a Java program?",
  "options": [
    "To define a class",
    "To create an object",
    "To execute the program",
    "To declare variables"
  ],
  "correctOption": "C",
  "explanation": "The 'main' method is the entry point of execution for a Java program. The JVM starts execution from here.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a5e8f6790fef02c29914"
  },
  "question": "What is the semicolon's purpose in Java?",
  "options": [
    "To start a statement",
    "To end a statement",
    "To separate statements",
    "To comment out code"
  ],
  "correctOption": "B",
  "explanation": "A semicolon marks the end of a statement in Java; it's essential for correct syntax.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997a"
  },
  "question": "Which keyword is used to prevent method overriding in Java?",
  "options": [
    "static",
    "final",
    "abstract",
    "private"
  ],
  "correctOption": "B",
  "explanation": "The `final` keyword prevents a method from being overridden in subclasses.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997c"
  },
  "question": "Which collection is best suited for implementing a LIFO (Last-In, First-Out) structure?",
  "options": [
    "ArrayList",
    "LinkedList",
    "HashSet",
    "Stack"
  ],
  "correctOption": "D",
  "explanation": "The `Stack` class, a subclass of `Vector`, is specifically designed for LIFO operations.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997b"
  },
  "question": "What is the purpose of the `transient` keyword in Java?",
  "options": [
    "Marks a variable as volatile",
    "Prevents a variable from being serialized",
    "Makes a variable thread-safe",
    "Indicates a variable's immutability"
  ],
  "correctOption": "B",
  "explanation": "`transient` prevents a variable from being included in the serialization process.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997d"
  },
  "question": "What exception is thrown when an array index is out of bounds?",
  "options": [
    "NullPointerException",
    "IllegalArgumentException",
    "ArrayIndexOutOfBoundsException",
    "IndexOutOfBoundsException"
  ],
  "correctOption": "C",
  "explanation": " `ArrayIndexOutOfBoundsException` is specifically for accessing array elements beyond their valid range.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997e"
  },
  "question": "Which design pattern promotes loose coupling between classes by using interfaces?",
  "options": [
    "Singleton",
    "Factory",
    "Observer",
    "Strategy"
  ],
  "correctOption": "C",
  "explanation": "The Strategy pattern uses interfaces to define different algorithms and select them at runtime, fostering loose coupling.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c2997f"
  },
  "question": "What is the difference between `==` and `.equals()` when comparing Strings in Java?",
  "options": [
    "Both are the same.",
    "`==` compares references, `.equals()` compares content.",
    "`==` compares content, `.equals()` compares references.",
    "`.equals()` is only for null checks."
  ],
  "correctOption": "B",
  "explanation": "`==` checks if two String objects refer to the same memory location, while `.equals()` compares their content.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c29980"
  },
  "question": "How can you ensure thread safety when multiple threads access a shared resource?",
  "options": [
    "Using synchronized blocks or methods.",
    "Using volatile variables only.",
    "Ignoring the issue, Java handles it implicitly.",
    "By using only immutable objects."
  ],
  "correctOption": "A",
  "explanation": "Synchronized blocks or methods provide exclusive access to shared resources, preventing race conditions.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c29981"
  },
  "question": "What does the `finally` block in a `try-catch-finally` statement guarantee?",
  "options": [
    "It always executes, regardless of exceptions.",
    "It executes only if no exceptions are thrown.",
    "It executes only if a specific exception is caught.",
    "It may or may not execute depending on the code within the try block."
  ],
  "correctOption": "A",
  "explanation": "The `finally` block is guaranteed to execute, even if exceptions are thrown or the `try` block terminates early.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c29982"
  },
  "question": "What is the purpose of a Java Stream?",
  "options": [
    "To create new threads.",
    "To handle exceptions more efficiently.",
    "To process collections of data in a declarative way.",
    "To manage network connections."
  ],
  "correctOption": "C",
  "explanation": "Java Streams provide a functional approach to processing collections, enabling declarative and efficient data manipulation.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d5a86bf6790fef02c29983"
  },
  "question": "Which keyword is used to define a method that can be overridden in a subclass?",
  "options": [
    "static",
    "private",
    "final",
    "virtual"
  ],
  "correctOption": "A",
  "explanation": "While Java doesn't use a `virtual` keyword,  `static` methods cannot be overridden;  the absence of `final` or `private` on a method makes it overridable.",
  "tags": [
    "algorithms",
    "data-structures",
    "web-dev",
    "database",
    "networking",
    "cybersecurity",
    "ml",
    "os",
    "languages",
    "software-eng",
    "cloud",
    "mobile"
  ],
  "domain": "Computer Science",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c0"
  },
  "question": "Describe a scenario where using a `WeakHashMap` would be preferable to a `HashMap`.",
  "options": [
    "When you need a thread-safe map.",
    "When key objects should be garbage collected if no strong references exist outside the map.",
    "When you need to maintain insertion order.",
    "When you need a map with a fixed maximum size."
  ],
  "correctOption": "B",
  "explanation": "A `WeakHashMap` allows garbage collection of keys if they are not referenced elsewhere, preventing memory leaks. This is particularly useful in caching scenarios.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c1"
  },
  "question": "How can you effectively serialize and deserialize custom objects in Java without relying on default serialization mechanisms, potentially impacting security or versioning?",
  "options": [
    "Use Java's built-in serialization methods and handle any security concerns later.",
    "Avoid serialization entirely as it's considered an unsafe practice.",
    "Implement custom serialization using external libraries like Jackson or Gson for better control and security.",
    "Utilize Java's `transient` keyword to exclude specific fields from serialization."
  ],
  "correctOption": "C",
  "explanation": "Libraries like Jackson or Gson provide better control over the serialization process, allowing for customized handling of data formats, versioning, and security aspects.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853bd"
  },
  "question": "Which statement accurately describes the behavior of `java.util.concurrent.ConcurrentHashMap` compared to `java.util.HashMap`?",
  "options": [
    "Both are thread-safe, but `ConcurrentHashMap` offers finer-grained locking for better concurrency.",
    "Both are thread-safe, with `ConcurrentHashMap` providing slightly better performance overall.",
    "`HashMap` is thread-safe, while `ConcurrentHashMap` is not, offering better performance in single-threaded environments.",
    "`ConcurrentHashMap` is thread-safe, while `HashMap` is not, offering improved concurrency performance."
  ],
  "correctOption": "D",
  "explanation": "`HashMap` is not thread-safe, while `ConcurrentHashMap` uses segmented locking for improved concurrency under multi-threaded access.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853be"
  },
  "question": "What is the most efficient way to handle exceptions during file I/O in Java, especially when dealing with potentially large files?",
  "options": [
    "Using nested `try-catch` blocks for each I/O operation.",
    "Using a single `try-catch` block encompassing all I/O operations.",
    "Utilizing try-with-resources to ensure automatic resource closure and exception handling.",
    "Ignoring exceptions and relying on default error handling mechanisms."
  ],
  "correctOption": "C",
  "explanation": "Try-with-resources ensures that resources are always closed, even if exceptions occur, preventing resource leaks and simplifying exception handling.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c3"
  },
  "question": "Explain the concept of 'immutability' in Java and its benefits in concurrent programming.",
  "options": [
    "Immutability prevents modification of an object after its creation, preventing race conditions and simplifying concurrency control.",
    "It is a type of mutable object that changes its state frequently.",
    "It refers to objects that have no fields.",
    "It's a performance optimization technique unrelated to concurrency."
  ],
  "correctOption": "A",
  "explanation": "Immutable objects cannot be modified after creation; hence they are inherently thread-safe, eliminating the need for synchronization mechanisms in concurrent scenarios.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c2"
  },
  "question": "What is the purpose of the `CompletableFuture` class in Java and how does it differ from traditional threading mechanisms?",
  "options": [
    "It's a direct replacement for threads, offering no significant advantages.",
    "It simplifies asynchronous programming by providing functional-style APIs for handling results and exceptions.",
    "It's solely for managing complex exception handling across multiple threads.",
    "It provides a lower-level interface for thread management compared to standard Java threads."
  ],
  "correctOption": "B",
  "explanation": "`CompletableFuture` supports functional-style asynchronous programming with methods like `thenApply`, `thenCompose`, and exception handling mechanisms that are more streamlined than traditional threads.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853bf"
  },
  "question": "Explain the difference in functionality and application between `java.lang.Runtime.getRuntime().exec()` and `java.lang.ProcessBuilder`.",
  "options": [
    "Both are functionally identical, with `ProcessBuilder` offering a slightly more modern API.",
    "`Runtime.exec()` provides simpler process creation, while `ProcessBuilder` offers finer control over environment variables and I/O streams.",
    "`ProcessBuilder` is used for internal processes only, while `Runtime.exec()` is for external process execution.",
    "`Runtime.exec()` is deprecated and should always be replaced with `ProcessBuilder`."
  ],
  "correctOption": "B",
  "explanation": "`ProcessBuilder` offers better control over process creation, including environment settings and redirecting input/output streams, addressing limitations of `Runtime.exec()`.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c4"
  },
  "question": "How can you effectively manage memory usage when working with large datasets in Java, avoiding potential `OutOfMemoryError` exceptions?",
  "options": [
    "Use `System.gc()` to explicitly trigger garbage collection frequently.",
    "Rely entirely on Java's automatic garbage collection; manual memory management isn't necessary.",
    "Utilize techniques like object pooling, memory mapping, and off-heap memory solutions for better control.",
    "Increase the JVM's heap size to an arbitrarily large value."
  ],
  "correctOption": "C",
  "explanation": "Object pooling reduces object creation overhead, memory mapping reduces memory consumption for large files, and off-heap solutions move data outside the JVM heap.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c5"
  },
  "question": "What is the significance of the `ForkJoinPool` in Java and what type of problems is it well-suited to solve?",
  "options": [
    "It's a general-purpose thread pool ideal for all types of parallel tasks.",
    "It's a specialized thread pool designed for performing I/O-bound operations.",
    "It's designed for efficiently executing recursive divide-and-conquer algorithms.",
    "It's primarily used for managing thread synchronization in complex applications."
  ],
  "correctOption": "C",
  "explanation": "The `ForkJoinPool` excels at parallelizing recursive algorithms by efficiently dividing tasks into smaller subtasks that can be processed concurrently.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a92978acd9d9d6853c6"
  },
  "question": "How does Java's module system (introduced in Java 9) improve application development and maintainability?",
  "options": [
    "It has no significant impact on application structure or maintainability.",
    "It simplifies classpath management and promotes better encapsulation and modularity of code.",
    "It replaces the need for dependency management tools like Maven or Gradle.",
    "It introduces a new programming paradigm, significantly changing how Java applications are built."
  ],
  "correctOption": "B",
  "explanation": "Java's module system enhances encapsulation, improves dependency management, reduces classpath conflicts, and strengthens the modularity of applications.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d5"
  },
  "question": "What will be the output of the following code snippet? \n `let x = 10; let y = 5; console.log(x + y);`",
  "options": [
    "105",
    "15",
    "510",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The '+' operator performs addition when used with numbers. 10 + 5 = 15.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d7"
  },
  "question": "What is the purpose of the `this` keyword in JavaScript?",
  "options": [
    "To declare a variable",
    "To refer to the current object",
    "To define a function",
    "To create a new object"
  ],
  "correctOption": "B",
  "explanation": "The `this` keyword refers to the object that the current function is a method of (or, in some cases, the global object).",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d6"
  },
  "question": "Which method is used to add an element to the end of an array?",
  "options": [
    "push()",
    "pop()",
    "shift()",
    "unshift()"
  ],
  "correctOption": "A",
  "explanation": "The `push()` method adds one or more elements to the end of an array and returns the new length of the array.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d8"
  },
  "question": "What does the following code snippet do? \n `const myPromise = new Promise((resolve, reject) => { if (true) { resolve('Success!'); } else { reject('Error!'); } });`",
  "options": [
    "Creates an asynchronous operation that always resolves",
    "Creates an asynchronous operation that always rejects",
    "Creates a synchronous operation that resolves immediately",
    "Does nothing because the if condition is always true"
  ],
  "correctOption": "A",
  "explanation": "The `Promise` resolves with the value 'Success!' because the condition in the `if` statement is true.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853d9"
  },
  "question": "How do you prevent default behavior of an event in JavaScript?",
  "options": [
    "`event.preventDefault()`",
    "`event.stopPropagation()`",
    "`event.stop()`",
    "`event.cancel()`"
  ],
  "correctOption": "A",
  "explanation": "`event.preventDefault()` method stops the default action of an event from occurring. For example, preventing a link from navigating.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853da"
  },
  "question": "What is the difference between `==` and `===` in JavaScript?",
  "options": [
    "Both are the same",
    "`==` checks for value equality, `===` checks for both value and type equality",
    "`==` checks for type equality, `===` checks for value equality",
    "`==` is for strings, `===` is for numbers"
  ],
  "correctOption": "B",
  "explanation": "The `==` operator performs type coercion before comparison, while `===` performs a strict equality check without type coercion.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853db"
  },
  "question": "What is a closure in JavaScript?",
  "options": [
    "A type of loop",
    "A way to create private variables",
    "A function that takes another function as an argument",
    "A way to handle events"
  ],
  "correctOption": "B",
  "explanation": "A closure is a function that has access to variables from its surrounding scope, even after that scope has finished executing.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853dc"
  },
  "question": "Which method is used to convert a string to uppercase?",
  "options": [
    "`toUpperCase()`",
    "`toLowerCase()`",
    "`toUpper()`",
    "`toCase()`"
  ],
  "correctOption": "A",
  "explanation": "The `toUpperCase()` method converts a string to uppercase.  `toLowerCase()` converts to lowercase.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853dd"
  },
  "question": "What will be logged to the console? \n`const arr = [1, 2, 3]; const newArr = arr.map(x => x * 2); console.log(newArr);`",
  "options": [
    "[1, 2, 3]",
    "[2, 4, 6]",
    "[1, 4, 9]",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The `map()` method creates a new array by applying a function to each element of the original array.  Here, each element is multiplied by 2.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84a9d978acd9d9d6853de"
  },
  "question": "What is the output of the following code: \n`let a = 0; function f() { let a = 1; return a; } console.log(f(), a);`",
  "options": [
    "1 1",
    "1 0",
    "0 1",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The function `f` has its own local variable `a`, which shadows the global variable `a`. The function returns 1, and the global `a` remains 0.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853ed"
  },
  "question": "Which data structure follows the Last-In, First-Out (LIFO) principle?",
  "options": [
    "Queue",
    "Stack",
    "Linked List",
    "Array"
  ],
  "correctOption": "B",
  "explanation": "A stack operates on the LIFO principle, where the last element added is the first to be removed.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f6"
  },
  "question": "In a binary tree, what is a leaf node?",
  "options": [
    "A node with two children",
    "A node with one child",
    "A node with no children",
    "The root node"
  ],
  "correctOption": "C",
  "explanation": "A leaf node in a binary tree is a node that does not have any children.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f2"
  },
  "question": "A queue follows which principle?",
  "options": [
    "Last-In, First-Out (LIFO)",
    "First-In, First-Out (FIFO)",
    "Random Access",
    "Hierarchical Ordering"
  ],
  "correctOption": "B",
  "explanation": "A queue operates on the FIFO principle, where the first element added is the first to be removed.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f3"
  },
  "question": "What is a node in a linked list?",
  "options": [
    "A pointer to the next node",
    "The data stored in the list",
    "A combination of data and a pointer to the next node",
    "The starting point of the list"
  ],
  "correctOption": "C",
  "explanation": "A node in a linked list comprises data and a pointer (or pointers) to other nodes.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853ef"
  },
  "question": "Which of these is NOT a common type of linked list?",
  "options": [
    "Singly Linked List",
    "Doubly Linked List",
    "Circular Linked List",
    "Binary Search Tree"
  ],
  "correctOption": "D",
  "explanation": "A Binary Search Tree is a tree data structure, not a type of linked list.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f0"
  },
  "question": "What is the primary advantage of using arrays?",
  "options": [
    "Easy implementation of insertion and deletion",
    "Efficient random access to elements",
    "Dynamic resizing capability",
    "Suitable for representing hierarchical data"
  ],
  "correctOption": "B",
  "explanation": "Arrays allow direct access to elements using their index, making random access very efficient.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f1"
  },
  "question": "Which data structure uses pointers to connect elements?",
  "options": [
    "Array",
    "Stack",
    "Queue",
    "Linked List"
  ],
  "correctOption": "D",
  "explanation": "Linked lists use pointers to link nodes together, allowing for dynamic memory allocation.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f4"
  },
  "question": "Which data structure is best suited for implementing a function call stack?",
  "options": [
    "Queue",
    "Linked List",
    "Stack",
    "Tree"
  ],
  "correctOption": "C",
  "explanation": "Stacks are ideal for managing function calls because of their LIFO nature.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853ee"
  },
  "question": "What is a linear data structure?",
  "options": [
    "A structure where elements are arranged in a hierarchical manner",
    "A structure where elements are arranged in a non-linear manner",
    "A structure where elements are arranged sequentially",
    "A structure with no specific arrangement"
  ],
  "correctOption": "C",
  "explanation": "Linear data structures arrange elements in a sequence, one after another.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ab1978acd9d9d6853f5"
  },
  "question": "What does a doubly linked list allow that a singly linked list does not?",
  "options": [
    "Insertion of elements",
    "Deletion of elements",
    "Traversal in both directions",
    "Storage of data"
  ],
  "correctOption": "C",
  "explanation": "Doubly linked lists have pointers in both directions, allowing traversal in both forward and backward directions.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685406"
  },
  "question": "What is the time complexity of searching for a specific element in an unsorted array?",
  "options": [
    "O(1)",
    "O(log n)",
    "O(n)",
    "O(n log n)"
  ],
  "correctOption": "C",
  "explanation": "Linear search is required for unsorted arrays, resulting in a time complexity of O(n).",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540d"
  },
  "question": "Consider implementing a Least Recently Used (LRU) cache. Which data structure combination is best suited for efficient implementation?",
  "options": [
    "Hash Table + Linked List",
    "Binary Search Tree + Queue",
    "Stack + Heap",
    "Array + Stack"
  ],
  "correctOption": "A",
  "explanation": "A hash table allows O(1) lookup for cache hits, while a doubly linked list efficiently manages the order of elements based on recency of access.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540e"
  },
  "question": "Describe a scenario where a Trie data structure would be significantly more efficient than a hash table.  What is the primary advantage Trie offers in that scenario?",
  "options": [
    "Storing a small number of integer keys",
    "Storing a large number of short strings",
    "Implementing a priority queue",
    "Storing a dictionary with frequent key updates"
  ],
  "correctOption": "B",
  "explanation": "Tries excel when searching for prefixes of strings.  If you frequently need to find all strings starting with a particular prefix, Tries' prefix-based search becomes significantly faster than individual hash table lookups.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540c"
  },
  "question": "What is the primary advantage of using a hash table compared to a binary search tree for implementing a dictionary (key-value store)?",
  "options": [
    "Guaranteed O(1) search time",
    "Efficient sorting of keys",
    "Better space utilization",
    "Simplified implementation"
  ],
  "correctOption": "A",
  "explanation": "Hash tables provide average-case O(1) time complexity for insertion, deletion, and search operations, significantly faster than O(log n) for balanced BSTs.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540a"
  },
  "question": "Explain the concept of Amortized Analysis in the context of data structures.  Which of these operations best exemplifies it?",
  "options": [
    "Searching in a balanced binary search tree",
    "Insertion in a dynamic array that doubles in size when full",
    "Deletion in a binary heap",
    "Traversal of a linked list"
  ],
  "correctOption": "B",
  "explanation": "Amortized analysis considers the average cost of an operation over a sequence of operations.  Dynamic array resizing demonstrates this as most insertions are O(1) but occasional resizes are O(n). The average is O(1) making the average case faster despite the occasional costly operation.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d68540b"
  },
  "question": "Which data structure would be most appropriate for representing a hierarchical relationship, like a file system or an organizational chart?",
  "options": [
    "Array",
    "Linked List",
    "Graph",
    "Tree"
  ],
  "correctOption": "D",
  "explanation": "Trees naturally represent hierarchical structures through parent-child relationships between nodes.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685405"
  },
  "question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?",
  "options": [
    "Linked List",
    "Binary Search Tree",
    "Stack",
    "Heap"
  ],
  "correctOption": "C",
  "explanation": "Stacks inherently follow the LIFO principle, where the last element added is the first to be removed.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685409"
  },
  "question": "You need to implement a data structure that supports efficient insertion, deletion, and retrieval of elements based on their priority. Which data structure is most suitable?",
  "options": [
    "Queue",
    "Stack",
    "Binary Heap",
    "Hash Table"
  ],
  "correctOption": "C",
  "explanation": "Binary heaps efficiently manage elements based on priority, allowing quick access to the highest or lowest priority element.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685407"
  },
  "question": "A B-tree of order m guarantees that all leaf nodes are at the same level and each node (except the root) contains between ⌈m/2⌉ and m keys.  What is the primary advantage of this structure compared to a standard binary search tree in database indexing?",
  "options": [
    "Faster insertion and deletion",
    "Reduced memory overhead",
    "Improved search performance in large datasets",
    "All of the above"
  ],
  "correctOption": "C",
  "explanation": "B-trees minimize disk I/O operations due to their balanced structure, making them superior for database indexing on secondary storage.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84abb978acd9d9d685408"
  },
  "question": "In a self-balancing AVL tree, what is the maximum height difference allowed between the left and right subtrees of any node?",
  "options": [
    "0",
    "1",
    "2",
    "It can be any difference"
  ],
  "correctOption": "B",
  "explanation": "AVL trees maintain balance by ensuring the height difference between subtrees never exceeds 1.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685423"
  },
  "question": "Which data structure is ideally suited for representing a hierarchical relationship, like a file system or an organizational chart?",
  "options": [
    "A. Array",
    "B. Hash Table",
    "C. Tree",
    "D. Graph"
  ],
  "correctOption": "C",
  "explanation": "Trees naturally represent hierarchical structures where each node can have multiple children, reflecting parent-child relationships.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d68541d"
  },
  "question": "Which data structure is most efficient for implementing a LRU (Least Recently Used) cache?",
  "options": [
    "A. Binary Search Tree",
    "B. Doubly Linked List with a Hash Map",
    "C. Heap",
    "D. Stack"
  ],
  "correctOption": "B",
  "explanation": "A doubly linked list maintains order of access, while a hash map provides O(1) lookup for quick eviction checks.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d68541f"
  },
  "question": "You need to implement a data structure that supports efficient insertion, deletion, and retrieval of elements based on their priority. Which data structure is best suited?",
  "options": [
    "A. Queue",
    "B. Stack",
    "C. Priority Queue (Heap)",
    "D. Linked List"
  ],
  "correctOption": "C",
  "explanation": "Priority Queues, typically implemented as heaps, efficiently handle priority-based operations.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685421"
  },
  "question": "Which algorithm would be most suitable for efficiently finding the shortest path between two nodes in a graph with non-negative edge weights?",
  "options": [
    "A. Dijkstra's Algorithm",
    "B. Bellman-Ford Algorithm",
    "C. Floyd-Warshall Algorithm",
    "D. Depth-First Search"
  ],
  "correctOption": "A",
  "explanation": "Dijkstra's algorithm efficiently finds the shortest paths from a single source node to all other nodes in a graph with non-negative edge weights.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d68541e"
  },
  "question": "What is the time complexity of finding the kth smallest element in a min-heap of size n?",
  "options": [
    "A. O(n)",
    "B. O(k)",
    "C. O(log n)",
    "D. O(k log n)"
  ],
  "correctOption": "B",
  "explanation": "Finding the kth smallest element in a min-heap involves extracting the minimum element k times, each taking O(log n) time in the worst case; but finding the kth smallest is actually O(k) because only k elements need to be removed and sorted.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685420"
  },
  "question": "Consider a Trie data structure storing strings.  What is the worst-case space complexity for storing n strings, each of maximum length m?",
  "options": [
    "A. O(n)",
    "B. O(m)",
    "C. O(nm)",
    "D. O(n^2)"
  ],
  "correctOption": "C",
  "explanation": "In the worst case, each character of each string could create a new node in the Trie. This leads to O(nm) space complexity.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685424"
  },
  "question": "Explain the concept of amortized analysis in the context of data structures.  Why is it important?",
  "options": [
    "A. It's used to measure the worst-case time complexity of an operation.",
    "B. It averages the cost of operations over a sequence, even if some individual operations are expensive.",
    "C. It determines the space complexity of a data structure.",
    "D. It optimizes the average-case time complexity of a data structure."
  ],
  "correctOption": "B",
  "explanation": "Amortized analysis considers the average cost of operations over a sequence, which can reveal better performance than focusing only on the worst-case scenario of individual operations.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685422"
  },
  "question": "What is the primary advantage of using a self-balancing binary search tree (like AVL or Red-Black tree) over a regular binary search tree?",
  "options": [
    "A. Reduced memory usage",
    "B. Guaranteed logarithmic time complexity for all operations",
    "C. Simplified insertion and deletion algorithms",
    "D. Faster search for specific values"
  ],
  "correctOption": "B",
  "explanation": "Self-balancing trees maintain a balanced structure, ensuring logarithmic time complexity for search, insertion, and deletion, unlike regular BSTs which can degenerate into a linked list in the worst case.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685425"
  },
  "question": "You need to implement a data structure that allows efficient retrieval of elements based on a key, and the number of elements can vary significantly. Which choice balances performance and scalability the best?",
  "options": [
    "A. Array",
    "B. Linked List",
    "C. Dynamic Array (ArrayList)",
    "D. Hash Table"
  ],
  "correctOption": "D",
  "explanation": "Hash tables provide O(1) average-case time complexity for insertion, deletion, and retrieval, making them scalable for varying numbers of elements.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ac7978acd9d9d685426"
  },
  "question": "What is the key difference between a graph and a tree data structure?",
  "options": [
    "A. Graphs can contain cycles; trees cannot.",
    "B. Trees are always directed; graphs can be directed or undirected.",
    "C. Graphs are always connected; trees might not be.",
    "D. Trees are always binary; graphs can have any number of edges per node."
  ],
  "correctOption": "A",
  "explanation": "A key distinction is that trees are acyclic (no cycles), while graphs can contain cycles.  This impacts traversal and other algorithms.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685435"
  },
  "question": "What is the time complexity of a linear search algorithm in the worst case?",
  "options": [
    "O(1)",
    "O(log n)",
    "O(n)",
    "O(n log n)"
  ],
  "correctOption": "C",
  "explanation": "Linear search checks each element sequentially, resulting in O(n) complexity in the worst case (element not found).",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685438"
  },
  "question": "What data structure is commonly used to implement a priority queue?",
  "options": [
    "Linked List",
    "Array",
    "Binary Search Tree",
    "Heap"
  ],
  "correctOption": "D",
  "explanation": "Heaps efficiently manage elements based on priority, allowing for quick retrieval of the highest or lowest priority element.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543d"
  },
  "question": "A graph with no cycles is called a(n):",
  "options": [
    "Directed Graph",
    "Undirected Graph",
    "Acyclic Graph",
    "Complete Graph"
  ],
  "correctOption": "C",
  "explanation": "An acyclic graph, also known as a DAG (Directed Acyclic Graph), contains no cycles.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685437"
  },
  "question": "A graph traversal algorithm that explores as far as possible along each branch before backtracking is called:",
  "options": [
    "Breadth-First Search (BFS)",
    "Depth-First Search (DFS)",
    "Dijkstra's Algorithm",
    "Bellman-Ford Algorithm"
  ],
  "correctOption": "B",
  "explanation": "Depth-First Search prioritizes exploring a single branch deeply before moving to other branches.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543e"
  },
  "question": "Which of the following is NOT a common technique used for algorithm analysis?",
  "options": [
    "Asymptotic notation (Big O)",
    "Empirical testing",
    "Code profiling",
    "Formal language verification"
  ],
  "correctOption": "D",
  "explanation": "While formal methods exist, full formal verification of algorithm correctness is rarely practical for complex algorithms.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685439"
  },
  "question": "The problem of finding the shortest path between two nodes in a weighted graph is solved by:",
  "options": [
    "Breadth-First Search",
    "Depth-First Search",
    "Dijkstra's Algorithm",
    "Topological Sort"
  ],
  "correctOption": "C",
  "explanation": "Dijkstra's algorithm finds the shortest paths from a single source node to all other nodes in a graph with non-negative edge weights.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543c"
  },
  "question": "What is the primary advantage of using a greedy algorithm?",
  "options": [
    "Guaranteed optimal solution",
    "Simplicity and efficiency",
    "Handles all types of problems",
    "Requires less memory"
  ],
  "correctOption": "B",
  "explanation": "Greedy algorithms are often simple and efficient, though they don't always guarantee the absolute optimal solution.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543b"
  },
  "question": "Dynamic programming solves problems by breaking them down into:",
  "options": [
    "Independent subproblems",
    "Overlapping subproblems",
    "Recursive subproblems",
    "Both B and C"
  ],
  "correctOption": "D",
  "explanation": "Dynamic programming addresses overlapping subproblems, solving each only once and storing the results to avoid redundant computation.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d68543a"
  },
  "question": "Which algorithm is best suited for finding the kth smallest element in an unsorted array efficiently?",
  "options": [
    "Merge Sort",
    "Quick Sort",
    "Heap Sort",
    "Quickselect"
  ],
  "correctOption": "D",
  "explanation": "Quickselect is designed for finding the kth smallest element with an average time complexity of O(n).",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ad0978acd9d9d685436"
  },
  "question": "Which sorting algorithm consistently exhibits O(n log n) time complexity, even in the worst case?",
  "options": [
    "Bubble Sort",
    "Insertion Sort",
    "Merge Sort",
    "Quick Sort (average case)"
  ],
  "correctOption": "C",
  "explanation": "Merge Sort maintains O(n log n) time complexity regardless of the input data order.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d68544d"
  },
  "question": "Which of the following statements about NP-complete problems is FALSE?",
  "options": [
    "A polynomial-time algorithm for one NP-complete problem implies polynomial-time algorithms for all NP-complete problems.",
    "All NP problems are also in P.",
    "The satisfiability problem (SAT) is NP-complete.",
    "If P=NP, then all NP-complete problems can be solved in polynomial time."
  ],
  "correctOption": "B",
  "explanation": "It's currently unknown if all NP problems are in P.  NP-complete problems are the hardest problems in NP; if one had a polynomial solution, all would.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685451"
  },
  "question": "In amortized analysis, which method focuses on averaging the cost of operations over a sequence of operations?",
  "options": [
    "Aggregate method",
    "Accounting method",
    "Potential method",
    "All of the above"
  ],
  "correctOption": "A",
  "explanation": "The aggregate method sums the costs of all operations and divides by the number of operations to find the average cost.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d68544e"
  },
  "question": "What is the time complexity of the Floyd-Warshall algorithm for finding all-pairs shortest paths in a graph with V vertices?",
  "options": [
    "O(V)",
    "O(V log V)",
    "O(V^2)",
    "O(V^3)"
  ],
  "correctOption": "D",
  "explanation": "Floyd-Warshall uses three nested loops, each iterating V times, resulting in a cubic time complexity.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d68544f"
  },
  "question": "Given a graph G = (V, E), what algorithm would be MOST efficient to determine if G is bipartite?",
  "options": [
    "Dijkstra's Algorithm",
    "Bellman-Ford Algorithm",
    "Breadth-First Search (BFS)",
    "Depth-First Search (DFS)"
  ],
  "correctOption": "C",
  "explanation": "BFS can efficiently determine bipartiteness by coloring vertices during traversal.  A cycle of odd length indicates non-bipartiteness.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685450"
  },
  "question": "Which algorithm uses dynamic programming to find the longest common subsequence (LCS) of two sequences?",
  "options": [
    "KMP Algorithm",
    "Rabin-Karp Algorithm",
    "Needleman-Wunsch Algorithm",
    "Wagner-Fischer Algorithm"
  ],
  "correctOption": "D",
  "explanation": "The Wagner-Fischer algorithm, a dynamic programming approach, is commonly used to find the LCS.  It builds a matrix to track optimal solutions.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685453"
  },
  "question": "Which data structure is best suited for implementing Dijkstra's algorithm for shortest path calculations in a graph with non-negative edge weights?",
  "options": [
    "Stack",
    "Queue",
    "Priority Queue",
    "Binary Search Tree"
  ],
  "correctOption": "C",
  "explanation": "A priority queue allows efficient retrieval of the vertex with the smallest distance, crucial for Dijkstra's greedy approach.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685452"
  },
  "question": "What is the primary difference between Prim's algorithm and Kruskal's algorithm for finding a minimum spanning tree?",
  "options": [
    "Prim's uses BFS, Kruskal's uses DFS.",
    "Prim's is greedy, Kruskal's is not.",
    "Prim's builds the MST from a single vertex, Kruskal's builds it by adding edges.",
    "Prim's has O(V^2) complexity, Kruskal's has O(E log E) complexity."
  ],
  "correctOption": "C",
  "explanation": "Prim's algorithm starts with a single vertex and grows the MST outwards. Kruskal's adds edges one by one, ensuring no cycles are formed.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685454"
  },
  "question": "What is the worst-case time complexity of a naive recursive implementation of the Fibonacci sequence?",
  "options": [
    "O(n)",
    "O(n log n)",
    "O(2^n)",
    "O(n^2)"
  ],
  "correctOption": "C",
  "explanation": "The naive recursive approach recalculates many Fibonacci numbers repeatedly, leading to exponential time complexity.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685455"
  },
  "question": "A decision problem is in the complexity class NP if...",
  "options": [
    "It can be solved in polynomial time.",
    "It can be verified in polynomial time.",
    "It can be solved in exponential time.",
    "It is undecidable."
  ],
  "correctOption": "B",
  "explanation": "A problem is in NP if a given solution can be verified to be correct in polynomial time, even if finding the solution takes exponential time.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84adc978acd9d9d685456"
  },
  "question": "Which algorithm is known for its ability to handle dynamic updates (insertions and deletions) efficiently in a balanced binary search tree?",
  "options": [
    "AVL Tree",
    "Red-Black Tree",
    "B-Tree",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "AVL trees, red-black trees, and B-trees all maintain balance during updates, ensuring logarithmic time complexity for search, insertion, and deletion.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685467"
  },
  "question": "Given a directed acyclic graph (DAG), which algorithm is most efficient for finding the longest path?",
  "options": [
    "Dijkstra's algorithm",
    "Bellman-Ford algorithm",
    "Topological sort followed by dynamic programming",
    "Prim's algorithm"
  ],
  "correctOption": "C",
  "explanation": "Topological sort orders the nodes, allowing dynamic programming to efficiently compute the longest path in linear time.  Other algorithms don't handle cycles efficiently.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685466"
  },
  "question": "What is the time complexity of the Floyd-Warshall algorithm for finding all-pairs shortest paths in a graph with V vertices?",
  "options": [
    "O(V)",
    "O(V log V)",
    "O(V^2)",
    "O(V^3)"
  ],
  "correctOption": "D",
  "explanation": "Floyd-Warshall uses three nested loops, each iterating V times, resulting in O(V^3) time complexity.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685468"
  },
  "question": "Which algorithm uses divide and conquer to sort an array in O(n log n) time?",
  "options": [
    "Bubble Sort",
    "Insertion Sort",
    "Merge Sort",
    "Selection Sort"
  ],
  "correctOption": "C",
  "explanation": "Merge Sort recursively divides the array into smaller subarrays, sorts them, and then merges the sorted subarrays.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685465"
  },
  "question": "Which of the following statements about NP-complete problems is FALSE?",
  "options": [
    "If one NP-complete problem is solvable in polynomial time, then all NP problems are solvable in polynomial time.",
    "All NP problems are also in P.",
    "Satisfiability (SAT) is an NP-complete problem.",
    "The Traveling Salesperson Problem (TSP) is an NP-complete problem."
  ],
  "correctOption": "B",
  "explanation": "P is a subset of NP.  If all NP problems were in P, it would imply P=NP, which is a major unsolved problem in computer science.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d685469"
  },
  "question": "What is the best-case time complexity of a Quicksort algorithm?",
  "options": [
    "O(n log n)",
    "O(n)",
    "O(n^2)",
    "O(1)"
  ],
  "correctOption": "A",
  "explanation": "While worst-case is O(n^2), the best case occurs when the pivot consistently divides the array in half, leading to O(n log n) complexity.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546a"
  },
  "question": "Which data structure is best suited for implementing a priority queue with efficient insertion and deletion of the highest priority element?",
  "options": [
    "Linked List",
    "Array",
    "Binary Search Tree",
    "Binary Heap"
  ],
  "correctOption": "D",
  "explanation": "A binary heap allows O(log n) time complexity for insertion and deletion of the highest priority element.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546b"
  },
  "question": "What is the primary difference between a greedy algorithm and a dynamic programming algorithm?",
  "options": [
    "Greedy algorithms are always faster.",
    "Dynamic programming solves overlapping subproblems optimally, while greedy algorithms may not.",
    "Greedy algorithms are used for optimization, while dynamic programming is not.",
    "Dynamic programming requires more memory."
  ],
  "correctOption": "B",
  "explanation": "Dynamic programming explicitly stores solutions to subproblems to avoid redundant computations, guaranteeing optimality. Greedy algorithms make locally optimal choices.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546c"
  },
  "question": "Which algorithm is commonly used to detect cycles in a directed graph?",
  "options": [
    "Breadth-First Search (BFS)",
    "Depth-First Search (DFS)",
    "Prim's Algorithm",
    "Kruskal's Algorithm"
  ],
  "correctOption": "B",
  "explanation": "DFS can detect cycles by tracking visited nodes and detecting back edges (edges leading to already visited nodes in the current DFS branch).",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546d"
  },
  "question": "In the context of amortized analysis, what does it mean to have a cost of O(1) for an operation?",
  "options": [
    "The operation always takes constant time.",
    "The average time cost of the operation over a sequence of operations is constant.",
    "The worst-case time cost of the operation is constant.",
    "The operation's time cost is independent of the input size."
  ],
  "correctOption": "B",
  "explanation": "Amortized analysis considers the average cost of an operation over a sequence, not just a single operation's cost. O(1) amortized indicates a constant average cost.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ae7978acd9d9d68546e"
  },
  "question": "Consider a hash table with separate chaining for collision resolution.  What is the primary factor influencing the performance degradation as the load factor increases?",
  "options": [
    "Increased memory usage",
    "Increased number of collisions",
    "Decreased cache efficiency",
    "Increased complexity of hash function"
  ],
  "correctOption": "B",
  "explanation": "A higher load factor means more collisions, resulting in longer linked lists in separate chaining and thus longer search times.  This is the main cause of performance degradation.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d68547f"
  },
  "question": "Which SQL command is used to add new data into a table?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "B",
  "explanation": "The INSERT statement adds new rows to an existing table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d68547e"
  },
  "question": "What does SQL stand for?",
  "options": [
    "Structured Query Language",
    "Simple Query Language",
    "Statistical Query Language",
    "Standard Query Language"
  ],
  "correctOption": "A",
  "explanation": "SQL stands for Structured Query Language, a language used to interact with databases.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d68547d"
  },
  "question": "Which SQL command is used to retrieve data from a database?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "A",
  "explanation": "The SELECT statement is used to query data from one or more tables.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685481"
  },
  "question": "Which SQL command is used to remove data from a table?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "D",
  "explanation": "The DELETE statement removes rows from a table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685483"
  },
  "question": "What keyword is used to sort the result-set of a query?",
  "options": [
    "ORDER",
    "SORT",
    "ARRANGE",
    "FILTER"
  ],
  "correctOption": "A",
  "explanation": "The ORDER BY clause is used to sort the result-set in ascending or descending order.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685482"
  },
  "question": "What symbol is used to denote a comment in SQL?",
  "options": [
    "//",
    "/*",
    "--",
    "#"
  ],
  "correctOption": "C",
  "explanation": "The double hyphen symbol '--' is used for single-line comments in most SQL dialects.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685485"
  },
  "question": "What does the wildcard character '%' represent in SQL's LIKE operator?",
  "options": [
    "Exactly one character",
    "Zero or more characters",
    "One or more characters",
    "A specific character"
  ],
  "correctOption": "B",
  "explanation": "The '%' wildcard represents zero or more characters in a pattern match.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685484"
  },
  "question": "Which clause is used to filter records based on a condition?",
  "options": [
    "WHERE",
    "HAVING",
    "GROUP BY",
    "ORDER BY"
  ],
  "correctOption": "A",
  "explanation": "The WHERE clause filters records before grouping or sorting occurs.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685480"
  },
  "question": "Which SQL command is used to modify existing data in a table?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "C",
  "explanation": "The UPDATE statement modifies existing records in a table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84aef978acd9d9d685486"
  },
  "question": "What is the purpose of a primary key in a database table?",
  "options": [
    "To store large amounts of data",
    "To ensure data uniqueness",
    "To improve query performance",
    "To enforce data integrity"
  ],
  "correctOption": "B",
  "explanation": "A primary key uniquely identifies each record in a table, ensuring data uniqueness and integrity.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685497"
  },
  "question": "What is the main advantage of using a database index?",
  "options": [
    "Reduces data redundancy",
    "Enhances data security",
    "Increases database size",
    "Improves query performance"
  ],
  "correctOption": "D",
  "explanation": "Indexes speed up data retrieval by creating a structured lookup table, avoiding full table scans.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549a"
  },
  "question": "What is the purpose of a database trigger?",
  "options": [
    "To enforce data integrity constraints",
    "To automatically execute actions based on specific events",
    "To improve query performance",
    "To encrypt sensitive data"
  ],
  "correctOption": "B",
  "explanation": "Triggers automate actions like updating related tables or sending notifications upon specific database events (e.g., INSERT, UPDATE, DELETE).",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685499"
  },
  "question": "In database design, what does ACID stand for?",
  "options": [
    "Atomic, Consistent, Isolated, Durable",
    "Accurate, Consistent, Independent, Dependable",
    "Atomic, Complete, Isolated, Dependable",
    "Accurate, Consistent, Isolated, Durable"
  ],
  "correctOption": "A",
  "explanation": "ACID properties ensure database transactions are reliable and maintain data integrity.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549b"
  },
  "question": "What is a candidate key?",
  "options": [
    "A unique identifier for a table row",
    "A key that has null values allowed",
    "A key that is not unique",
    "A subset of a primary key"
  ],
  "correctOption": "A",
  "explanation": "A candidate key uniquely identifies each row, and a primary key is selected from among the candidate keys.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685496"
  },
  "question": "A foreign key constraint is primarily used to:",
  "options": [
    "Prevent data loss",
    "Enforce referential integrity",
    "Improve data retrieval speed",
    "Reduce database size"
  ],
  "correctOption": "B",
  "explanation": "Foreign keys ensure that relationships between tables are valid, maintaining data consistency and preventing orphaned records.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685495"
  },
  "question": "Which database normalization form eliminates redundant data within a single table by ensuring that all attributes are atomic?",
  "options": [
    "First Normal Form (1NF)",
    "Second Normal Form (2NF)",
    "Third Normal Form (3NF)",
    "Boyce-Codd Normal Form (BCNF)"
  ],
  "correctOption": "A",
  "explanation": "1NF addresses atomic attributes, eliminating repeating groups.  Higher normal forms build upon this foundation.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d685498"
  },
  "question": "Which type of database relationship represents a 'many-to-many' association between two tables?",
  "options": [
    "One-to-one",
    "One-to-many",
    "Many-to-one",
    "Many-to-many"
  ],
  "correctOption": "D",
  "explanation": "A many-to-many relationship requires a junction table (or linking table) to manage the multiple relationships.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549c"
  },
  "question": "Denormalization is sometimes used in database design to:",
  "options": [
    "Improve data integrity",
    "Increase database size",
    "Enhance query performance",
    "Reduce data redundancy"
  ],
  "correctOption": "C",
  "explanation": "Denormalization involves adding redundancy to improve query speed, although it compromises data integrity slightly.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549d"
  },
  "question": "Which database design approach emphasizes creating small, highly normalized tables and linking them with relationships?",
  "options": [
    "Relational database design",
    "Object-oriented database design",
    "NoSQL database design",
    "Hierarchical database design"
  ],
  "correctOption": "A",
  "explanation": "Relational databases are built on the principles of normalization and relationships between tables.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84af9978acd9d9d68549e"
  },
  "question": "What is the difference between a stored procedure and a view?",
  "options": [
    "A stored procedure is a pre-compiled SQL query, a view is a virtual table",
    "A stored procedure is a virtual table, a view is a pre-compiled SQL query",
    "Both are pre-compiled queries",
    "Both are virtual tables."
  ],
  "correctOption": "A",
  "explanation": "Stored procedures offer pre-compiled SQL logic for efficiency, while views present customized data as a virtual table.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854ad"
  },
  "question": "Which of the following is NOT a key characteristic of NoSQL databases?",
  "options": [
    "Schema-less design",
    "High scalability",
    "ACID properties",
    "Horizontal scalability"
  ],
  "correctOption": "C",
  "explanation": "While some NoSQL databases offer ACID properties to varying degrees, it's not a universal characteristic.  Most prioritize scalability and flexibility over strict ACID compliance.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854ae"
  },
  "question": "What is the primary advantage of using a document database like MongoDB?",
  "options": [
    "Strict schema enforcement",
    "High transactional integrity",
    "Efficient relational joins",
    "Flexible schema and data modeling"
  ],
  "correctOption": "D",
  "explanation": "Document databases excel at handling semi-structured data and adapting to evolving data structures without requiring schema changes.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b0"
  },
  "question": "What does CAP theorem stand for in the context of distributed databases?",
  "options": [
    "Consistency, Availability, Partition tolerance",
    "Capacity, Availability, Performance",
    "Consistency, Accuracy, Partition tolerance",
    "Capacity, Accuracy, Performance"
  ],
  "correctOption": "A",
  "explanation": "CAP theorem states that in a distributed database, you can only achieve two out of three: Consistency, Availability, and Partition tolerance.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854af"
  },
  "question": "Which NoSQL database model is best suited for managing large graphs of interconnected data?",
  "options": [
    "Key-value store",
    "Document database",
    "Column-family database",
    "Graph database"
  ],
  "correctOption": "D",
  "explanation": "Graph databases are optimized for representing and querying relationships between data points, making them ideal for social networks or recommendation systems.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b1"
  },
  "question": "A key-value store is best suited for which type of application?",
  "options": [
    "Complex social network analysis",
    "E-commerce product catalog with rich descriptions",
    "Real-time analytics dashboards",
    "Session management and caching"
  ],
  "correctOption": "D",
  "explanation": "Key-value stores are excellent for simple data lookups and are often used for caching and session management because of their speed and simplicity.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b3"
  },
  "question": "Which NoSQL database model is known for its excellent performance in handling large datasets with many columns but few rows?",
  "options": [
    "Document database",
    "Key-value store",
    "Graph database",
    "Column-family database"
  ],
  "correctOption": "D",
  "explanation": "Column-family databases excel at handling wide datasets, making them ideal for time-series data or storing user profiles with numerous attributes.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b5"
  },
  "question": "Considering the trade-offs between scalability, consistency, and availability, which approach is often prioritized in NoSQL designs?",
  "options": [
    "Strong consistency over availability",
    "Availability over consistency in distributed environments",
    "Strong consistency over scalability",
    "Scalability over consistency in distributed environments"
  ],
  "correctOption": "B",
  "explanation": "Many NoSQL databases prioritize high availability, accepting the possibility of temporary inconsistencies to ensure continuous operation in a distributed setting.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b2"
  },
  "question": "What is the main difference between vertical and horizontal scaling in NoSQL databases?",
  "options": [
    "Vertical scaling adds more nodes; horizontal scaling increases server resources.",
    "Horizontal scaling adds more nodes; vertical scaling increases server resources.",
    "Both add more nodes.",
    "Both increase server resources."
  ],
  "correctOption": "B",
  "explanation": "Vertical scaling involves upgrading a single server's resources (CPU, RAM, etc.), while horizontal scaling adds more servers to the database cluster.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b4"
  },
  "question": "What is eventual consistency in the context of NoSQL databases?",
  "options": [
    "All data is always consistent across all nodes.",
    "Data consistency is ensured immediately after each write operation.",
    "Data will eventually be consistent across all nodes, but there may be temporary inconsistencies.",
    "Data consistency is not guaranteed at any time."
  ],
  "correctOption": "C",
  "explanation": "Eventual consistency means that data will eventually become consistent across all replicas, but there might be a delay and temporary discrepancies.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b03978acd9d9d6854b6"
  },
  "question": "Which of the following is a common use case for a wide-column store (like Cassandra)?",
  "options": [
    "Storing and querying complex relationships between objects",
    "Managing a simple key-value store for session data",
    "Handling large-scale time-series data, like sensor readings",
    "Storing and retrieving documents with embedded JSON data"
  ],
  "correctOption": "C",
  "explanation": "Wide-column stores, with their ability to handle many columns efficiently, are well-suited for high-volume time-series data, sensor data, or other data with numerous attributes per row.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c6"
  },
  "question": "What is a deadlock in operating systems?",
  "options": [
    "A state where a process is waiting for a resource held by another process, which is also waiting for a resource held by the first process.",
    "A situation where a process is waiting indefinitely for an I/O operation.",
    "A condition where the system is unresponsive to user input.",
    "An error in the system's memory management."
  ],
  "correctOption": "A",
  "explanation": "A deadlock is a cyclical dependency where two or more processes are blocked indefinitely, waiting for each other.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c5"
  },
  "question": "Which scheduling algorithm prioritizes processes with the shortest expected burst time?",
  "options": [
    "First-Come, First-Served (FCFS)",
    "Shortest Job First (SJF)",
    "Priority Scheduling",
    "Round Robin"
  ],
  "correctOption": "B",
  "explanation": "Shortest Job First (SJF) aims to minimize average waiting time by prioritizing shorter processes.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c8"
  },
  "question": "What is the purpose of a page table in virtual memory management?",
  "options": [
    "To store the contents of physical memory.",
    "To translate virtual addresses to physical addresses.",
    "To manage the CPU's registers.",
    "To schedule processes for execution."
  ],
  "correctOption": "B",
  "explanation": "A page table maps virtual addresses used by a process to their corresponding physical addresses in main memory.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c7"
  },
  "question": "Which memory allocation technique reduces external fragmentation?",
  "options": [
    "First-Fit",
    "Best-Fit",
    "Worst-Fit",
    "Buddy System"
  ],
  "correctOption": "D",
  "explanation": "The Buddy System reduces external fragmentation by allocating memory in powers of 2, better utilizing available space.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854c9"
  },
  "question": "Which file access method allows random access to any part of a file?",
  "options": [
    "Sequential access",
    "Direct access",
    "Indexed sequential access",
    "None of the above"
  ],
  "correctOption": "B",
  "explanation": "Direct access allows reading and writing to specific locations within a file without needing to traverse sequentially.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854ca"
  },
  "question": "What is a process control block (PCB)?",
  "options": [
    "A data structure containing information about a process.",
    "A block of code that controls the CPU.",
    "A section of memory reserved for process execution.",
    "A type of interrupt."
  ],
  "correctOption": "A",
  "explanation": "The PCB stores essential information about a process, including its state, priority, and memory allocation.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854cc"
  },
  "question": "What is the role of a device driver?",
  "options": [
    "To manage the system's file system.",
    "To translate virtual addresses.",
    "To provide an interface between the operating system and hardware devices.",
    "To schedule processes onto the CPU."
  ],
  "correctOption": "C",
  "explanation": "Device drivers act as intermediaries allowing the OS to communicate and control hardware devices efficiently.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854ce"
  },
  "question": "How does a system call work?",
  "options": [
    "It's a direct hardware instruction.",
    "It's a software interrupt triggering OS intervention.",
    "It's a high-level programming language function.",
    "It's a user-mode operation."
  ],
  "correctOption": "B",
  "explanation": "A system call generates a software interrupt, transitioning from user mode to kernel mode, allowing the OS to handle the request.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854cb"
  },
  "question": "What is the difference between preemptive and non-preemptive scheduling?",
  "options": [
    "Preemptive allows a process to be interrupted while non-preemptive does not.",
    "Preemptive is faster while non-preemptive is more efficient.",
    "Preemptive uses less memory, non-preemptive uses more.",
    "Preemptive is for I/O bound processes only"
  ],
  "correctOption": "A",
  "explanation": "Preemptive scheduling allows the OS to interrupt a running process and switch to another, unlike non-preemptive where a process runs until completion or blocking.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b0d978acd9d9d6854cd"
  },
  "question": "Which of the following is NOT a common type of file system?",
  "options": [
    "FAT32",
    "NTFS",
    "ext4",
    "BIOS"
  ],
  "correctOption": "D",
  "explanation": "BIOS (Basic Input/Output System) is firmware, not a file system.  FAT32, NTFS, and ext4 are all file systems.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854de"
  },
  "question": "What is the primary advantage of using a multi-level page table over a single-level page table in virtual memory management?",
  "options": [
    "Reduced memory usage",
    "Increased speed of page table lookups",
    "Simplified page table implementation",
    "Improved process isolation"
  ],
  "correctOption": "A",
  "explanation": "Multi-level page tables reduce memory consumption by only allocating entries for used pages, unlike single-level tables which need entries for the entire address space.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854df"
  },
  "question": "In a distributed file system, what consistency model guarantees that all processes see the same view of the file system, but may involve performance trade-offs?",
  "options": [
    "Sequential consistency",
    "Strict consistency",
    "Eventual consistency",
    "Causal consistency"
  ],
  "correctOption": "B",
  "explanation": "Strict consistency ensures all operations appear to happen in the same order to all processes, providing a simple, yet potentially costly, global view.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e0"
  },
  "question": "Explain the difference between deadlock and livelock.  Which is easier to detect?",
  "options": [
    "Deadlock is a situation where processes are blocked indefinitely; livelock is when processes are continuously changing state but make no progress; Deadlock is easier to detect.",
    "Deadlock is a situation where processes are blocked indefinitely; livelock is when processes are continuously changing state but make no progress; Livelock is easier to detect.",
    "Deadlock and livelock are essentially the same thing.",
    "Neither deadlock nor livelock are easily detectable."
  ],
  "correctOption": "A",
  "explanation": "Deadlock is easier to detect because it involves processes being in a permanent blocked state,  while livelock involves continuous state changes making detection more challenging.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854dd"
  },
  "question": "Which scheduling algorithm is known for its potential for starvation and its simplicity, often used in batch processing systems?",
  "options": [
    "Shortest Job First (SJF)",
    "Round Robin",
    "First-Come, First-Served (FCFS)",
    "Multilevel Queue Scheduling"
  ],
  "correctOption": "C",
  "explanation": "FCFS is simple but can lead to starvation if long processes arrive before short ones.  It's commonly used in batch systems.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e1"
  },
  "question": "What is a key challenge in implementing a distributed shared memory (DSM) system, and how does a lazy release consistency model address it?",
  "options": [
    "Maintaining data consistency; Lazy release consistency minimizes the need for frequent synchronization, thus reducing overhead.",
    "Data fragmentation; Lazy release consistency provides efficient memory allocation strategies.",
    "Scalability; Lazy release consistency uses hierarchical caching to improve performance.",
    "Security; Lazy release consistency employs robust encryption techniques."
  ],
  "correctOption": "A",
  "explanation": "Maintaining data consistency across multiple nodes is a core challenge in DSM. Lazy release consistency mitigates this by delaying the propagation of writes until necessary.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e2"
  },
  "question": "How does a journaling file system improve data integrity compared to a non-journaling file system?",
  "options": [
    "By using redundant arrays of inexpensive disks (RAID).",
    "By automatically backing up data to a remote server.",
    "By recording metadata changes in a separate log before writing to the main file system.",
    "By using checksums to verify data integrity."
  ],
  "correctOption": "C",
  "explanation": "Journaling ensures that metadata changes are logged before being written to the file system, allowing recovery in case of a crash before the changes are fully committed.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e3"
  },
  "question": "Which type of memory management scheme is most likely to suffer from external fragmentation?",
  "options": [
    "Paging",
    "Segmentation",
    "Swapping",
    "Purely contiguous allocation"
  ],
  "correctOption": "D",
  "explanation": "Purely contiguous allocation can lead to external fragmentation where memory space is available but non-contiguous, making it unusable for allocation.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e6"
  },
  "question": "A process is in the 'blocked' state. What does this mean and what event(s) will likely cause it to transition to the 'ready' state?",
  "options": [
    "It's waiting for I/O; completion of I/O operation.",
    "It's running; CPU scheduler allocates CPU time.",
    "It's ready to run; an interrupt occurs.",
    "It's terminated; no event will transition it."
  ],
  "correctOption": "A",
  "explanation": "A blocked process is waiting for an event (like I/O completion). Once the event happens, it transitions to the ready state.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e5"
  },
  "question": "In the context of process synchronization, what problem does the dining philosophers problem illustrate?",
  "options": [
    "Mutual exclusion.",
    "Deadlock.",
    "Race condition.",
    "Starvation."
  ],
  "correctOption": "B",
  "explanation": "The dining philosophers problem highlights the potential for deadlock when multiple processes compete for resources that are held by others (the forks).",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b19978acd9d9d6854e4"
  },
  "question": "What is the purpose of a system call in an operating system?",
  "options": [
    "To initiate a hardware interrupt.",
    "To manage the CPU scheduler.",
    "To provide an interface between user-level processes and the kernel.",
    "To perform memory allocation."
  ],
  "correctOption": "C",
  "explanation": "System calls are the mechanism by which user-level programs request services from the operating system kernel.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f5"
  },
  "question": "Which OOP principle promotes the idea of hiding internal details and exposing only essential information?",
  "options": [
    "Abstraction",
    "Encapsulation",
    "Inheritance",
    "Polymorphism"
  ],
  "correctOption": "B",
  "explanation": "Encapsulation bundles data and methods that operate on that data within a class, hiding internal implementation details.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fd"
  },
  "question": "What is a potential drawback of using inheritance extensively?",
  "options": [
    "Increased code reusability",
    "Improved code organization",
    "Fragile base class problem",
    "Reduced complexity"
  ],
  "correctOption": "C",
  "explanation": "Changes in the base class can unexpectedly affect derived classes, making the code brittle and difficult to maintain.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fc"
  },
  "question": "Which design pattern promotes creating objects based on a request?",
  "options": [
    "Factory Method",
    "Singleton",
    "Observer",
    "Decorator"
  ],
  "correctOption": "A",
  "explanation": "The Factory Method pattern encapsulates object creation, allowing subclasses to decide which concrete object to create.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fa"
  },
  "question": "Consider a scenario where you need to represent different types of animals (dogs, cats, birds). Which OOP concept is best suited for modeling this?",
  "options": [
    "Abstraction only",
    "Inheritance only",
    "Polymorphism only",
    "Inheritance and Polymorphism"
  ],
  "correctOption": "D",
  "explanation": "Inheritance would create a base 'Animal' class, and subclasses for each type. Polymorphism allows using them generically via a common interface.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fb"
  },
  "question": "What is the difference between composition and aggregation in OOP?",
  "options": [
    "There's no difference, they are synonyms.",
    "Composition implies a 'has-a' relationship; aggregation implies a 'uses-a' relationship.",
    "Composition implies a strong 'owns' relationship where the composed part cannot exist independently; aggregation implies a weaker 'uses' relationship where the aggregated part can exist independently.",
    "Composition is static; aggregation is dynamic."
  ],
  "correctOption": "C",
  "explanation": "Composition represents a stronger relationship where the part cannot exist without the whole, while aggregation allows the part to exist independently.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f8"
  },
  "question": "A class that cannot be instantiated directly but serves as a blueprint for subclasses is known as:",
  "options": [
    "Concrete class",
    "Abstract class",
    "Interface",
    "Super class"
  ],
  "correctOption": "B",
  "explanation": "Abstract classes cannot be instantiated; they define a common interface for subclasses to implement.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f7"
  },
  "question": "Polymorphism allows objects of different classes to be treated as objects of a common type.  Which of the following best illustrates this?",
  "options": [
    "Creating multiple classes with the same name.",
    "Using the same method name with different implementations in subclasses.",
    "Restricting access to class members.",
    "Combining data and methods into a single unit."
  ],
  "correctOption": "B",
  "explanation": "Method overriding enables polymorphism, where a subclass provides a specific implementation of a method inherited from a superclass.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f9"
  },
  "question": "What is the purpose of an interface in OOP?",
  "options": [
    "To define the internal workings of a class.",
    "To provide a way for unrelated classes to interact.",
    "To hide internal details from external users.",
    "To create a copy of an object."
  ],
  "correctOption": "B",
  "explanation": "Interfaces define a contract that classes can implement, providing a common way for unrelated classes to interact.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854fe"
  },
  "question": "How does static polymorphism differ from dynamic polymorphism?",
  "options": [
    "Static polymorphism uses method overriding; dynamic polymorphism uses method overloading.",
    "Static polymorphism occurs at compile time; dynamic polymorphism occurs at runtime.",
    "Static polymorphism is more efficient; dynamic polymorphism is more flexible.",
    "There is no practical difference; they are synonyms."
  ],
  "correctOption": "B",
  "explanation": "Static polymorphism (method overloading) is resolved at compile time, while dynamic polymorphism (method overriding) is resolved at runtime.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b23978acd9d9d6854f6"
  },
  "question": "What is the process of creating new classes from existing ones called?",
  "options": [
    "Abstraction",
    "Encapsulation",
    "Inheritance",
    "Polymorphism"
  ],
  "correctOption": "C",
  "explanation": "Inheritance allows a new class (subclass) to inherit properties and methods from an existing class (superclass).",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d68550e"
  },
  "question": "Which phase of the SDLC involves gathering requirements from stakeholders?",
  "options": [
    "Testing",
    "Deployment",
    "Requirements Gathering",
    "Design"
  ],
  "correctOption": "C",
  "explanation": "The Requirements Gathering phase focuses on understanding the needs and specifications of the software.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d68550d"
  },
  "question": "What does SDLC stand for?",
  "options": [
    "Software Development Life Cycle",
    "System Design Life Cycle",
    "Software Deployment Life Cycle",
    "System Development Logic Cycle"
  ],
  "correctOption": "A",
  "explanation": "SDLC is the acronym for Software Development Life Cycle, encompassing all stages of software creation.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685510"
  },
  "question": "In which SDLC phase is the software actually built?",
  "options": [
    "Planning",
    "Design",
    "Implementation",
    "Testing"
  ],
  "correctOption": "C",
  "explanation": "The implementation phase is where the coding and development of the software takes place.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d68550f"
  },
  "question": "What is a key deliverable of the design phase in the SDLC?",
  "options": [
    "Working software",
    "Test cases",
    "System architecture",
    "User manual"
  ],
  "correctOption": "C",
  "explanation": "The design phase produces a blueprint of the software, including its architecture and structure.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685512"
  },
  "question": "What happens during the deployment phase of the SDLC?",
  "options": [
    "Software is designed",
    "Software is tested",
    "Software is released to users",
    "Software requirements are gathered"
  ],
  "correctOption": "C",
  "explanation": "Deployment involves releasing the finished software to its intended users or environment.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685513"
  },
  "question": "Which model is a linear-sequential approach to the SDLC?",
  "options": [
    "Agile",
    "Spiral",
    "Waterfall",
    "Iterative"
  ],
  "correctOption": "C",
  "explanation": "The Waterfall model follows a rigid, sequential process from start to finish.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685511"
  },
  "question": "What is the purpose of the testing phase in the SDLC?",
  "options": [
    "To write code",
    "To deploy the software",
    "To identify and fix defects",
    "To gather requirements"
  ],
  "correctOption": "C",
  "explanation": "Testing aims to find and resolve bugs and ensure the software meets requirements before release.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685514"
  },
  "question": "What is a potential drawback of the Waterfall model?",
  "options": [
    "Flexibility",
    "Simplicity",
    "Inflexibility",
    "Fast delivery"
  ],
  "correctOption": "C",
  "explanation": "The Waterfall model’s rigidity makes it difficult to adapt to changing requirements.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685515"
  },
  "question": "Which SDLC model emphasizes iterative development and customer collaboration?",
  "options": [
    "Waterfall",
    "Spiral",
    "Agile",
    "RAD"
  ],
  "correctOption": "C",
  "explanation": "Agile methodologies prioritize iterative development, frequent feedback, and collaboration.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b2b978acd9d9d685516"
  },
  "question": "Maintenance is considered part of which SDLC phase?",
  "options": [
    "Deployment",
    "Testing",
    "Post-Deployment/Maintenance",
    "Design"
  ],
  "correctOption": "C",
  "explanation": "Maintenance involves ongoing support, bug fixes, and updates after software release.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685526"
  },
  "question": "Which of the following is NOT a type of network?",
  "options": [
    "LAN",
    "WAN",
    "MAN",
    "FAN"
  ],
  "correctOption": "D",
  "explanation": "LAN, WAN, and MAN are common network types.  FAN is not a standard network type.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685525"
  },
  "question": "What is a network?",
  "options": [
    "A single computer",
    "A collection of interconnected devices",
    "A type of software",
    "A large database"
  ],
  "correctOption": "B",
  "explanation": "A network connects two or more devices to share resources and communicate.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685528"
  },
  "question": "What does WAN stand for?",
  "options": [
    "Wide Area Network",
    "Wireless Area Network",
    "World Area Network",
    "Web Area Network"
  ],
  "correctOption": "A",
  "explanation": "WAN stands for Wide Area Network; it covers a large geographic area.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552b"
  },
  "question": "What is the purpose of a network cable?",
  "options": [
    "To connect to the internet",
    "To power a computer",
    "To connect devices within a network",
    "To display images"
  ],
  "correctOption": "C",
  "explanation": "Network cables physically connect devices to create a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685529"
  },
  "question": "Which device connects multiple devices on a network?",
  "options": [
    "Printer",
    "Monitor",
    "Router",
    "Keyboard"
  ],
  "correctOption": "C",
  "explanation": "A router forwards data packets between networks.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d685527"
  },
  "question": "What does LAN stand for?",
  "options": [
    "Large Area Network",
    "Local Area Network",
    "Long Area Network",
    "Limited Access Network"
  ],
  "correctOption": "B",
  "explanation": "LAN stands for Local Area Network; it covers a small geographic area.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552a"
  },
  "question": "What is an IP address used for?",
  "options": [
    "Identifying a device on a network",
    "Storing files",
    "Printing documents",
    "Playing games"
  ],
  "correctOption": "A",
  "explanation": "An IP address uniquely identifies a device on a network for communication.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552c"
  },
  "question": "What is a protocol in networking?",
  "options": [
    "A type of computer",
    "A set of rules for communication",
    "A type of software",
    "A type of hardware"
  ],
  "correctOption": "B",
  "explanation": "A protocol defines the rules and standards for data transmission between devices.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552d"
  },
  "question": "Which protocol is commonly used for web browsing?",
  "options": [
    "FTP",
    "SMTP",
    "HTTP",
    "POP3"
  ],
  "correctOption": "C",
  "explanation": "HTTP (Hypertext Transfer Protocol) is used for transferring web pages.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b3d978acd9d9d68552e"
  },
  "question": "What is a node in a network?",
  "options": [
    "A type of cable",
    "A connecting device",
    "Any device connected to the network",
    "A type of software"
  ],
  "correctOption": "C",
  "explanation": "A node is any device (computer, printer, etc.) connected to a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d68553e"
  },
  "question": "A network is experiencing a denial-of-service attack.  Which mitigation strategy would be MOST effective in preventing future similar attacks by identifying and blocking malicious sources at the network perimeter?",
  "options": [
    "Intrusion Detection System (IDS)",
    "Firewall with stateful inspection",
    "Antivirus software",
    "Network segmentation"
  ],
  "correctOption": "B",
  "explanation": "A stateful firewall inspects network traffic contextually and can effectively block malicious traffic sources based on established connections and patterns, unlike other options that primarily focus on internal threats or less precise filtering.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d68553d"
  },
  "question": "Which cryptographic algorithm is NOT considered suitable for encrypting large datasets due to its computational intensity, especially with longer keys?",
  "options": [
    "AES",
    "RSA",
    "DES",
    "3DES"
  ],
  "correctOption": "B",
  "explanation": "RSA, an asymmetric algorithm, has significantly higher computational overhead compared to symmetric algorithms like AES for large datasets.  Key size also greatly impacts RSA's performance.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d68553f"
  },
  "question": "What is the primary security vulnerability addressed by implementing Certificate Pinning in mobile applications?",
  "options": [
    "Man-in-the-middle attacks",
    "SQL injection",
    "Cross-site scripting (XSS)",
    "Denial-of-service attacks"
  ],
  "correctOption": "A",
  "explanation": "Certificate pinning prevents man-in-the-middle attacks by hardcoding the expected server certificate, making it impossible for an attacker to use a fraudulent certificate to intercept traffic.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685540"
  },
  "question": "You are designing a secure network for a highly sensitive environment. Which security principle focuses on limiting access to resources based on the principle of least privilege?",
  "options": [
    "Confidentiality",
    "Integrity",
    "Availability",
    "Authorization"
  ],
  "correctOption": "D",
  "explanation": "Authorization is the process of verifying if a subject (user, process) is allowed to access a specific resource. Least privilege ensures only necessary access is granted.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685542"
  },
  "question": "Explain how a Zero Trust security model differs from a traditional perimeter-based security model.",
  "options": [
    "Zero Trust verifies every access request regardless of location, while perimeter-based relies on network segmentation.",
    "Zero Trust assumes all devices are untrusted, while perimeter-based assumes all devices inside the network are trusted.",
    "Zero Trust uses advanced threat intelligence, while perimeter-based solely depends on firewalls.",
    "Zero Trust focuses on data protection, while perimeter-based emphasizes network security."
  ],
  "correctOption": "B",
  "explanation": "Zero Trust operates on the principle of 'never trust, always verify,' assuming no implicit trust based on network location, contrasting with traditional models that primarily secure the network perimeter.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685541"
  },
  "question": "What is a significant advantage of using a VPN (Virtual Private Network) for remote access compared to a direct connection to a corporate network?",
  "options": [
    "Increased bandwidth",
    "Reduced latency",
    "Enhanced security through encryption and tunneling",
    "Simplified network configuration"
  ],
  "correctOption": "C",
  "explanation": "VPNs encrypt data and encapsulate it within tunnels, providing secure communication over untrusted networks, unlike a direct connection which exposes traffic.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685543"
  },
  "question": "Which security mechanism is BEST suited for detecting and responding to sophisticated, zero-day exploits that bypass traditional signature-based security systems?",
  "options": [
    "Intrusion Detection System (IDS)",
    "Antivirus software",
    "Behavior-based anomaly detection",
    "Firewall"
  ],
  "correctOption": "C",
  "explanation": "Behavior-based anomaly detection analyzes system behavior for deviations from established baselines, identifying unusual activities indicative of zero-day attacks that evade signature-based systems.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685544"
  },
  "question": "In a public key infrastructure (PKI) system, what is the role of a Certificate Revocation List (CRL)?",
  "options": [
    "To encrypt sensitive data exchanged between parties.",
    "To verify the authenticity of a digital signature.",
    "To identify compromised or revoked digital certificates.",
    "To generate public and private key pairs."
  ],
  "correctOption": "C",
  "explanation": "CRLs list certificates that have been compromised or revoked, preventing their further use and maintaining the integrity of the PKI system.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685545"
  },
  "question": "What is a common vulnerability associated with implementing Multi-Factor Authentication (MFA) that weakens its overall effectiveness?",
  "options": [
    "Phishing attacks targeting user credentials",
    "Poor password hygiene",
    "Social engineering exploiting user trust",
    "Weak or easily guessed secondary authentication factors"
  ],
  "correctOption": "D",
  "explanation": "Weak secondary factors (e.g., easily guessed PINs, predictable SMS codes) undermine the strength of MFA, enabling bypass despite its multi-layered approach.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b48978acd9d9d685546"
  },
  "question": "A company is migrating its on-premise infrastructure to a cloud environment. Which security considerations should be of paramount importance during this transition?",
  "options": [
    "Data encryption in transit and at rest, secure configuration of cloud services, access control and identity management, all of the above.",
    "Only data encryption in transit and at rest.",
    "Only access control and identity management",
    "Only secure configuration of cloud services."
  ],
  "correctOption": "A",
  "explanation": "Cloud migration necessitates comprehensive security planning, encompassing data encryption, secure service configurations, and robust access controls to maintain security parity or improvement in the new environment.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685559"
  },
  "question": "Which JavaScript framework is known for its component-based architecture and virtual DOM?",
  "options": [
    "Angular",
    "React",
    "Vue.js",
    "jQuery"
  ],
  "correctOption": "B",
  "explanation": "React uses a component-based architecture and a virtual DOM for efficient updates to the user interface.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685555"
  },
  "question": "Which CSS property controls the spacing between lines of text?",
  "options": [
    "text-align",
    "line-height",
    "letter-spacing",
    "word-spacing"
  ],
  "correctOption": "B",
  "explanation": "The `line-height` property controls the vertical spacing between lines of text within an element.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685558"
  },
  "question": "What does the term 'DOM' stand for in web development?",
  "options": [
    "Document Object Model",
    "Data Object Model",
    "Digital Object Model",
    "Dynamic Object Manipulation"
  ],
  "correctOption": "A",
  "explanation": "DOM represents the Document Object Model, a programming interface for HTML and XML documents.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555c"
  },
  "question": "Which HTTP method is typically used to submit data to a server to create or update a resource?",
  "options": [
    "GET",
    "POST",
    "PUT",
    "DELETE"
  ],
  "correctOption": "B",
  "explanation": "The POST method is commonly used to send data to the server to create or update resources.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555a"
  },
  "question": "How can you apply a CSS style only to elements with a specific class?",
  "options": [
    "Using the `id` selector",
    "Using the `element` selector",
    "Using the `class` selector",
    "Using the `universal` selector"
  ],
  "correctOption": "C",
  "explanation": "The `class` selector (e.g., `.myClass`) targets HTML elements with the specified class attribute.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555b"
  },
  "question": "What is the purpose of a 'promise' in JavaScript?",
  "options": [
    "To handle asynchronous operations",
    "To define functions",
    "To create objects",
    "To manage events"
  ],
  "correctOption": "A",
  "explanation": "Promises handle asynchronous operations, managing their eventual success or failure and enabling cleaner code.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685557"
  },
  "question": "Which HTML5 element is used for embedding a video player?",
  "options": [
    "<video>",
    "<audio>",
    "<img>",
    "<embed>"
  ],
  "correctOption": "A",
  "explanation": "The `<video>` element is specifically designed for embedding and playing videos in HTML5.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555d"
  },
  "question": "What is the difference between `==` and `===` in JavaScript?",
  "options": [
    "Both are the same",
    "`==` checks for value equality, `===` checks for both value and type equality",
    "`==` checks for type equality, `===` checks for value equality",
    "`==` is for strings, `===` is for numbers"
  ],
  "correctOption": "B",
  "explanation": " `==` performs loose equality (type coercion), while `===` performs strict equality (no type coercion).",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d685556"
  },
  "question": "What is the purpose of the `event.preventDefault()` method in JavaScript?",
  "options": [
    "To stop the default behavior of an event",
    "To prevent an event from bubbling",
    "To cancel an event entirely",
    "To trigger an event immediately"
  ],
  "correctOption": "A",
  "explanation": "`event.preventDefault()` prevents the browser's default action for an event (e.g., following a link, submitting a form).",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b52978acd9d9d68555e"
  },
  "question": "What does REST stand for in the context of web APIs?",
  "options": [
    "Representational State Transfer",
    "Remote Service Transfer",
    "Resourceful Service Technology",
    "Regular Service Transfer"
  ],
  "correctOption": "A",
  "explanation": "REST stands for Representational State Transfer, an architectural style for designing networked applications.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d68556d"
  },
  "question": "Which architectural pattern is commonly used to separate the business logic from the data access layer in a backend application?",
  "options": [
    "Model-View-Controller (MVC)",
    "Model-View-ViewModel (MVVM)",
    "Layered Architecture",
    "Microservices"
  ],
  "correctOption": "C",
  "explanation": "Layered architecture cleanly separates concerns, making the code more maintainable and testable.  Other patterns often utilize layered architecture.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d68556e"
  },
  "question": "What is a common way to handle asynchronous operations in a Node.js backend?",
  "options": [
    "Synchronous calls",
    "Callbacks",
    "Promises",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "Node.js is event-driven and asynchronous. Callbacks, Promises, and async/await are all methods to manage asynchronous operations effectively.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685574"
  },
  "question": "What is a common strategy for caching frequently accessed data in a backend system?",
  "options": [
    "Using a relational database",
    "Implementing a message queue",
    "Employing a caching layer (e.g., Redis, Memcached)",
    "Using a distributed file system"
  ],
  "correctOption": "C",
  "explanation": "Caching layers store frequently accessed data in memory, significantly reducing the load on the database and improving response times.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685570"
  },
  "question": "In a relational database, what is a foreign key?",
  "options": [
    "A unique identifier for each row in a table",
    "A field that links to the primary key of another table",
    "A constraint ensuring no duplicate values",
    "A type of data storage engine"
  ],
  "correctOption": "B",
  "explanation": "A foreign key establishes a relationship between two tables, enabling efficient data retrieval and database integrity.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685575"
  },
  "question": "What does ORMs (Object-Relational Mappers) simplify in backend development?",
  "options": [
    "Frontend development",
    "Network communication",
    "Database interactions",
    "API design"
  ],
  "correctOption": "C",
  "explanation": "ORMs translate between object-oriented programming languages and relational databases, simplifying database access and reducing boilerplate code.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685576"
  },
  "question": "What is a common approach to securing sensitive information like API keys and database credentials in a backend environment?",
  "options": [
    "Hardcoding them into the application code",
    "Storing them in plain text configuration files",
    "Using environment variables or secure secrets management services",
    "Leaving them exposed in the source code repository"
  ],
  "correctOption": "C",
  "explanation": "Environment variables and dedicated secrets management systems offer a more secure way to manage sensitive information than hardcoding or storing them in plain text.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685572"
  },
  "question": "What is the benefit of using a message queue (e.g., RabbitMQ, Kafka) in a backend system?",
  "options": [
    "Improved database performance",
    "Enhanced security",
    "Asynchronous communication and decoupling of services",
    "Simplified user interface design"
  ],
  "correctOption": "C",
  "explanation": "Message queues allow different parts of the system to communicate asynchronously, improving scalability and resilience. This reduces tight coupling between services.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685573"
  },
  "question": "Which design principle emphasizes keeping components loosely coupled and highly cohesive?",
  "options": [
    "SOLID principles",
    "KISS principle",
    "YAGNI principle",
    "DRY principle"
  ],
  "correctOption": "A",
  "explanation": "SOLID principles, especially the principles of Single Responsibility and Dependency Inversion, promote loose coupling and high cohesion for maintainable and extensible code.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d685571"
  },
  "question": "Which of the following is NOT a common method for handling errors in a backend application?",
  "options": [
    "Exception handling",
    "Logging errors to a file",
    "Returning detailed error messages to the client",
    "Ignoring errors and continuing execution"
  ],
  "correctOption": "D",
  "explanation": "Ignoring errors can lead to unexpected behavior and data corruption.  Proper error handling involves catching exceptions, logging, and returning informative error messages.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b5b978acd9d9d68556f"
  },
  "question": "What is the primary purpose of a RESTful API?",
  "options": [
    "To manage databases",
    "To handle user authentication only",
    "To expose backend functionality via HTTP requests",
    "To create complex user interfaces"
  ],
  "correctOption": "C",
  "explanation": "RESTful APIs use standard HTTP methods (GET, POST, PUT, DELETE) to interact with resources, providing a standardized interface to backend data and functionalities.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685585"
  },
  "question": "Which HTTP method is typically used to retrieve data from an API?",
  "options": [
    "POST",
    "PUT",
    "DELETE",
    "GET"
  ],
  "correctOption": "D",
  "explanation": "GET requests are used to retrieve information from a server.  They are idempotent, meaning they can be called multiple times without changing the server state.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685586"
  },
  "question": "What is REST (Representational State Transfer)?",
  "options": [
    "A type of database",
    "A specific API programming language",
    "An architectural style for building web services",
    "A type of network protocol"
  ],
  "correctOption": "C",
  "explanation": "REST is an architectural style that defines a set of constraints for creating web services. It utilizes standard HTTP methods for interaction.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685589"
  },
  "question": "Which of the following is NOT a common API response format?",
  "options": [
    "JSON",
    "XML",
    "HTML",
    "YAML"
  ],
  "correctOption": "C",
  "explanation": "While APIs might use HTML for documentation or specific responses, JSON, XML, and YAML are common data formats for API responses.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685587"
  },
  "question": "What does API stand for?",
  "options": [
    "Application Programming Interface",
    "Advanced Programming Interface",
    "Abstract Programming Interface",
    "Applied Programming Integration"
  ],
  "correctOption": "A",
  "explanation": "API stands for Application Programming Interface; it's a set of rules and specifications that software programs can follow to communicate.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d685588"
  },
  "question": "What is an API key used for?",
  "options": [
    "Encrypting API requests",
    "Authenticating API requests and managing access",
    "Storing API data",
    "Defining API data types"
  ],
  "correctOption": "B",
  "explanation": "API keys are used to identify and authenticate users or applications accessing an API, often with rate limiting or access control.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558a"
  },
  "question": "What is rate limiting in the context of APIs?",
  "options": [
    "Limiting the number of requests an application can make within a given time period",
    "Limiting the size of data transmitted in a single request",
    "Limiting the type of data that can be requested",
    "Limiting the number of users accessing the API"
  ],
  "correctOption": "A",
  "explanation": "Rate limiting controls the frequency of API requests to prevent abuse and ensure server stability.  It protects the API from being overwhelmed.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558e"
  },
  "question": "How does OAuth 2.0 improve API security?",
  "options": [
    "By storing API keys directly in client applications",
    "By providing a more secure way to authorize access to protected resources",
    "By reducing the number of API requests",
    "By encrypting all API data"
  ],
  "correctOption": "B",
  "explanation": "OAuth 2.0 allows applications to access user data from another service without requiring them to directly share passwords. This improves security by reducing reliance on direct credentials.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558c"
  },
  "question": "What is a common way to handle errors in an API?",
  "options": [
    "Ignoring errors",
    "Returning HTTP status codes",
    "Closing the API",
    "Displaying an internal server error to the user"
  ],
  "correctOption": "B",
  "explanation": "HTTP status codes (e.g., 404 Not Found, 500 Internal Server Error) provide standardized ways for APIs to communicate errors to clients.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558b"
  },
  "question": "What is the purpose of API documentation?",
  "options": [
    "To provide instructions and examples on how to use the API",
    "To encrypt API responses",
    "To store API data",
    "To manage API users"
  ],
  "correctOption": "A",
  "explanation": "API documentation provides developers with information on endpoints, request methods, parameters, and expected responses, making it easier to integrate with the API.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b65978acd9d9d68558d"
  },
  "question": "What is Webhook?",
  "options": [
    "A type of database",
    "A type of API request",
    "A server-sent event mechanism",
    "A method to encrypt data"
  ],
  "correctOption": "C",
  "explanation": "A webhook is a way for an API to push data to a client application automatically whenever an event occurs, rather than the client constantly polling.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d68559e"
  },
  "question": "What is the primary goal of dimensionality reduction in machine learning?",
  "options": [
    "Increasing model complexity",
    "Improving model accuracy",
    "Reducing computational cost and noise",
    "Adding more features to the dataset"
  ],
  "correctOption": "C",
  "explanation": "Dimensionality reduction aims to simplify data by reducing the number of variables, leading to faster processing and less noise.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d68559d"
  },
  "question": "Which of the following is NOT a common type of machine learning?",
  "options": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Reinforcement Learning",
    "Deductive Learning"
  ],
  "correctOption": "D",
  "explanation": "Deductive learning is a philosophical concept, not a machine learning paradigm.  The others are established ML types.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a0"
  },
  "question": "Which algorithm is best suited for handling high-dimensional data with many irrelevant features?",
  "options": [
    "Linear Regression",
    "K-Nearest Neighbors",
    "Support Vector Machines (SVM)",
    "Random Forest"
  ],
  "correctOption": "D",
  "explanation": "Random Forest is robust to high dimensionality and irrelevant features due to its ensemble nature and feature bagging.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d68559f"
  },
  "question": "In a decision tree, what is a leaf node?",
  "options": [
    "A branch point in the tree",
    "The root of the tree",
    "A final decision or prediction",
    "An intermediate node"
  ],
  "correctOption": "C",
  "explanation": "Leaf nodes represent the final outcome or classification made by the decision tree algorithm.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a1"
  },
  "question": "What is the purpose of a validation set in machine learning?",
  "options": [
    "Training the model",
    "Testing the model's final performance",
    "Tuning hyperparameters and preventing overfitting",
    "Evaluating the model's performance on unseen data"
  ],
  "correctOption": "C",
  "explanation": "The validation set is used to tune hyperparameters and to assess the model's performance during training to prevent overfitting to the training data.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a3"
  },
  "question": "What is a common technique to address overfitting in neural networks?",
  "options": [
    "Increasing the number of hidden layers",
    "Using larger datasets",
    "Adding dropout layers",
    "Decreasing the learning rate"
  ],
  "correctOption": "C",
  "explanation": "Dropout randomly deactivates neurons during training, preventing overreliance on specific features and thus mitigating overfitting.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a2"
  },
  "question": "Which metric is commonly used to evaluate the performance of a classification model dealing with imbalanced datasets?",
  "options": [
    "Accuracy",
    "Precision",
    "Recall",
    "F1-score"
  ],
  "correctOption": "D",
  "explanation": "F1-score balances precision and recall, making it suitable for imbalanced datasets where accuracy can be misleading.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a4"
  },
  "question": "What is the main difference between batch gradient descent and stochastic gradient descent?",
  "options": [
    "Batch GD uses the entire dataset in each iteration, SGD uses a single data point.",
    "Batch GD is faster, SGD is slower.",
    "Batch GD is less prone to getting stuck in local minima, SGD is more prone.",
    "Batch GD requires less memory, SGD requires more memory."
  ],
  "correctOption": "A",
  "explanation": "Batch GD updates weights based on the entire dataset, while SGD updates weights after processing each data point individually.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a5"
  },
  "question": "Which technique helps to prevent a model from learning the noise in the training data?",
  "options": [
    "Cross-validation",
    "Regularization",
    "Feature scaling",
    "Data augmentation"
  ],
  "correctOption": "B",
  "explanation": "Regularization adds a penalty to the loss function, discouraging the model from fitting to the noise.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b6f978acd9d9d6855a6"
  },
  "question": "Given a dataset with highly correlated features, which technique might be helpful for improving model performance and interpretability?",
  "options": [
    "Feature scaling",
    "PCA (Principal Component Analysis)",
    "One-hot encoding",
    "Data augmentation"
  ],
  "correctOption": "B",
  "explanation": "PCA reduces the dimensionality by creating uncorrelated principal components, often improving model performance and making it easier to understand.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b5"
  },
  "question": "Which of the following regularization techniques is particularly effective in preventing overfitting in deep neural networks with many parameters, and why?",
  "options": [
    "L1 regularization",
    "Dropout",
    "Early stopping",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "All three methods (L1, dropout, and early stopping) are effective regularization techniques.  They prevent overfitting by reducing model complexity in different ways.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b6"
  },
  "question": "Explain the vanishing gradient problem and describe a solution to mitigate it.",
  "options": [
    "It occurs during backpropagation in shallow networks, solved by using larger learning rates.",
    "It occurs during backpropagation in deep networks, solved by using ReLU activation functions.",
    "It occurs during forward propagation, solved by using batch normalization.",
    "It occurs only in recurrent neural networks, solved by using LSTMs."
  ],
  "correctOption": "B",
  "explanation": "The vanishing gradient problem hinders training deep networks.  ReLU activations, with their non-zero derivative for positive inputs, help alleviate this.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b8"
  },
  "question": "Describe a scenario where transfer learning would be particularly beneficial and explain why.",
  "options": [
    "Training a new model from scratch for image classification on a large dataset.",
    "Fine-tuning a pre-trained model for a similar image classification task with limited data.",
    "Training a model for natural language processing on a completely new language without any prior data.",
    "Using a pre-trained model for a completely unrelated task, such as predicting stock prices based on image data."
  ],
  "correctOption": "B",
  "explanation": "Transfer learning excels when dealing with limited data for a similar task.  Leveraging a pre-trained model reduces training time and improves performance by initializing weights with meaningful values.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b7"
  },
  "question": "How does Batch Normalization contribute to faster and more stable training of deep neural networks?",
  "options": [
    "By normalizing the weights of the network after each epoch.",
    "By normalizing the activations of each layer during training.",
    "By normalizing the input data before feeding it to the network.",
    "By normalizing the output of the network before calculating the loss."
  ],
  "correctOption": "B",
  "explanation": "Batch Normalization normalizes the activations of each layer, reducing internal covariate shift and thus stabilizing and speeding up training.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855b9"
  },
  "question": "What is the core difference between Convolutional Neural Networks (CNNs) and Recurrent Neural Networks (RNNs) in terms of their application and data handling?",
  "options": [
    "CNNs handle sequential data, RNNs handle spatial data.",
    "CNNs handle spatial data, RNNs handle sequential data.",
    "Both handle both types equally well.",
    "CNNs are for image classification only, RNNs for NLP only."
  ],
  "correctOption": "B",
  "explanation": "CNNs excel at processing spatial data like images, while RNNs are designed for sequential data like text or time series.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855ba"
  },
  "question": "What is the purpose of an attention mechanism in sequence-to-sequence models, and how does it improve performance?",
  "options": [
    "It prevents vanishing gradients.",
    "It regularizes the network to prevent overfitting.",
    "It allows the model to focus on relevant parts of the input sequence when generating the output.",
    "It speeds up the training process by reducing computational complexity."
  ],
  "correctOption": "C",
  "explanation": "Attention mechanisms enable the model to weigh different parts of the input sequence differently, focusing on the most relevant information for generating each part of the output.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855bb"
  },
  "question": "Explain the concept of a Generative Adversarial Network (GAN) and its two core components.",
  "options": [
    "A network that uses reinforcement learning to generate images.",
    "A network that uses unsupervised learning to classify images.",
    "Two networks, a generator and a discriminator, competing against each other to generate realistic data.",
    "A single network that generates and discriminates data simultaneously."
  ],
  "correctOption": "C",
  "explanation": "GANs consist of a generator that creates synthetic data and a discriminator that tries to distinguish between real and synthetic data.  Their competition leads to improved realism in generated data.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855bc"
  },
  "question": "How does the concept of 'explainability' pose a challenge in the field of deep learning, and what are some approaches to address this?",
  "options": [
    "Explainability is not a challenge, deep learning models are inherently transparent.",
    "Deep learning models are too complex to interpret, and there are no solutions to address this.",
    "Deep learning models are ‘black boxes’, making understanding their decision-making difficult; techniques like SHAP values and LIME try to improve interpretability.",
    "Explainability is only a challenge in specific applications, like medical diagnosis; in others, it is irrelevant."
  ],
  "correctOption": "C",
  "explanation": "The complexity of deep learning models often hinders understanding their predictions.  Methods like SHAP and LIME aim to provide insights into their decision-making processes.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855bd"
  },
  "question": "In the context of hyperparameter optimization, what is the difference between grid search and random search, and when might one be preferred over the other?",
  "options": [
    "Grid search is faster than random search.",
    "Random search is always better than grid search.",
    "Grid search explores all possible combinations of hyperparameters, while random search samples from a distribution of hyperparameters.  Random search can be more efficient for high-dimensional hyperparameter spaces.",
    "There is no difference between the two methods; they achieve the same results."
  ],
  "correctOption": "C",
  "explanation": "Grid search is exhaustive but computationally expensive for many hyperparameters. Random search is often more efficient in high-dimensional spaces by intelligently sampling the hyperparameter space.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b7c978acd9d9d6855be"
  },
  "question": "What is a common approach to handle imbalanced datasets in deep learning, and why is it effective?",
  "options": [
    "Ignore the imbalance; it doesn't affect model performance.",
    "Use a different loss function, such as mean squared error.",
    "Oversample the minority class or undersample the majority class to balance the class distribution. This ensures the model learns from all classes equally.",
    "Increase the learning rate."
  ],
  "correctOption": "C",
  "explanation": "Imbalanced datasets can bias models toward the majority class. Oversampling/undersampling techniques address this by creating a more balanced representation of classes during training.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d1"
  },
  "question": "How do you add a comment in Python?",
  "options": [
    "// This is a comment",
    "# This is a comment",
    "/* This is a comment */",
    "'This is a comment'"
  ],
  "correctOption": "B",
  "explanation": "The '#' symbol is used to denote single-line comments in Python.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855cf"
  },
  "question": "Which of these is NOT a valid variable name in Python?",
  "options": [
    "my_variable",
    "1st_variable",
    "_private_var",
    "myVariable"
  ],
  "correctOption": "B",
  "explanation": "Variable names cannot start with a number.  '1st_variable' violates this rule.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855ce"
  },
  "question": "What data type is the result of 5 / 2 in Python?",
  "options": [
    "integer",
    "string",
    "float",
    "boolean"
  ],
  "correctOption": "C",
  "explanation": "The `/` operator performs floating-point division in Python, resulting in a float.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d0"
  },
  "question": "What will be the output of `print(type(5))`?",
  "options": [
    "<class 'int'>",
    "<class 'float'>",
    "<class 'str'>",
    "<class 'bool'>"
  ],
  "correctOption": "A",
  "explanation": "`type()` returns the data type of the object. 5 is an integer.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855cd"
  },
  "question": "What is the correct way to print 'Hello, world!' in Python?",
  "options": [
    "print('Hello, world!')",
    "print \"Hello, world!\"",
    "echo 'Hello, world!'",
    "System.out.println('Hello, world!');"
  ],
  "correctOption": "A",
  "explanation": "The `print()` function is Python's built-in function for displaying output to the console.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d2"
  },
  "question": "What is the result of `2 + 2 * 3` in Python?",
  "options": [
    "12",
    "8",
    "10",
    "6"
  ],
  "correctOption": "B",
  "explanation": "Python follows the order of operations (PEMDAS/BODMAS), so multiplication is done before addition: 2 + (2 * 3) = 8",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d3"
  },
  "question": "What does the `len()` function do?",
  "options": [
    "Calculates the sum of elements",
    "Finds the largest element",
    "Determines the length of a sequence",
    "Prints the elements of a sequence"
  ],
  "correctOption": "C",
  "explanation": "`len()` returns the number of items (length) in a sequence like a string, list, or tuple.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d4"
  },
  "question": "Which statement correctly creates a list named 'my_list' containing the numbers 1, 2, and 3?",
  "options": [
    "my_list = 1, 2, 3",
    "my_list = [1 2 3]",
    "my_list = {1, 2, 3}",
    "my_list = [1, 2, 3]"
  ],
  "correctOption": "D",
  "explanation": "Square brackets `[]` are used to create lists in Python.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d6"
  },
  "question": "What will be the output of `print(bool(0))`?",
  "options": [
    "0",
    "True",
    "False",
    "Error"
  ],
  "correctOption": "C",
  "explanation": "In Python, 0 evaluates to False in a boolean context; any other number evaluates to True.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b85978acd9d9d6855d5"
  },
  "question": "What keyword is used to define a function in Python?",
  "options": [
    "function",
    "def",
    "method",
    "procedure"
  ],
  "correctOption": "B",
  "explanation": "`def` is the keyword used to create a function definition.",
  "tags": [
    "Python",
    "Data Types",
    "Control Flow",
    "Functions"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e6"
  },
  "question": "What is the primary purpose of the `volatile` keyword in Java?",
  "options": [
    "To prevent method overriding.",
    "To enforce thread safety for mutable objects.",
    "To indicate that a variable's value is stored in a specific memory location.",
    "To optimize garbage collection for a specific variable."
  ],
  "correctOption": "B",
  "explanation": "Ensures that changes to a variable are immediately visible to other threads, preventing data inconsistencies.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e5"
  },
  "question": "Which statement regarding Java's garbage collection is FALSE?",
  "options": [
    "Garbage collection reclaims memory occupied by unreachable objects.",
    "The JVM's garbage collector is deterministic and runs on a fixed schedule.",
    "Different garbage collection algorithms exist (e.g., mark-and-sweep, generational).",
    "System.gc() is a request, not a guarantee, of garbage collection."
  ],
  "correctOption": "B",
  "explanation": "The JVM's garbage collector is non-deterministic; its execution timing is not predictable.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e7"
  },
  "question": "Explain the difference between `HashMap` and `ConcurrentHashMap` in Java.",
  "options": [
    "They are functionally identical; `ConcurrentHashMap` is just a more descriptive name.",
    "`HashMap` is thread-safe, while `ConcurrentHashMap` is not.",
    "`ConcurrentHashMap` provides better performance for concurrent access compared to `HashMap`.",
    "`HashMap` allows null keys and values, while `ConcurrentHashMap` does not."
  ],
  "correctOption": "C",
  "explanation": "`ConcurrentHashMap` uses internal locking mechanisms to avoid concurrency issues, unlike `HashMap` which is not thread-safe.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e8"
  },
  "question": "How does Java's `java.util.concurrent.locks.ReentrantLock` differ fundamentally from synchronized blocks?",
  "options": [
    "They offer identical functionality; `ReentrantLock` is just a more modern alternative.",
    "`ReentrantLock` allows for more granular control over locking, including timed locks and interruptible locks.",
    "Synchronized blocks always have a finer granularity of locking than `ReentrantLock`.",
    "Only `ReentrantLock` supports the use of Condition objects for advanced synchronization."
  ],
  "correctOption": "B",
  "explanation": "`ReentrantLock` provides features like tryLock(), lockInterruptibly(), and timed waiting that synchronized blocks lack.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855e9"
  },
  "question": "Which design pattern is BEST suited for managing access to a limited resource (e.g., a database connection pool)?",
  "options": [
    "Factory Pattern",
    "Singleton Pattern",
    "Observer Pattern",
    "Decorator Pattern"
  ],
  "correctOption": "B",
  "explanation": "The Singleton pattern ensures only one instance of the resource manager exists, controlling access efficiently.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855eb"
  },
  "question": "In Java, what is the primary difference between a checked and an unchecked exception?",
  "options": [
    "Checked exceptions can be caught using a `try-catch` block, while unchecked exceptions cannot.",
    "Checked exceptions are runtime exceptions, and unchecked exceptions are compile-time exceptions.",
    "The compiler requires explicit handling (e.g., using `try-catch` or `throws`) for checked exceptions but not for unchecked exceptions.",
    "Unchecked exceptions always indicate programming errors, whereas checked exceptions signal recoverable conditions."
  ],
  "correctOption": "C",
  "explanation": "Checked exceptions (like `IOException`) must be declared or handled, while unchecked exceptions (like `NullPointerException`) do not require explicit handling at compile time.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855ea"
  },
  "question": "What is the significance of the `transient` keyword in Java serialization?",
  "options": [
    "It indicates that a field should be serialized using a custom serialization method.",
    "It marks a field as immutable, preventing accidental modification after serialization.",
    "It prevents a field from being serialized, making it unsuitable for storing in a persistent state.",
    "It ensures a field is serialized in a specific order relative to other fields."
  ],
  "correctOption": "C",
  "explanation": "Fields declared `transient` are excluded from the serialization process; their values are not saved or restored.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855ed"
  },
  "question": "What is a common strategy to optimize Java code for performance when dealing with large datasets?",
  "options": [
    "Always use nested loops for iteration.",
    "Employing efficient data structures like ArrayLists for all data.",
    "Using streams and parallel streams for efficient processing.",
    "Avoid using generics as they introduce runtime overhead."
  ],
  "correctOption": "C",
  "explanation": "Streams and parallel streams can leverage multi-core processors, significantly speeding up operations on large datasets.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855ec"
  },
  "question": "How can you ensure thread safety when multiple threads access and modify the same object in Java, beyond using synchronized blocks or `ReentrantLock`?",
  "options": [
    "Using `volatile` keyword for all fields.",
    "Employing Immutable objects.",
    "Using `ThreadLocal` to store object copies per thread.",
    "Re-designing the system to eliminate shared mutable state entirely."
  ],
  "correctOption": "D",
  "explanation": "This is the most robust solution; removing shared mutable state eliminates the root cause of concurrency problems.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b91978acd9d9d6855ee"
  },
  "question": "What is the purpose of the `java.lang.instrument` package?",
  "options": [
    "To facilitate debugging and profiling of Java applications.",
    "To provide tools for memory management and garbage collection tuning.",
    "To manage the classpath during the runtime of a Java application.",
    "To enable manipulation of loaded class bytecode at runtime."
  ],
  "correctOption": "D",
  "explanation": "This package allows agents to intercept and modify the bytecode of classes during loading, altering their behavior.",
  "tags": [
    "Java",
    "Multithreading",
    "Collections",
    "Generics"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685600"
  },
  "question": "What is the difference between `==` and `===` in JavaScript?",
  "options": [
    "No difference.",
    "`==` checks for value equality, `===` checks for strict equality (value and type).",
    "`==` checks for type equality, `===` checks for value equality.",
    "`===` is faster than `==`."
  ],
  "correctOption": "B",
  "explanation": "`==` performs type coercion before comparison, while `===` performs a strict comparison without type coercion.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d6855ff"
  },
  "question": "What will be the output of the following code: `console.log(typeof null);`?",
  "options": [
    "null",
    "object",
    "undefined",
    "string"
  ],
  "correctOption": "B",
  "explanation": "This is a common JavaScript quirk.  `typeof null` returns 'object', a historical error that remains for backward compatibility.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d6855fe"
  },
  "question": "Which method is used to convert a string to an array of characters in JavaScript?",
  "options": [
    "string.split()",
    "string.toCharArray()",
    "string.toArray()",
    "string.split('')"
  ],
  "correctOption": "D",
  "explanation": "`string.split('')` splits the string into an array of individual characters using an empty string as the separator.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d6855fd"
  },
  "question": "What is the primary purpose of the `this` keyword in JavaScript?",
  "options": [
    "To declare a variable.",
    "To refer to the current function.",
    "To refer to the current object's context.",
    "To define a global variable."
  ],
  "correctOption": "C",
  "explanation": "`this` refers to the object that is executing the current function. Its value depends on how the function is called.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685602"
  },
  "question": "What will the following code output?  `console.log([1, 2, 3].map(x => x * 2));`",
  "options": [
    "[1, 2, 3]",
    "[2, 4, 6]",
    "[1, 4, 9]",
    "Error"
  ],
  "correctOption": "B",
  "explanation": "The `map()` method applies the provided function to each element of the array and returns a new array with the results.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685604"
  },
  "question": "How can you prevent default browser behavior on an event?",
  "options": [
    "Using `preventDefault()`",
    "Using `stopPropagation()`",
    "Using `return false;`",
    "Both A and C are correct."
  ],
  "correctOption": "D",
  "explanation": "Both `preventDefault()` (more modern) and `return false;` (older method) can stop default browser actions from an event handler.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685605"
  },
  "question": "What is the purpose of closures in JavaScript?",
  "options": [
    "To improve code readability.",
    "To create private variables within functions.",
    "To enhance function performance.",
    "To make functions asynchronous."
  ],
  "correctOption": "B",
  "explanation": "Closures allow inner functions to access variables from their outer (enclosing) function's scope, even after the outer function has finished executing, creating private variables.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685603"
  },
  "question": "What does the `reduce()` method do in JavaScript?",
  "options": [
    "Filters elements from an array.",
    "Maps elements to new values.",
    "Reduces an array to a single value.",
    "Sorts elements in an array."
  ],
  "correctOption": "C",
  "explanation": "`reduce()` iterates through an array and accumulates the result into a single value, using a callback function.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685606"
  },
  "question": "Explain the difference between synchronous and asynchronous JavaScript operations.",
  "options": [
    "Synchronous operations wait for each task to complete before moving on, while asynchronous operations run concurrently.",
    "Synchronous operations run concurrently, while asynchronous operations wait for each task to complete.",
    "There is no difference.",
    "Synchronous operations handle user interface updates, while asynchronous operations handle network requests."
  ],
  "correctOption": "A",
  "explanation": "Synchronous code executes line by line, blocking further execution until each step finishes. Asynchronous code allows multiple operations to proceed without waiting for each other, utilizing callbacks, promises, or async/await.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84b9c978acd9d9d685601"
  },
  "question": "How do you create a new array in JavaScript?",
  "options": [
    "newArray = new Array();",
    "newArray = [];",
    "newArray = Array();",
    "All of the above are correct."
  ],
  "correctOption": "D",
  "explanation": "All three options create a new empty array. The literal notation `[]` is generally preferred for readability.",
  "tags": [
    "JavaScript",
    "DOM",
    "Async Programming",
    "ES6+"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685615"
  },
  "question": "What is the purpose of the `const` keyword when applied to a member function in C++?",
  "options": [
    "It prevents the member function from modifying any member variables of the class.",
    "It makes the member function static.",
    "It prevents the member function from being inherited by derived classes.",
    "It makes the member function inline."
  ],
  "correctOption": "A",
  "explanation": "A `const` member function promises not to modify the object's state.  It cannot modify any non-`mutable` member variables.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685616"
  },
  "question": "Which of the following is NOT a valid way to initialize a `std::vector`?",
  "options": [
    "std::vector<int> vec = {1, 2, 3};",
    "std::vector<int> vec(5);",
    "std::vector<int> vec(5, 10);",
    "std::vector<int> vec(5, {1,2});"
  ],
  "correctOption": "D",
  "explanation": "You cannot initialize a vector of integers with a vector of integers as the second argument of the constructor.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685618"
  },
  "question": "What is polymorphism in C++?",
  "options": [
    "The ability of a class to inherit from multiple base classes.",
    "The ability of an object to take on many forms.",
    "The ability to overload operators.",
    "The ability to use templates."
  ],
  "correctOption": "B",
  "explanation": "Polymorphism allows objects of different classes to be treated as objects of a common type.  This is often achieved through virtual functions.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685619"
  },
  "question": "What is the difference between a class and a struct in C++?",
  "options": [
    "Structs are always smaller than classes.",
    "Structs can't have member functions, only classes can.",
    "The default access specifier for members is `public` in structs and `private` in classes.",
    "There is no practical difference between structs and classes in C++."
  ],
  "correctOption": "C",
  "explanation": "The only difference is the default access specifier: `public` for structs, `private` for classes.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d685617"
  },
  "question": "What does the `new` operator do in C++?",
  "options": [
    "It declares a variable.",
    "It allocates memory dynamically on the heap.",
    "It deallocates memory from the stack.",
    "It initializes a static variable."
  ],
  "correctOption": "B",
  "explanation": "The `new` operator dynamically allocates memory;  `delete` is used for deallocation.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561c"
  },
  "question": "What does `std::move` do?",
  "options": [
    "It physically moves an object in memory.",
    "It creates a copy of an object.",
    "It transfers ownership of an object, avoiding unnecessary copying.",
    "It deletes an object."
  ],
  "correctOption": "C",
  "explanation": "`std::move` casts an object to an rvalue reference, allowing move semantics to be used, which typically avoids copying.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561b"
  },
  "question": "What is a lambda expression in C++?",
  "options": [
    "A type of loop.",
    "A way to define anonymous functions.",
    "A type of pointer.",
    "A form of exception handling."
  ],
  "correctOption": "B",
  "explanation": "Lambda expressions provide a concise way to create unnamed functions, often used with standard algorithms.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561d"
  },
  "question": "How do you prevent a copy constructor from being called?",
  "options": [
    "Declare the copy constructor as private and don't define it.",
    "Use the `delete` keyword.",
    "Use the `override` keyword.",
    "Declare the class as `final`."
  ],
  "correctOption": "A",
  "explanation": "Declaring the copy constructor as private prevents external entities from creating copies;  the compiler will give an error if you attempt a copy.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561a"
  },
  "question": "Which keyword is used to prevent a class from being inherited from?",
  "options": [
    "static",
    "virtual",
    "final",
    "private"
  ],
  "correctOption": "C",
  "explanation": "The `final` keyword (C++11 and later) prevents inheritance.  `private` inheritance restricts access, but doesn't prevent inheritance itself.",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84ba8978acd9d9d68561e"
  },
  "question": "What is RAII (Resource Acquisition Is Initialization)?",
  "options": [
    "A design pattern that uses smart pointers to manage resources.",
    "A method for initializing static variables.",
    "A technique for improving code readability.",
    "A type of exception handling."
  ],
  "correctOption": "A",
  "explanation": "RAII ties resource allocation to object lifetime, ensuring resources are automatically released when the object is destroyed (e.g., using smart pointers).",
  "tags": [
    "C++",
    "Memory Management",
    "STL",
    "Templates"
  ],
  "domain": "Computer Science - Programming Languages",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d68562e"
  },
  "question": "What is a fundamental characteristic of an array?",
  "options": [
    "Elements are accessed randomly",
    "Elements are stored contiguously in memory",
    "Elements are sorted automatically",
    "Elements can be of different data types"
  ],
  "correctOption": "B",
  "explanation": "Arrays store elements in consecutive memory locations, enabling direct access via index.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685630"
  },
  "question": "Which data structure is best suited for representing hierarchical relationships?",
  "options": [
    "Array",
    "Linked List",
    "Queue",
    "Tree"
  ],
  "correctOption": "D",
  "explanation": "Trees naturally represent hierarchical structures with nodes and branches showcasing parent-child relationships.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d68562f"
  },
  "question": "Which data structure uses pointers to connect elements?",
  "options": [
    "Array",
    "Stack",
    "Linked List",
    "Queue"
  ],
  "correctOption": "C",
  "explanation": "Linked lists utilize pointers to link each node to the next, unlike arrays which use contiguous memory.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685632"
  },
  "question": "In a binary tree, what is a node with no children called?",
  "options": [
    "Root",
    "Parent",
    "Leaf",
    "Branch"
  ],
  "correctOption": "C",
  "explanation": "Leaf nodes are terminal nodes in a binary tree, lacking any child nodes.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685634"
  },
  "question": "Which data structure allows efficient insertion and deletion of elements at any position?",
  "options": [
    "Array",
    "Linked List",
    "Stack",
    "Queue"
  ],
  "correctOption": "B",
  "explanation": "Linked lists offer flexibility in inserting/deleting elements, unlike arrays which require shifting elements.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685631"
  },
  "question": "What is the primary operation performed on a queue?",
  "options": [
    "Push",
    "Pop",
    "Enqueue",
    "Dequeue"
  ],
  "correctOption": "C",
  "explanation": "Enqueue adds an element to the rear of the queue, while dequeue removes from the front (FIFO).",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d68562d"
  },
  "question": "Which data structure follows the LIFO (Last-In, First-Out) principle?",
  "options": [
    "Queue",
    "Stack",
    "Linked List",
    "Tree"
  ],
  "correctOption": "B",
  "explanation": "A stack operates on the LIFO principle, meaning the last element added is the first one removed.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685633"
  },
  "question": "What does FIFO stand for in the context of data structures?",
  "options": [
    "First In, First Out",
    "Last In, First Out",
    "First Out, First In",
    "Last Out, First In"
  ],
  "correctOption": "A",
  "explanation": "FIFO (First-In, First-Out) is the operating principle for queues.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685635"
  },
  "question": "A graph where all edges have the same weight is called:",
  "options": [
    "Weighted Graph",
    "Unweighted Graph",
    "Directed Graph",
    "Undirected Graph"
  ],
  "correctOption": "B",
  "explanation": "An unweighted graph doesn't assign weights to its edges; all edges are considered equal.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bb1978acd9d9d685636"
  },
  "question": "What is the time complexity of accessing an element in an array using its index?",
  "options": [
    "O(n)",
    "O(log n)",
    "O(1)",
    "O(n^2)"
  ],
  "correctOption": "C",
  "explanation": "Accessing an array element by index is a constant time operation, independent of the array size.",
  "tags": [
    "Arrays",
    "Linked Lists",
    "Stacks",
    "Queues"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685645"
  },
  "question": "Which data structure is most efficient for implementing a LRU (Least Recently Used) cache?",
  "options": [
    "A. Binary Search Tree",
    "B. Doubly Linked List with a Hash Map",
    "C. Heap",
    "D. Stack"
  ],
  "correctOption": "B",
  "explanation": "A doubly linked list maintains order of access, while a hash map provides O(1) lookup for quick eviction of least recently used elements.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685649"
  },
  "question": "Consider implementing a graph using an adjacency matrix.  What is the space complexity for a graph with V vertices and E edges?",
  "options": [
    "A. O(V)",
    "B. O(E)",
    "C. O(V^2)",
    "D. O(V + E)"
  ],
  "correctOption": "C",
  "explanation": "An adjacency matrix requires a V x V matrix to represent all possible edges, resulting in O(V^2) space complexity.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685647"
  },
  "question": "You need to efficiently manage a dynamic set of integers where insertions, deletions, and finding the minimum element must all be O(1) on average.  Which data structure is best suited?",
  "options": [
    "A. Sorted Array",
    "B. Skip List",
    "C. Self-Balancing Binary Search Tree",
    "D. Hash Table with a Min-Heap"
  ],
  "correctOption": "D",
  "explanation": "A hash table allows for O(1) average-case insertion and deletion.  A min-heap tracks the minimum in O(1) time.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685648"
  },
  "question": "A B-tree of order m is designed to optimize disk access. What is the maximum number of children a node in a B-tree of order 5 can have?",
  "options": [
    "A. 4",
    "B. 5",
    "C. 6",
    "D. 10"
  ],
  "correctOption": "C",
  "explanation": "A B-tree node of order m can have a maximum of m children.  Therefore, a B-tree of order 5 can have a maximum of 5 children.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d685646"
  },
  "question": "What is the time complexity of finding the kth smallest element in a min-heap of size n using a standard heap algorithm?",
  "options": [
    "A. O(n)",
    "B. O(k log n)",
    "C. O(n log k)",
    "D. O(log n)"
  ],
  "correctOption": "B",
  "explanation": "Extracting the kth smallest element requires k extract-min operations, each taking O(log n) time in a min-heap.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564a"
  },
  "question": "In a Trie data structure used for efficient string searching, how are prefixes handled to optimize search time?",
  "options": [
    "A.  Using linked lists to store prefixes.",
    "B. Using a separate hash table for prefixes.",
    "C.  Storing prefixes at the nodes of the Trie.",
    "D. Prefixes are not explicitly stored; only suffixes are."
  ],
  "correctOption": "C",
  "explanation": "Trie nodes store prefixes, allowing efficient search by traversing down the tree based on matching characters.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564b"
  },
  "question": "What is the worst-case time complexity for finding the closest pair of points in a two-dimensional plane using a divide-and-conquer approach?",
  "options": [
    "A. O(n log n)",
    "B. O(n^2)",
    "C. O(n log^2 n)",
    "D. O(n)"
  ],
  "correctOption": "A",
  "explanation": "The divide-and-conquer algorithm for closest pair of points achieves O(n log n) worst-case time complexity.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564c"
  },
  "question": "What data structure is typically used to implement Dijkstra's algorithm for finding the shortest path in a graph?",
  "options": [
    "A. Stack",
    "B. Queue",
    "C. Priority Queue",
    "D. Binary Search Tree"
  ],
  "correctOption": "C",
  "explanation": "A priority queue efficiently manages vertices based on their distances from the source, allowing for selection of the vertex with the smallest distance at each step.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564d"
  },
  "question": "Given a self-balancing AVL tree with n nodes, what is the maximum height of the tree?",
  "options": [
    "A. n",
    "B. log n",
    "C. 1.44 log n",
    "D. n log n"
  ],
  "correctOption": "C",
  "explanation": "The height of an AVL tree is guaranteed to be less than or equal to 1.44 log n, due to its balancing properties.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bbb978acd9d9d68564e"
  },
  "question": "Which data structure is best suited for representing a sparse matrix where most of the elements are zero?",
  "options": [
    "A. Adjacency Matrix",
    "B. Adjacency List",
    "C. Compressed Sparse Row (CSR) format",
    "D. Dense Array"
  ],
  "correctOption": "C",
  "explanation": "CSR format efficiently stores only the non-zero elements, significantly reducing memory usage compared to representing the entire matrix.",
  "tags": [
    "Trees",
    "Graphs",
    "Heaps",
    "Hash Tables"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d68565d"
  },
  "question": "Which data structure is most efficient for implementing a LRU (Least Recently Used) cache?",
  "options": [
    "A. Binary Search Tree",
    "B. Singly Linked List",
    "C. Doubly Linked List with a Hash Map",
    "D. Heap"
  ],
  "correctOption": "C",
  "explanation": "A doubly linked list maintains order of access, while a hash map provides O(1) lookup for quick eviction of least recently used items.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d68565e"
  },
  "question": "You need to implement a data structure that supports efficient insertion, deletion, and retrieval of elements based on their priority. Which data structure would be the most suitable?",
  "options": [
    "A. Queue",
    "B. Stack",
    "C. Binary Search Tree",
    "D. Priority Queue (Heap)"
  ],
  "correctOption": "D",
  "explanation": "Priority Queues, typically implemented as heaps, provide O(log n) time complexity for insertion, deletion, and retrieval of the highest-priority element.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685661"
  },
  "question": "Which data structure is best suited for representing a hierarchical relationship between data, such as a file system or an organizational chart?",
  "options": [
    "A. Array",
    "B. Stack",
    "C. Queue",
    "D. Tree"
  ],
  "correctOption": "D",
  "explanation": "Trees naturally model hierarchical relationships with parent-child nodes, allowing efficient traversal and manipulation of the hierarchical structure.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685662"
  },
  "question": "Explain the difference between a trie and a hash table, considering their efficiency for prefix searches?",
  "options": [
    "A. Both offer O(1) prefix search time complexity.",
    "B. Hash tables are more efficient for prefix searches than tries.",
    "C. Tries are more efficient for prefix searches than hash tables.",
    "D.  Neither is efficient for prefix searches."
  ],
  "correctOption": "C",
  "explanation": "Tries allow for efficient prefix searching in O(m) time where m is the length of the prefix, while hash tables require iterating through all keys.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685660"
  },
  "question": "What is the time complexity of searching for an element in a balanced AVL tree?",
  "options": [
    "A. O(n)",
    "B. O(log n)",
    "C. O(n^2)",
    "D. O(1)"
  ],
  "correctOption": "B",
  "explanation": "Balanced AVL trees maintain a logarithmic height, resulting in O(log n) time complexity for search, insertion, and deletion operations.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d68565f"
  },
  "question": "Consider a scenario where you need to store and retrieve data based on a key-value pair, but you also need to maintain the order of insertion. What data structure would best suit this need?",
  "options": [
    "A. Hash Table",
    "B. Ordered Array",
    "C. Linked List",
    "D. Ordered Map (e.g., TreeMap in Java)"
  ],
  "correctOption": "D",
  "explanation": "Ordered Maps maintain key-value pairs while preserving the insertion order, providing efficient retrieval by key and ordered traversal.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685663"
  },
  "question": "In graph traversal algorithms, which algorithm explores the graph by prioritizing breadth before depth?",
  "options": [
    "A. Depth-First Search (DFS)",
    "B. Breadth-First Search (BFS)",
    "C. Dijkstra's Algorithm",
    "D. A* Search"
  ],
  "correctOption": "B",
  "explanation": "Breadth-First Search (BFS) uses a queue to visit all neighbors of a node before moving to the next level, ensuring breadth-first exploration.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685666"
  },
  "question": "You need to design a system that efficiently manages a large number of concurrent requests.  Which data structure could efficiently handle this concurrent access to shared resources?",
  "options": [
    "A. Simple Linked List",
    "B. Concurrent Hash Map",
    "C. Single Stack",
    "D. Unordered Array"
  ],
  "correctOption": "B",
  "explanation": "Concurrent hash maps are designed to handle multiple threads accessing and modifying the data structure concurrently without causing race conditions or data corruption.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685665"
  },
  "question": "Which data structure is particularly well-suited for implementing an undo/redo functionality in a text editor?",
  "options": [
    "A. Queue",
    "B. Stack",
    "C. Heap",
    "D. Trie"
  ],
  "correctOption": "B",
  "explanation": "Stacks' LIFO (Last-In, First-Out) nature makes them ideal for implementing undo/redo, as the most recent actions are undone/redone first.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bc8978acd9d9d685664"
  },
  "question": "What is the primary advantage of using a self-balancing binary search tree (like AVL or Red-Black) over a regular binary search tree?",
  "options": [
    "A. Faster insertion.",
    "B. Guaranteed logarithmic time complexity for all operations.",
    "C. Lower memory consumption.",
    "D. Ability to store duplicate keys."
  ],
  "correctOption": "B",
  "explanation": "Self-balancing trees guarantee logarithmic time complexity for search, insertion, and deletion, unlike regular BSTs which can degrade to linear time in worst-case scenarios.",
  "tags": [
    "AVL Trees",
    "Red-Black Trees",
    "B-Trees",
    "Splay Trees"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685675"
  },
  "question": "Which algorithm is best suited for searching a sorted array?",
  "options": [
    "Linear Search",
    "Bubble Sort",
    "Binary Search",
    "Merge Sort"
  ],
  "correctOption": "C",
  "explanation": "Binary search efficiently searches a sorted array by repeatedly dividing the search interval in half.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685676"
  },
  "question": "What is the time complexity of a well-implemented quick sort in the average case?",
  "options": [
    "O(n)",
    "O(n log n)",
    "O(n^2)",
    "O(log n)"
  ],
  "correctOption": "B",
  "explanation": "Quick sort's average time complexity is O(n log n), while its worst-case is O(n^2).",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685677"
  },
  "question": "Which data structure is commonly used to implement a breadth-first search (BFS)?",
  "options": [
    "Stack",
    "Queue",
    "Heap",
    "Linked List"
  ],
  "correctOption": "B",
  "explanation": "A queue is used in BFS to maintain the order of nodes to be visited, ensuring a level-by-level traversal.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685678"
  },
  "question": "What does the term 'greedy algorithm' refer to?",
  "options": [
    "An algorithm that always makes the locally optimal choice.",
    "An algorithm that uses dynamic programming.",
    "An algorithm that guarantees the globally optimal solution.",
    "An algorithm that uses backtracking."
  ],
  "correctOption": "A",
  "explanation": "Greedy algorithms make locally optimal choices at each step, hoping to find a globally optimal solution, but not guaranteeing it.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567a"
  },
  "question": "What is the primary difference between a recursive and an iterative algorithm?",
  "options": [
    "Recursive algorithms use loops; iterative algorithms use function calls.",
    "Recursive algorithms use function calls; iterative algorithms use loops.",
    "Recursive algorithms are always faster.",
    "Iterative algorithms always use less memory."
  ],
  "correctOption": "B",
  "explanation": "Recursive algorithms solve a problem by breaking it down into smaller, self-similar subproblems, using function calls; iterative algorithms use loops.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d685679"
  },
  "question": "In graph algorithms, Dijkstra's algorithm is used to find:",
  "options": [
    "Shortest paths between all pairs of nodes",
    "A minimum spanning tree",
    "Strongly connected components",
    "The shortest path from a single source node to all other nodes"
  ],
  "correctOption": "D",
  "explanation": "Dijkstra's algorithm efficiently computes the shortest paths from a single source node to all other reachable nodes in a weighted graph.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567b"
  },
  "question": "Which algorithm is known for its efficiency in finding the kth smallest element in an unsorted array?",
  "options": [
    "Merge Sort",
    "Quick Sort",
    "Heap Sort",
    "Selection Algorithm (like Quickselect)"
  ],
  "correctOption": "D",
  "explanation": "Selection algorithms, such as Quickselect, are designed to efficiently find the kth smallest (or largest) element without fully sorting the array.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567d"
  },
  "question": "Dynamic programming optimizes solutions by:",
  "options": [
    "Dividing a problem into independent subproblems.",
    "Making locally optimal choices at each step.",
    "Storing and reusing solutions to overlapping subproblems.",
    "Using backtracking to explore all possible solutions."
  ],
  "correctOption": "C",
  "explanation": "Dynamic programming avoids redundant computations by storing and reusing solutions to common subproblems.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567e"
  },
  "question": "The traveling salesman problem (TSP) is an example of which type of problem?",
  "options": [
    "Greedy problem",
    "Dynamic Programming problem",
    "NP-hard problem",
    "Linear Programming problem"
  ],
  "correctOption": "C",
  "explanation": "The TSP is a classic example of an NP-hard problem, meaning there's no known polynomial-time algorithm to solve it optimally for all instances.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bd2978acd9d9d68567c"
  },
  "question": "A graph with cycles is called:",
  "options": [
    "Acyclic",
    "Directed",
    "Undirected",
    "Cyclic"
  ],
  "correctOption": "D",
  "explanation": "A cyclic graph contains at least one cycle, a path that starts and ends at the same node.",
  "tags": [
    "QuickSort",
    "MergeSort",
    "HeapSort",
    "Complexity Analysis"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d68568e"
  },
  "question": "What is the primary advantage of using a Fibonacci heap over a binary heap in Dijkstra's algorithm?",
  "options": [
    "A. Faster node deletion.",
    "B. Better space complexity.",
    "C. Simpler implementation.",
    "D.  Support for decrease-key operation in amortized O(1) time."
  ],
  "correctOption": "D",
  "explanation": "Fibonacci heaps provide amortized O(1) decrease-key, crucial for Dijkstra's efficiency on sparse graphs, unlike binary heaps' O(log n).",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d68568d"
  },
  "question": "Which of the following statements is TRUE regarding the time complexity of finding the kth smallest element in an unsorted array using QuickSelect?",
  "options": [
    "A. Always O(n log n)",
    "B. Always O(n)",
    "C. Average case O(n), worst case O(n^2)",
    "D. Average case O(n log n), worst case O(n^2)"
  ],
  "correctOption": "C",
  "explanation": "QuickSelect's average-case time complexity is O(n), but a poor pivot selection can lead to a worst-case O(n^2) scenario.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685690"
  },
  "question": "Which algorithm uses dynamic programming to find the longest common subsequence (LCS) of two sequences?",
  "options": [
    "A. Greedy algorithm",
    "B.  Merge sort",
    "C.  Needleman-Wunsch algorithm",
    "D.  KMP algorithm"
  ],
  "correctOption": "C",
  "explanation": "The Needleman-Wunsch algorithm employs dynamic programming to build an optimal alignment matrix and efficiently determine the LCS.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d68568f"
  },
  "question": "Given a directed acyclic graph (DAG), which algorithm is most suitable for finding the shortest path from a single source vertex to all other vertices?",
  "options": [
    "A. Bellman-Ford algorithm",
    "B. Dijkstra's algorithm",
    "C. Topological sort followed by a single-pass relaxation",
    "D. Floyd-Warshall algorithm"
  ],
  "correctOption": "C",
  "explanation": "Topological sort orders the vertices; a single pass then suffices for shortest path calculation due to the acyclic nature, unlike other algorithms' iterative approaches.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685691"
  },
  "question": "Consider a problem that exhibits optimal substructure and overlapping subproblems. Which algorithmic paradigm is best suited to solve it?",
  "options": [
    "A. Divide and Conquer",
    "B. Greedy approach",
    "C. Dynamic Programming",
    "D. Backtracking"
  ],
  "correctOption": "C",
  "explanation": "Dynamic programming excels at problems with optimal substructure (optimal solution built from optimal subsolutions) and overlapping subproblems (repetitive subcomputations).",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685692"
  },
  "question": "What is the primary difference between a heuristic and an admissible heuristic in A* search?",
  "options": [
    "A. A heuristic is always admissible.",
    "B. An admissible heuristic never overestimates the cost to reach the goal.",
    "C. An admissible heuristic is always more computationally expensive.",
    "D. Heuristics are used in A*, but admissible heuristics are only used in Dijkstra's algorithm."
  ],
  "correctOption": "B",
  "explanation": "An admissible heuristic guarantees that the estimated cost to reach the goal is never greater than the actual cost, ensuring A* finds the optimal solution.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685693"
  },
  "question": "In the context of NP-completeness, which statement is accurate regarding the relationship between P and NP?",
  "options": [
    "A. P = NP has been proven true.",
    "B. P = NP has been proven false.",
    "C.  It's currently unknown whether P = NP or P ≠ NP.",
    "D.  NP problems are always solvable in polynomial time."
  ],
  "correctOption": "C",
  "explanation": "The P versus NP problem is a major unsolved problem in computer science. Whether polynomial-time solutions exist for all NP problems is currently unknown.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685695"
  },
  "question": "What is the primary purpose of amortized analysis in algorithm analysis?",
  "options": [
    "A. To determine the average-case time complexity.",
    "B. To analyze the worst-case time complexity of a single operation.",
    "C. To analyze the average time complexity of a sequence of operations.",
    "D. To determine the space complexity of an algorithm."
  ],
  "correctOption": "C",
  "explanation": "Amortized analysis considers the average time complexity over a sequence of operations, even if individual operations might have high complexity, providing a more realistic performance picture.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685694"
  },
  "question": "Which algorithm efficiently solves the all-pairs shortest path problem in a weighted directed graph with no negative cycles?",
  "options": [
    "A. Breadth-First Search",
    "B. Depth-First Search",
    "C. Floyd-Warshall algorithm",
    "D. Prim's algorithm"
  ],
  "correctOption": "C",
  "explanation": "The Floyd-Warshall algorithm uses dynamic programming to compute shortest paths between all pairs of vertices in a graph, handling positive and negative weights (excluding negative cycles).",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bdd978acd9d9d685696"
  },
  "question": "Which data structure is most commonly used to implement a priority queue efficiently for algorithms like Dijkstra's and Prim's?",
  "options": [
    "A.  Linked List",
    "B.  Array",
    "C.  Binary Heap",
    "D.  Hash Table"
  ],
  "correctOption": "C",
  "explanation": "Binary heaps efficiently support the priority queue operations (insertion, deletion of minimum element) required for Dijkstra's and Prim's algorithms with logarithmic time complexity.",
  "tags": [
    "DFS",
    "BFS",
    "Dijkstra",
    "A*"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856a5"
  },
  "question": "Which of the following statements is TRUE regarding the time complexity of finding the kth smallest element in an unsorted array using QuickSelect?",
  "options": [
    "A. Always O(n), regardless of the pivot selection.",
    "B.  Worst-case O(n^2), but average-case O(n).",
    "C. Always O(n log n), due to inherent sorting.",
    "D.  Best-case O(n), worst-case O(n log n)."
  ],
  "correctOption": "B",
  "explanation": "QuickSelect's average-case time complexity is O(n), but a poor pivot selection can lead to a worst-case O(n^2) scenario. It doesn't inherently sort the entire array.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856a7"
  },
  "question": "What is the primary advantage of using a Fibonacci heap in Dijkstra's algorithm compared to a binary heap?",
  "options": [
    "A. Reduced space complexity.",
    "B. Improved worst-case time complexity for decrease-key operations.",
    "C.  Simpler implementation.",
    "D. Better performance for graphs with many edges."
  ],
  "correctOption": "B",
  "explanation": "Fibonacci heaps offer amortized O(1) time for decrease-key operations, improving the overall performance of Dijkstra's algorithm, especially in dense graphs.  Binary heaps have O(log n) for decrease-key.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856ad"
  },
  "question": "In the context of NP-completeness, which statement is TRUE?",
  "options": [
    "A. All NP problems are also P problems.",
    "B. If a problem is NP-complete, it can always be solved in polynomial time.",
    "C.  If P=NP, then every NP-complete problem is solvable in polynomial time.",
    "D. NP-complete problems are always easier to solve than NP-hard problems."
  ],
  "correctOption": "C",
  "explanation": "If P=NP (a major unsolved problem in computer science), it would imply that all problems in NP, including NP-complete problems, are solvable in polynomial time.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856a9"
  },
  "question": "You are given a large dataset and need to find frequent itemsets.  Which algorithm is best suited for this task, considering efficiency and scalability?",
  "options": [
    "A. Breadth-First Search",
    "B. Apriori Algorithm",
    "C. Depth-First Search",
    "D. Kruskal's Algorithm"
  ],
  "correctOption": "B",
  "explanation": "The Apriori algorithm efficiently finds frequent itemsets by using the property that if an itemset is infrequent, then all of its supersets are also infrequent. It's widely used for large datasets.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856a6"
  },
  "question": "Given a graph represented by an adjacency matrix, which algorithm would be MOST efficient for finding the shortest path between all pairs of vertices?",
  "options": [
    "A. Dijkstra's Algorithm",
    "B. Bellman-Ford Algorithm",
    "C. Floyd-Warshall Algorithm",
    "D. Prim's Algorithm"
  ],
  "correctOption": "C",
  "explanation": "Floyd-Warshall efficiently solves the all-pairs shortest path problem in O(V^3) time, where V is the number of vertices.  Dijkstra's is single-source, Bellman-Ford handles negative weights but is slower, and Prim's is for minimum spanning trees.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856ab"
  },
  "question": "Which algorithm is best suited for finding the strongly connected components in a directed graph?",
  "options": [
    "A. Dijkstra's Algorithm",
    "B. Topological Sort",
    "C. Kosaraju's Algorithm",
    "D. Prim's Algorithm"
  ],
  "correctOption": "C",
  "explanation": "Kosaraju's algorithm (or Tarjan's algorithm, another efficient option) is specifically designed for finding strongly connected components in a directed graph using Depth-First Search and graph reversal.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856aa"
  },
  "question": "What is the primary difference between a heuristic and an admissible heuristic in A* search?",
  "options": [
    "A. Heuristics are deterministic, admissible heuristics are probabilistic.",
    "B. Admissible heuristics never overestimate the cost to reach the goal.",
    "C. Heuristics guide the search, admissible heuristics prune the search space.",
    "D. Heuristics are used in informed search, admissible heuristics are used in uninformed search."
  ],
  "correctOption": "B",
  "explanation": "An admissible heuristic is one that never overestimates the actual cost to reach the goal. This guarantees that A* search will find the optimal solution if one exists.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856ae"
  },
  "question": "How does the Master Theorem help analyze the time complexity of divide-and-conquer algorithms?",
  "options": [
    "A. By recursively solving the recurrence relation.",
    "B. By providing a closed-form solution for specific recurrence relations.",
    "C. By analyzing the base case of the recursion.",
    "D. By approximating the complexity using experimental data."
  ],
  "correctOption": "B",
  "explanation": "The Master Theorem provides a direct formula to determine the time complexity of divide-and-conquer algorithms whose recurrence relations fit a specific pattern.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bea978acd9d9d6856ac"
  },
  "question": "Consider the problem of finding the maximum flow in a network.  Which algorithm provides an optimal solution but might not be the most efficient for very large graphs?",
  "options": [
    "A. Ford-Fulkerson Algorithm",
    "B. Edmonds-Karp Algorithm",
    "C. Dinic's Algorithm",
    "D. Push-Relabel Algorithm"
  ],
  "correctOption": "A",
  "explanation": "The Ford-Fulkerson algorithm guarantees finding the maximum flow but its runtime depends on the augmenting path selection.  Edmonds-Karp, Dinic's, and Push-Relabel offer better performance guarantees.",
  "tags": [
    "Memoization",
    "Tabulation",
    "Optimal Substructure",
    "Overlapping Subproblems"
  ],
  "domain": "Computer Science - DSA",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856b8"
  },
  "question": "Which SQL keyword is used to select data from a database?",
  "options": [
    "SELECT",
    "INSERT",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "A",
  "explanation": "The SELECT statement is fundamental in SQL for retrieving data.  Other keywords are used for modifying data.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856bb"
  },
  "question": "Which clause is used to filter records in a SQL SELECT statement?",
  "options": [
    "WHERE",
    "FROM",
    "GROUP BY",
    "ORDER BY"
  ],
  "correctOption": "A",
  "explanation": "The WHERE clause specifies conditions to filter the results returned by SELECT.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856ba"
  },
  "question": "Which SQL command is used to add new data into a table?",
  "options": [
    "SELECT",
    "INSERT INTO",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "B",
  "explanation": "INSERT INTO is used to insert new rows into an existing table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856be"
  },
  "question": "Which SQL command is used to delete data from a table?",
  "options": [
    "SELECT",
    "INSERT INTO",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "D",
  "explanation": "DELETE removes rows from a table based on specified criteria.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856bc"
  },
  "question": "What does the asterisk (*) represent in a SELECT statement?",
  "options": [
    "A specific column",
    "All columns",
    "No columns",
    "The table name"
  ],
  "correctOption": "B",
  "explanation": "Using * in SELECT selects all columns from the specified table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856bd"
  },
  "question": "Which SQL command is used to modify existing data in a table?",
  "options": [
    "SELECT",
    "INSERT INTO",
    "UPDATE",
    "DELETE"
  ],
  "correctOption": "C",
  "explanation": "The UPDATE statement alters existing rows within a table.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856b9"
  },
  "question": "What does SQL stand for?",
  "options": [
    "Structured Query Language",
    "Simple Query Language",
    "Statistical Query Language",
    "Standard Query Language"
  ],
  "correctOption": "A",
  "explanation": "SQL's full name is Structured Query Language, a language for managing and manipulating databases.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856bf"
  },
  "question": "The command `SELECT COUNT(*) FROM employees;` will return what?",
  "options": [
    "The names of all employees",
    "The number of employees",
    "The salary of all employees",
    "The employee IDs"
  ],
  "correctOption": "B",
  "explanation": "COUNT(*) counts all rows in the specified table (employees in this case).",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856c0"
  },
  "question": "Which clause orders the results of a SELECT query?",
  "options": [
    "WHERE",
    "FROM",
    "GROUP BY",
    "ORDER BY"
  ],
  "correctOption": "D",
  "explanation": "ORDER BY sorts the result set according to the specified column(s).",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bf2978acd9d9d6856c1"
  },
  "question": "What is a primary key in a database table?",
  "options": [
    "A column that can contain NULL values",
    "A column that can contain duplicate values",
    "A column that uniquely identifies each row",
    "A column that is not essential for the table"
  ],
  "correctOption": "C",
  "explanation": "A primary key is a unique identifier for each record within a database table ensuring data integrity.",
  "tags": [
    "SELECT",
    "JOIN",
    "GROUP BY",
    "Indexes"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d5"
  },
  "question": "What does ACID stand for in the context of database transactions?",
  "options": [
    "Atomic, Consistent, Isolated, Durable",
    "Accurate, Consistent, Immediate, Dependable",
    "Atomic, Complete, Independent, Dependable",
    "Accurate, Consistent, Isolated, Durable"
  ],
  "correctOption": "A",
  "explanation": "ACID properties guarantee reliable database transactions: Atomicity, Consistency, Isolation, and Durability.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d0"
  },
  "question": "Which database normalization form eliminates redundant data within a single table by ensuring that all attributes depend only on the primary key?",
  "options": [
    "1NF",
    "2NF",
    "3NF",
    "BCNF"
  ],
  "correctOption": "B",
  "explanation": "2NF addresses redundancy by removing transitive dependencies.  Attributes should depend directly on the primary key, not on other non-key attributes.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d3"
  },
  "question": "What is the purpose of an index in a database?",
  "options": [
    "To encrypt data for security",
    "To physically sort the data in a table",
    "To speed up data retrieval",
    "To ensure data integrity"
  ],
  "correctOption": "C",
  "explanation": "Indexes create data structures that speed up searches by reducing the need to scan the entire table.  They work like an index in a book.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d4"
  },
  "question": "Which of the following is NOT a characteristic of a well-designed database?",
  "options": [
    "Data redundancy is minimized",
    "Data consistency is maintained",
    "Data is easily accessible",
    "Data is frequently duplicated for backup"
  ],
  "correctOption": "D",
  "explanation": "Data duplication should be avoided to maintain data consistency and integrity. Redundancy leads to inconsistencies and update anomalies.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d2"
  },
  "question": "A database is in Boyce-Codd Normal Form (BCNF) if it is in 3NF and which additional condition is met?",
  "options": [
    "Every non-key attribute is functionally dependent on the entire primary key.",
    "Every determinant is a candidate key.",
    "There are no transitive dependencies.",
    "All attributes are atomic."
  ],
  "correctOption": "B",
  "explanation": "BCNF is a stricter form than 3NF.  It requires that every determinant (attribute that determines other attributes) must be a candidate key.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d1"
  },
  "question": "What is a foreign key used for in database design?",
  "options": [
    "To uniquely identify each record in a table",
    "To establish a relationship between two tables",
    "To enforce data types within a column",
    "To index a table for faster searching"
  ],
  "correctOption": "B",
  "explanation": "A foreign key creates a link between tables, referencing the primary key of a related table. This enforces referential integrity.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d7"
  },
  "question": "What is the primary difference between a clustered index and a non-clustered index?",
  "options": [
    "Clustered indexes sort data physically; non-clustered indexes don't.",
    "Clustered indexes are faster; non-clustered indexes are slower.",
    "Clustered indexes are used for smaller tables; non-clustered for larger tables.",
    "Clustered indexes use B+ trees; non-clustered indexes use hash tables."
  ],
  "correctOption": "A",
  "explanation": "A clustered index dictates the physical order of data rows; a non-clustered index provides a separate lookup structure without changing data order.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d9"
  },
  "question": "What is a disadvantage of denormalization in database design?",
  "options": [
    "Improved query performance",
    "Reduced data redundancy",
    "Simplified data model",
    "Increased data inconsistency"
  ],
  "correctOption": "D",
  "explanation": "Denormalization introduces redundancy, which can lead to inconsistencies when updating data in multiple places.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d6"
  },
  "question": "You need to design a database for a library system. Which of the following relationships would likely be represented using a many-to-many relationship?",
  "options": [
    "Books to Authors",
    "Books to Members",
    "Members to Loans",
    "Authors to Publishers"
  ],
  "correctOption": "A",
  "explanation": "A book can have multiple authors, and an author can write multiple books.  This requires a junction table to resolve the many-to-many relationship.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84bfe978acd9d9d6856d8"
  },
  "question": "In database design, what is a data warehouse primarily used for?",
  "options": [
    "Online transaction processing (OLTP)",
    "Online analytical processing (OLAP)",
    "Storing temporary data",
    "Managing database security"
  ],
  "correctOption": "B",
  "explanation": "Data warehouses are designed for analytical processing, enabling complex queries and reporting on historical data. OLTP focuses on transactional operations.",
  "tags": [
    "Normalization",
    "ER Diagrams",
    "Schema Design",
    "Constraints"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856e8"
  },
  "question": "Which of the following is NOT a key characteristic of NoSQL databases?",
  "options": [
    "Schema-less design",
    "Horizontal scalability",
    "ACID properties",
    "High availability"
  ],
  "correctOption": "C",
  "explanation": "While some NoSQL databases offer ACID-like properties, it's not a defining characteristic.  Most prioritize scalability and availability over strict ACID compliance.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ea"
  },
  "question": "What type of NoSQL database is best suited for managing large volumes of time-series data, like sensor readings?",
  "options": [
    "Key-value store",
    "Graph database",
    "Column-family database",
    "Document database"
  ],
  "correctOption": "C",
  "explanation": "Column-family databases are optimized for storing and querying data with many columns, ideal for time-series data where each column represents a time point.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ef"
  },
  "question": "A graph database is particularly well-suited for modeling which type of data?",
  "options": [
    "Structured data with well-defined relationships.",
    "Unstructured textual data like documents and emails.",
    "Time-series data with regular intervals.",
    "Hierarchical data, such as organizational charts or file systems."
  ],
  "correctOption": "A",
  "explanation": "Graph databases excel at representing entities (nodes) and their relationships (edges), making them suitable for social networks, recommendation systems, and knowledge graphs.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856e9"
  },
  "question": "What is the primary advantage of using a document database like MongoDB?",
  "options": [
    "Strict schema enforcement for data integrity",
    "High transaction throughput for financial applications",
    "Flexible schema allowing for evolving data structures",
    "Excellent support for relational joins between data"
  ],
  "correctOption": "C",
  "explanation": "Document databases excel at handling semi-structured or unstructured data, adapting easily to changing data requirements without schema migrations.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ed"
  },
  "question": "CAP theorem states that a distributed database system can only satisfy two out of three properties: Consistency, Availability, and Partition tolerance.  Which property is often sacrificed in NoSQL systems designed for high availability?",
  "options": [
    "Consistency",
    "Availability",
    "Partition tolerance",
    "Scalability"
  ],
  "correctOption": "A",
  "explanation": "To achieve high availability in a distributed system (especially across network partitions), some degree of consistency is often relaxed.  This is often the tradeoff in NoSQL systems.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856eb"
  },
  "question": "In a key-value store, what is the key's role?",
  "options": [
    "It's a complex data structure containing multiple fields.",
    "It uniquely identifies a value within the database.",
    "It is an index used for efficient querying across multiple values.",
    "It represents a relationship between two or more values."
  ],
  "correctOption": "B",
  "explanation": "The key serves as a unique identifier to quickly retrieve its associated value.  Think of it like a dictionary where the key is the word and the value is its definition.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ec"
  },
  "question": "Which consistency model prioritizes availability over strong consistency in distributed NoSQL systems?",
  "options": [
    "Strong consistency",
    "Eventual consistency",
    "Read-your-writes consistency",
    "Strict serializability"
  ],
  "correctOption": "B",
  "explanation": "Eventual consistency ensures that data will eventually be consistent across all nodes, but allows for temporary inconsistencies to maintain high availability.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856ee"
  },
  "question": "What is sharding in the context of NoSQL databases?",
  "options": [
    "A technique for compressing data to reduce storage costs.",
    "A method for replicating data across multiple servers for redundancy.",
    "A strategy for distributing data across multiple servers to improve scalability.",
    "A process for encrypting sensitive data stored in the database."
  ],
  "correctOption": "C",
  "explanation": "Sharding horizontally partitions a database across multiple servers, improving scalability by distributing the load and data.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856f0"
  },
  "question": "Which NoSQL database is known for its use in Google's BigTable?",
  "options": [
    "MongoDB",
    "Cassandra",
    "Redis",
    "HBase"
  ],
  "correctOption": "D",
  "explanation": "HBase is a widely used, open-source, distributed, versioned, column-oriented store.  It's inspired by Google's BigTable.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c08978acd9d9d6856f1"
  },
  "question": "You need a database for a social media application where relationships between users are crucial. Which NoSQL database type would be most appropriate?",
  "options": [
    "Key-value store",
    "Document database",
    "Column-family database",
    "Graph database"
  ],
  "correctOption": "D",
  "explanation": "The relational nature of a social network—users following other users—maps perfectly to the nodes and edges of a graph database.",
  "tags": [
    "Document Stores",
    "Key-Value Stores",
    "Graph Databases",
    "CAP Theorem"
  ],
  "domain": "Computer Science - Databases",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685700"
  },
  "question": "Which of the following is NOT a core function of an operating system?",
  "options": [
    "Memory management",
    "Process management",
    "Data encryption",
    "File system management"
  ],
  "correctOption": "C",
  "explanation": "While OSes may *interface* with encryption, it's not a core function like managing processes or memory.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685703"
  },
  "question": "What is the purpose of a page table in virtual memory management?",
  "options": [
    "To store the physical addresses of all memory locations",
    "To translate virtual addresses to physical addresses",
    "To manage the CPU registers",
    "To control access to the hard drive"
  ],
  "correctOption": "B",
  "explanation": "Page tables map virtual addresses used by processes to the corresponding physical addresses in RAM.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685702"
  },
  "question": "A deadlock situation requires which of the following conditions?",
  "options": [
    "Mutual exclusion, Hold and wait, No preemption, Circular wait",
    "Mutual exclusion, Hold and wait, Preemption, Circular wait",
    "Mutual exclusion, Release and wait, No preemption, Circular wait",
    "Mutual exclusion, Hold and wait, No preemption, Linear wait"
  ],
  "correctOption": "A",
  "explanation": "The four necessary conditions for deadlock are mutual exclusion, hold and wait, no preemption, and circular wait.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685701"
  },
  "question": "What scheduling algorithm prioritizes processes with the shortest expected burst time?",
  "options": [
    "FIFO",
    "SJF",
    "Round Robin",
    "Priority Scheduling"
  ],
  "correctOption": "B",
  "explanation": "Shortest Job First (SJF) aims to minimize average waiting time by prioritizing shorter processes.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685704"
  },
  "question": "Which file system is commonly used in Linux systems?",
  "options": [
    "NTFS",
    "FAT32",
    "ext4",
    "HFS+"
  ],
  "correctOption": "C",
  "explanation": "ext4 is a widely used journaling file system in Linux distributions.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685705"
  },
  "question": "What does a 'context switch' refer to in operating systems?",
  "options": [
    "Switching between different applications",
    "Switching between different users",
    "Switching between different processes",
    "Switching between different hardware devices"
  ],
  "correctOption": "C",
  "explanation": "A context switch involves saving the state of one process and loading the state of another, allowing the OS to switch between them.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685707"
  },
  "question": "What is a process control block (PCB)?",
  "options": [
    "A data structure containing information about a process",
    "A block of code that controls the CPU",
    "A type of memory management algorithm",
    "A method for preventing deadlocks"
  ],
  "correctOption": "A",
  "explanation": "The PCB holds crucial information about a running process, such as its ID, state, registers, and memory allocation.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685706"
  },
  "question": "Which type of memory is typically faster, but more expensive, than RAM?",
  "options": [
    "Hard drive storage",
    "Cache memory",
    "Virtual memory",
    "Secondary storage"
  ],
  "correctOption": "B",
  "explanation": "Cache memory is a small, fast memory that stores frequently accessed data for quicker retrieval.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685708"
  },
  "question": "What is a key difference between a thread and a process?",
  "options": [
    "Threads share the same memory space, while processes have separate memory spaces.",
    "Processes share the same memory space, while threads have separate memory spaces.",
    "Threads are always faster than processes.",
    "There is no significant difference between threads and processes."
  ],
  "correctOption": "A",
  "explanation": "Threads within a process share the same memory space, improving efficiency but also requiring careful synchronization.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c12978acd9d9d685709"
  },
  "question": "Which of the following is a common method for handling I/O operations?",
  "options": [
    "Polling",
    "Interrupts",
    "Direct Memory Access (DMA)",
    "All of the above"
  ],
  "correctOption": "D",
  "explanation": "All three options—polling, interrupts, and DMA—are used to manage Input/Output operations in various operating systems.",
  "tags": [
    "Process Management",
    "Memory Management",
    "File Systems",
    "I/O"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d685718"
  },
  "question": "Which scheduling algorithm is best suited for minimizing average waiting time in a real-time system with hard deadlines, and why?",
  "options": [
    "A. First-Come, First-Served (FCFS)",
    "B. Shortest Job First (SJF)",
    "C. Rate Monotonic Scheduling (RMS)",
    "D. Round Robin"
  ],
  "correctOption": "C",
  "explanation": "RMS guarantees schedulability for a set of periodic tasks if their utilization is below a certain threshold.  It's optimal for hard real-time systems.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571e"
  },
  "question": "Compare and contrast different approaches to process synchronization, such as semaphores, monitors, and message passing, highlighting their strengths and weaknesses in different contexts.",
  "options": [
    "A. All three are identical in functionality and performance.",
    "B. Semaphores offer simple low-level synchronization; monitors provide higher-level abstraction; message passing allows for communication between processes and is best for distributed systems.",
    "C. Monitors are faster than semaphores, which are faster than message passing.",
    "D. Semaphores are only useful for single-processor systems, while monitors and message passing are suitable for multiprocessor systems."
  ],
  "correctOption": "B",
  "explanation": "Each method offers different tradeoffs between simplicity, expressiveness, and suitability for diverse concurrency challenges. Semaphores are simple; monitors offer better structure; message passing is essential for distributed systems.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571b"
  },
  "question": "Describe the challenges in designing a distributed file system, particularly concerning consistency and data availability.  What are some common approaches to addressing these issues?",
  "options": [
    "A. No significant challenges exist in modern distributed file systems.",
    "B. Consistency and availability are mutually exclusive; choosing one necessitates sacrificing the other.",
    "C. Maintaining data consistency across multiple nodes and ensuring high availability in case of node failures are major challenges. Solutions include replication, quorum systems, and distributed consensus algorithms.",
    "D. The primary challenge is network latency; consistency and availability are easily managed."
  ],
  "correctOption": "C",
  "explanation": "Distributed file systems must handle concurrent access, network partitions, and node failures to maintain consistency and availability. Techniques like replication and consensus protocols are crucial for this.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571f"
  },
  "question": "Discuss the challenges of designing a real-time operating system (RTOS) and the key features that distinguish it from a general-purpose OS.",
  "options": [
    "A. RTOS design is no different from a general-purpose OS; all OS designs focus on identical features.",
    "B.  RTOS design faces challenges in predictability, determinism, and response times.  Key features include priority scheduling, minimal interrupt latency, and real-time task management.",
    "C. RTOS is only used in embedded systems and has no relevance to other OS categories.",
    "D. The main challenge of an RTOS is memory management; other features are less important."
  ],
  "correctOption": "B",
  "explanation": "RTOS prioritizes timely responses, unlike general-purpose OS.  This demands careful consideration of scheduling algorithms, interrupt handling, and resource allocation to guarantee deterministic behavior.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571d"
  },
  "question": "How does a demand paging system work, and what are the advantages and disadvantages compared to swapping?",
  "options": [
    "A. Demand paging loads entire processes into memory at once; swapping is more efficient.",
    "B. Demand paging loads pages only when needed; it reduces memory usage but can suffer from high latency on page faults, unlike swapping which involves less overhead but may have lower overall efficiency.",
    "C. Demand paging is slower than swapping; there are no advantages to demand paging.",
    "D. Both demand paging and swapping are obsolete; modern systems do not use either method."
  ],
  "correctOption": "B",
  "explanation": "Demand paging loads pages on demand, improving memory utilization. However, page faults can lead to significant overhead.  Swapping trades speed for reduced memory footprint.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d685720"
  },
  "question": "Explain how I/O buffering improves system performance. What are the different types of I/O buffering, and when would each be most appropriate?",
  "options": [
    "A. I/O buffering has no impact on system performance; it only adds overhead.",
    "B. I/O buffering reduces the frequency of I/O operations; types include single buffering, double buffering, and circular buffering, with each appropriate for various I/O patterns.",
    "C. I/O buffering increases the amount of data transferred; only single buffering is practical.",
    "D. I/O buffering is only used in network I/O, not for disk or other peripherals."
  ],
  "correctOption": "B",
  "explanation": "Buffering decouples the speed of I/O devices from the CPU, allowing for more efficient use of resources.  Different buffering techniques are suited to different I/O characteristics and speeds.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571a"
  },
  "question": "How does a virtual memory system handle a page fault, and what are the potential performance implications of different page replacement algorithms?",
  "options": [
    "A. It immediately terminates the process; performance is unaffected by page replacement.",
    "B. It retrieves the needed page from secondary storage; different algorithms (FIFO, LRU, etc.) have varying performance impacts on hit ratios and thrashing.",
    "C. It allocates a new page in RAM; performance is improved irrespective of the algorithm.",
    "D. It ignores the fault; performance is degraded only if the fault happens multiple times."
  ],
  "correctOption": "B",
  "explanation": "A page fault triggers the OS to fetch the missing page from disk. The choice of page replacement algorithm (like LRU or FIFO) significantly affects the frequency of page faults and overall system performance.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d685719"
  },
  "question": "Explain the difference between deadlock prevention and deadlock avoidance, providing specific examples of techniques used in each.",
  "options": [
    "A. Prevention avoids deadlocks by preventing the four necessary conditions; avoidance uses algorithms to ensure safe states.",
    "B. Avoidance is a more efficient method than prevention; prevention is only useful for simpler systems.",
    "C. Prevention uses algorithms to ensure safe states, whereas avoidance avoids deadlocks by preventing the four necessary conditions.",
    "D. There is no practical difference; both achieve the same result through different means."
  ],
  "correctOption": "A",
  "explanation": "Prevention (e.g., mutual exclusion breaking) stops deadlocks from occurring; avoidance (e.g., Banker's algorithm) allows them to be possible but ensures the system remains in a safe state.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d68571c"
  },
  "question": "Explain the concept of a kernel and its role in managing system resources.  Discuss the differences between monolithic and microkernels.",
  "options": [
    "A. The kernel is a simple program; monolithic and microkernels are functionally identical.",
    "B. The kernel is the core of the OS, managing hardware and software resources; monolithic kernels integrate all services, while microkernels provide minimal services and rely on user-space servers.",
    "C. The kernel is only responsible for memory management; monolithic and microkernels are differentiated by the amount of RAM they use.",
    "D. The kernel is irrelevant in modern operating systems; all functions are handled by user-space processes."
  ],
  "correctOption": "B",
  "explanation": "The kernel acts as an intermediary between hardware and software. Monolithic kernels are typically more efficient but less modular; microkernels prioritize modularity and security.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c21978acd9d9d685721"
  },
  "question": "Describe the various types of file system structures (e.g., FAT, NTFS, ext4) and their relative strengths and weaknesses in terms of performance, security, and scalability.",
  "options": [
    "A. All file systems are functionally identical.",
    "B. FAT is best for all applications; NTFS and ext4 are obsolete.",
    "C. Different file systems use different approaches to managing files on storage; their strengths vary based on their specific features; for instance, NTFS generally offers better security features compared to FAT, while ext4 often excels in performance and scalability for Linux systems.",
    "D. File systems are irrelevant to OS performance."
  ],
  "correctOption": "C",
  "explanation": "Each file system (FAT, NTFS, ext4, etc.) has its own trade-offs regarding performance, security, and scalability.  Choosing an appropriate file system depends on specific system requirements.",
  "tags": [
    "Threads",
    "Synchronization",
    "Deadlocks",
    "Race Conditions"
  ],
  "domain": "Computer Science - Systems",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685731"
  },
  "question": "What is the purpose of encapsulation in object-oriented programming?",
  "options": [
    "Hiding internal implementation details",
    "Defining data types",
    "Creating abstract classes",
    "Managing memory allocation"
  ],
  "correctOption": "A",
  "explanation": "Encapsulation protects data integrity by bundling data and methods that operate on that data within a class, preventing direct access from outside.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685730"
  },
  "question": "Which OOP principle promotes code reusability through the creation of classes that serve as blueprints for objects?",
  "options": [
    "Abstraction",
    "Encapsulation",
    "Inheritance",
    "Polymorphism"
  ],
  "correctOption": "C",
  "explanation": "Inheritance allows classes to inherit properties and methods from parent classes, promoting reusability and reducing redundancy.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685736"
  },
  "question": "In the context of object-oriented programming, what is a 'constructor'?",
  "options": [
    "A method used to destroy an object.",
    "A special method used to initialize an object.",
    "A method used to copy an object.",
    "A type of data member in a class."
  ],
  "correctOption": "B",
  "explanation": "A constructor is a special method automatically called when an object of a class is created.  It is used to initialize the object's member variables.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685733"
  },
  "question": "Which design pattern allows a single class to interact with multiple subclasses without needing to know their specific class types?",
  "options": [
    "Singleton",
    "Factory",
    "Observer",
    "Strategy"
  ],
  "correctOption": "C",
  "explanation": "The Strategy pattern defines a family of algorithms, encapsulates each one as an object, and makes them interchangeable. The context uses the selected strategy without knowing its concrete type.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685732"
  },
  "question": "What is the difference between an abstract class and an interface?",
  "options": [
    "Abstract classes can have instance variables, interfaces cannot.",
    "Abstract classes can have concrete methods, interfaces cannot.",
    "Interfaces can have constructors, abstract classes cannot.",
    "There is no difference, they are interchangeable."
  ],
  "correctOption": "A",
  "explanation": "Abstract classes can contain both abstract and concrete methods and instance variables, while interfaces can only contain abstract methods (and constants since Java 8).",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685735"
  },
  "question": "Polymorphism allows objects of different classes to be treated as objects of a common type.  Which of the following is NOT a common way polymorphism is achieved?",
  "options": [
    "Method Overriding",
    "Method Overloading",
    "Interface Implementation",
    "Static Binding"
  ],
  "correctOption": "D",
  "explanation": "Static binding (or early binding) resolves method calls at compile time, whereas polymorphism typically relies on dynamic binding (or late binding) at runtime.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685734"
  },
  "question": "What is method overriding?",
  "options": [
    "Redefining a method in a subclass with the same signature",
    "Defining a method with multiple parameters",
    "Defining a method within a parent class only",
    "Creating a new method with a different name"
  ],
  "correctOption": "A",
  "explanation": "Method overriding allows a subclass to provide a specific implementation for a method that is already defined in its superclass.  It’s a key part of polymorphism.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685739"
  },
  "question": "What is the significance of the `this` keyword in object-oriented programming (e.g., in Java or C#)?",
  "options": [
    "It refers to the current instance of the class.",
    "It refers to the class itself.",
    "It refers to the parent class.",
    "It's a keyword used only for static methods."
  ],
  "correctOption": "A",
  "explanation": "The `this` keyword provides a reference to the current object within the class’s methods. It's crucial for disambiguating between instance variables and method parameters with the same name.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685737"
  },
  "question": "What does the term 'Abstraction' refer to in the context of OOP?",
  "options": [
    "The process of hiding complex implementation details.",
    "The process of creating multiple instances of a class.",
    "The process of inheriting properties from a parent class.",
    "The process of combining data and methods into a single unit."
  ],
  "correctOption": "A",
  "explanation": "Abstraction simplifies complex systems by providing a simplified view.  Users interact with essential features without needing to know the intricate internal workings.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c2c978acd9d9d685738"
  },
  "question": "Which of the following best describes the concept of 'coupling' in OOP?",
  "options": [
    "The level of dependence between classes.",
    "The level of cohesion within a class.",
    "The number of methods in a class.",
    "The number of classes in a project."
  ],
  "correctOption": "A",
  "explanation": "Coupling refers to the degree of interdependence between different modules (classes, functions, etc.). Low coupling is generally desirable for maintainability and reusability.",
  "tags": [
    "Encapsulation",
    "Inheritance",
    "Polymorphism",
    "Design Patterns"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d685748"
  },
  "question": "What does SDLC stand for?",
  "options": [
    "Software Development Life Cycle",
    "System Development Life Cycle",
    "Software Design Life Cycle",
    "System Data Life Cycle"
  ],
  "correctOption": "B",
  "explanation": "SDLC stands for System Development Life Cycle.  It encompasses all stages of a system's development.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574c"
  },
  "question": "What is the purpose of testing in the SDLC?",
  "options": [
    "To deploy the software",
    "To identify and fix bugs",
    "To write documentation",
    "To gather requirements"
  ],
  "correctOption": "B",
  "explanation": "Testing aims to find and resolve defects in the software before it's released.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d685749"
  },
  "question": "Which phase in the SDLC involves gathering requirements from stakeholders?",
  "options": [
    "Testing",
    "Deployment",
    "Design",
    "Requirements Gathering"
  ],
  "correctOption": "D",
  "explanation": "The Requirements Gathering phase focuses on understanding the needs and expectations of the system's users.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574a"
  },
  "question": "What is a primary goal of the design phase in the SDLC?",
  "options": [
    "Writing code",
    "Testing the system",
    "Creating a blueprint of the system",
    "Deploying the system"
  ],
  "correctOption": "C",
  "explanation": "The design phase creates a detailed plan – a blueprint – of how the system will be built.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574b"
  },
  "question": "In which phase of the SDLC is the software actually built?",
  "options": [
    "Planning",
    "Design",
    "Implementation",
    "Testing"
  ],
  "correctOption": "C",
  "explanation": "The implementation phase involves the actual coding and development of the software.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574f"
  },
  "question": "Which model follows a sequential approach where each phase must be completed before the next begins?",
  "options": [
    "Agile",
    "Waterfall",
    "Spiral",
    "Prototyping"
  ],
  "correctOption": "B",
  "explanation": "The Waterfall model is a linear, sequential approach to SDLC.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d685750"
  },
  "question": "Which SDLC model is iterative and incremental, allowing for flexibility and changes?",
  "options": [
    "Waterfall",
    "Spiral",
    "Agile",
    "RAD"
  ],
  "correctOption": "C",
  "explanation": "Agile methodologies prioritize iterative development and collaboration.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d685751"
  },
  "question": "What is a key characteristic of the RAD (Rapid Application Development) model?",
  "options": [
    "Sequential phases",
    "Long development cycles",
    "Quick prototyping and user feedback",
    "Extensive documentation"
  ],
  "correctOption": "C",
  "explanation": "RAD emphasizes rapid prototyping and iterative development to quickly deliver functional software.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574d"
  },
  "question": "What typically happens during the deployment phase of the SDLC?",
  "options": [
    "Gathering user feedback",
    "Writing code",
    "Releasing the software to users",
    "Designing the system"
  ],
  "correctOption": "C",
  "explanation": "Deployment is the process of releasing the finished software to its intended users or environment.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c34978acd9d9d68574e"
  },
  "question": "What is maintenance in the context of the SDLC?",
  "options": [
    "Fixing bugs after release",
    "Planning the project",
    "Designing the database",
    "Writing user manuals"
  ],
  "correctOption": "A",
  "explanation": "Maintenance involves ongoing updates, bug fixes, and improvements after the software is released.",
  "tags": [
    "Requirements",
    "Design",
    "Testing",
    "Deployment"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685760"
  },
  "question": "Which Agile framework emphasizes time-boxed iterations and daily stand-up meetings?",
  "options": [
    "Lean",
    "Kanban",
    "Scrum",
    "Crystal"
  ],
  "correctOption": "C",
  "explanation": "Scrum is known for its sprints (time-boxed iterations) and daily stand-up meetings for daily progress tracking.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685761"
  },
  "question": "What is the primary purpose of a Sprint Retrospective in Scrum?",
  "options": [
    "To plan the next sprint's work",
    "To review the sprint backlog",
    "To identify areas for improvement in the process",
    "To demonstrate working software to stakeholders"
  ],
  "correctOption": "C",
  "explanation": "The Sprint Retrospective focuses on inspecting and adapting the Scrum process to improve future sprints' effectiveness.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685762"
  },
  "question": "In Kanban, what does WIP limit stand for?",
  "options": [
    "Work In Progress limit",
    "Work Item Prioritization limit",
    "Work In Process log",
    "Work Item Progression limit"
  ],
  "correctOption": "A",
  "explanation": "WIP limit restricts the number of tasks in progress at any given time, promoting focus and reducing multitasking.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685763"
  },
  "question": "Which Agile principle emphasizes responding to change over following a plan?",
  "options": [
    "Embrace change",
    "Continuous improvement",
    "Customer collaboration",
    "Individuals and interactions"
  ],
  "correctOption": "A",
  "explanation": "The Agile Manifesto explicitly prioritizes responding to change over following a plan, highlighting adaptability.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685764"
  },
  "question": "What is a user story's typical format?",
  "options": [
    "Task: [Action]",
    "Use case: [Scenario]",
    "As a [role], I want [goal] so that [benefit]",
    "Requirement: [Description]"
  ],
  "correctOption": "C",
  "explanation": "The 'As a..., I want..., so that...' format provides context, goal, and benefit, making user stories clear and understandable.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685765"
  },
  "question": "What technique helps visualize the workflow and identify bottlenecks in a Kanban system?",
  "options": [
    "Sprint Planning",
    "Daily Stand-up",
    "Burn-down Chart",
    "Cumulative Flow Diagram"
  ],
  "correctOption": "D",
  "explanation": "A Cumulative Flow Diagram visually represents the workflow and helps pinpoint bottlenecks affecting throughput.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685767"
  },
  "question": "The concept of 'Definition of Done' (DoD) is crucial in which Agile framework?",
  "options": [
    "Kanban only",
    "Scrum only",
    "Both Scrum and Kanban",
    "Neither Scrum nor Kanban"
  ],
  "correctOption": "C",
  "explanation": "Both Scrum and Kanban benefit from a clear DoD to ensure consistency and quality of deliverables.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685768"
  },
  "question": "What does INVEST stand for in relation to user stories?",
  "options": [
    "Independent, Valuable, Estimable, Simple, Small, Testable",
    "Independent, Versatile, Efficient, Simple, Small, Testable",
    "Important, Valuable, Estimated, Small, Testable",
    "Independent, Valuable, Estimated, Simple, Small, Testable"
  ],
  "correctOption": "A",
  "explanation": "INVEST is a mnemonic for creating high-quality user stories that are easily manageable.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685766"
  },
  "question": "Which Agile practice involves regularly demonstrating working software to stakeholders?",
  "options": [
    "Sprint Review",
    "Daily Scrum",
    "Sprint Retrospective",
    "Planning Poker"
  ],
  "correctOption": "A",
  "explanation": "The Sprint Review is a formal event in Scrum where the team demonstrates the completed work to stakeholders.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c3e978acd9d9d685769"
  },
  "question": "Which of the following is NOT a core value of the Agile Manifesto?",
  "options": [
    "Responding to change over following a plan",
    "Working software over comprehensive documentation",
    "Customer collaboration over contract negotiation",
    "Processes and tools over individuals and interactions"
  ],
  "correctOption": "D",
  "explanation": "The Agile Manifesto values individuals and interactions over processes and tools; it prioritizes people and communication.",
  "tags": [
    "Scrum",
    "Kanban",
    "User Stories",
    "Sprints"
  ],
  "domain": "Computer Science - Software Engineering",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577a"
  },
  "question": "What does LAN stand for?",
  "options": [
    "Local Area Network",
    "Long Area Network",
    "Large Area Network",
    "Limited Area Network"
  ],
  "correctOption": "A",
  "explanation": "LAN refers to Local Area Network, a network covering a small geographical area.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577c"
  },
  "question": "Which device connects multiple devices on a network?",
  "options": [
    "Modem",
    "Router",
    "Switch",
    "Both Router and Switch"
  ],
  "correctOption": "D",
  "explanation": "Both routers and switches connect multiple devices, with routers focusing on routing between networks and switches handling connections within a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d685779"
  },
  "question": "Which of the following is NOT a type of network?",
  "options": [
    "LAN",
    "WAN",
    "MAN",
    "PAN"
  ],
  "correctOption": "C",
  "explanation": "While MAN (Metropolitan Area Network) exists, it's less frequently discussed at a beginner level compared to LAN, WAN, and PAN.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d685778"
  },
  "question": "What is a network?",
  "options": [
    "A single computer",
    "A collection of interconnected devices",
    "A type of software",
    "A specific website"
  ],
  "correctOption": "B",
  "explanation": "A network connects two or more devices to share resources and information.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577b"
  },
  "question": "What does WAN stand for?",
  "options": [
    "Wide Area Network",
    "Wireless Area Network",
    "World Area Network",
    "Web Area Network"
  ],
  "correctOption": "A",
  "explanation": "WAN stands for Wide Area Network, covering a large geographical area.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577e"
  },
  "question": "What does TCP/IP stand for?",
  "options": [
    "Transmission Control Protocol/Internet Protocol",
    "Transfer Control Protocol/Internet Protocol",
    "Transmission Control Protocol/Intranet Protocol",
    "Transfer Control Protocol/Intranet Protocol"
  ],
  "correctOption": "A",
  "explanation": "TCP/IP is the fundamental communication protocol suite for the internet.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d685780"
  },
  "question": "Which of these is a common wired network connection?",
  "options": [
    "Wi-Fi",
    "Bluetooth",
    "Ethernet",
    "Infrared"
  ],
  "correctOption": "C",
  "explanation": "Ethernet uses physical cables to connect devices to a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577d"
  },
  "question": "What is an IP address?",
  "options": [
    "A person's email address",
    "A unique address for a device on a network",
    "A website's name",
    "A password"
  ],
  "correctOption": "B",
  "explanation": "An IP address identifies a device on a network, allowing communication between devices.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d68577f"
  },
  "question": "What is a protocol?",
  "options": [
    "A type of computer",
    "A set of rules governing data transmission",
    "A type of software",
    "A type of hardware"
  ],
  "correctOption": "B",
  "explanation": "Protocols define the rules and standards for communication on a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c46978acd9d9d685781"
  },
  "question": "Which of these is a common wireless network connection?",
  "options": [
    "Coaxial Cable",
    "Fiber Optic Cable",
    "Wi-Fi",
    "DSL"
  ],
  "correctOption": "C",
  "explanation": "Wi-Fi is a common wireless technology for connecting devices to a network.",
  "tags": [
    "OSI Model",
    "TCP/IP",
    "Routing",
    "Switching"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685790"
  },
  "question": "Which cryptographic algorithm is most vulnerable to known-plaintext attacks when implemented without proper padding schemes?",
  "options": [
    "AES-256",
    "RSA",
    "SHA-256",
    "DES"
  ],
  "correctOption": "B",
  "explanation": "RSA, particularly with insufficient padding, is highly susceptible to known-plaintext attacks which can reveal the private key.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685791"
  },
  "question": "A network is experiencing a high volume of SYN packets without corresponding ACK packets. What type of attack is likely occurring?",
  "options": [
    "DoS",
    "Man-in-the-middle",
    "SQL Injection",
    "Phishing"
  ],
  "correctOption": "A",
  "explanation": "This describes a SYN flood, a common Denial-of-Service (DoS) attack that exhausts server resources by overwhelming it with incomplete connection requests.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685793"
  },
  "question": "What protocol is primarily used for secure remote access to a network, typically employing public-key cryptography for authentication?",
  "options": [
    "FTP",
    "Telnet",
    "SSH",
    "HTTP"
  ],
  "correctOption": "C",
  "explanation": "SSH (Secure Shell) uses public-key cryptography for authentication and provides secure remote login capabilities over an unsecured network.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685795"
  },
  "question": "What is a honeypot and what is its primary purpose in a network security context?",
  "options": [
    "A type of firewall, B: A decoy system designed to lure and trap attackers, C: A type of intrusion detection system, D: A physical security device"
  ],
  "correctOption": "B",
  "explanation": "Honeypots are decoy systems designed to attract and trap attackers, allowing security analysts to study their techniques and gather intelligence.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685796"
  },
  "question": "What security mechanism is specifically designed to prevent unauthorized access to resources based on user roles and privileges?",
  "options": [
    "Firewall",
    "Intrusion Detection System (IDS)",
    "Access Control List (ACL)",
    "Virtual Private Network (VPN)"
  ],
  "correctOption": "C",
  "explanation": "Access Control Lists (ACLs) define which users or groups have permission to access specific resources or perform certain actions.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685794"
  },
  "question": "Explain the difference between symmetric and asymmetric encryption and provide a suitable example for each.",
  "options": [
    "A: Symmetric uses one key; Asymmetric uses two; Example: Symmetric - AES, Asymmetric - RSA. B: Symmetric uses two keys; Asymmetric uses one; Example: Symmetric - RSA, Asymmetric - AES. C: Symmetric uses two keys for encryption and decryption; Asymmetric uses one key for encryption and decryption; Example: Symmetric - DES, Asymmetric - SHA-256. D: Symmetric uses one key for encryption and decryption; Asymmetric uses different keys for encryption and decryption; Example: Symmetric - 3DES, Asymmetric - ECC"
  ],
  "correctOption": "A",
  "explanation": "Symmetric encryption uses the same key for encryption and decryption (e.g., AES). Asymmetric encryption uses a public key for encryption and a private key for decryption (e.g., RSA).",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685797"
  },
  "question": "Explain the concept of 'perfect forward secrecy' (PFS) and its importance in securing communications.",
  "options": [
    "A: The ability to restore data after a security breach, B: The process of securing data in transit, C: A cryptographic property ensuring that compromise of long-term secrets doesn't compromise past session keys, D: The authentication process using a single factor"
  ],
  "correctOption": "C",
  "explanation": "Perfect Forward Secrecy (PFS) ensures that even if a long-term key is compromised, past communications remain secure because session keys are independent.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685792"
  },
  "question": "What is the primary security benefit of implementing a multi-layered security approach (defense in depth)?",
  "options": [
    "Increased network speed",
    "Reduced hardware costs",
    "Improved user experience",
    "Enhanced resilience against attacks"
  ],
  "correctOption": "D",
  "explanation": "Defense in depth provides redundancy; if one layer fails, others will continue to protect the system.  It enhances resilience to attacks.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685799"
  },
  "question": "How can a digital signature be used to ensure both authenticity and non-repudiation of a digital document?",
  "options": [
    "A digital signature encrypts the document, ensuring only the recipient can decrypt it, B: A digital signature uses a hash function to create a unique fingerprint of the document, which is then encrypted with the sender's private key; this allows verification of origin and prevents denial of sending it. C: A digital signature adds a timestamp to the document, guaranteeing the authenticity of the date, D: A digital signature uses a symmetric encryption algorithm to ensure data integrity"
  ],
  "correctOption": "B",
  "explanation": "A digital signature uses asymmetric cryptography. The hash of the document is signed with the sender's private key. Verification uses the public key, proving authenticity and preventing repudiation.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c51978acd9d9d685798"
  },
  "question": "What is a significant vulnerability associated with implementing a weak or predictable random number generator (RNG) in cryptographic applications?",
  "options": [
    "Data breaches",
    "Denial-of-service attacks",
    "Man-in-the-middle attacks",
    "Weakening of cryptographic strength and potential key compromise"
  ],
  "correctOption": "D",
  "explanation": "A weak RNG can lead to predictable key generation, making the cryptography vulnerable and easily broken by an attacker.",
  "tags": [
    "Encryption",
    "Firewalls",
    "Authentication",
    "Threats"
  ],
  "domain": "Computer Science - Networks",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857ae"
  },
  "question": "Which HTTP method is typically used to submit data to a server to create or update a resource?",
  "options": [
    "GET",
    "POST",
    "PUT",
    "DELETE"
  ],
  "correctOption": "B",
  "explanation": "POST is used to send data to the server, often for creating new resources. PUT updates existing resources.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857b0"
  },
  "question": "In React, what is the purpose of the `useState` hook?",
  "options": [
    "To manage component state",
    "To handle props",
    "To perform side effects",
    "To render components conditionally"
  ],
  "correctOption": "A",
  "explanation": "`useState` is a hook that allows functional components to manage internal state, enabling dynamic updates.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857af"
  },
  "question": "What is a common way to handle asynchronous JavaScript operations without Promises?",
  "options": [
    "Using async/await",
    "Using callbacks",
    "Using generators",
    "Using classes"
  ],
  "correctOption": "B",
  "explanation": "Callbacks were used before Promises to handle asynchronous operations, but they can lead to 'callback hell'.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857aa"
  },
  "question": "What is the primary purpose of the `DOM` (Document Object Model)?",
  "options": [
    "Styling web pages",
    "Handling user input",
    "Providing a structured representation of an HTML or XML document",
    "Managing network requests"
  ],
  "correctOption": "C",
  "explanation": "The DOM represents the page's structure as a tree of objects, allowing JavaScript to interact with it.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857ac"
  },
  "question": "What is the difference between `let` and `const` in JavaScript?",
  "options": [
    "Both declare variables, but `let` is block-scoped and `const` is globally scoped",
    "Both declare constants; `const` is immutable, `let` is mutable",
    "Both declare variables, but `let` is mutable and `const` is immutable after declaration",
    "There is no difference"
  ],
  "correctOption": "C",
  "explanation": "`let` allows reassignment, while `const` declares a constant whose value cannot be changed after initialization.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857a8"
  },
  "question": "Which CSS property is used to control the spacing between elements?",
  "options": [
    "padding",
    "margin",
    "border",
    "width"
  ],
  "correctOption": "B",
  "explanation": "Margin controls the space outside an element, while padding controls the space inside.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857ad"
  },
  "question": "What is the purpose of a `Promise` in JavaScript?",
  "options": [
    "To handle asynchronous operations",
    "To create synchronous functions",
    "To define variables",
    "To handle user input"
  ],
  "correctOption": "A",
  "explanation": "Promises handle the eventual result of an asynchronous operation, allowing for cleaner error handling and chaining.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857a9"
  },
  "question": "What does the acronym REST stand for in the context of web APIs?",
  "options": [
    "Representational State Transfer",
    "Remote Server Technology",
    "Resourceful Service Transfer",
    "Regular Service Transfer"
  ],
  "correctOption": "A",
  "explanation": "REST stands for Representational State Transfer, an architectural style for building web services.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857b1"
  },
  "question": "What is the purpose of `virtual DOM` in frameworks like React?",
  "options": [
    "To improve browser performance by efficiently updating the actual DOM only when necessary",
    "To simplify component rendering",
    "To improve SEO",
    "To handle asynchronous operations"
  ],
  "correctOption": "A",
  "explanation": "The virtual DOM is a lightweight in-memory representation of the actual DOM, used for optimized updates.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c5b978acd9d9d6857ab"
  },
  "question": "Which JavaScript method is used to add an element to the end of an array?",
  "options": [
    "push()",
    "pop()",
    "shift()",
    "unshift()"
  ],
  "correctOption": "A",
  "explanation": "push() adds elements to the end, while pop() removes from the end. shift() and unshift() work on the beginning.",
  "tags": [
    "HTML5",
    "CSS3",
    "JavaScript",
    "Responsive Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c4"
  },
  "question": "Which design principle emphasizes separating concerns to improve code modularity and maintainability?",
  "options": [
    "SOLID principles",
    "DRY (Don't Repeat Yourself)",
    "KISS (Keep It Simple, Stupid)",
    "YAGNI (You Ain't Gonna Need It)"
  ],
  "correctOption": "A",
  "explanation": "SOLID principles, particularly the Single Responsibility Principle, guide developers to create modular and maintainable code by separating concerns.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c1"
  },
  "question": "What is the primary function of an API Gateway in a microservices architecture?",
  "options": [
    "Data storage",
    "User authentication",
    "Routing requests to microservices",
    "Load balancing only"
  ],
  "correctOption": "C",
  "explanation": "An API Gateway acts as a single entry point, routing requests to the appropriate microservice and handling cross-cutting concerns.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c3"
  },
  "question": "What is the purpose of message queues in backend systems?",
  "options": [
    "Storing persistent data",
    "Managing user sessions",
    "Asynchronous communication between services",
    "Caching frequently accessed data"
  ],
  "correctOption": "C",
  "explanation": "Message queues enable decoupled communication, allowing services to exchange messages without direct dependencies, improving reliability and scalability.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c0"
  },
  "question": "Which architectural pattern is commonly used for building scalable and maintainable backend systems?",
  "options": [
    "Microservices",
    "Monolith",
    "MVC",
    "Layered"
  ],
  "correctOption": "A",
  "explanation": "Microservices architecture promotes independent deployment and scalability, addressing challenges faced by monolithic systems.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c8"
  },
  "question": "Which technology is commonly used for implementing serverless backend functions?",
  "options": [
    "Apache Tomcat",
    "Nginx",
    "AWS Lambda",
    "MySQL"
  ],
  "correctOption": "C",
  "explanation": "AWS Lambda is a popular example of a serverless computing platform that allows developers to run code without managing servers.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c6"
  },
  "question": "What is the role of a load balancer in a backend infrastructure?",
  "options": [
    "Data caching",
    "Security firewall",
    "Distributing network traffic across multiple servers",
    "Database management"
  ],
  "correctOption": "C",
  "explanation": "Load balancers distribute incoming network traffic across multiple servers, ensuring high availability and preventing server overload.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c2"
  },
  "question": "Which database type is best suited for handling large volumes of structured data with high transactional requirements?",
  "options": [
    "NoSQL (Document Database)",
    "Graph Database",
    "Key-Value Store",
    "Relational Database"
  ],
  "correctOption": "D",
  "explanation": "Relational databases excel at managing structured data and enforcing ACID properties for reliable transactions.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c9"
  },
  "question": "How can you efficiently handle errors and exceptions in a backend system to provide informative responses to clients?",
  "options": [
    "Ignoring errors",
    "Logging only",
    "Using appropriate HTTP status codes and structured error responses",
    "Terminating the application"
  ],
  "correctOption": "C",
  "explanation": "Providing informative error responses with appropriate HTTP status codes enhances the user experience and simplifies debugging.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c7"
  },
  "question": "What is a common approach for handling database transactions to ensure data consistency?",
  "options": [
    "Optimistic Locking",
    "Pessimistic Locking",
    "Both A and B",
    "Neither A nor B"
  ],
  "correctOption": "C",
  "explanation": "Both optimistic and pessimistic locking mechanisms are used to manage concurrent access to database resources and ensure data consistency.  The choice depends on the application's needs.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c64978acd9d9d6857c5"
  },
  "question": "What is a common approach to handle authentication and authorization in a RESTful API?",
  "options": [
    "Session management only",
    "JWT (JSON Web Tokens)",
    "Basic authentication only",
    "OAuth 2.0"
  ],
  "correctOption": "B",
  "explanation": "JWTs provide a secure and stateless mechanism for authentication and authorization in RESTful APIs, widely used due to their flexibility and scalability.",
  "tags": [
    "APIs",
    "Authentication",
    "Databases",
    "Server Architecture"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857dd"
  },
  "question": "Which of the following best describes the concept of API versioning?",
  "options": [
    "Assigning different API keys to different clients",
    "Using different authentication methods for different clients",
    "Maintaining multiple versions of an API to support backward compatibility",
    "Using different data formats for different clients"
  ],
  "correctOption": "C",
  "explanation": "Versioning allows for gradual improvements to an API without breaking existing client applications that rely on older versions.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857da"
  },
  "question": "What does REST stand for in the context of APIs?",
  "options": [
    "Representational State Transfer",
    "Remote Service Transmission",
    "Resourceful Service Technology",
    "Regular Service Transfer"
  ],
  "correctOption": "A",
  "explanation": "REST (Representational State Transfer) is an architectural style for designing networked applications.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857de"
  },
  "question": "What is the role of a 'schema' in defining an API?",
  "options": [
    "Specifies the data types and structure of the data exchanged",
    "Defines the authentication methods used",
    "Controls the rate limiting settings",
    "Manages the API's documentation"
  ],
  "correctOption": "A",
  "explanation": "A schema, like OpenAPI/Swagger, formally describes the data structure, allowing for better understanding, validation and generation of code.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857db"
  },
  "question": "What is a common format for exchanging data between an API and a client?",
  "options": [
    "HTML",
    "CSS",
    "JavaScript",
    "JSON"
  ],
  "correctOption": "D",
  "explanation": "JSON (JavaScript Object Notation) is a lightweight, text-based data-interchange format widely used in APIs due to its simplicity and readability.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857d9"
  },
  "question": "What is the primary purpose of an API key in API authentication?",
  "options": [
    "To encrypt data transmitted to the API",
    "To verify the identity of the client making the request",
    "To limit the number of requests per second",
    "To specify the data format returned by the API"
  ],
  "correctOption": "B",
  "explanation": "API keys act as credentials, allowing the server to identify and authenticate the client application making the request.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857df"
  },
  "question": "What is the difference between synchronous and asynchronous API calls?",
  "options": [
    "Synchronous waits for a response before continuing, asynchronous doesn't",
    "Synchronous uses GET, asynchronous uses POST",
    "Synchronous is faster, asynchronous is slower",
    "Synchronous requires authentication, asynchronous doesn't"
  ],
  "correctOption": "A",
  "explanation": "Synchronous calls block execution until a response is received, while asynchronous calls allow the program to continue executing other tasks.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857dc"
  },
  "question": "What is rate limiting in the context of APIs?",
  "options": [
    "Limiting the number of requests a client can make within a given time frame",
    "Restricting access to specific API endpoints",
    "Enforcing data validation rules",
    "Setting a maximum size for API responses"
  ],
  "correctOption": "A",
  "explanation": "Rate limiting helps prevent abuse and ensures fair access to API resources by controlling the frequency of requests.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857d8"
  },
  "question": "Which HTTP method is typically used to retrieve data from an API endpoint?",
  "options": [
    "POST",
    "PUT",
    "DELETE",
    "GET"
  ],
  "correctOption": "D",
  "explanation": "GET requests are used to retrieve data from a specified resource.  Other methods are for creating, updating, or deleting data.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857e0"
  },
  "question": "How does OAuth 2.0 typically work for API authorization?",
  "options": [
    "The client sends its API key directly",
    "The client requests an access token from an authorization server",
    "The server sends the client's credentials directly to the client",
    "The client uses basic authentication"
  ],
  "correctOption": "B",
  "explanation": "OAuth 2.0 uses an authorization server to grant access tokens, delegating access without sharing the user's credentials directly.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c6e978acd9d9d6857e1"
  },
  "question": "What is a common approach to handling errors in an API response?",
  "options": [
    "Returning a 200 OK status code even if there was an error",
    "Ignoring errors and continuing execution",
    "Returning a descriptive error message with an appropriate HTTP status code",
    "Displaying the detailed server stack trace in the response"
  ],
  "correctOption": "C",
  "explanation": "Returning informative error messages with proper HTTP status codes (e.g., 400 Bad Request, 500 Internal Server Error) helps clients diagnose and handle issues effectively.",
  "tags": [
    "REST",
    "HTTP Methods",
    "Status Codes",
    "Resource Design"
  ],
  "domain": "Computer Science - Web Development",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f0"
  },
  "question": "Which of the following is NOT a common type of machine learning?",
  "options": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Reinforcement Learning",
    "Deductive Learning"
  ],
  "correctOption": "D",
  "explanation": "Deductive Learning is a logic-based approach, not a machine learning paradigm.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f2"
  },
  "question": "In k-means clustering, what does the 'k' represent?",
  "options": [
    "The number of iterations",
    "The number of clusters",
    "The distance metric used",
    "The dimensionality of the data"
  ],
  "correctOption": "B",
  "explanation": "'k' in k-means represents the predetermined number of clusters the algorithm will aim to create.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f3"
  },
  "question": "Which metric is best suited for evaluating a binary classification model where the classes are imbalanced?",
  "options": [
    "Accuracy",
    "Precision",
    "Recall",
    "F1-score"
  ],
  "correctOption": "D",
  "explanation": "The F1-score balances precision and recall, making it suitable for imbalanced datasets where accuracy can be misleading.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f1"
  },
  "question": "What is the primary goal of dimensionality reduction in machine learning?",
  "options": [
    "To increase the number of features",
    "To improve model interpretability and reduce computational cost",
    "To add noise to the data",
    "To decrease the accuracy of the model"
  ],
  "correctOption": "B",
  "explanation": "Dimensionality reduction aims to simplify data by reducing the number of features while preserving important information.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f5"
  },
  "question": "Which algorithm is best known for its ability to handle non-linearly separable data?",
  "options": [
    "Linear Regression",
    "Logistic Regression",
    "Support Vector Machine (SVM) with a non-linear kernel",
    "Decision Tree"
  ],
  "correctOption": "C",
  "explanation": "SVMs with non-linear kernels (e.g., RBF kernel) can effectively classify non-linearly separable data by mapping it to a higher-dimensional space.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f6"
  },
  "question": "What is a common technique used to handle missing values in a dataset?",
  "options": [
    "Ignoring the rows with missing values",
    "Imputation (e.g., mean/median imputation)",
    "Leaving the missing values as they are",
    "All of the above are common techniques"
  ],
  "correctOption": "B",
  "explanation": "Imputation involves filling in missing values with estimated values, improving data completeness.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f7"
  },
  "question": "In a decision tree, what is a 'leaf node'?",
  "options": [
    "A decision point",
    "A branch",
    "The final prediction",
    "A root node"
  ],
  "correctOption": "C",
  "explanation": "Leaf nodes represent the final predictions or classifications made by the decision tree.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f9"
  },
  "question": "Which of the following is a common technique for evaluating the performance of a regression model?",
  "options": [
    "Confusion matrix",
    "ROC curve",
    "Mean Squared Error (MSE)",
    "F1-score"
  ],
  "correctOption": "C",
  "explanation": "MSE measures the average squared difference between predicted and actual values, a common metric for regression.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f8"
  },
  "question": "What is a potential drawback of using a very deep neural network?",
  "options": [
    "Faster training time",
    "Lower computational cost",
    "Increased risk of overfitting",
    "Improved interpretability"
  ],
  "correctOption": "C",
  "explanation": "Deep networks have many parameters, making them prone to overfitting the training data and performing poorly on unseen data.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c78978acd9d9d6857f4"
  },
  "question": "What is the purpose of a regularization technique like L1 or L2 regularization in machine learning?",
  "options": [
    "To increase model complexity",
    "To prevent overfitting by adding penalty to large weights",
    "To introduce bias into the model",
    "To improve computational speed"
  ],
  "correctOption": "B",
  "explanation": "Regularization techniques penalize large weights, preventing overfitting and improving generalization to unseen data.",
  "tags": [
    "Supervised Learning",
    "Unsupervised Learning",
    "Features",
    "Models"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580c"
  },
  "question": "Explain the role of attention mechanisms in sequence-to-sequence models, particularly in machine translation.",
  "options": [
    "A. They improve computational efficiency by reducing the number of calculations.",
    "B. They allow the model to focus on the most relevant parts of the input sequence when generating the output.",
    "C. They help prevent overfitting by regularizing the model's weights.",
    "D. They introduce non-linearity into the model, improving its expressive power."
  ],
  "correctOption": "B",
  "explanation": "Attention mechanisms allow the decoder to focus on specific parts of the input sequence when generating each output element, improving translation quality and handling long sequences.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580a"
  },
  "question": "What is the main advantage of using transfer learning in deep learning, particularly when dealing with limited datasets for a specific task?",
  "options": [
    "Faster training times",
    "Reduced computational cost",
    "Improved generalization on unseen data",
    "Leveraging pre-trained knowledge from a related task"
  ],
  "correctOption": "D",
  "explanation": "Transfer learning utilizes pre-trained models on large datasets, transferring knowledge to a new task with limited data, significantly improving performance.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d685808"
  },
  "question": "Which of the following regularization techniques is particularly effective in preventing overfitting in deep convolutional neural networks by encouraging sparsity in the learned feature maps?",
  "options": [
    "L1 Regularization",
    "L2 Regularization",
    "Dropout",
    "Batch Normalization"
  ],
  "correctOption": "A",
  "explanation": "L1 regularization adds a penalty proportional to the absolute value of the weights, encouraging sparsity and thus reducing overfitting more effectively than L2 in CNNs.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580b"
  },
  "question": "Which of the following optimization algorithms is known for its adaptive learning rates for each parameter, making it efficient for training deep neural networks with complex loss landscapes?",
  "options": [
    "Stochastic Gradient Descent (SGD)",
    "Adam",
    "RMSprop",
    "Adagrad"
  ],
  "correctOption": "B",
  "explanation": "Adam adapts learning rates based on past gradients, making it robust and efficient in various scenarios compared to other optimization algorithms.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d685809"
  },
  "question": "In recurrent neural networks (RNNs), what is the primary mechanism that addresses the vanishing gradient problem, allowing for learning long-range dependencies in sequential data?",
  "options": [
    "Backpropagation Through Time (BPTT)",
    "Long Short-Term Memory (LSTM) units",
    "Gated Recurrent Units (GRUs)",
    "Adam Optimizer"
  ],
  "correctOption": "B",
  "explanation": "LSTM units utilize gates to control the flow of information, mitigating the vanishing gradient problem and enabling the learning of long-term dependencies more effectively than basic RNNs.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580d"
  },
  "question": "What is the primary challenge addressed by Generative Adversarial Networks (GANs) in generating realistic data?",
  "options": [
    "Overfitting",
    "Vanishing gradients",
    "Mode collapse",
    "Computational complexity"
  ],
  "correctOption": "C",
  "explanation": "Mode collapse is a common failure mode in GANs where the generator produces a limited variety of outputs, failing to capture the full distribution of the training data.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580e"
  },
  "question": "How does batch normalization help accelerate the training process and improve generalization in deep neural networks?",
  "options": [
    "A. By reducing the number of parameters in the network.",
    "B. By normalizing the activations of each layer, reducing internal covariate shift.",
    "C. By adding noise to the input data, improving robustness.",
    "D. By increasing the learning rate."
  ],
  "correctOption": "B",
  "explanation": "Batch normalization normalizes the activations of each layer, stabilizing the training process and reducing internal covariate shift, leading to faster convergence and better generalization.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d68580f"
  },
  "question": "In the context of autoencoders, what is the primary purpose of the bottleneck layer?",
  "options": [
    "To increase the computational complexity of the model.",
    "To add non-linearity to the model.",
    "To perform dimensionality reduction and extract latent features.",
    "To regularize the model's weights."
  ],
  "correctOption": "C",
  "explanation": "The bottleneck layer forces the autoencoder to learn a compressed representation of the input data, performing dimensionality reduction and extracting essential features.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d685810"
  },
  "question": "Which technique is commonly used to evaluate the performance of object detection models, considering both localization accuracy and classification accuracy?",
  "options": [
    "Precision-Recall curve",
    "F1-score",
    "Mean Average Precision (mAP)",
    "Accuracy"
  ],
  "correctOption": "C",
  "explanation": "Mean Average Precision (mAP) is a standard metric for evaluating object detection models, considering both localization and classification performance across different intersection over union (IoU) thresholds.",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
},
{
  "_id": {
    "$oid": "67d84c83978acd9d9d685811"
  },
  "question": "What is a crucial consideration when choosing an activation function for the output layer of a multi-class classification problem?",
  "options": [
    "Computational efficiency",
    "Derivability",
    "Range of output values",
    "Number of hidden layers"
  ],
  "correctOption": "C",
  "explanation": "The output layer activation function should produce outputs in a range suitable for probability interpretation (e.g., softmax for multi-class probabilities).",
  "tags": [
    "Neural Networks",
    "CNNs",
    "RNNs",
    "Backpropagation"
  ],
  "domain": "Computer Science - AI",
  "__v": 0
}]
[
  {
    "title": "Create a GIF with Python",
    "link": "https://www.codedex.io/projects/create-a-gif-with-python",
    "tags": [
      "Python",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/create-a-gif-with-python.png",
    "prerequisite": {
      "Prerequisite:": "Python and Command Line fundamentals",
      "Versions:": "Python 3.10, imageio 2.16.2",
      "Read Time:": "30 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Do you pronounce it ‚ÄúGIF‚Äù or a ‚ÄúJIF‚Äù? Either way, Graphics Interchange Format (GIF) is great for creating animated images. The format has been around since 1987 and helped define the early internet. It‚Äôs used to display memes, graphics, logos, and it's everywhere ‚Äî on websites, text messages, and social media."
          },
          {
            "type": "p",
            "text": "GIFs are ‚Äúanimated images‚Äù because they aren‚Äôt exactly videos. They are more like flipbooks; they don‚Äôt have sound and flip through multiple pictures sequentially. üéûÔ∏è"
          },
          {
            "type": "img",
            "src": "https://imgur.com/fSySBZW.gif"
          },
          {
            "type": "p",
            "text": "In this project tutorial, I will show you how to combine multiple images and create a GIF using just 6 lines of Python code! We'll use a list, a for loop, and a library called imageio."
          },
          {
            "type": "p",
            "text": "Here‚Äôs a preview of the project:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-gif-with-python/process.gif"
          },
          {
            "type": "p",
            "text": "Alright, let's get started! ^ ^"
          }
        ]
      },
      {
        "checkpoint": "# ImageIO Library",
        "content": [
          {
            "type": "p",
            "text": "Imageio is a Python library that provides an easy interface to read and write a wide range of image data. It runs on Python 3.5 and above."
          },
          {
            "type": "p",
            "text": "Suppose you have Python and pip the package installer on your computer. In that case, you can install imageio using this command in the Terminal (Mac) or Command Prompt (Windows):"
          },
          {
            "type": "pre",
            "text": "pip3 install imageio"
          },
          {
            "type": "p",
            "text": "Press enter, and this message should appear:"
          },
          {
            "type": "pre",
            "text": "Successfully installed imageio-2.19.3"
          },
          {
            "type": "p",
            "text": "Note: If you don't have Python and pip installed, make sure to go through this project."
          },
          {
            "type": "p",
            "text": "You can quickly check if the imageio package was successfully installed by opening Python IDLE and running the command import imageio. If no errors appear, then you are good to go!"
          }
        ]
      },
      {
        "checkpoint": "# Writing the Program",
        "content": [
          {
            "type": "p",
            "text": "Let‚Äôs open up a code editor like VS Code and create a new file called create_gif.py."
          },
          {
            "type": "p",
            "text": "To use the imageio library, you need to import it in your code:"
          },
          {
            "type": "pre",
            "text": "import imageio.v3 as iio"
          },
          {
            "type": "p",
            "text": "The \"v3\" in the import statement means you're using version 3 of the imageio library. The as part allows you to give the library a shorter name to work with (a nickname/alias), making it more convenient. So we've renamed imageio.v3 to iio moving forward."
          },
          {
            "type": "p",
            "text": "Now, run the code to make sure it works. Hopefully there's no error!"
          },
          {
            "type": "p",
            "text": "Here are two images that you can use for this project:"
          },
          {
            "type": "p",
            "text": "Note: Make sure to store the image files in the same folder as your Python program file. üí°"
          },
          {
            "type": "p",
            "text": "In our Python program, we'll create a list that contains the locations of the image files. We also need to create an empty list that will be used to store the actual image data from these files."
          },
          {
            "type": "pre",
            "text": "filenames = ['team-pic1.png', 'team-pic2.png']\nimages = [ ]"
          },
          {
            "type": "p",
            "text": "Next, let‚Äôs use a for loop to go through the file paths and read the images using imageio library‚Äôs .imread() method:"
          },
          {
            "type": "pre",
            "text": "for filename in filenames:\n  images.append(iio.imread(filename))"
          },
          {
            "type": "p",
            "text": "The .imread() method loads an image based on the file path. So now, our images variable has all the images!"
          },
          {
            "type": "p",
            "text": "Lastly, let‚Äôs use the .imwrite() method to turn the images into a GIF:"
          },
          {
            "type": "pre",
            "text": "iio.imwrite('team.gif', images, duration = 500, loop = 0)"
          },
          {
            "type": "p",
            "text": "This takes in four arguments:"
          },
          {
            "type": "p",
            "text": "And that‚Äôs it! Here‚Äôs the whole program:"
          },
          {
            "type": "pre",
            "text": "import imageio.v3 as iio\n\nfilenames = ['team-pic1.png', 'team-pic2.png']\nimages = [ ]\n\nfor filename in filenames:\n  images.append(iio.imread(filename))\n\niio.imwrite('team.gif', images, duration = 500, loop = 0)"
          }
        ]
      },
      {
        "checkpoint": "# Running the Program",
        "content": [
          {
            "type": "p",
            "text": "Let‚Äôs run this program and see what happens!"
          },
          {
            "type": "p",
            "text": "In the terminal, navigate to the folder with the Python file using cd (change directory as taught in the Command Line course. For example, if your file and images are in the Desktop folder, you can do:"
          },
          {
            "type": "pre",
            "text": "cd Desktop"
          },
          {
            "type": "p",
            "text": "Run python3 and the file name:"
          },
          {
            "type": "pre",
            "text": "python3 create_gif.py"
          },
          {
            "type": "p",
            "text": "If you are in VS Code, you can run the program by clicking the play button ‚ñ∂Ô∏è (might need to also \"Select Interpreter\" to run the correct version of Python)."
          },
          {
            "type": "p",
            "text": "A new team.gif should appear in the same folder:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-gif-with-python/team.gif"
          }
        ]
      },
      {
        "checkpoint": "# Make It Your Own",
        "content": [
          {
            "type": "p",
            "text": "Challenge yourself to take things further!"
          },
          {
            "type": "p",
            "text": "First, use your own images this time. Find two images online or on your computer and store them in the same folder as the Python file. Update the file names in the code and run again!"
          },
          {
            "type": "p",
            "text": "Note: Make sure the images have the same width and height. üí°"
          },
          {
            "type": "p",
            "text": "As a bonus, try to create a GIF using three or more images instead of just two! Here's a collection of images to play with. Where do you think the code needs to change?"
          }
        ]
      },
      {
        "checkpoint": "# Wrapping Up",
        "content": [
          {
            "type": "p",
            "text": "Congrats! You created a GIF in just 6 lines of code. Now you don‚Äôt have to rely on paid online tools to sew your images into GIFs. You just need a list, a for loop, and the imageio library to do the trick. ‚ú®"
          },
          {
            "type": "p",
            "text": "Let me know what GIFs you have created by tagging @codedex_io on Twitter or IG!"
          },
          {
            "type": "h3-li",
            "h3": "## Project Walkthrough",
            "li": [
              "Project Solution on GitHub",
              "Set Up Your Local Development Environment with Python",
              "Imageio Documentation",
              "Collection of Images",
              "Wikipedia: GIF"
            ]
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Project Solution on GitHub",
              "Set Up Your Local Development Environment with Python",
              "Imageio Documentation",
              "Collection of Images",
              "Wikipedia: GIF"
            ]
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/Pj6jufT.gif"
          }
        ]
      }
    ]
  },
  {
    "title": "Album Finder with Spotify API",
    "link": "https://www.codedex.io/projects/build-an-album-finder-with-spotify-api",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/spotify.jpg",
    "prerequisite": {
      "Prerequisites:": "HTML, CSS, and JS fundamentals",
      "Versions:": "Node.js 18, Vite 5, React 18, React-Bootstrap 2",
      "Read Time:": "65 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Did you see your latest Spotify Wrapped? I know I did! Whether you have Apple Music or YouTube music, we all listen to music from time to time! (I had about 100,000 minutes of listening time last year...) üôà"
          },
          {
            "type": "p",
            "text": "Just like Spotify engineers, we're going to access our favorite tunes with the Spotify API and JavaScript! An API (application programming interface) is code that allows two programs to talk to each other! The Spotify API in particular allows our program to talk to Spotify to retrieve data from your favorite artists or albums!"
          },
          {
            "type": "p",
            "text": "We'll be elevating your web development experience by learning how to build a simple Album Finder that can access albums of any artist that you want!"
          },
          {
            "type": "p",
            "text": "The Album Finder we're building today will work like this! ‚ú®‚ú®"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/completed-album-finder-1.gif"
          },
          {
            "type": "h3-li",
            "h3": "## Spotify API",
            "li": [
              "This uses Vite, a fast and lean build tool for modern web development projects.",
              "The base code for this tutorial uses React version 18."
            ]
          },
          {
            "type": "p",
            "text": "If you've scrolled through social media, perhaps you've seen a \"receipt\" of your friends' top songs from a website called Receiptify. Michelle Liu, the creator of the website, used the Spotify API to curate your monthly ‚Äúreceipt‚Äù of top songs. The site became so popular, acquiring over a million users per month."
          },
          {
            "type": "p",
            "text": "Me being one of them, I had to see what my top songs were for the month! As expected, I have Taylor Swift and Noah Kahan on repeat. üíØ"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/receiptify-app.gif"
          },
          {
            "type": "p",
            "text": "Learning how to use the Spotify API was a fun project for Michelle that unexpectedly changed her life completely. For this project tutorial, you'll learn how to use the API to create something cool alongside unlocking its capabilities."
          },
          {
            "type": "h3-li",
            "h3": "## Our JavaScript Tools",
            "li": [
              "This uses Vite, a fast and lean build tool for modern web development projects.",
              "The base code for this tutorial uses React version 18."
            ]
          },
          {
            "type": "p",
            "text": "To help us create our Album Finder, we'll be using some JavaScript-centric tools in our application."
          },
          {
            "type": "p",
            "text": "React is a JavaScript library for building UIs (user interfaces). With reusable components, React makes it easier for us to create web applications! Components can be buttons, widgets, cards, and more, as you create them. If you're familiar with HTML, CSS, and Javascript, learning React will allow us to combine everything with JSX, the JavaScript syntax extension for React."
          },
          {
            "type": "p",
            "text": "For first-time React users, this project tutorial will have the basics to get you feeling more comfortable with it, and with learning how to integrate the Spotify API."
          },
          {
            "type": "p",
            "text": "React-Bootstrap, is a UI library that provides you with built-in components that you're able to easily and quickly use."
          }
        ]
      },
      {
        "checkpoint": "# Setup",
        "content": [
          {
            "type": "h3-li",
            "h3": "## Create a Spotify Developer Account",
            "li": [
              "This uses Vite, a fast and lean build tool for modern web development projects.",
              "The base code for this tutorial uses React version 18."
            ]
          },
          {
            "type": "p",
            "text": "To access the API, head over to the Spotify for Developers website and log in with your Spotify account. If you don't have one, you can create one through the Spotify website."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/spotify-api-dashboard.png"
          },
          {
            "type": "p",
            "text": "After logging in, go to the Dashboard by selecting your profile image in the top-right of the screen, and then \"Dashboard\"."
          },
          {
            "type": "p",
            "text": "Note: You may be brought to a screen that asks you to accept the \"Spotify Developer Terms\". If so, check off the box near the bottom and select \"Accept the terms\"."
          },
          {
            "type": "p",
            "text": "Once you're on the Dashboard, click \"Create App\"."
          },
          {
            "type": "p",
            "text": "Here, you're going to give your app a name! Try \"Album Finder\" or \"Spotify Music Finder\"!"
          },
          {
            "type": "p",
            "text": "Give your app a description and a redirect URI. Since we're creating an app for our personal use, insert the redirect as http://localhost/."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/create-app-form.png"
          },
          {
            "type": "p",
            "text": "We'll only be using the Web API for this tutorial, so be sure to check it off as the API we are planning to use."
          },
          {
            "type": "p",
            "text": "Agree with Spotify's Developer Terms of Service and Design Guidelines, and you're all set! üí™"
          },
          {
            "type": "p",
            "text": "By creating our new app, we now have our ‚ÄúClient ID‚Äù and our ‚ÄúClient secret‚Äù. These will be important for when we actually use the Spotify API. More on that later!"
          },
          {
            "type": "h3-li",
            "h3": "## Clone GitHub Project Template",
            "li": [
              "This uses Vite, a fast and lean build tool for modern web development projects.",
              "The base code for this tutorial uses React version 18."
            ]
          },
          {
            "type": "p",
            "text": "We're now going to head over to GitHub, where we'll be using this repository as our template to get started with our project!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/template-repo.png"
          },
          {
            "type": "p",
            "text": "Some things to note about this repository:"
          },
          {
            "type": "p",
            "text": "Let's clone this repository by either downloading the folder or using Git commands:"
          },
          {
            "type": "pre",
            "text": "git clone https://github.com/exrlla/codedex-api-template.git"
          },
          {
            "type": "p",
            "text": "Note: The default name of this folder is codedex-api-template, but feel free to rename it!"
          },
          {
            "type": "p",
            "text": "For the next couple of steps, you'll need to have Node.js version 18 or above installed. You can double check your version or if you have it installed with the following command in your terminal:"
          },
          {
            "type": "pre",
            "text": "node -v"
          },
          {
            "type": "p",
            "text": "We're going to open a new terminal window at your project's folder location. In the window, enter the command npm install."
          },
          {
            "type": "p",
            "text": "Open this folder in VS Code. You'll see the project folder as such:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/template-repo-vs-code.png"
          },
          {
            "type": "p",
            "text": "If you don't have VS Code, check out our project tutorial on how to set it up."
          },
          {
            "type": "h3-li",
            "h3": "## Installing Bootstrap",
            "li": [
              "A Container to wrap around the search box.",
              "An InputGroup used as the form for our search box.",
              "A FormControl for our search box input.",
              "A Button to search for what was typed."
            ]
          },
          {
            "type": "p",
            "text": "As mentioned earlier, we're going to be using the React-Bootstrap library. It is a collection of React components built on top of Bootstrap for making our lives a bit easier when designing and adding CSS!"
          },
          {
            "type": "p",
            "text": "Let's use npm to install the following packages:"
          },
          {
            "type": "pre",
            "text": "npm install react-bootstrap bootstrap"
          },
          {
            "type": "p",
            "text": "With our libraries and project folder setup, we can begin developing!"
          }
        ]
      },
      {
        "checkpoint": "# Starting the Development Server",
        "content": [
          {
            "type": "p",
            "text": "Let's get the development server started by running the following in the folder:"
          },
          {
            "type": "pre",
            "text": "npm run dev"
          },
          {
            "type": "p",
            "text": "You'll see the localhost ready to view, and you can click on the link to follow this site to your browser. You should see something like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/launched-project-template.png"
          },
          {
            "type": "p",
            "text": "Note: Any edits you make on your project folder will automatically reload in the browser, so you can check your progress every time you save!"
          }
        ]
      },
      {
        "checkpoint": "# Connecting to the Spotify API",
        "content": [
          {
            "type": "p",
            "text": "Remember those credentials mentioned earlier? The \"Client ID\" and \"Client Secret\"? Those are the Spotify API keys we're going to use for our project!"
          },
          {
            "type": "p",
            "text": "To access them on the Spotify for Developers page, go to your Dashboard and then to your app. Next, go to \"Settings\":"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/dashboard-app-settings.png"
          },
          {
            "type": "p",
            "text": "Next, under \"Basic Information\", you will find your app's \"Client ID\". To display your app's \"Client secret\", select \"View client secret.\""
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/spotify-api-credentials.png"
          },
          {
            "type": "p",
            "text": "The ID and secret are hidden for a reason. Never share this information publically; it should always be secure!"
          },
          {
            "type": "p",
            "text": "In your main project folder, you're going to create a file called .env. It should look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/env-file.png"
          },
          {
            "type": "p",
            "text": "Here, you're going to copy the code block below and add your keys from the Spotify API developer settings."
          },
          {
            "type": "pre",
            "text": "# .env\nVITE_CLIENT_ID=YOUR CLIENT ID HERE\nVITE_CLIENT_SECRET=YOUR CLIENT SECRET HERE"
          },
          {
            "type": "p",
            "text": "Make sure this .env file is inside .gitignore so you can push your code to GitHub without publishing your keys!"
          },
          {
            "type": "p",
            "text": "In your App.jsx file, we're going to declare our variables from our env file. Under the imports, add the following:"
          },
          {
            "type": "pre",
            "text": "// App.jsx\nconst clientId = import.meta.env.VITE_CLIENT_ID;\nconst clientSecret = import.meta.env.VITE_CLIENT_SECRET;"
          },
          {
            "type": "p",
            "text": "Now that we have declared our keys, let's check the progress of our app using console.log(). This will let us know that we can successfully read our keys!"
          },
          {
            "type": "p",
            "text": "Under your declared variables, add the following line of code:"
          },
          {
            "type": "pre",
            "text": "// App.jsx\nconsole.log(clientId, clientSecret);"
          },
          {
            "type": "p",
            "text": "To check if this is read correctly, head over to your browser, and click \"Inspect\". Click on the console, and you'll see the keys in the output!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/inspect-console.gif"
          },
          {
            "type": "p",
            "text": "After confirming the clientId and clientSecret are there, remove the console.log() statement."
          },
          {
            "type": "p",
            "text": "Your App.jsx app should now look like this:"
          },
          {
            "type": "pre",
            "text": "// App.jsx\nimport \"./App.css\";\nconst clientId = import.meta.env.VITE_CLIENT_ID;\nconst clientSecret = import.meta.env.VITE_CLIENT_SECRET;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Cod√©dex Project Template</h1>\n    </div>\n  );\n}\nexport default App;"
          },
          {
            "type": "p",
            "text": "Now that we have our keys in place, let's get started with our interface!"
          },
          {
            "type": "p",
            "text": "Note: From this point on, we are only going to make edits in our App.jsx file."
          }
        ]
      },
      {
        "checkpoint": "# Search Bar",
        "content": [
          {
            "type": "p",
            "text": "For our Album Finder, we'll need a search bar that allows for user-typed requests."
          },
          {
            "type": "p",
            "text": "We can do this with React-Bootstrap, using the following components:"
          },
          {
            "type": "p",
            "text": "Since we want our app to send a request to Spotify when we click \"Search\", we'll use form control to check when our button is pressed."
          },
          {
            "type": "p",
            "text": "Let's get started by first creating our search box. Below is the container that has already some applied CSS. Let's import these components at the top of our App.jsx file:"
          },
          {
            "type": "pre",
            "text": "import { FormControl, InputGroup, Container, Button } from \"react-bootstrap\";"
          },
          {
            "type": "p",
            "text": "Inside our return() function, let's replace the template text with the component below. Note that there's some pre-written CSS as well."
          },
          {
            "type": "pre",
            "text": "<Container>\n  <InputGroup>\n    <FormControl\n      placeholder=\"Search For Artist\"\n      type=\"input\"\n      aria-label=\"Search for an Artist\"\n      onKeyDown={} // search function\n      onChange={} // setSearch\n      style={{\n        width: \"300px\",\n        height: \"35px\",\n        borderWidth: \"0px\",\n        borderStyle: \"solid\",\n        borderRadius: \"5px\",\n        marginRight: \"10px\",\n        paddingLeft: \"10px\",\n      }}\n    />\n\n    <Button onClick={{}}>Search</Button>\n  </InputGroup>\n</Container>"
          },
          {
            "type": "p",
            "text": "Your app should now look like this! ‚ú®"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/search-bar.png"
          }
        ]
      },
      {
        "checkpoint": "# Hooks",
        "content": [
          {
            "type": "p",
            "text": "Currently, our button doesn't do anything when clicked. Plus, our form isn't tracking what we type in! Let's fix that now."
          },
          {
            "type": "p",
            "text": "We're going to utilize the useEffect hook to fetch an access token from the Spotify API using client credentials authentication."
          },
          {
            "type": "p",
            "text": "Inside the useEffect, we want to accomplish a couple of things:"
          },
          {
            "type": "p",
            "text": "Since we're dealing with component state changes, we're going to use the useState."
          },
          {
            "type": "p",
            "text": "Import both useState and useEffect near the top of the file:"
          },
          {
            "type": "pre",
            "text": "import { useState, useEffect } from \"react\";"
          },
          {
            "type": "p",
            "text": "Inside our App() function, but above the return(), we're going to declare our search input (the artist name you type) and our access token that we obtain from the POST request with useState():"
          },
          {
            "type": "pre",
            "text": "const [searchInput, setSearchInput] = useState(\"\");\nconst [accessToken, setAccessToken] = useState(\"\");"
          },
          {
            "type": "p",
            "text": "First, let's write use useEffect() to fetch our access token:"
          },
          {
            "type": "pre",
            "text": "useEffect(() => {\n  let authParams = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body:\n      \"grant_type=client_credentials&client_id=\" +\n      clientId +\n      \"&client_secret=\" +\n      clientSecret,\n  };\n\n  fetch(\"https://accounts.spotify.com/api/token\", authParams)\n    .then((result) => result.json())\n    .then((data) => {\n      setAccessToken(data.access_token);\n    });\n}, []);"
          },
          {
            "type": "p",
            "text": "fetch() is a built-in JavaScript function used to make HTTP requests. It takes two parameters:"
          },
          {
            "type": "p",
            "text": "It returns a Promise in which we're able to use our access token for our search function."
          }
        ]
      },
      {
        "checkpoint": "# Async Search Function",
        "content": [
          {
            "type": "p",
            "text": "Great! Let's now continue with the main part of our app, the search functionality!"
          },
          {
            "type": "p",
            "text": "We're going to create an asynchronous search() function that will be responsible for searching for an artist on Spotify."
          },
          {
            "type": "p",
            "text": "Using the Spotify API documentation, we want to use the GET request for artists. We'll need the ID of the artist that holds the name of the artist."
          },
          {
            "type": "p",
            "text": "After the useEffect(), code the following:"
          },
          {
            "type": "pre",
            "text": "async function search() {\n  let artistParams = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + accessToken,\n    },\n  };\n\n  // Get Artist\n  const artistID = await fetch(\n    \"https://api.spotify.com/v1/search?q=\" + searchInput + \"&type=artist\",\n    artistParams\n  )\n    .then((result) => result.json())\n    .then((data) => {\n      return data.artists.items[0].id;\n    });\n}"
          },
          {
            "type": "p",
            "text": "Using await, we're going to use our searchInput that holds what the user has typed to search for our artist. This will then return the first search result."
          },
          {
            "type": "p",
            "text": "Before we test our functions, let's make our search form functional! Replace the inner curly braces in onKeyDown, onChange, and onClick with the following code:"
          },
          {
            "type": "pre",
            "text": "<Container>\n  <InputGroup>\n    <FormControl\n      placeholder=\"Search For Artist\"\n      type=\"input\"\n      aria-label=\"Search for an Artist\"\n      onKeyDown={(event) => {\n        if (event.key === \"Enter\") {\n          search();\n        } // search function\n      }}\n      onChange={(event) => setSearchInput(event.target.value)} // setSearch\n      style={{\n        width: \"300px\",\n        height: \"35px\",\n        borderWidth: \"0px\",\n        borderStyle: \"solid\",\n        borderRadius: \"5px\",\n        marginRight: \"10px\",\n        paddingLeft: \"10px\",\n      }}\n    />\n    // search function\n    <Button onClick={search}>Search</Button>\n  </InputGroup>\n</Container>"
          },
          {
            "type": "p",
            "text": "Now, our code can:"
          },
          {
            "type": "p",
            "text": "Before we move along, be sure that your App.jsx file looks like this:"
          },
          {
            "type": "pre",
            "text": "import \"./App.css\";\nimport { FormControl, InputGroup, Container, Button } from \"react-bootstrap\";\nimport { useState, useEffect } from \"react\";\n\nconst clientId = import.meta.env.VITE_CLIENT_ID;\nconst clientSecret = import.meta.env.VITE_CLIENT_SECRET;\n\nfunction App() {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n\n  useEffect(() => {\n    let authParams = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body:\n        \"grant_type=client_credentials&client_id=\" +\n        clientId +\n        \"&client_secret=\" +\n        clientSecret,\n    };\n    fetch(\"https://accounts.spotify.com/api/token\", authParams)\n      .then((result) => result.json())\n      .then((data) => {\n        setAccessToken(data.access_token);\n      });\n  }, []);\n\n  async function search() {\n    let artistParams = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + accessToken,\n      },\n    };\n\n    // Get Artist\n    const artistID = await fetch(\n      \"https://api.spotify.com/v1/search?q=\" + searchInput + \"&type=artist\",\n      artistParams\n    )\n      .then((result) => result.json())\n      .then((data) => {\n        return data.artists.items[0].id;\n      });\n  }\n\n  return (\n    <>\n      <Container>\n        <InputGroup>\n          <FormControl\n            placeholder=\"Search For Artist\"\n            type=\"input\"\n            aria-label=\"Search for an Artist\"\n            onKeyDown={(event) => {\n              if (event.key === \"Enter\") {\n                search();\n              }\n            }}\n            onChange={(event) => setSearchInput(event.target.value)}\n            style={{\n              width: \"300px\",\n              height: \"35px\",\n              borderWidth: \"0px\",\n              borderStyle: \"solid\",\n              borderRadius: \"5px\",\n              marginRight: \"10px\",\n              paddingLeft: \"10px\",\n            }}\n          />\n\n          <Button onClick={search}>Search</Button>\n        </InputGroup>\n      </Container>\n    </>\n  );\n}\n\nexport default App;"
          }
        ]
      },
      {
        "checkpoint": "# Testing Our Functions",
        "content": [
          {
            "type": "p",
            "text": "Now that we can search for artists, let's add some helpful console messages that give us some information. We want to test that our search input is correctly saving and that we get back an artist ID from that search input."
          },
          {
            "type": "p",
            "text": "Add the following code inside our search() function:"
          },
          {
            "type": "pre",
            "text": "// Get Artist\nconst artistID = await fetch(\n  \"https://api.spotify.com/v1/search?q=\" + searchInput + \"&type=artist\",\n  artistParams\n)\n  .then((result) => result.json())\n  .then((data) => {\n    return data.artists.items[0].id;\n  });\n\nconsole.log(\"Search Input: \" + searchInput);\nconsole.log(\"Artist ID: \" + artistID);"
          },
          {
            "type": "p",
            "text": "Let's go back to inspecting our page on our localhost server, and see the information we get back! Enter any artist's name into the search bar and click \"Search.\""
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/artist-info-console-output.png"
          },
          {
            "type": "p",
            "text": "üéâüéâ Yay! We see that our search result is saved and an artist ID is returned! Let's continue and use our results to build out the interface that shows all the albums of an artist!"
          }
        ]
      },
      {
        "checkpoint": "# GET Artist Albums",
        "content": [
          {
            "type": "p",
            "text": "Since we know we can use our search input to search for an artist and return an artistID, we can use this result to connect the artist to their albums."
          },
          {
            "type": "p",
            "text": "Again, feel free to use the Spotify API documentation to provide additional information."
          },
          {
            "type": "p",
            "text": "Let's keep in mind that we want to store the album information that we get back from our search results. Let's declare another useState():"
          },
          {
            "type": "pre",
            "text": "const [searchInput, setSearchInput] = useState(\"\")\nconst [accessToken, setAccessToken] = useState(\"\")\nconst [albums, setAlbums] = useState([]);"
          },
          {
            "type": "p",
            "text": "You'll notice that, unlike our last two variables, albums are going to hold an array of information so we'll initialize an empty array for now that will get populated once we apply the artistID."
          },
          {
            "type": "p",
            "text": "Let's now write our code to get album information. This will go right below the artistID functionality, inside our search() function:"
          },
          {
            "type": "pre",
            "text": "// Get Artist Albums\nawait fetch(\n  \"https://api.spotify.com/v1/artists/\" +\n    artistID +\n    \"/albums?include_groups=album&market=US&limit=50\",\n  artistParams\n)\n  .then((result) => result.json())\n  .then((data) => {\n    setAlbums(data.items);\n  });"
          },
          {
            "type": "p",
            "text": "Your search function should now look like this:"
          },
          {
            "type": "pre",
            "text": "async function search() {\n  let artistParams = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + accessToken,\n    },\n  };\n\n  // Get Artist\n  const artistID = await fetch(\n    \"https://api.spotify.com/v1/search?q=\" + searchInput + \"&type=artist\",\n    artistParams\n  )\n    .then((result) => result.json())\n    .then((data) => {\n      return data.artists.items[0].id;\n    });\n\n  // Get Artist Albums\n  await fetch(\n    \"https://api.spotify.com/v1/artists/\" +\n      artistID +\n      \"/albums?include_groups=album&market=US&limit=50\",\n    artistParams\n  )\n    .then((result) => result.json())\n    .then((data) => {\n      setAlbums(data.items);\n    });\n}"
          }
        ]
      },
      {
        "checkpoint": "# Mapping Search Results",
        "content": [
          {
            "type": "p",
            "text": "Now that we have access to the artist and the albums you query from the search box, let's go ahead and display our returned results in cards for each album!"
          },
          {
            "type": "p",
            "text": "As a reminder, this is what a card looks like:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/card-component-example.png"
          },
          {
            "type": "p",
            "text": "In order to build this, we'll want the following information:"
          },
          {
            "type": "p",
            "text": "Let's build the interface for our cards!"
          },
          {
            "type": "p",
            "text": "We'll need the Card and Row components from React-Bootstrap to create the mapping of the results."
          },
          {
            "type": "p",
            "text": "Your import statement should now look like this"
          },
          {
            "type": "pre",
            "text": "import {\n  FormControl,\n  InputGroup,\n  Container,\n  Button,\n  Row,\n  Card,\n} from \"react-bootstrap\";"
          },
          {
            "type": "p",
            "text": "Right after our search box in the return() section of our code, let's add another Container for our cards :"
          },
          {
            "type": "pre",
            "text": "<Container>\n  <Row\n    style={{\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      alignContent: \"center\",\n    }}\n  >\n    // content\n  </Row>\n</Container>"
          },
          {
            "type": "p",
            "text": "Let's circle back to our albums! We know that the albums state variable holds the list of information from the artist we choose to query. According to Spotify API documentation for \"Get Album\", we can access information like href, id, images, URI, type, restrictions, release date, artists, genres, and so much more!"
          },
          {
            "type": "p",
            "text": "For this tutorial, we'll retrieve the album image, name, release date, and link! According to the documentation, we can access this information for each album with the following:"
          },
          {
            "type": "p",
            "text": "Our Card component will have an Image, Title, Text, and a Button, for users to go visit the album link. This can be used by the <Card.Img>, <Card.Body>, <Card.Title>, and <Card.Text> components."
          },
          {
            "type": "p",
            "text": "To access our album information array without mutating it as we change it to display our album card, we're going to use the handy map() JavaScript function!"
          },
          {
            "type": "h3-li",
            "h3": "## The map() function",
            "li": [
              "Data Visualization on Spotify Data",
              "Authentication to your personal Spotify account",
              "Playlist creator",
              "CSS Redesign"
            ]
          },
          {
            "type": "p",
            "text": "Take a look at the map() function syntax:"
          },
          {
            "type": "pre",
            "text": "const numbers = [1, 2, 3, 4, 5];\nconst doubledNumbers = numbers.map((num) => num * 2);\nconsole.log(doubledNumbers); // Output: [2, 4, 6, 8, 10]"
          },
          {
            "type": "p",
            "text": "A new doubledNumbers array is made with the map() function as it takes the transforms the values from the numbers array. In our case, we won't be multiplying numbers but rather displaying a component with our album information."
          },
          {
            "type": "p",
            "text": "Inside the Row component of the container we just made, let's set up our mapping with our albums array that we're using to store our album query results."
          },
          {
            "type": "pre",
            "text": "{\n  albums.map((album) => {\n    return (\n      <Card\n        key={album.id}\n        style={{\n          backgroundColor: \"white\",\n          margin: \"10px\",\n          borderRadius: \"5px\",\n          marginBottom: \"30px\",\n        }}\n      >\n        //card content\n      </Card>\n    );\n  });\n}"
          },
          {
            "type": "p",
            "text": "You'll notice that we're using album.id as our key. In React, a key is necessary to uniquely identify elements when rendering lists/arrays. In our case, we're going to use the unique album IDs."
          },
          {
            "type": "p",
            "text": "At this point, feel free to uniquely customize your card to your liking. The CSS and styling for my album cards are written here:"
          },
          {
            "type": "pre",
            "text": "{\n  albums.map((album) => {\n    return(\n      <Card \n        key={album.id}\n        style={{\n         backgroundColor: 'white',\n         margin: '10px',\n         borderRadius: '5px',\n         marginBottom: '30px',\n     }} >\n        <Card.Img\n          width={200}\n          src={album.images[0].url}\n          style={{borderRadius: '4%',}}\n        />\n       <Card.Body>\n        <Card.Title\n            style={{\n           whiteSpace: 'wrap',\n           fontWeight: 'bold',\n           maxWidth: '200px',\n           fontSize: '18px',\n           marginTop: '10px',\n           color: 'black'\n        }}>\n            {album.name}\n          </Card.Title>\n\n          <Card.Text\n            style={{color: 'black'}}\n          >\n            Release Date: <br> {album.release_date}\n          </Card.Text>\n\n          <Button\n            href={album.external_urls.spotify} style={{\n              backgroundColor: 'black',\n              color: 'white',\n              fontWeight: 'bold',\n              fontSize: '15px',\n              borderRadius: '5px',\n              padding: '10px',\n          }}>\n            Album Link\n          </Button>\n       </Card.Body>\n      </Card>\n    )\n  })\n}"
          },
          {
            "type": "p",
            "text": "The finalized version of the App.jsx file looks as such:"
          },
          {
            "type": "pre",
            "text": "import \"./App.css\";\nimport {\n  FormControl,\n  InputGroup,\n  Container,\n  Button,\n  Card,\n  Row,\n} from \"react-bootstrap\";\nimport { useState, useEffect } from \"react\";\n\nconst clientId = import.meta.env.VITE_CLIENT_ID;\nconst clientSecret = import.meta.env.VITE_CLIENT_SECRET;\n\nfunction App() {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [albums, setAlbums] = useState([]);\n\n  useEffect(() => {\n    let authParams = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body:\n        \"grant_type=client_credentials&client_id=\" +\n        clientId +\n        \"&client_secret=\" +\n        clientSecret,\n    };\n\n    fetch(\"https://accounts.spotify.com/api/token\", authParams)\n      .then((result) => result.json())\n      .then((data) => {\n        setAccessToken(data.access_token);\n      });\n  }, []);\n\n  async function search() {\n    let artistParams = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + accessToken,\n      },\n    };\n\n    // Get Artist\n    const artistID = await fetch(\n      \"https://api.spotify.com/v1/search?q=\" + searchInput + \"&type=artist\",\n      artistParams\n    )\n      .then((result) => result.json())\n      .then((data) => {\n        return data.artists.items[0].id;\n      });\n\n    // Get Artist Albums\n    await fetch(\n      \"https://api.spotify.com/v1/artists/\" +\n        artistID +\n        \"/albums?include_groups=album&market=US&limit=50\",\n      artistParams\n    )\n      .then((result) => result.json())\n      .then((data) => {\n        setAlbums(data.items);\n      });\n  }\n\n  return (\n    <>\n      <Container>\n        <InputGroup>\n          <FormControl\n            placeholder=\"Search For Artist\"\n            type=\"input\"\n            aria-label=\"Search for an Artist\"\n            onKeyDown={(event) => {\n              if (event.key === \"Enter\") {\n                search();\n              }\n            }}\n            onChange={(event) => setSearchInput(event.target.value)}\n            style={{\n              width: \"300px\",\n              height: \"35px\",\n              borderWidth: \"0px\",\n              borderStyle: \"solid\",\n              borderRadius: \"5px\",\n              marginRight: \"10px\",\n              paddingLeft: \"10px\",\n            }}\n          />\n          <Button onClick={search}>Search</Button>\n        </InputGroup>\n      </Container>\n\n      <Container>\n        <Row\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-around\",\n            alignContent: \"center\",\n          }}\n        >\n          {albums.map((album) => {\n            return (\n              <Card\n                key={album.id}\n                style={{\n                  backgroundColor: \"white\",\n                  margin: \"10px\",\n                  borderRadius: \"5px\",\n                  marginBottom: \"30px\",\n                }}\n              >\n                <Card.Img\n                  width={200}\n                  src={album.images[0].url}\n                  style={{\n                    borderRadius: \"4%\",\n                  }}\n                />\n                <Card.Body>\n                  <Card.Title\n                    style={{\n                      whiteSpace: \"wrap\",\n                      fontWeight: \"bold\",\n                      maxWidth: \"200px\",\n                      fontSize: \"18px\",\n                      marginTop: \"10px\",\n                      color: \"black\",\n                    }}\n                  >\n                    {album.name}\n                  </Card.Title>\n                  <Card.Text\n                    style={{\n                      color: \"black\",\n                    }}\n                  >\n                    Release Date: <br /> {album.release_date}\n                  </Card.Text>\n                  <Button\n                    href={album.external_urls.spotify}\n                    style={{\n                      backgroundColor: \"black\",\n                      color: \"white\",\n                      fontWeight: \"bold\",\n                      fontSize: \"15px\",\n                      borderRadius: \"5px\",\n                      padding: \"10px\",\n                    }}\n                  >\n                    Album Link\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;"
          },
          {
            "type": "p",
            "text": "And that's a wrap! Try out your app!! üéâüéâ Enter any artist's name in the search bar and watch the cards get populated with results!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-album-finder-with-spotify-api/images/completed-album-finder-2.gif"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations!!! üéä"
          },
          {
            "type": "p",
            "text": "You've reached the end of the tutorial! You built a web app! I hope that you feel more comfortable using Web APIs and building with React!"
          },
          {
            "type": "p",
            "text": "The ideas are limitless! This tutorial has been a starting point for you to explore other ways in which the Spotify API can be used! üéµ"
          },
          {
            "type": "p",
            "text": "Some other ideas include:"
          },
          {
            "type": "p",
            "text": "Share your projects with the team @codedex_io and me, @exrlla! Let us know what you come up with, and share your favorite music with us!! ‚ú®"
          },
          {
            "type": "h3-li",
            "h3": "## Project Walkthrough",
            "li": [
              "Source code for this tutorial",
              "Spotify for Developers Web API Documentation",
              "Understanding the Spotify API by Spotify Engineering",
              "React Documentation",
              "React-Bootstrap Documentation"
            ]
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Source code for this tutorial",
              "Spotify for Developers Web API Documentation",
              "Understanding the Spotify API by Spotify Engineering",
              "React Documentation",
              "React-Bootstrap Documentation"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Build a Discord Bot with Python",
    "link": "https://www.codedex.io/projects/build-a-discord-bot-with-python",
    "tags": [
      "Python",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/build-a-discord-bot-with-python.png",
    "prerequisite": {
      "Prerequisites:": "Python fundamentals",
      "Versions:": "Python 3.10",
      "Read Time:": "45 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "In this tutorial, we'll learn how to set up your Python programming environment, create and register a bot using Discord Developer Portal, and write a few lines of Python code to respond to users' messages in Discord. We'll also provide a breakdown of each line of code for those who want to get a deeper understanding of how it all works."
          },
          {
            "type": "p",
            "text": "The Discord bot that we are going to build will listen for the keyword $meme and responds with a random meme from Reddit."
          },
          {
            "type": "p",
            "text": "The final result will look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/demo.gif"
          },
          {
            "type": "p",
            "text": "Let's dive in!"
          }
        ]
      },
      {
        "checkpoint": "# Requirements",
        "content": [
          {
            "type": "p",
            "text": "Before we get started, you will need a few things if you don't have them already:"
          }
        ]
      },
      {
        "checkpoint": "# How Does a Discord Bot Work",
        "content": [
          {
            "type": "p",
            "text": "First, let's zoom out a bit and think about this question: \"What does it mean to code a Discord Bot?\" Simply put, a bot is nothing more than a computer program that performs some useful actions."
          },
          {
            "type": "p",
            "text": "Because Discord wants bots to be able to do useful things, they have allowed developers to access parts of its system in their code, such as automatically responding to messages or helping with the server's admin functions (e.g., check out these popular Discord Bots)."
          },
          {
            "type": "p",
            "text": "Today, we're focused on getting our bot to read and write messages, so let's see how that works."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/sketch.png"
          },
          {
            "type": "p",
            "text": "From the crude drawing above (I'm an engineer, not an artist), we can see how users and bots connect to the Discord backend. Each user interacts with the Discord backend to write and read messages. Then, the Discord backend servers will broadcast an event to any program listening that a new message has been posted. All we have to do is write our program to respond to message events (named bot.py here) and connect it to the Discord backend by using their API."
          },
          {
            "type": "p",
            "text": "First, we'll have to create and register our bot from Discord's Developer Portal."
          }
        ]
      },
      {
        "checkpoint": "# Setting Up Discord Developer Portal",
        "content": [
          {
            "type": "p",
            "text": "We'll be creating and registering our Discord Application inside the Developer Portal. Then, we will create a Bot for the application and get the required permissions."
          },
          {
            "type": "h3-li",
            "h3": "## Step 1. Go to Developer Portal",
            "li": [
              "We are first checking if message.author == self.user, if the bot is the one sending the message in the chat. We don‚Äôt want the bot to keep responding to its own messages.",
              "Then, we have some code to respond to a special keyword $hello."
            ]
          },
          {
            "type": "p",
            "text": "Visit https://discord.com/developers/applications and sign in if you haven't already."
          },
          {
            "type": "h3-li",
            "h3": "## Step 2. Create a New Application",
            "li": [
              "We are first checking if message.author == self.user, if the bot is the one sending the message in the chat. We don‚Äôt want the bot to keep responding to its own messages.",
              "Then, we have some code to respond to a special keyword $hello."
            ]
          },
          {
            "type": "p",
            "text": "To let Discord know we're going to be connecting to their backend servers, we need to register an application and set up the required permissions."
          },
          {
            "type": "p",
            "text": "Click \"New Application\" on the top right."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot1.png"
          },
          {
            "type": "p",
            "text": "Next, give your application a name. Here, we are calling ours MemeBot:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot2.png"
          },
          {
            "type": "h3-li",
            "h3": "## Step 3. Add a Bot to Your Application",
            "li": [
              "We are first checking if message.author == self.user, if the bot is the one sending the message in the chat. We don‚Äôt want the bot to keep responding to its own messages.",
              "Then, we have some code to respond to a special keyword $hello."
            ]
          },
          {
            "type": "p",
            "text": "Find the \"Bot\" tab in the left panel:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot3.png"
          },
          {
            "type": "p",
            "text": "And click \"Add Bot\":"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot4.png"
          },
          {
            "type": "h3-li",
            "h3": "## Step 4. Get the Token for Your Application",
            "li": [
              "We are first checking if message.author == self.user, if the bot is the one sending the message in the chat. We don‚Äôt want the bot to keep responding to its own messages.",
              "Then, we have some code to respond to a special keyword $hello."
            ]
          },
          {
            "type": "p",
            "text": "This step is important because we'll need this Token for later. This Token is similar to a password for your application. Anybody who has this can control it. (So make sure to never share your bot token with anyone, or upload it on GitHub by mistake!)"
          },
          {
            "type": "p",
            "text": "Click \"Reset Token\", write it down somewhere safe and definitely don't put it in any public place."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot5.png"
          },
          {
            "type": "p",
            "text": "Lastly, while we're still on the \"Bot\" tab, scroll down until you find a section about \"Privileged Gateway Intents.\" In order for our Discord bot to receive messages, we'll need to toggle the \"Message Content Intent\" under this section:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot11.png"
          },
          {
            "type": "p",
            "text": "Turning this on in the developer portal will allow us to properly set up our bot in the code later in this project."
          },
          {
            "type": "h3-li",
            "h3": "## Step 5. Invite Application to Your Server",
            "li": [
              "We are first checking if message.author == self.user, if the bot is the one sending the message in the chat. We don‚Äôt want the bot to keep responding to its own messages.",
              "Then, we have some code to respond to a special keyword $hello."
            ]
          },
          {
            "type": "p",
            "text": "Now that we've set up our first application, we have to create an invite, to get our bot into our Discord server. To do that we can click URL Generator and select the following permissions. In the screenshot below, we are telling Discord to create an invitation link for our application with the scope \"Bot\" and that bot should be able to \"Send Messages.\" (Note: Be careful with granting the all-powerful \"Administrator\" permission to your bot)."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot6.png"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot7.png"
          },
          {
            "type": "p",
            "text": "This is the link to invite our application (Discord bot) into a Discord server. Copy and paste this link into another tab in your browser and invite the bot into the Discord server that you want."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot8.png"
          },
          {
            "type": "p",
            "text": "You can confirm if this worked by checking for this message in your Discord server."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot9.png"
          },
          {
            "type": "p",
            "text": "Alright, now that we‚Äôve set up our coding environment and got the necessary permissions from Discord for our new application, let‚Äôs write some code."
          }
        ]
      },
      {
        "checkpoint": "# Writing the Python Code",
        "content": [
          {
            "type": "h3-li",
            "h3": "## Installing discord.py",
            "li": [
              "We are first checking if message.author == self.user, if the bot is the one sending the message in the chat. We don‚Äôt want the bot to keep responding to its own messages.",
              "Then, we have some code to respond to a special keyword $hello."
            ]
          },
          {
            "type": "p",
            "text": "The code that we will write, will be responsible for the creation of the bot that will connect to the Discord backend using Discord APIs."
          },
          {
            "type": "p",
            "text": "The complicated part about writing this program is how we're going to interact with the Discord API. While we can read the API documentation and send HTTP requests directly to Discord, we have an easier way."
          },
          {
            "type": "p",
            "text": "We'll be using a Python package called discord.py which is a simple wrapper around the Discord API. A wrapper provides a way to access an API through a particular programming language, in this case, Python!"
          },
          {
            "type": "p",
            "text": "If you are using Mac, run the following command in the Terminal to install it:"
          },
          {
            "type": "pre",
            "text": "python3 -m pip install -U discord.py"
          },
          {
            "type": "p",
            "text": "If you are using Windows, then the following command should be used instead:"
          },
          {
            "type": "pre",
            "text": "py -3 -m pip install -U discord.py"
          },
          {
            "type": "p",
            "text": "What did we just do here? We just installed a Python package from pip the package installer, which is just another way of saying we downloaded code that someone kindly wrote and uploaded to a public repository."
          },
          {
            "type": "h3-li",
            "h3": "## Log Into the Discord Server with the Bot",
            "li": [
              "We are first checking if message.author == self.user, if the bot is the one sending the message in the chat. We don‚Äôt want the bot to keep responding to its own messages.",
              "Then, we have some code to respond to a special keyword $hello."
            ]
          },
          {
            "type": "p",
            "text": "Let‚Äôs create a new file called bot.py in a new directory. This is the main file where we'll code the logic to make our Discord bot. Now paste the following code into it:"
          },
          {
            "type": "pre",
            "text": "import discord\n\nclass MyClient(discord.Client):\n  async def on_ready(self):\n    print('Logged on as {0}!'.format(self.user))\n\nintents = discord.Intents.default()\nintents.message_content = True\n\nclient = MyClient(intents=intents)\nclient.run('Your Token Here') # Replace with your own token."
          },
          {
            "type": "p",
            "text": "Let‚Äôs go over this block of code line by line."
          },
          {
            "type": "pre",
            "text": "import discord\n\nclass MyClient(discord.Client):\n  async def on_ready(self):\n    print('Logged on as {0}!'.format(self.user))"
          },
          {
            "type": "p",
            "text": "First, we've imported the discord.py package that we just installed and created our own class MyClient which we will use to interact with the Discord API. We create this class by extending from the base class discord.Client. This base class already has methods to respond to common events. For example, the on_ready() function above will be called when the Discord bot's login is successful."
          },
          {
            "type": "p",
            "text": "discord.py works around the concept of events. There are other types of events (e.g., messages) that we will see later, but for now here's the definition of events from their website:"
          },
          {
            "type": "p",
            "text": "The next two lines of code sets the intents that will be passed into a given instance of MyClient. These are the settings for what our Discord bot can access. Since we've assigned the default() behavior for our bot, we'll need to explicitly allow it to interact with messages (i.e., message_content=True):"
          },
          {
            "type": "pre",
            "text": "intents = discord.Intents.default()\nintents.message_content = True"
          },
          {
            "type": "p",
            "text": "Finally, our last two lines of code instantiates the MyClient class and calls run, which is the main way to start the client. The client will use the given token (which you should have saved from before) to authenticate itself to the Discord backend servers."
          },
          {
            "type": "pre",
            "text": "client = MyClient(intents=intents)\nclient.run('Your Token Here') # Replace with your own token"
          },
          {
            "type": "h3-li",
            "h3": "## Running the Bot",
            "li": [
              "We are first checking if message.author == self.user, if the bot is the one sending the message in the chat. We don‚Äôt want the bot to keep responding to its own messages.",
              "Then, we have some code to respond to a special keyword $hello."
            ]
          },
          {
            "type": "p",
            "text": "You can run this code by typing in the following in your terminal."
          },
          {
            "type": "pre",
            "text": "python3 bot.py"
          },
          {
            "type": "p",
            "text": "As long as you keep this program running, your Discord bot will be online."
          },
          {
            "type": "p",
            "text": "If you see this output in your terminal, then your Discord bot has successfully logged into your Discord server."
          },
          {
            "type": "pre",
            "text": "Logged on as MemeBot#3995!"
          },
          {
            "type": "h3-li",
            "h3": "## Responding to Messages",
            "li": [
              "We are first checking if message.author == self.user, if the bot is the one sending the message in the chat. We don‚Äôt want the bot to keep responding to its own messages.",
              "Then, we have some code to respond to a special keyword $hello."
            ]
          },
          {
            "type": "p",
            "text": "Next, we want our bot to read messages in a Discord channel and respond to them."
          },
          {
            "type": "p",
            "text": "Add the .on_message() method to the MyClient class like the following:"
          },
          {
            "type": "pre",
            "text": "async def on_message(self, message):\n  if message.author == self.user:\n    return\n\n  if message.content.startswith('$hello'):\n    await message.channel.send('Hello World!')"
          },
          {
            "type": "p",
            "text": "The .on_message() method gets called automatically anytime there is a new message in a channel where our bot is located. In our method:"
          },
          {
            "type": "p",
            "text": "Let's try it out. Run the command python3 bot.py to start our program."
          },
          {
            "type": "p",
            "text": "Now, add Memebot to any channel and type the word $hello in that channel and see what happens:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/screenshot10.png"
          },
          {
            "type": "p",
            "text": "We've successfully programmed our bot to log into Discord and respond to our messages. But can we go further?"
          },
          {
            "type": "h3-li",
            "h3": "## How to Respond with Memes",
            "li": [
              "Solution on GitHub",
              "Discord Developer Portal"
            ]
          },
          {
            "type": "p",
            "text": "What if instead of responding with a text message, the bot responds with memes? Well that sounds like a lot of work.. buuut the cool thing about programming is that we can reuse other people‚Äôs work (yay for open source)."
          },
          {
            "type": "p",
            "text": "Check out this Github repository: https://github.com/D3vd/Meme_Api. This API returns a JSON response containing information about random memes from Reddit. Hmm, let‚Äôs see how it works by visiting this URL: https://meme-api.com/gimme."
          },
          {
            "type": "p",
            "text": "Here is the response that I got:"
          },
          {
            "type": "pre",
            "text": "{\n  \"postLink\": \"https://redd.it/w0teq0\",\n  \"subreddit\": \"me_irl\",\n  \"title\": \"me_irl\",\n  \"url\": \"https://i.redd.it/ztpkxx6yl0c91.png\",\n  \"nsfw\": false,\n  \"spoiler\": false,\n  \"author\": \"ozgonngu\",\n  \"ups\": 110,\n  \"preview\": [\n    \"https://preview.redd.it/ztpkxx6yl0c91.png?width=108\\u0026crop=smart\\u0026auto=webp\\u0026s=e3db2a1ed5ee73480224b55b16fcb38925ea9095\",\n    \"https://preview.redd.it/ztpkxx6yl0c91.png?width=216\\u0026crop=smart\\u0026auto=webp\\u0026s=aaec73a28c4c0b2bc47f4f9722be2fdb8ba95893\",\n    \"https://preview.redd.it/ztpkxx6yl0c91.png?width=320\\u0026crop=smart\\u0026auto=webp\\u0026s=90495a39d05f6d9d8975fb776887c08f65ece2c4\",\n    \"https://preview.redd.it/ztpkxx6yl0c91.png?width=640\\u0026crop=smart\\u0026auto=webp\\u0026s=b291abfb8f85b5826f001dee881570e694bdb46c\",\n    \"https://preview.redd.it/ztpkxx6yl0c91.png?width=960\\u0026crop=smart\\u0026auto=webp\\u0026s=7afc3f2532c7017a0045ae50777a18a2e452183e\",\n  ],\n}"
          },
          {
            "type": "p",
            "text": "It looks like the url field here contains the link for the meme's image. How about we have our bot respond to user's messages with this image?"
          },
          {
            "type": "h3-li",
            "h3": "## Integrating the Meme API",
            "li": [
              "Solution on GitHub",
              "Discord Developer Portal"
            ]
          },
          {
            "type": "p",
            "text": "Let's paste these lines of code to the top of the file."
          },
          {
            "type": "pre",
            "text": "import requests\nimport json\n\ndef get_meme():\n  response = requests.get('https://meme-api.com/gimme')\n  json_data = json.loads(response.text)\n  return json_data['url']"
          },
          {
            "type": "p",
            "text": "requests package allows us to make HTTP requests to any URL. In this case we're calling the GET method to the URL that will give us the meme data."
          },
          {
            "type": "p",
            "text": "json package allows us to read JSON data. This is useful since most data passed around on the web is in the JSON format, like the JSON response we saw above."
          },
          {
            "type": "p",
            "text": "We need to install the requests package to import it. Run the following command:"
          },
          {
            "type": "pre",
            "text": "python3 -m pip install requests"
          },
          {
            "type": "p",
            "text": "Now all we need to do is call get_meme() inside our bot's on_message() method. Let's also change the keyword from $hello to $meme since it's more fitting. Your code should look like this:"
          },
          {
            "type": "pre",
            "text": "import discord\nimport requests\nimport json\n\ndef get_meme():\n  response = requests.get('https://meme-api.com/gimme')\n  json_data = json.loads(response.text)\n  return json_data['url']\n\nclass MyClient(discord.Client):\n  async def on_ready(self):\n    print('Logged on as {0}!'.format(self.user))\n\n  async def on_message(self, message):\n    if message.author == self.user:\n      return\n    if message.content.startswith('$meme'):\n      await message.channel.send(get_meme())\n\nintents = discord.Intents.default()\nintents.message_content = True\n\nclient = MyClient(intents=intents)\nclient.run('Your Token Here') # Replace with your own token"
          },
          {
            "type": "p",
            "text": "Time to test it out!"
          },
          {
            "type": "p",
            "text": "Just remember you need to close and restart your program. Press control+c to close the currently running program in the terminal and then, run python3 bot.py again."
          },
          {
            "type": "p",
            "text": "The moment of truth..."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-discord-bot-with-python/final.gif"
          },
          {
            "type": "p",
            "text": "Success! üéâ"
          }
        ]
      },
      {
        "checkpoint": "# Final Words",
        "content": [
          {
            "type": "p",
            "text": "That's all it takes to set up and code a Discord bot in Python! Just a note: the bot will respond to you as long as the program is kept running. If you close your terminal or turn off your computer, it will no longer be running. If you want to keep the program running forever, we‚Äôll have to deploy it to another computer in the cloud. However, that is a lesson for another day."
          },
          {
            "type": "p",
            "text": "Hope you enjoyed the tutorial. If you have any questions, you can DM me on twitter at @hongjjeon."
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Solution on GitHub",
              "Discord Developer Portal"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Build a Word Guessing Game",
    "link": "https://www.codedex.io/projects/build-a-word-guessing-game-with-python",
    "tags": [
      "Python",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/word-game.png",
    "prerequisite": {
      "Prerequisites": ": Python fundamentals",
      "Version": ": Python 3",
      "Read Time": ": 30 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "One popular game is where we guess an unknown word or phrase one letter at a time. If the player(s) can guess the word within a certain amount of attempts, they will win. Alternatively, when they run out of attempts, they will lose. This game is usually played on paper, but what if we could make it using Python?"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/mxd2mJJ.gif"
          },
          {
            "type": "p",
            "text": "In this project tutorial, we'll be using:"
          },
          {
            "type": "p",
            "text": "If needed, you can follow the steps in this project tutorial to set up VS Code with Python."
          }
        ]
      },
      {
        "checkpoint": "# Create the Word Bank",
        "content": [
          {
            "type": "p",
            "text": "First, we'll need to create a word bank of all the possible words to be guessed, and randomly select one to be the correct answer. This way, the game has an element of mystery and surprise! üîçüïµ"
          },
          {
            "type": "p",
            "text": "We can do this by installing the random module:"
          },
          {
            "type": "pre",
            "text": "import random"
          },
          {
            "type": "p",
            "text": "Next, we will make a list that has all the possible words that can be the answer. This tutorial will only use five words, but you can add as many as you want!"
          },
          {
            "type": "pre",
            "text": "word_bank = ['rizz', 'ohio', 'sigma', 'tiktok', 'skibidi']"
          },
          {
            "type": "p",
            "text": "Now, we will randomly choose one of these words to be the correct answer. üé≤"
          },
          {
            "type": "pre",
            "text": "word = random.choice(word_bank)"
          },
          {
            "type": "p",
            "text": "The random.choice() method is used to randomly select a word from the word_bank list and to assign it to the word variable. All possible options have an equal probability of being chosen."
          }
        ]
      },
      {
        "checkpoint": "# Finishing the Setup",
        "content": [
          {
            "type": "p",
            "text": "We don't want to reveal the letters of the word we're trying to guess initially, so we need a list of underscores as \"placeholders\" to represent letters that haven't been guessed yet. The number of placeholders should directly correspond with the number of letters the word has. (i.e., the word ‚Äúapple‚Äù is five letters, so there should be five underscores as placeholders)"
          },
          {
            "type": "pre",
            "text": "guessedWord = ['_'] * len(word)"
          },
          {
            "type": "p",
            "text": "In Python, you can multiply a list by an integer and the list will repeat that amount of times. The ['_'] creates a list with a single underscore element, while the len(word) function returns the length (or number of characters) in the word string."
          },
          {
            "type": "p",
            "text": "We'll finish setting by determining how many attempts the player has at guessing the word. We will be using 10 for this tutorial, but you can make it any number you want."
          },
          {
            "type": "pre",
            "text": "attempts = 10"
          },
          {
            "type": "p",
            "text": "Go ahead and save the file and let's move on to the game loop!"
          },
          {
            "type": "h3-li",
            "h3": "## Game Loop",
            "li": [
              "The random module",
              "List and string operations",
              "Input/output handling",
              "Control flow statements"
            ]
          },
          {
            "type": "p",
            "text": "We need to create a while loop so the player can continuously guess until they run out of attempts or guess the word correctly. üîÅ"
          },
          {
            "type": "pre",
            "text": "while attempts > 0:"
          },
          {
            "type": "p",
            "text": "Each time the loop runs, we will display the current state of the word being guessed."
          },
          {
            "type": "pre",
            "text": "while attempts > 0:\n  print('\\nCurrent word: ' + ' '.join(guessedWord))"
          },
          {
            "type": "p",
            "text": "The statement is printed on a new line via \\n, and joins the strings in guessedWord together with spaces. For example, if the state of guessedWord is ['a', '_', 'p', '_', 'e'], the result would be the string \"a _ p _ e\", making the program look smoother and less clunky."
          },
          {
            "type": "p",
            "text": "Since the guessing is based on user input, we need to prompt the user to guess a letter and store it in a variable."
          },
          {
            "type": "pre",
            "text": "guess = input('Guess a letter: ')"
          },
          {
            "type": "p",
            "text": "We then need to determine whether or not the guessed letter is in the correct word. If it is, we loop through each letter of the word to find which position the letter is in and replace the placeholder with the guessed letter."
          },
          {
            "type": "pre",
            "text": "if guess in word:\n  for i in range(len(word)):\n    if word[i] == guess:\n      guessedWord[i] = guess\n  print('Great guess!')"
          },
          {
            "type": "p",
            "text": "The for loop goes over each index of the word, to check every letter. If the letter at position i matches the player‚Äôs guess, it updates the position in the guessedWord list. We'll print out some positive feedback to let the user know that they guessed correctly."
          },
          {
            "type": "p",
            "text": "Furthermore, we need to write some code that handles situations where the user guesses incorrectly. If the player's guess is not in the word, the number of attempts decreases by one. Since attempts is an integer, we must also convert it to a string to let the player know how many attempts they have left."
          },
          {
            "type": "pre",
            "text": "else:\n  attempts -= 1\n  print('Wrong guess! Attempts left: ' + str(attempts))"
          },
          {
            "type": "p",
            "text": "We're almost done! We'll know if the player has won the game when they guess all the letters in the word. If there are no more underscores as placeholders in the guessedWord variable, there are no more blanks left. When the player wins, we will break the while loop and end the game."
          },
          {
            "type": "pre",
            "text": "  if '_' not in guessedWord:\n        print('\\nCongratulations!! You guessed the word: ' + word)\n        break"
          },
          {
            "type": "p",
            "text": "Finally, we need a condition that results in a loss for the player when they run out of attempts and reveal the correct word."
          },
          {
            "type": "pre",
            "text": "else:\n    print('\\nYou\\'ve run out of attempts! The word was: ' + word)"
          },
          {
            "type": "p",
            "text": "Note: We don't need to break the while loop because the condition was while attempts > 0."
          },
          {
            "type": "p",
            "text": "When you're finished, the game loop should look something like this:"
          },
          {
            "type": "pre",
            "text": "while attempts > 0:\n   \n    print('\\nCurrent word: ' + ' '.join(guessedWord))\n\n    guess = input('Guess a letter: ').lower()\n   \n    if guess in word:\n        for i in range(len(word)):\n            if word[i] == guess:\n                guessedWord[i] = guess\n        print('Great guess!')\n    else:\n        attempts -= 1\n        print('Wrong guess! Attempts left: ' + str(attempts))\n    if '_' not in guessedWord:\n        print('\\nCongratulations!! You guessed the word: ' + word)\n        break\n    else:\n      print('\\nYou\\'ve run out of attempts! The word was: ' + word)"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! You have completed the project! üéâüéä"
          },
          {
            "type": "p",
            "text": "In this tutorial, you used the following to build a word-guessing game:"
          },
          {
            "type": "p",
            "text": "Now, you can enjoy this game you built yourself, or with friends!"
          },
          {
            "type": "p",
            "text": "If you would like to challenge yourself, try to add a \"hangman\" stick figure that is changed every time the user guesses a character incorrectly."
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": []
      }
    ]
  },
  {
    "title": "Build a Pomodoro App with JavaScript",
    "link": "https://www.codedex.io/projects/build-a-pomodoro-app-with-html-css-js",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/build-a-pomodoro-app-with-html-css-js.png",
    "prerequisite": {
      "Prerequisites:": "HTML, CSS, JavaScript fundamentals",
      "Versions:": "None",
      "Read Time:": "45 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Welcome to the Pomodoro timer app coding tutorial! In this project, you'll learn how to create a simple and effective time management tool using just HTML, CSS, and JavaScript. By the end of this tutorial, you'll have a basic understanding of how to build a dynamic web page that responds to user interactions. You'll also learn how to structure and style your HTML elements with CSS, and how to add interactivity with JavaScript."
          },
          {
            "type": "p",
            "text": "The final project will look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-pomodoro-app-with-html-css-js/finished_pomodoro.gif"
          }
        ]
      },
      {
        "checkpoint": "# What is the Pomodoro Technique?",
        "content": [
          {
            "type": "p",
            "text": "The Pomodoro Technique is a time management method developed in the late 80s by Francesco Cirillo. The theory behind this technique is that taking frequent breaks can help improve your mental focus and prevent burnout. It can improve mental agility, boost motivation, and provide a better sense of accomplishment by breaking tasks into smaller chunks. For these reasons, this technique is quite popular with programmers."
          },
          {
            "type": "p",
            "text": "The idea is to break down work into short intervals, usually 25 minutes, with short breaks in between sessions, usually 5 to 10 minutes. Each interval is known as a pomodoro, Italian word for tomato. The goal is to use each Pomodoro to focus on one specific task, then take a break before starting the next one."
          },
          {
            "type": "p",
            "text": "So, let's get started and create a Pomodoro app that will help you increase your productivity and get things done! üçÖ"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "p",
            "text": "First, we need to set up our file structure so everything is organized and easy to find."
          },
          {
            "type": "p",
            "text": "Create a new folder on your computer and name it pomodoro-app."
          },
          {
            "type": "p",
            "text": "Then, create the following files inside the folder:"
          },
          {
            "type": "p",
            "text": "The file structure should look like the following:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-pomodoro-app-with-html-css-js/app_file_structure.png"
          }
        ]
      },
      {
        "checkpoint": "# Let's Start Building!",
        "content": [
          {
            "type": "p",
            "text": "Now that we've got the foundation in place for the Pomodoro app, it's time to start building!"
          },
          {
            "type": "h3-li",
            "h3": "## HTML",
            "li": [
              "In the <head> element, a <title> element that says \"Pomodoro App\".",
              "In the <body> element, a <div> element with an \"app-container\" class.",
              "After the <body> element, a <script> element with the src attributed to our app.js file."
            ]
          },
          {
            "type": "p",
            "text": "HTML features the basic building blocks that define the meaning and structure of web pages."
          },
          {
            "type": "p",
            "text": "To start, our index.html file should look like the following:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    Some code will go here\n  </head>\n  <body>\n    A lot more will go here\n  </body>\n</html>"
          },
          {
            "type": "p",
            "text": "Next, let's add the following:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Pomodoro App</title>\n  </head>\n  <body>\n    <div class=\"app-container\">\n    </div>\n  </body>\n  <script src=\"./app.js\"></script>\n</html>"
          },
          {
            "type": "p",
            "text": "This establishes the basic structure for our Pomodoro app."
          },
          {
            "type": "p",
            "text": "Next, let's add the following code to the <head> element:"
          },
          {
            "type": "pre",
            "text": "<head>\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n  <link href=\"https://fonts.googleapis.com/css2?family=EG+Garamond:wght@400;500;600;700&family=Fira+Sans:wght@400;500;600;700&display=swap\" rel=\"stylesheet\" />\n  <link rel=\"stylesheet\" href=\"./style.css\" />\n  <title>Pomodoro App</title>\n</head>"
          },
          {
            "type": "p",
            "text": "We just added a few <link> elements:"
          },
          {
            "type": "p",
            "text": "In the <body>, let's add the following inside the <div> element with the app-container class:"
          },
          {
            "type": "pre",
            "text": "<div class=\"app-container\">\n  <h1>pomodoro</h1>\n  <div class=\"app-message\">press start to begin</div>\n  <div class=\"app-circle\">\n    <div class=\"circle-shape\">\n      <div class=\"semi-circle right-side circle-mask\"></div>\n      <div class=\"semi-circle right-side circle\"></div>\n      <div class=\"semi-circle left-side circle-mask\"></div>\n      <div class=\"semi-circle left-side circle\"></div>\n    </div>\n    <div class=\"app-counter-box\">\n      <p><span class=\"minutes\">25</span>:<span class=\"seconds\">00</span></p>\n    </div>\n    <button class=\"btn-start\">start</button>\n  </div>\n</div>"
          },
          {
            "type": "p",
            "text": "Underneath of the <h1> element are the main parts of the app:"
          },
          {
            "type": "p",
            "text": "If we save and then double-click the file, it should open and look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-pomodoro-app-with-html-css-js/rendered_html_only.png"
          },
          {
            "type": "p",
            "text": "Awesome work with the HTML! Let's continue to the next step, styling!"
          },
          {
            "type": "h3-li",
            "h3": "## CSS",
            "li": [
              "We are grabbing the text \"25\" in our session variable and converting it to a Number and assigning that number to sessionAmount",
              "If our state is True, we do the following:\nConvert the sessionAmount, the time left, to just seconds.\nDefine a function called updateSeconds(), (more on that, shortly).\nUse the setInverval() Web API function to run our updateSeconds() function every 1 second (or 1000 milliseconds). This is assigned to our myInterval function from earlier, so it can be turned off when the timer reaches 0.",
              "Else, if the state is False, we alert the user that the \"Session has already started\". This prevents the user from repeatedly clicking on the start button which would cause multiple calls to the updateSeconds() function and would cause the timer to count at an irregular speed."
            ]
          },
          {
            "type": "p",
            "text": "Now that we have the overall structure of our web application, let's get started on our CSS, which stands for \"Cascading Style Sheets\". According to the Mozilla Developer Network (MDN):"
          },
          {
            "type": "p",
            "text": "Basically, this is where we will set up the appearance of our application."
          },
          {
            "type": "p",
            "text": "CSS is utilized through class names that are assigned to the HTML elements in our app. They use the following structure:"
          },
          {
            "type": "pre",
            "text": ".class-name {\n  /* Content goes here. */\n}"
          },
          {
            "type": "p",
            "text": "For example, there is a <div> container with an \"app-container\" class assigned to it. Classes are how we select specific elements within the HTML to style."
          },
          {
            "type": "p",
            "text": "With their class names, elements can be selected and styled with CSS, such as with <div> division element with the \"app-container\" class:"
          },
          {
            "type": "pre",
            "text": ".app-container {\n  /* Styles go here. */\n}"
          },
          {
            "type": "p",
            "text": "To learn more about CSS, visit MDN."
          },
          {
            "type": "p",
            "text": "Let's begin by establishing a few high-level styles:"
          },
          {
            "type": "pre",
            "text": "html {\n  font-family: 'Fira Sans', sans-serif;\n  font-size: 20px;\n  letter-spacing: 0.8px;\n  min-height: 100vh;\n  color: #d8e9ef;\n  background-image: linear-gradient(-20deg, #025159 0%, #733b36 100%);\n  background-size: cover;\n}"
          },
          {
            "type": "p",
            "text": "The styles for the <html> element set the font and background of our app."
          },
          {
            "type": "p",
            "text": "Next, let's add the following additional styles for our app headings and overall container:"
          },
          {
            "type": "pre",
            "text": "h1 {\n  margin: 0 auto 10px auto;\n  color: #d8e9ef;\n}\n\np {\n  margin: 0;\n}\n\n.app-message {\n  height: 20px;\n  margin: 10px auto 20px auto;\n}\n\n.app-container {\n  width: 250px;\n  height: 420px;\n  margin: 40px auto;\n  text-align: center;\n  border-radius: 5px;\n  padding: 20px;\n}"
          },
          {
            "type": "p",
            "text": "The margin and padding properties are used to give some spacing between our elements."
          },
          {
            "type": "p",
            "text": "Now, let's style the .app-circle, which will start with a .circle-shape:"
          },
          {
            "type": "pre",
            "text": ".app-circle {\n  position: relative;\n  margin: 0 auto;\n  width: 200px;\n  height: 200px;\n}\n\n.circle-shape {\n  pointer-events: none;\n}"
          },
          {
            "type": "p",
            "text": "The .app-circle is where the remaining time and start button will be. It is made of two semi-circles for the left-side and right-side. The .circle-shape is set so that the rendered circle cannot be clicked."
          },
          {
            "type": "p",
            "text": "Let's now apply styles to the <div> elements marked with the .semi-circle, .left-side, and .right-side classes:"
          },
          {
            "type": "pre",
            "text": ".semi-circle {\n  position: absolute;\n  width: 100px;\n  height: 200px;\n  box-sizing: border-box;\n  border: solid 6px;\n}\n\n.left-side {\n  top: 0;\n  left: 0;\n  transform-origin: right center;\n  transform: rotate(0deg);\n  border-top-left-radius: 100px;\n  border-bottom-left-radius: 100px;\n  border-right: none;\n  z-index: 1;\n}\n\n .right-side {\n  top: 0;\n  left: 100px;\n  transform-origin: left center;\n  transform: rotate(0deg);\n  border-top-right-radius: 100px;\n  border-bottom-right-radius: 100px;\n  border-left: none;\n}"
          },
          {
            "type": "p",
            "text": "Then, let's apply these styles:"
          },
          {
            "type": "pre",
            "text": ".circle {\n  border-color: #bf5239;\n}\n\n.circle-mask {\n  border-color: #e85a71;\n}"
          },
          {
            "type": "p",
            "text": "This sets the border color for the outline of the circle for our timer. When rendered, the page should have a red ring towards the middle of it."
          },
          {
            "type": "p",
            "text": "Lastly, let's add these styles:"
          },
          {
            "type": "pre",
            "text": ".app-counter-box {\n  font-family: 'Droid Sans Mono', monospace;\n  font-size: 250%;\n  position: relative;\n  top: 50px;\n  color: #d8e9ef;\n}\n\nbutton {\n  position: relative;\n  top: 50px;\n  font-size: 80%;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  border: none;\n  background: none;\n  outline: none;\n  color: #d8e9ef;\n}\n\nbutton:hover {\n  color: #90c0d1;\n}"
          },
          {
            "type": "p",
            "text": "The .app-counter-box contains the remaining time for our timer. We gave it one of the fonts we imported in the previous section."
          },
          {
            "type": "p",
            "text": "The selected <button> element was set so that only the text is visible and it is uppercase. When hovered, the button's color should change."
          },
          {
            "type": "p",
            "text": "Let's go ahead and save our style.css file and refresh our page to see what it now looks like:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-pomodoro-app-with-html-css-js/rendered_app_no_js.png"
          },
          {
            "type": "p",
            "text": "Excellent! It's time to move on to the final part of our Pomodoro App to make it count down!"
          },
          {
            "type": "h3-li",
            "h3": "## JavaScript",
            "li": [
              "We are grabbing the text \"25\" in our session variable and converting it to a Number and assigning that number to sessionAmount",
              "If our state is True, we do the following:\nConvert the sessionAmount, the time left, to just seconds.\nDefine a function called updateSeconds(), (more on that, shortly).\nUse the setInverval() Web API function to run our updateSeconds() function every 1 second (or 1000 milliseconds). This is assigned to our myInterval function from earlier, so it can be turned off when the timer reaches 0.",
              "Else, if the state is False, we alert the user that the \"Session has already started\". This prevents the user from repeatedly clicking on the start button which would cause multiple calls to the updateSeconds() function and would cause the timer to count at an irregular speed."
            ]
          },
          {
            "type": "p",
            "text": "With JavaScript, we can create a simple yet functional Pomodoro App that starts counting down from 25 minutes, second by second, when the start button is clicked."
          },
          {
            "type": "p",
            "text": "To learn more about JavaScript, visit MDN."
          },
          {
            "type": "p",
            "text": "In our app.js file, let's initialize the following variables:"
          },
          {
            "type": "pre",
            "text": "const bells = new Audio('./sounds/bell.wav'); \nconst startBtn = document.querySelector('.btn-start'); \nconst session = document.querySelector('.minutes'); \nlet myInterval; \nlet state = true;"
          },
          {
            "type": "p",
            "text": "With the bells variable, we are assigning a .wav file that we got from Mixkit. Using the Audio() constructor, we assign the path of the bell sound as a parameter."
          },
          {
            "type": "p",
            "text": "Like in CSS, HTML elements must be selected to be used in JavaScript. For the startBtn and session constant variables, we are using the document object's .querySelector() method to select and update elements on the web page. We are selecting the elements through class selectors, .btn-start and .minutes."
          },
          {
            "type": "p",
            "text": "For now, we are just instantiating a myInterval variable without assigning it."
          },
          {
            "type": "p",
            "text": "The last variable is a state that is assigned the Boolean value True. This defines when the application is running. If it is, the timer will progress. However, if the state is false, there will be an alert that notifies the user that the session has already started."
          },
          {
            "type": "p",
            "text": "Awesome! Now that our variables have been declared and initialized, we can move on to the main functionality that brings this all together, the appTimer() function."
          },
          {
            "type": "pre",
            "text": "const appTimer = () => {\n  const sessionAmount = Number.parseInt(session.textContent)\n\n  if(state) {\n    state = false;\n    let totalSeconds = sessionAmount * 60;\n\n    const updateSeconds = () => {\n      // Function code here.\n    }\n    myInterval = setInterval(updateSeconds, 1000);\n  } else {\n    alert('Session has already started.')\n  }\n}"
          },
          {
            "type": "p",
            "text": "Inside the appTimer() function there are a few things happening:"
          },
          {
            "type": "p",
            "text": "Earlier, we defined a function called updateSeconds(). In this function, we are grabbing two <div> elements called 'minuteDiv' and 'secondDiv':"
          },
          {
            "type": "pre",
            "text": "const updateSeconds = () => {\n  const minuteDiv = document.querySelector('.minutes');\n  const secondDiv = document.querySelector('.seconds');\n\n  totalSeconds--;\n\n  let minutesLeft = Math.floor(totalSeconds/60);\n  let secondsLeft = totalSeconds % 60;\n\n  if(secondsLeft < 10) {\n    secondDiv.textContent = '0' + secondsLeft;\n  } else {\n    secondDiv.textContent = secondsLeft;\n  }\n  minuteDiv.textContent = `${minutesLeft}`\n\n  if(minutesLeft === 0 && secondsLeft === 0) {\n    bells.play()\n    clearInterval(myInterval);\n  }\n}"
          },
          {
            "type": "p",
            "text": "These elements will allow us to change the text content that is being displayed on the page as the timer counts down to zero."
          },
          {
            "type": "p",
            "text": "Next, let's provide the logic for how we handle the countdown."
          },
          {
            "type": "pre",
            "text": "const updateSeconds = () => {\n  const minuteDiv = document.querySelector('.minutes');\n  const secondDiv = document.querySelector('.seconds');\n\n  totalSeconds--;\n\n  let minutesLeft = Math.floor(totalSeconds/60);\n  let secondsLeft = totalSeconds % 60;\n}"
          },
          {
            "type": "p",
            "text": "Here, we are decrementing totalSeconds after each second passes. We then convert the seconds into minutes and assign them to a minutesLeft variable. Then, we use the % modulo operator to ensure that the secondsLeft variable is a positive integer between 0 and 59, inclusive."
          },
          {
            "type": "p",
            "text": "Next we use an if-else block to check the secondsLeft variable:"
          },
          {
            "type": "pre",
            "text": "if(secondsLeft < 10) {\n  secondDiv.textContent = '0' + secondsLeft;\n} else {\n  secondDiv.textContent = secondsLeft;\n}\nminuteDiv.textContent = `${minutesLeft}`;\n\nif(minutesLeft === 0 && secondsLeft === 0) {\n  bells.play();\n  clearInterval(myInterval);\n}"
          },
          {
            "type": "p",
            "text": "In this particular block we are saying the following:"
          },
          {
            "type": "p",
            "text": "On line 25 we set the textContent property of the minutesFromPage DOM element to the current value of minutes. And lastly, we handle the logic for when the timer reaches 0. When the timer reaches 0, we will play our bell sound that we declared at the beginning of the application and then we will stop the timer by using the clearInterval() method that will \"turn off\" the updateSeconds() so it stops running every second."
          },
          {
            "type": "p",
            "text": "After the if-else statement, when the application first runs, we set an addEventListener() to the startBtn DOM variable that we selected earlier."
          },
          {
            "type": "pre",
            "text": "startBtn.addEventListener('click', appTimer);"
          },
          {
            "type": "p",
            "text": "In this function, we pass two arguments:"
          },
          {
            "type": "p",
            "text": "Alrighty! Let's save our app.js file and refresh our page to test if our Pomodoro App is like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-pomodoro-app-with-html-css-js/finished_pomodoro.gif"
          }
        ]
      },
      {
        "checkpoint": "# Finish Line",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! You've created a fully functional Pomodoro App!"
          },
          {
            "type": "p",
            "text": "Throughout the article, we learned how to use HTML to create the basic skeleton of the app, style it with CSS, and added functionality with JavaScript."
          },
          {
            "type": "p",
            "text": "Bonus: There are plenty of ways to build on top of this. If you're up for an extra challenge:"
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Pomodoro Technique",
              "The Origins I: HTML",
              "CSS Building Blocks (MDN)",
              "JavaScript (MDN)"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Create a To-Do List App with JavaScript",
    "link": "https://www.codedex.io/projects/create-a-to-do-list-app-with-html-css-js",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/create-a-to-do-list-app-with-html-css-js.png",
    "prerequisite": {
      "Prerequisites:": "HTML, CSS, &amp; JS fundamentals",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Tired of your \"to-do\" list looking more like a \"to-don't\" list? Today's the day we flip the script! We're turning your to-dos into to-dones!"
          },
          {
            "type": "p",
            "text": "Follow along with this tutorial as we work together to check off every incomplete task on our to-do list using HTML, CSS, and JavaScript. By the end of the tutorial, you'll be able to ADD, DELETE, EDIT, and most importantly COMPLETE tasks."
          },
          {
            "type": "p",
            "text": "Here are the following features you will need to complete:"
          },
          {
            "type": "p",
            "text": "The final project should look similar to this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-to-do-list-app-with-html-css-js/finished-todo-list.gif"
          },
          {
            "type": "p",
            "text": "Let's do this!"
          }
        ]
      },
      {
        "checkpoint": "# Getting Started",
        "content": [
          {
            "type": "p",
            "text": "Let's set up our editor. For this application, we will be using our PC terminal and Visual Studio Code (VS Code). If you prefer an online editor such as Cod√©dex Builds, you are more than welcome to do so."
          },
          {
            "type": "p",
            "text": "First, we need to create a directory and files for our project using the terminal. Once you open the terminal, cd into your Desktop. This is where we will add our directory. You can name it anything you like but to make it easier, let's name it todo-list-project:"
          },
          {
            "type": "pre",
            "text": "cd Desktop\nmkdir todo-list-project\ncd todo-list-project\ntouch index.html script.js styles.css"
          },
          {
            "type": "p",
            "text": "Now, let's see what we have created. Open VS Code and navigate to the top left corner. Click on \"File\" from the dropdown menu, choose \"Open Folder\". Proceed to locate and open the todo-list-project folder on your Desktop."
          },
          {
            "type": "p",
            "text": "Once you have opened this folder on VS Code. Within this folder, you will see the necessary files we created to build out your application:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-to-do-list-app-with-html-css-js/todo-list-vs-code.png"
          },
          {
            "type": "p",
            "text": "The following files have been created in our todo-list-project folder:"
          }
        ]
      },
      {
        "checkpoint": "# Task 1: Create TODO List Input",
        "content": [
          {
            "type": "p",
            "text": "In our index.html file, we have included a <title> and <link> element inside of the <head>. For the title we set the name of the app to TO-DO List. We also linked the style.css file because, trust, styling is gonna make it look super cool later."
          },
          {
            "type": "p",
            "text": "Toward the end of our code we need to include our <script> tag. This will link our JS file where we will create variables and functions that will make everything work just right."
          },
          {
            "type": "p",
            "text": "Let's check this out:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>TO-DO List</title>\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n  <body>\n    <script type=\"text/javascript\" src=\"script.js\"></script>\n  </body>\n</html>"
          },
          {
            "type": "p",
            "text": "Now, let's create a text input box for typing in all those todo tasks, including an \"Add\" button:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>TO-DO List</title>\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n  <body>\n    <!-- create a container for the todo list -->\n    <div id=\"todo-container\">\n      <!-- todo list header -->\n      <div id=\"header\">\n        <h1>To Do List</h1>\n      </div>\n\n      <!-- create input box -->\n      <div id=\"todo-form\">\n        <input\n          type=\"text\"\n          class=\"input-item\"\n          name=\"input_box\"\n          id=\"input-box\"\n          placeholder=\"Add Task\"\n        />\n\n        <!-- add button -->\n        <button id=\"input-button\" onclick=\"addTask()\">Add</button>\n      </div>\n\n      <!-- task list -->\n      <h2>Task List</h2>\n      <ul id=\"list-container\"></ul>\n    </div>\n\n    <script type=\"text/javascript\" src=\"script.js\"></script>\n  </body>\n</html>"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-to-do-list-app-with-html-css-js/todo-list-html-only.png"
          },
          {
            "type": "p",
            "text": "The button won't work just yet. But don't worry, we'll get there!"
          }
        ]
      },
      {
        "checkpoint": "# Task 2: Add Counters",
        "content": [
          {
            "type": "p",
            "text": "Let's say we want to be able to calculate the number of tasks we have completed and the ones we have yet to get done. Let's make tracking our progress a bit simpler with counters for completed and uncompleted tasks."
          },
          {
            "type": "p",
            "text": "Below your <ul> list container, add these lines of code:"
          },
          {
            "type": "pre",
            "text": "<hr />\n<!-- task list counter -->\n<div class=\"counter-container\">\n  <div id=\"task-counters\">\n    Completed: <span id=\"completed-counter\">0</span> | Uncompleted:\n    <span id=\"uncompleted-counter\">0</span>\n  </div>\n</div>"
          },
          {
            "type": "p",
            "text": "Note: We added an <hr> tag (horizontal line), to create a separation between our list items and the task counters. We then created a <div> for the number of complete and incomplete tasks."
          },
          {
            "type": "p",
            "text": "Your updated todo list should look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-to-do-list-app-with-html-css-js/todo-list-complete-uncomplete.png"
          },
          {
            "type": "p",
            "text": "Let's take the next steps to activate our buttons, counter and add our first task to the list."
          }
        ]
      },
      {
        "checkpoint": "# Task 3: Add JavaScript",
        "content": [
          {
            "type": "p",
            "text": "Let's kick things into high gear by adding some JavaScript!"
          },
          {
            "type": "p",
            "text": "Above, we set up the structure for our todo list using HTML. Here, we're about to create a function that will let us seamlessly add our tasks to the list. Let's open our script.js file where we will first create two variables."
          },
          {
            "type": "p",
            "text": "We will use these variables for our input and todo list container:"
          },
          {
            "type": "pre",
            "text": "const inputBox = document.getElementById(\"input-box\");\nconst listContainer = document.getElementById(\"list-container\");"
          },
          {
            "type": "p",
            "text": "We used the special document object and its getElementById() method to select our input box and list container elements. Then we assigned them to the inputBox and listContainer variables."
          },
          {
            "type": "h3-li",
            "h3": "## Add Your First List Item",
            "li": [
              "A checkbox-type <input>.",
              "The task content (using the ${task} placeholder).",
              "\"Edit\" and \"Delete\" buttons that appear at the end of every task."
            ]
          },
          {
            "type": "p",
            "text": "Next, we will create our addTask() function! If a user forgets to type in a task and eagerly hits that \"Add\" button, a friendly alert message will pop up, reminding them to \"Please write down a task\":"
          },
          {
            "type": "pre",
            "text": "function addTask() {\n  const task = inputBox.value.trim();\n  if (!task) {\n    alert(\"Please write down a task\");\n    return;\n  }\n}"
          },
          {
            "type": "p",
            "text": "We'll continue working inside this function in this section. Since we have already created a <ul> container in our HTML file to hold our list, let's create a new list item with the document object's createElement() method:"
          },
          {
            "type": "pre",
            "text": "const li = document.createElement(\"li\");"
          },
          {
            "type": "p",
            "text": "Then we will we set up the HTML content of the list item:"
          },
          {
            "type": "pre",
            "text": "li.innerHTML = `\n  <label>\n    <input type=\"checkbox\">\n    <span>${task}</span>\n  </label>\n  <span class=\"edit-btn\">Edit</span>\n  <span class=\"delete-btn\">Delete</span>\n`;"
          },
          {
            "type": "p",
            "text": "The inner HTML of our new task item includes:"
          },
          {
            "type": "p",
            "text": "To actually add the item to our list, we will need to use our .appendChild() method. This will add the newly created list item to the container specified by listContainer:"
          },
          {
            "type": "pre",
            "text": "listContainer.appendChild(li);"
          },
          {
            "type": "p",
            "text": "Open up your application inside your browser and test it out!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-to-do-list-app-with-html-css-js/todo-list-edit-delete-html-only.gif"
          },
          {
            "type": "p",
            "text": "Great job! You've successfully added your first task."
          },
          {
            "type": "p",
            "text": "However, you may have noticed that when we add a new task, it remains in the input box, requiring you to delete it before entering a new task. To fix this, we can add the following:"
          },
          {
            "type": "pre",
            "text": "inputBox.value = \"\";"
          },
          {
            "type": "p",
            "text": "This line of code sets the value of the input field (inputBox) to an empty string, clearing the field after adding the task. At this point, the addTask function should contain the following lines of code:"
          },
          {
            "type": "pre",
            "text": "function addTask() {\n  const task = inputBox.value.trim();\n  if (!task) {\n    alert(\"Please write down a task\");\n    return;\n  }\n\n  li.innerHTML = `\n    <label>\n      <input type=\"checkbox\">\n      <span>${task}</span>\n    </label>\n    <span class=\"edit-btn\">Edit</span>\n    <span class=\"delete-btn\">Delete</span>\n    `;\n\n  listContainer.appendChild(li);\n  inputBox.value = \"\";\n}"
          }
        ]
      },
      {
        "checkpoint": "# Task 4: Activate Task Buttons",
        "content": [
          {
            "type": "p",
            "text": "In the code provided above, we created an input for a checkbox and a span for our \"Edit\" and \"Delete\" buttons. Each task added to our list should allow us to manipulate it. Here's how each element functions:"
          },
          {
            "type": "p",
            "text": "Using the .querySelector() method, let's create a variable for each of our elements:"
          },
          {
            "type": "pre",
            "text": "const checkbox = li.querySelector(\"input\");\nconst editBtn = li.querySelector(\".edit-btn\");\nconst taskSpan = li.querySelector(\"span\");\nconst deleteBtn = li.querySelector(\".delete-btn\");"
          },
          {
            "type": "p",
            "text": "Note: As you can see, we have a taskSpan variable that allows us to edit a specific task when the edit button is clicked."
          },
          {
            "type": "h3-li",
            "h3": "## Checkbox",
            "li": [
              "We use the classList.toggle() to add the \"completed\" class to the list item li.",
              "When the checkbox is checked (checkbox.checked is true), and removes the \"completed\" class if the checkbox is unchecked (checkbox.checked is now false)."
            ]
          },
          {
            "type": "p",
            "text": "Below, our .addEventListener() method is attached to the \"checkbox\" element. It will react to a click on the checkbox."
          },
          {
            "type": "pre",
            "text": "checkbox.addEventListener(\"click\", function () {\n  li.classList.toggle(\"completed\", checkbox.checked);\n});"
          },
          {
            "type": "p",
            "text": "Make sure to add this code to your style.css file:"
          },
          {
            "type": "pre",
            "text": ".completed {\n  text-decoration: line-through;\n  color: gray;\n  border: 1px solid gray;\n}"
          },
          {
            "type": "h3-li",
            "h3": "## Edit Button",
            "li": [
              "We are using the prompt() function to display a dialog box asking the user to input a new task. The default value in the prompt is set to the current content of taskSpan.",
              "Then our if condition checks if the user has provided a new input.",
              "If the user provides a new input, the textContent of the taskSpan will be updated which displays the task content with the new input."
            ]
          },
          {
            "type": "pre",
            "text": "editBtn.addEventListener(\"click\", function () {\n  const update = prompt(\"Edit task:\", taskSpan.textContent);\n  if (update !== null) {\n    taskSpan.textContent = update;\n    li.classList.remove(\"completed\");\n  }\n});"
          },
          {
            "type": "p",
            "text": "We attached an .addEventListener() method to our \"Edit\" button (editBtn) that executes the enclosed function when the button is clicked."
          },
          {
            "type": "p",
            "text": "Imagine this: one of our tasks, checked off as complete, but suddenly we're having the urge to edit and bring it back to the list. In this scenario, we need to strip away that \"checked\" styling. Let's make it happen:"
          },
          {
            "type": "pre",
            "text": "li.classList.remove(\"completed\");"
          },
          {
            "type": "p",
            "text": "Once a task is edited after being marked \"complete\", it will remove the styling of \"completed\" and uncheck the task."
          }
        ]
      },
      {
        "checkpoint": "# Update Task Counters",
        "content": [
          {
            "type": "p",
            "text": "Let's take it a step further! Remember those task counters be added in our index.html file. We're about to make those counters update dynamically every time a task gets added, checked off, edited, or deleted."
          },
          {
            "type": "p",
            "text": "First let's create variables for our complete and incomplete task. This code will be in your script.js file below your listContainer variable:"
          },
          {
            "type": "pre",
            "text": "const completedCounter = document.getElementById(\"completed-counter\");\nconst uncompletedCounter = document.getElementById(\"uncompleted-counter\");"
          },
          {
            "type": "p",
            "text": "Next, we will create a function for the counters. Whenever anything changes with our task, we will update it with this updateCounters() function:"
          },
          {
            "type": "pre",
            "text": "function updateCounters() {\n  const completedTasks = document.querySelectorAll(\".completed\").length;\n  const uncompletedTasks =\n    document.querySelectorAll(\"li:not(.completed)\").length;\n\n  completedCounter.textContent = completedTasks;\n  uncompletedCounter.textContent = uncompletedTasks;\n}"
          },
          {
            "type": "p",
            "text": "When we first add a task we want the updateCounters() function to update. Let's make sure to include this code at the end of our code:"
          },
          {
            "type": "pre",
            "text": "updateCounters();"
          },
          {
            "type": "p",
            "text": "Now let's test out the updateCounters() function on our checkbox."
          },
          {
            "type": "p",
            "text": "When we check off a task, it is marked as \"complete\". But we want to mark it back as \"incomplete\" after we edit it. Below, we will have to add the updateCounters() function here:"
          },
          {
            "type": "pre",
            "text": "checkbox.addEventListener(\"click\", function () {\n  li.classList.toggle(\"completed\", checkbox.checked);\n  //add the function below\n  updateCounters();\n});"
          },
          {
            "type": "p",
            "text": "Now for our edit button we need to set checkbox.checked to false to uncheck the box and update the counter:"
          },
          {
            "type": "pre",
            "text": "editBtn.addEventListener(\"click\", function () {\n  const update = prompt(\"Edit task:\", taskSpan.textContent);\n  if (update !== null) {\n    taskSpan.textContent = update;\n    li.classList.remove(\"completed\");\n    //add the code below\n    checkbox.checked = false;\n    updateCounters();\n  }\n});"
          },
          {
            "type": "p",
            "text": "Whoa, that was a lot! Now, let's open up our todo list in the browser again. It's time to test it out before we move on:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-to-do-list-app-with-html-css-js/todo-list-edit-task-html.gif"
          },
          {
            "type": "p",
            "text": "How did it go? If it goes well, let's move on! If not, try going through this section again."
          },
          {
            "type": "h3-li",
            "h3": "## Delete Button",
            "li": [
              "As you can see above, when you go to delete the task an alert message will appear confirming if you want to delete the following task.",
              "If the answer is yes, it will proceed to the next line of code and delete the task with the remove() method.",
              "When a task is deleted the updateCounters() function updates showing the new number of remaining tasks. Once the task is removed and no longer counts as completed or uncompleted."
            ]
          },
          {
            "type": "p",
            "text": "Now that we have completed most of our tasks, it's time for some cleanup. Let's delete the ones that are no longer useful lets delete them if they no longer useful:"
          },
          {
            "type": "pre",
            "text": "deleteBtn.addEventListener(\"click\", function () {\n  if (confirm(\"Are you sure you want to delete this task?\")) {\n    li.remove();\n    updateCounters();\n  }\n});"
          },
          {
            "type": "p",
            "text": "Let's see how it works:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-to-do-list-app-with-html-css-js/todo-list-remove-task-html.gif"
          }
        ]
      },
      {
        "checkpoint": "# Task 5: Add CSS",
        "content": [
          {
            "type": "p",
            "text": "Lastly, it's time to give our to-do list a makeover! We've completed some of the toughest tasks, and now, let's have some fun playing around with styling. Let's add that finishing touch to make our to-do list look as good as it works!"
          },
          {
            "type": "p",
            "text": "Here, we start with some high-level styling. In our body tag we give our app a gradient background check out this link to learn more about radial-gradient color and give a font style. We also style our text to be in the center of the screen with a margin-top:"
          },
          {
            "type": "pre",
            "text": "body { \n  background: rgb(0,0,0);\n  background: radial-gradient(circle, rgba(0,0,0,0.028124999999999956) 0%, rgba(253,187,45,1) 100%);\n  font-family: Arial, sans-serif;\n  text-align: center;\n  margin-top: 50px;\n}"
          },
          {
            "type": "p",
            "text": "Now let's work on the container of our todo list. For our <div id=\"todo-container\">, we are giving the background a different color from the body and adding a border around the container:"
          },
          {
            "type": "pre",
            "text": "#todo-container {\n  background: rgb(41, 33, 33);\n  width: 400px;\n  margin: 0 auto;\n  border: 2px solid #0033ff;\n  padding: 20px;\n  color: white;\n  border-radius: 15px;\n}"
          },
          {
            "type": "p",
            "text": "Inside of the container will style our header, input box, and input button:"
          },
          {
            "type": "pre",
            "text": "#todo-container {\n  background: rgb(41, 33, 33);\n  width: 400px;\n  margin: 0 auto;\n  border: 2px solid #0033ff;\n  padding: 20px;\n  color: white;\n  border-radius: 15px;\n}"
          },
          {
            "type": "p",
            "text": "Inside of the container will style our header, input box, and input button:"
          },
          {
            "type": "pre",
            "text": "#header {\n  margin: 5px;\n  font-size: 20px;\n  text-align: center;\n}\n\nh1 {\n  margin-bottom: 20px; \n}\n\n#input-box {\n  width: 200px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin-right: 5px;\n  font-size: 20px;\n}\n\n#input-button {\n  font-size: 20px;\n  cursor: pointer;\n  transition: 0.4s;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #2e60ea;\n}\n\n#input-button:hover {\n  background-color: #9eb7fd; \n}"
          },
          {
            "type": "p",
            "text": "Next, for our task items and button:"
          },
          {
            "type": "pre",
            "text": "ul {\n  list-style: none;\n  padding: 0;\n  margin-top: 20px;\n  text-align:left;\n\n}\n\nli {\nborder: 1px solid white;\nborder-radius: 5px;\nmargin-bottom: 10px;\npadding: 10px;\nmargin-top: 10px;\n}\n\n.edit-btn, .delete-btn {\n  float: right;\n  color:crimson;\n  cursor: pointer;\n  margin: 3px 5px;\n  border: none;\n  padding: 3px 5px;\n  background: none;\n} \n\n.completed {\n  text-decoration: line-through;\n  color: gray;\n  border: 1px solid gray;\n}"
          },
          {
            "type": "p",
            "text": "Now, let's check out our completed application:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-to-do-list-app-with-html-css-js/finished-todo-list.png"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! You did it! üéä"
          },
          {
            "type": "p",
            "text": "In this project tutorial, we learned to build a simple todo application using JavaScript. We were able to add, complete, edit, and delete tasks."
          },
          {
            "type": "p",
            "text": "Challenge yourself to add more advanced features to your todo application. Here is a list of possible features to give you a few ideas:"
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Project source code",
              "The Origins I: HTML",
              "The Origins II: CSS",
              "The Origins III: JS"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Build a Flappy Bird Clone With Phaser",
    "link": "https://www.codedex.io/projects/build-a-flappy-bird-clone-with-phaser",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/build-a-flappy-bird-clone-with-phaser.png",
    "prerequisite": {
      "Prerequisites:": "HTML, JavaScript",
      "Versions:": "Phaser 3.55.2",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "In this tutorial, we'll learn how to build a clone of the popular mobile game Flappy Bird. This will be done with Phaser, a game development framework for creating video games with HTML and JavaScript (JS). We'll also provide a breakdown of each line of code for those who want to get a deeper understanding of how it all works."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/finished_flappy_bird.gif"
          },
          {
            "type": "p",
            "text": "Let's dive in!"
          }
        ]
      },
      {
        "checkpoint": "# Getting Started",
        "content": [
          {
            "type": "p",
            "text": "First, let's make a folder called flappy_bird. Then, create two new files:"
          },
          {
            "type": "p",
            "text": "Open up the code editor of your choice (we recommend VS Code)."
          },
          {
            "type": "p",
            "text": "If you are using VS Code, search for the \"Live Server\" extension."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/vs_code_live_server.png"
          },
          {
            "type": "p",
            "text": "This extension basically runs a server for your HTML file."
          },
          {
            "type": "p",
            "text": "After installing it and relaunching the editor, you should see a \"Go Live\" option in the bottom-right corner of the editor:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/live_server_toggle.png"
          },
          {
            "type": "p",
            "text": "Selecting \"Go Live\" will launch the server, which will reload any time we make and save new changes to our files."
          },
          {
            "type": "p",
            "text": "Next, we will need the images for the app (e.g., the columns, roads, background, and bird)."
          },
          {
            "type": "p",
            "text": "Download the zip file here and move the assets folder into the flappy_bird folder."
          },
          {
            "type": "p",
            "text": "We are now ready to start coding!"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up the HTML",
        "content": [
          {
            "type": "p",
            "text": "Let's open the index.html file and start with this code:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Flappy Bird Clone</title>\n</head>\n<body>\n</body>\n</html>"
          },
          {
            "type": "p",
            "text": "In the <head> element, the <meta> tag ensures that the app can be responsively rendered on different screen sizes."
          },
          {
            "type": "p",
            "text": "Next, add this code snippet to the <head> element:"
          },
          {
            "type": "pre",
            "text": "<head>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/phaser/3.55.2/phaser.min.js\"></script>\n  <script src=\"app.js\"></script>\n  <title>Flappy Bird Clone</title>\n</head>"
          },
          {
            "type": "p",
            "text": "We are done with the HTML! Let's save the index.html file and move to the next step."
          }
        ]
      },
      {
        "checkpoint": "# Creating the Background",
        "content": [
          {
            "type": "p",
            "text": "Let's now work on the background for our clone app by adding the following code to our app.js file:"
          },
          {
            "type": "pre",
            "text": "function preload () {\n}\n\nfunction create () {\n}\n\nfunction update () {\n}"
          },
          {
            "type": "p",
            "text": "The following functions are required for the Phaser game to work:"
          },
          {
            "type": "p",
            "text": "Next, let's add the following code above the functions we defined:"
          },
          {
            "type": "pre",
            "text": "let config = {\n  renderer: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 300 },\n      debug: false\n    }\n  },\n  scene: {\n    preload: preload,\n    create: create,\n    update: update\n  }\n};\n\nlet game = new Phaser.Game(config);\n\n\nfunction preload () {\n}\n\nfunction create () {\n}\n\nfunction update () {\n}"
          },
          {
            "type": "p",
            "text": "Here, we are creating a game variable of a new instance of Phaser.Game to set up our game. We pass in the config object and specify these parameters about the game we want to create:"
          },
          {
            "type": "p",
            "text": "Let's now add the following code to the preload() function:"
          },
          {
            "type": "pre",
            "text": "function preload() {\n  this.load.image('background', 'assets/background.png');\n  this.load.image('road', 'assets/road.png');\n  this.load.image('column', 'assets/column.png');\n  this.load.spritesheet('bird', 'assets/bird.png', { frameWidth: 64, frameHeight: 96 });\n}"
          },
          {
            "type": "p",
            "text": "We are loading in the images from our assets folder. For our bird image, we load it as a 'sprite', not an image. In Phaser, a 'sprite' can be animated, and we will work on that soon!"
          },
          {
            "type": "p",
            "text": "Next, add the following code to the create() function:"
          },
          {
            "type": "pre",
            "text": "function create() {\n  const background = this.add.image(0, 0, 'background').setOrigin(0, 0);\n}"
          },
          {
            "type": "p",
            "text": "With the setOrigin() method, we specify that we want the upper left corner of the background to be positioned at (0, 0)."
          },
          {
            "type": "p",
            "text": "Let's save the files. If you're using Live Server on VS Code, the page just needs to be refreshed. Otherwise, double-click index.html and the following should render on the browser:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/flappy_bird_app_bg_only.png"
          }
        ]
      },
      {
        "checkpoint": "# Creating the Road",
        "content": [
          {
            "type": "p",
            "text": "For our clone application, we're just going to place a single road at the bottom of the game screen. While it won't move like it does in the actual game, you will still learn a lot about the physics used in Phaser."
          },
          {
            "type": "p",
            "text": "Let's add the following to our create() function:"
          },
          {
            "type": "pre",
            "text": "function create() {\n  const roads = this.physics.add.staticGroup();\n  const road = roads.create(400, 568, 'road').setScale(2).refreshBody();\n}"
          },
          {
            "type": "p",
            "text": "When we write this.physics, we are making a call to the Arcade Physics system in Phaser. This will allow us to apply a physics simulation to the roads we create."
          },
          {
            "type": "p",
            "text": "The roads variable allows us to create a single, static road variable."
          },
          {
            "type": "p",
            "text": "We specify that we want \"roads\" to have a static body."
          },
          {
            "type": "p",
            "text": "With the setScale() method, we specify that we want the road to be twice as big as its original size. Since we changed the size, we need to add a call to the refreshBody() method in order for the physics to work now that the size has changed."
          },
          {
            "type": "p",
            "text": "After saving app.js, you should now see the following rendered on the browser:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/background_and_road.png"
          }
        ]
      },
      {
        "checkpoint": "# Creating the Columns",
        "content": [
          {
            "type": "p",
            "text": "It's now time to add those columns from Flappy Bird that descend from the sky and peek out from the ground."
          },
          {
            "type": "p",
            "text": "Inside the app.js file, add the following to the create() function:"
          },
          {
            "type": "pre",
            "text": "const topColumns = this.physics.add.staticGroup({\n  key: 'column',\n  repeat: 1,\n  setXY: { x: 200, y: 0, stepX: 300 }\n});\n\nconst road = roads.create(400, 568, 'road').setScale(2).refreshBody();"
          },
          {
            "type": "p",
            "text": "As with roads, the columns we create from topColumns will be static."
          },
          {
            "type": "p",
            "text": "In repeat, we create an additional column; there are two columns total./"
          },
          {
            "type": "p",
            "text": "We use the setXY object to specify that we want the x and y coordinates of the first column to be 200 and 0, and that we want the second column to be 300 pixels to the right of the first column."
          },
          {
            "type": "p",
            "text": "Note: We are writing the code for topColumns before the line where we create the variable road. Phaser will add elements to our webpage in the order that they are written in our code. So if we were to write the code to generate topColumns after we create road, we would see the columns on top of the road, which we do not want."
          },
          {
            "type": "p",
            "text": "Let's save the file and see what the page now looks like:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/rendered_top_columns.png"
          },
          {
            "type": "p",
            "text": "Excellent! Now, let's create columns near the road:"
          },
          {
            "type": "pre",
            "text": "const bottomColumns = this.physics.add.staticGroup({\n  key: 'column',\n  repeat: 1,\n  setXY: { x: 350, y: 400, stepX: 300 },\n});\n\nconst road = roads.create(400, 568, 'road').setScale(2).refreshBody();"
          },
          {
            "type": "p",
            "text": "Let's save our app.js file and re-render the page:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/rendered_bottom_columns.png"
          }
        ]
      },
      {
        "checkpoint": "# Creating the Bird",
        "content": [
          {
            "type": "p",
            "text": "Let's create the bird."
          },
          {
            "type": "p",
            "text": "We will define the bird variable outside the create() function, giving it a global scope."
          },
          {
            "type": "pre",
            "text": "let bird;\n\nfunction create() {\n  ...\n}"
          },
          {
            "type": "p",
            "text": "Then, add the following to the create function:"
          },
          {
            "type": "pre",
            "text": "function create() {\n  ...\n  bird = this.physics.add.sprite(0, 50, 'bird').setScale(2);\n  bird.setBounce(0.2);\n  bird.setCollideWorldBounds(true);\n}"
          },
          {
            "type": "p",
            "text": "Since the bird is a sprite, it has a dynamic body. Because it has a dynamic body, the bird will have a gravity setting and will fall to the bottom of our scene."
          },
          {
            "type": "p",
            "text": "With the .setBounce() method, we specify that the bird should bound slightly if it collides with something."
          },
          {
            "type": "p",
            "text": "The .setCollideWorldBounds() method makes it so that our bird can bump into the edges of the screen, but not go through it."
          },
          {
            "type": "p",
            "text": "However, if we save our file and rerender:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/bird_through_road.png"
          },
          {
            "type": "p",
            "text": "We now see the bird, but it's falling down through the road."
          },
          {
            "type": "p",
            "text": "Let's make sure the bird lands on top of the road"
          },
          {
            "type": "p",
            "text": "Add this to the create() function:"
          },
          {
            "type": "pre",
            "text": "this.physics.add.collider(bird, road);"
          },
          {
            "type": "p",
            "text": "Save the app.js file and rerender the page:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/bird_atop_road.png"
          },
          {
            "type": "p",
            "text": "The bird should now land on top of the road."
          }
        ]
      },
      {
        "checkpoint": "# Detecting When the Bird Hits the Ground",
        "content": [
          {
            "type": "p",
            "text": "In our Flappy Bird clone, we want the game to end when the bird lands on the ground. We should have some kind of system of determining when the bird lands."
          },
          {
            "type": "p",
            "text": "In our app.js file, let's define a hasLanded variable (outside of our create() function) and initialize to false:"
          },
          {
            "type": "pre",
            "text": "let hasLanded = false;\nfunction create() {\n  ...\n}"
          },
          {
            "type": "p",
            "text": "We want this variable to have a global scope, as we will later use it in both the create() and update() functions."
          },
          {
            "type": "p",
            "text": "Inside the create() function, let's add the following code:"
          },
          {
            "type": "pre",
            "text": "function create() {\n  this.physics.add.overlap(bird, road, () => hasLanded = true, null, this);\n  this.physics.add.collider(bird, road);\n}"
          },
          {
            "type": "p",
            "text": "Here we are saying that when the bird hits the road, we will set hasLanded to true."
          },
          {
            "type": "p",
            "text": "We need to invoke the .overlap() method before '.collider()' or else it won't work."
          },
          {
            "type": "p",
            "text": "Before moving forward, let's review the code in our app.js file so far:"
          },
          {
            "type": "pre",
            "text": "let config = {\n  renderer: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: { y: 300 },\n      debug: false,\n    },\n  },\n  scene: {\n    preload: preload,\n    create: create,\n    update: update,\n  },\n};\n\nlet game = new Phaser.Game(config);\n\nfunction preload() {\n  this.load.image(\"background\", \"assets/background.png\");\n  this.load.image(\"road\", \"assets/road.png\");\n  this.load.image(\"column\", \"assets/column.png\");\n  this.load.spritesheet(\"bird\", \"assets/bird.png\", {\n    frameWidth: 64,\n    frameHeight: 96,\n  });\n}\n\nvar bird;\nlet hasLanded = false;\n\nfunction create() {\n  const background = this.add.image(0, 0, \"background\").setOrigin(0, 0);\n  const roads = this.physics.add.staticGroup();\n  const topColumns = this.physics.add.staticGroup({\n    key: \"column\",\n    repeat: 1,\n    setXY: { x: 200, y: 0, stepX: 300 },\n  });\n\n  const bottomColumns = this.physics.add.staticGroup({\n    key: \"column\",\n    repeat: 1,\n    setXY: { x: 350, y: 400, stepX: 300 },\n  });\n\n  const road = roads.create(400, 568, \"road\").setScale(2).refreshBody();\n\n  bird = this.physics.add.sprite(0, 50, \"bird\").setScale(2);\n  bird.setBounce(0.2);\n  bird.setCollideWorldBounds(true);\n\n  this.physics.add.overlap(bird, road, () => (hasLanded = true), null, this);\n  this.physics.add.collider(bird, road);\n}\n\nfunction update() {}"
          }
        ]
      },
      {
        "checkpoint": "# Allowing the User To Move the Bird Upwards",
        "content": [
          {
            "type": "p",
            "text": "Thus far, we've focused mainly on the create() method, setting up the game environment as well as some basic physics for the bird."
          },
          {
            "type": "p",
            "text": "We want the user to be able to move the bird up. Let's create a system so that when the user presses the up arrow button, the bird moves up."
          },
          {
            "type": "p",
            "text": "Let's start by creating a cursors variable outside of our create() method:"
          },
          {
            "type": "pre",
            "text": "let cursors;\nfunction create() {\n  ...\n}"
          },
          {
            "type": "p",
            "text": "We are giving cursors a global scope."
          },
          {
            "type": "p",
            "text": "Next, let's add the following inside the create() method:"
          },
          {
            "type": "pre",
            "text": "function create() {\n    cursors = this.input.keyboard.createCursorKeys();\n}"
          },
          {
            "type": "p",
            "text": "As Phaser's documentation explains, the .createCursorKeys() method \"creates and returns an object containing 4 hotkeys for Up, Down, Left and Right, and also Space Bar and shift.\""
          },
          {
            "type": "p",
            "text": "Now inside of the update() function, let's add the following code:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (cursors.up.isDown) {\n    bird.setVelocityY(-160);\n  }\n}"
          },
          {
            "type": "p",
            "text": "Here, we are saying that if the user presses the \"up\" button, then give the bird an upward velocity of -160. This will move it upwards."
          },
          {
            "type": "p",
            "text": "In 'Flappy Birds', we want the game to end if the bird hits the road. So let's prevent the user from being able to move the bird if it lands on the ground."
          },
          {
            "type": "p",
            "text": "Add the following code to the update() function:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (cursors.up.isDown && !hasLanded) {\n    bird.setVelocityY(-160);\n  }\n}"
          },
          {
            "type": "p",
            "text": "We are adding an additional condition that the bird cannot move up if it has landed."
          }
        ]
      },
      {
        "checkpoint": "# Getting the Bird to Move Right",
        "content": [
          {
            "type": "p",
            "text": "In Flappy Birds, the bird should continually move right, unless it hits a column or the ground."
          },
          {
            "type": "p",
            "text": "First, add the following to the update() function:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  bird.body.velocity.x = 50;\n}"
          },
          {
            "type": "p",
            "text": "If we save app.js and reload our page:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/bird_moving_right.png"
          },
          {
            "type": "p",
            "text": "Now our bird moves right! However, the bird continues to move right even when it lands."
          },
          {
            "type": "p",
            "text": "To prevent this, let's add two if statements. First, delete the code that was in the last snippet from app.js, then add the following to the code snippet below:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (!hasLanded) {\n    bird.body.velocity.x = 50;\n  }\n  if (hasLanded) {\n    bird.body.velocity.x = 0;\n  }\n}"
          },
          {
            "type": "p",
            "text": "If the bird hasn't landed, then give it a velocity of 50 in the x-direction."
          },
          {
            "type": "p",
            "text": "If it lands, make the velocity in the x-direction 0. This means it will stop moving in the x-axis."
          },
          {
            "type": "p",
            "text": "We also want the bird to stop moving when it hits a column. Right now, our bird simply moves right through the column when it hits it."
          },
          {
            "type": "p",
            "text": "First, add the following to the create() function:"
          },
          {
            "type": "pre",
            "text": "function create() {\n  this.physics.add.collider(bird, topColumns);\n  this.physics.add.collider(bird, bottomColumns);\n}"
          },
          {
            "type": "p",
            "text": "Now the bird will not pass through the column."
          },
          {
            "type": "p",
            "text": "Let's create a system to detect when the bird has hit a column."
          },
          {
            "type": "p",
            "text": "Let's define a hasBumpedvariable outside thecreate()` function:"
          },
          {
            "type": "pre",
            "text": "let hasBumped = false;\n\nfunction create() {\n  ...\n}"
          },
          {
            "type": "p",
            "text": "Next, let's add the following code to the create() function:"
          },
          {
            "type": "pre",
            "text": "function create() {\n  this.physics.add.overlap(bird, topColumns, ()=>hasBumped=true,null, this);\n  this.physics.add.overlap(bird, bottomColumns, ()=>hasBumped=true,null, this);\n  this.physics.add.collider(bird, topColumns);\n  this.physics.add.collider(bird, bottomColumns);\n}"
          },
          {
            "type": "p",
            "text": "Here, we say that if the bird hits one of the columns, hasBumped will be set to true."
          },
          {
            "type": "p",
            "text": "We need to add this code before 'this.physics.add.collider(bird, topColumns);' and 'this.physics.add.collider(bird, bottomColumns);' in order for it to work."
          },
          {
            "type": "p",
            "text": "Now that we have a way of detecting when the bird has bumped into a column, let's make sure that it stops moving right if it bumps into a column:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (cursors.up.isDown && !hasLanded && !hasBumped) {\n    bird.setVelocityY(-160);\n  }\n\n  if(!hasLanded && !hasBumped) {\n    bird.body.velocity.x = 50;\n  } else {\n    bird.body.velocity.x = 0;\n  }\n}"
          }
        ]
      },
      {
        "checkpoint": "# Creating a Start Screen",
        "content": [
          {
            "type": "p",
            "text": "Right now, the bird starts moving as soon as the page loads. However, it would be better if the game started in response to a user action, so the user didn't have to start the game the moment the page loads."
          },
          {
            "type": "p",
            "text": "For this game, let's have it start when the user presses the enter key."
          },
          {
            "type": "p",
            "text": "First, let's create an isGameStarted variable:"
          },
          {
            "type": "pre",
            "text": "let isGameStarted = false;"
          },
          {
            "type": "p",
            "text": "Next, add the following code to the update() function:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (cursors.space.isDown && !isGameStarted) {\n    isGameStarted = true;\n  }\n}"
          },
          {
            "type": "p",
            "text": "Here, we are saying that if the user presses the space key, and the isGameStarted variable is false (its initial value), then we will set it to true and start the game."
          },
          {
            "type": "p",
            "text": "First, let's make sure the bird doesn't move unless 'isGameStarted' is set to true. Add the following code to the update() function:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (!isGameStarted) {\n    bird.setVelocityY(-160);\n  }\n}"
          },
          {
            "type": "p",
            "text": "Here, we are saying that if the game hasn't yet started, we will give the bird a velocity of -160 in the y-direction. The bird will move up to the top of the screen instead of falling down."
          },
          {
            "type": "p",
            "text": "To make sure the bird doesn't move right if the game has not started, let's revisit the following if statement in the update() method:"
          },
          {
            "type": "pre",
            "text": "if(!hasLanded && !hasBumped) {\n  bird.body.velocity.x = 50;\n} else {\n  bird.body.velocity.x= 0;\n}"
          },
          {
            "type": "p",
            "text": "Let's revise it to this:"
          },
          {
            "type": "pre",
            "text": "if (!hasLanded || !hasBumped) {\n  bird.body.velocity.x = 50;\n}\n\nif (hasLanded || hasBumped || !isGameStarted) {\n  bird.body.velocity.x = 0;\n}"
          },
          {
            "type": "p",
            "text": "This ensures the bird won't move unless the game has been started and it hasn't landed on the road or bumped into a column."
          }
        ]
      },
      {
        "checkpoint": "# Adding Game Instructions",
        "content": [
          {
            "type": "p",
            "text": "Right now, our game doesn't have any instructions. Let's display some instructions on the bottom of the screen."
          },
          {
            "type": "p",
            "text": "Let's create a 'messageToPlayer' variable and then get it text in the create() function::"
          },
          {
            "type": "pre",
            "text": "let messageToPlayer;\n\nfunction create() {\n  messageToPlayer = this.add.text(0, 0, `Instructions: Press space bar to start`, { fontFamily: '\"Comic Sans MS\", Times, serif', fontSize: \"20px\", color: \"white\", backgroundColor: \"black\" });\n}"
          },
          {
            "type": "p",
            "text": "After saving app.js and rerendering the page, we should see the following:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/instructions_top_left.png"
          },
          {
            "type": "p",
            "text": "Right now, this text appears at the top-left corner of the screen."
          },
          {
            "type": "p",
            "text": "To move it to the bottom, add the following to the create() function:"
          },
          {
            "type": "pre",
            "text": "function create() {\n  Phaser.Display.Align.In.BottomCenter(messageToPlayer, background, 0, 50);\n}"
          },
          {
            "type": "p",
            "text": "Here, we are saying we want to align messageToPlayer to the bottom center of the background image."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-flappy-bird-clone-with-phaser/instructions_center_bottom.png"
          },
          {
            "type": "p",
            "text": "Now the message appears at the center towards the bottom of the screen!"
          },
          {
            "type": "p",
            "text": "Once the game starts, the user needs to use the up arrow button to avoid hitting the columns or ground. Once the game starts, let's change the message."
          },
          {
            "type": "p",
            "text": "Add the following code to the update() function:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (cursors.space.isDown && !isGameStarted) {\n    isGameStarted = true;\n    messageToPlayer.text = 'Instructions: Press the \"^\" button to stay upright\\nAnd don\\'t hit the columns or ground';\n  }\n}"
          },
          {
            "type": "p",
            "text": "Now the message will change once the game starts."
          },
          {
            "type": "p",
            "text": "Once the bird hits the ground or bumps into a column, let's change the message to say that the bird has crashed, to let the user know that the game is over."
          },
          {
            "type": "p",
            "text": "Let's add the following code to the update() function:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (hasLanded || hasBumped) {\n    messageToPlayer.text = `Oh no! You crashed!`;\n  }\n}"
          },
          {
            "type": "p",
            "text": "It's time to create an ending for our game."
          },
          {
            "type": "p",
            "text": "When the bird reaches the far right of the screen, let's display the message that says 'Congrats! You won!':"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (bird.x > 750) {\n    messageToPlayer.text = `Congrats! You won!`;\n  } \n}"
          },
          {
            "type": "p",
            "text": "Right now, when the bird reaches the end of the scene, it falls to the road. Let's slow down the speed at which it falls so that it gently floats to the road by adding the following to the update() function:"
          },
          {
            "type": "pre",
            "text": "function update() {\n  if (bird.x > 750) {\n    bird.setVelocityY(40);\n    messageToPlayer.text = `Congrats! You won!`;\n  } \n\n}"
          },
          {
            "type": "p",
            "text": "We will give it a velocity of 40 in the y-direction."
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! We've reached the end of the tutorial, and you have built a functional clone of the popular mobile game Flappy Bird! We harnessed the power of Phaser to build this game with just HTML and JS. Additionally, we got to learn a bit about how game elements are used and placed on a browser screen."
          },
          {
            "type": "p",
            "text": "The full source code for this project can be viewed here."
          },
          {
            "type": "p",
            "text": "If you are interested in exploring Phaser further, check out the following resources:"
          }
        ]
      }
    ]
  },
  {
    "title": "Deploy a Website with Vercel",
    "link": "https://www.codedex.io/projects/deploy-a-website-with-vercel",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/deploy-vercel-project.png",
    "prerequisite": {
      "Prerequisites:": "Git, GitHub",
      "Read Time:": "20 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "So you've created a website on your computer; how do you get it live on the web for your friends to visit with a URL?"
          },
          {
            "type": "p",
            "text": "Hello everyone! In this tutorial, I will be teaching you how to deploy your very own website using Vercel! This will allow anyone to visit your published website on the internet. üåç"
          },
          {
            "type": "p",
            "text": "We'll help you get started to easily deploy your website and get it ‚ú® live ‚ú® in no time!"
          }
        ]
      },
      {
        "checkpoint": "# What is Vercel?",
        "content": [
          {
            "type": "p",
            "text": "We keep using the word deploy, what does it even mean? Deploying ‚Äî or pushing new code to a server ‚Äî is an integral part of a developer‚Äôs daily workflow (develop ‚û°Ô∏è test ‚û°Ô∏è deploy)."
          },
          {
            "type": "p",
            "text": "Vercel is a cloud platform that specializes in serverless deployment and static site hosting. It allows developers to easily deploy and host web applications, APIs, and static websites!"
          },
          {
            "type": "p",
            "text": "Fun Fact: Vercel was originally known as \"Zeit\" before it rebranded itself in 2020. It was founded by Guillermo Rauch, who also created Socket.IO (we have a tutorial about this, too)."
          }
        ]
      },
      {
        "checkpoint": "# Getting Started with Vercel",
        "content": [
          {
            "type": "p",
            "text": "Vercel lets us deploy a static website that consists of fixed content and doesn't require server-side processing or a dynamic server to generate web pages. Instead, all the content of a static website is pre-built and stored as HTML, CSS, JavaScript, images, and other assets."
          },
          {
            "type": "p",
            "text": "This tutorial works with code that is pushed to a repository (repo) on GitHub."
          },
          {
            "type": "p",
            "text": "Before we begin, let's do the following:"
          },
          {
            "type": "p",
            "text": "Note: If you aren't sure of how to add your project to a GitHub repository, follow these instructions on adding locally hosted code to GitHub."
          },
          {
            "type": "p",
            "text": "Let's head over to Vercel and log in with your GitHub account."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/deploy-a-website-with-vercel/images/vercel-intro.png"
          },
          {
            "type": "p",
            "text": "Once you have authenticated your GitHub account, the screen should now look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/deploy-a-website-with-vercel/images/vercel-authed.png"
          },
          {
            "type": "p",
            "text": "In the Vercel dashboard, you may notice some repositories that were recently committed to! ‚ú®"
          }
        ]
      },
      {
        "checkpoint": "# Deploying Your Website",
        "content": [
          {
            "type": "p",
            "text": "At this point, depending on your project, it should be able to display and work locally on your computer. Below is a linktr.ee clone that I created!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/deploy-a-website-with-vercel/images/vercel-pre-app-demo.gif"
          },
          {
            "type": "p",
            "text": "You'll see that my website is currently on the http://localhost:3000, in which the computer has the role of a virtual server that is running my code. Let's go ahead and use Vercel to deploy the site!"
          },
          {
            "type": "p",
            "text": "We're going to head back, and select the GitHub repository that has the project you want to publish by pressing the white \"Import\" button."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/deploy-a-website-with-vercel/images/vercel-pre-deploy.png"
          },
          {
            "type": "p",
            "text": "My repository is called \"bento\" (view the repository here)! You'll be able to reconfigure the name of your project here (this will be the prefix name to your publishing link such as \"bento-blonde.vercel.app\")."
          },
          {
            "type": "p",
            "text": "You'll also notice some other settings before deploying such as:"
          },
          {
            "type": "p",
            "text": "Since we're deploying a static site, we won't need to change this information."
          },
          {
            "type": "p",
            "text": "This static website was created with Next.js, a React-based web framework. However, you can change the framework that you're using for deployment. Vercel should detect this automatically, but here are some of the options that you will see under \"Framework Preset\":"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/deploy-a-website-with-vercel/images/vercel-fw-demo.gif"
          },
          {
            "type": "p",
            "text": "Note: If you are not using a framework, choose \"Other\" in \"Framework Preset\" and make sure an index.html file is included in the repo prior to deployment."
          },
          {
            "type": "p",
            "text": "Once you're all set, you can now click \"Deploy\". You'll now notice the build process starting!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/deploy-a-website-with-vercel/images/vercel-loading.png"
          },
          {
            "type": "p",
            "text": "This part can take a couple of minutes! Once the deployment is finished, you should see the congratulations screen! Yay! üéâ"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/deploy-a-website-with-vercel/images/vercel-congrats.png"
          },
          {
            "type": "p",
            "text": "You're now able to access my linktr.ee clone website at bento-blond.vercel.app."
          },
          {
            "type": "p",
            "text": "You'll notice your GitHub repository now looks a bit different! Vercel interacted with your GitHub repository to automate the deployment process and ensure that your website stays up-to-date with the latest changes in your codebase. So every time you push code to the main branch (or the branch specified in Vercel), you don't have to worry about updating it yourself every time! And that's it!"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! üéä"
          },
          {
            "type": "p",
            "text": "You have successfully deployed your static website using Vercel and GitHub! Now, you can use your own domain if or create more websites to share with friends and family! üëØ"
          },
          {
            "type": "p",
            "text": "If you come across any trouble, you're welcome to send us a message in the Cod√©dex Discord, and we'll help you out! Share any websites you deploy with me on Twitter and tag @codedex_io and @exrlla. ‚ú®"
          },
          {
            "type": "h3-li",
            "h3": "## Project Walkthrough",
            "li": [
              "Vercel Documentation",
              "Deploying to Vercel",
              "Static vs. Dynamic Websites",
              "What is Next.js?"
            ]
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Vercel Documentation",
              "Deploying to Vercel",
              "Static vs. Dynamic Websites",
              "What is Next.js?"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Build a Soundboard with p5.js",
    "link": "https://www.codedex.io/projects/build-an-interactive-soundboard-with-p5js",
    "tags": [
      "JS",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/p5.gif",
    "prerequisite": {},
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Welcome!"
          },
          {
            "type": "p",
            "text": "In this tutorial, you'll learn how to build a soundboard with interactive buttons using the p5.js JavaScript library (as well as its sublibrary p5.sound). The buttons will make a variety of sounds when you click on them! They can range from funny Vine noise effects to music sounds and even beats for your own in-house DJ setup. üòé"
          },
          {
            "type": "p",
            "text": "p5.js is a JavaScript library for creative coding, with a focus on making coding accessible and inclusive for artists, designers, educators, beginners, and anyone else who wants to take creativity to the next level. The library extends much farther than what this tutorial will cover, but we hope that it will give you a feel for how you can code in a creative way!"
          },
          {
            "type": "p",
            "text": "This is the finished result of what we‚Äôll be making today:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/demo.gif"
          },
          {
            "type": "p",
            "text": "Neat, right? Let‚Äôs get started!"
          },
          {
            "type": "h3-li",
            "h3": "## Getting Set Up!",
            "li": [
              "The complete p5.js library that includes the p5.sound sublibrary.",
              "VS Code for writing the code.",
              "The VS Code Live Server extension for auto-refreshing our page after making changes.",
              "The .mp3 and .wav files with our sound effects."
            ]
          },
          {
            "type": "p",
            "text": "Below is the list of tools that we will be using for today‚Äôs project. Feel free to replace any tools that fit your preferences!"
          },
          {
            "type": "p",
            "text": "First, download the zip file for the complete library of p5.js. Along with the core functions, this comes with p5.sound.js, which is exactly what we‚Äôll want to use for our soundboard! Once you unzip and open the file, you will be shown this folder with all of the folders!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/lib-p5-files.png"
          },
          {
            "type": "p",
            "text": "You‚Äôll click on the empty-example folder, and you‚Äôll notice these files!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/empty-example.png"
          },
          {
            "type": "p",
            "text": "In VS Code, we‚Äôre going to add the index.html and sketch.js files to a new folder. The new folder for this project is named music-soundboard!"
          },
          {
            "type": "pre",
            "text": "mkdir music-soundboard\ncd music-soundboard\ncode ."
          },
          {
            "type": "p",
            "text": "The code . command is provided by VS Code and lets you open a new window from the terminal. To enable this, go to the Command Palette (Command/Ctrl + Shift + P), search for \"shell command\", and select \"Install 'code' command in PATH\"."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/code-path.gif"
          },
          {
            "type": "p",
            "text": "Once you have your folder opened in VS Code, you‚Äôll notice it's empty! We‚Äôre going to add the index.html and sketch.js files from the empty-example folder. I copied and pasted into the music-soundboard folder:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/drag-and-drop-p5-tut.gif"
          },
          {
            "type": "p",
            "text": "Now that we have our boilerplate for the p5.js project, we‚Äôre going to add in our p5.js files! This will make sure we can use them to render the shapes and sound for our soundboard!"
          },
          {
            "type": "p",
            "text": "From the addons folder, let's move the following files to our music-soundboard folder:"
          },
          {
            "type": "p",
            "text": "Your music-soundboard folder should now look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/vscode-files.png"
          },
          {
            "type": "p",
            "text": "Now that we have our folder setup with all of our files, it's time to start making our soundboard! ü•≥"
          },
          {
            "type": "p",
            "text": "In the index.html given to us by p5.js, let's load the p5-related libraries with four <script> elements:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>funky soundboard</title>\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"kirby.png\">\n  <!-- feel free to add in your own favicon! -->\n  <style>\n    body {\n      padding: 0;\n      margin: 0;\n    }\n  </style>\n\n  <script src=\"./p5.min.js\"></script>\n  <script src=\"./p5.sound.js\"></script>\n  <script src=\"./p5.sound.min.js\"></script>\n  <script src=\"sketch.js\"></script>\n</head>\n\n<body>\n  <main>\n\n  </main>\n</body>\n\n</html>"
          },
          {
            "type": "p",
            "text": "We have now added the script files of p5.js to our HTML, and will be able to read everything we create in our sketch.js file!"
          },
          {
            "type": "p",
            "text": "Your current sketch.js file looks something like this:"
          },
          {
            "type": "pre",
            "text": "function setup() {\n  // put setup code here\n}\n\nfunction draw() {\n  // put drawing code here\n}"
          },
          {
            "type": "p",
            "text": "This file is where we will be placing our soundboard code. A p5.js almost always involves a setup() and draw() function."
          },
          {
            "type": "p",
            "text": "At this point, feel free to turn on your live server! You‚Äôll be ready to see any changes that you make as soon as we start coding!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/server-start.png"
          },
          {
            "type": "h3-li",
            "h3": "## Setting up the Canvas",
            "li": [
              "The rectangle",
              "The ellipse (or oval) that covers the top part of our rectangle",
              "The bottom arc"
            ]
          },
          {
            "type": "p",
            "text": "In p5.js, we tell our script to set up the width and height of a ‚Äúcanvas‚Äù where we are going to be placing content. For our purposes, we'll make the canvas as wide and tall as the browser you're using! This allows for the canvas to scale to whatever screen size you're using the soundboard on!"
          },
          {
            "type": "p",
            "text": "Let's start a newline above the setup() function and initialize some variables for the window's innerHeight and innerWidth properties (these are system variables that stores the width of the inner window and maps to the window‚Äôs width and height) at the very top of our sketch.js file, outside the blank setup() function:"
          },
          {
            "type": "pre",
            "text": "let width = window.innerWidth;\nlet height = window.innerHeight;"
          },
          {
            "type": "p",
            "text": "setup() function"
          },
          {
            "type": "p",
            "text": "You‚Äôll notice setup() is blank. Inside, we‚Äôre going to make the canvas with the createCanvas() function and give it the width and height parameters with our width and height variables."
          },
          {
            "type": "pre",
            "text": "function setup() {\n  canvas = createCanvas(weight, height);\n}"
          },
          {
            "type": "p",
            "text": "Let‚Äôs start to \"paint\" on our canvas with the draw() function, starting with a background color! In p5.js, we add can do this with the built-in background() function:"
          },
          {
            "type": "pre",
            "text": "background(r, g, b);"
          },
          {
            "type": "p",
            "text": "The r, g, and b stand for \"red\", \"green\", and \"blue\". Each parameter is an integer between 0 and 255."
          },
          {
            "type": "p",
            "text": "Note: To get RGB values of a color, a color generator palette like Coolors might be helpful, as you can copy the RGB value of any color. You‚Äôll want to remember to use RGB values for the colors of the button we‚Äôll be making soon!"
          },
          {
            "type": "p",
            "text": "Here‚Äôs what your draw() function should look like!"
          },
          {
            "type": "pre",
            "text": "function draw() {\n  background(247, 178, 183); // replace with RGB color of choice\n}"
          },
          {
            "type": "p",
            "text": "Now that we‚Äôre all setup, let's get started with creating our buttons!"
          },
          {
            "type": "h3-li",
            "h3": "## Creating a Button Class",
            "li": [
              "The rectangle",
              "The ellipse (or oval) that covers the top part of our rectangle",
              "The bottom arc"
            ]
          },
          {
            "type": "p",
            "text": "Let‚Äôs take a look at the anatomy of the shape of the button we are making."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/anatomy.png"
          },
          {
            "type": "p",
            "text": "Our button is composed of 3 distinct shapes. We have:"
          },
          {
            "type": "p",
            "text": "We‚Äôll make these shapes separately and arrange them to look like our finished button!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/button.png"
          },
          {
            "type": "p",
            "text": "Let‚Äôs also consider our screen grid. For this tutorial, you will create a 3x3 grid of buttons for our soundboard (or 9 buttons total). If you‚Äôd like to add more or less, try making a grid map like the one below. It will show you exactly how to position your buttons on the screen."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/grid.png"
          },
          {
            "type": "p",
            "text": "Each gray circle shows where the button will be."
          },
          {
            "type": "p",
            "text": "Under our draw() function let's create a new JavaScript class called Button. This will include some attributes that will be initialized in our constructor() function. Let's take a look at what the attributes of each button will be:"
          },
          {
            "type": "p",
            "text": "Let‚Äôs show this in code!"
          },
          {
            "type": "pre",
            "text": "class Button {\n  constructor(x, y, w, h, color, accent, song) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.color = color;\n    this.accent = accent;\n    this.song = song;\n  }\n}"
          },
          {
            "type": "p",
            "text": "In the constructor() function, we‚Äôre using this. to eliminate the confusion between class attributes and parameters with the same name. We use it to reference the particular instance of our variable!"
          },
          {
            "type": "p",
            "text": "p5.js has a built-in show() function, where it will display the code we provide to it when called."
          },
          {
            "type": "p",
            "text": "Here, we will build our button shapes. As a reminder, we need to build:"
          },
          {
            "type": "p",
            "text": "We can use the p5.js functions called rect(), ellipse(), and arc(). Take a look at the syntax below for each function:"
          },
          {
            "type": "pre",
            "text": "// Rectangle\nrect(x, y, w, h);\n\n// Ellipse\nellipse(x, y, w, h);\n\n// Arc\narc(x, y, w, h, start, stop, [mode]);"
          },
          {
            "type": "p",
            "text": "For the arc() function, we use the following parameters for the shape we want:"
          },
          {
            "type": "p",
            "text": "A start angle for the arc, specified in radians.\nA stop angle for the arc, specified in radians."
          },
          {
            "type": "p",
            "text": "Let‚Äôs use our variables to create our shapes using show()!"
          },
          {
            "type": "p",
            "text": "Note: In p5.js, shapes are built from the top of the draw() function to the bottom. To build our shape correctly, we want our ellipse to cover our rectangle. Let's create the shapes going from rectangle to ellipse, to arc:"
          },
          {
            "type": "pre",
            "text": "  show() {\n    noStroke();\n\n    fill(this.color); \n    rect(this.x, this.y, this.w, this.h);\n\n    fill(this.accent); \n    ellipse(this.x, this.y, this.w, this.h);\n\n    fill(this.color); \n    arc(this.x, this.y, this.w, this.h, TWO_PI, PI);\n }"
          },
          {
            "type": "p",
            "text": "Let‚Äôs dissect this code a bit to understand what‚Äôs going on:"
          },
          {
            "type": "p",
            "text": "Woohoo! We‚Äôre nearly almost done with ‚Äúdrawing‚Äù our buttons!"
          },
          {
            "type": "h3-li",
            "h3": "## Load In Your Sounds",
            "li": [
              "Searching any sound effect on YouTube is easily done! You can grab the link of the YouTube video and paste it into a ‚ÄúYouTube to mp3‚Äù converter online!",
              "MixKit is a free online library of different audio and sound effects! I used this to grab a couple of the sounds I was using, and they‚Äôre a simple download!"
            ]
          },
          {
            "type": "p",
            "text": "Let‚Äôs take a little detour and quickly load in our sound and music effects. Whether you‚Äôre using the soundboard to create beats, funny sounds for a game, or even videos, you‚Äôll need to load in the sounds to your local development folder!"
          },
          {
            "type": "p",
            "text": "Sound effects that are 1-2 seconds long tend to be the best ones for a soundboard, as they‚Äôre quick and to the point! That being said, here are some ways you can download .wav and .mp3 sound files for any sound you would like!"
          },
          {
            "type": "p",
            "text": "Once you have your 9 sound effects, you‚Äôll want to drag them to your folder like we have done before! It should now look similar to this! I used a variation of instrument sounds, the vine boom sound ü§™, and some funky retro ones!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/sound-files.png"
          },
          {
            "type": "p",
            "text": "Note: I have renamed my sound files to have recognizable and easy to read names!"
          },
          {
            "type": "p",
            "text": "Let's now load the sounds in code!"
          },
          {
            "type": "p",
            "text": "At the top of our file, lets initialize the sound variables:"
          },
          {
            "type": "pre",
            "text": "let vine_boom;\nlet retro_game;\nlet whoosh;\nlet acute_guitar;\nlet guitar_string;\nlet guitar_notif;"
          },
          {
            "type": "p",
            "text": "The p5.sound.js file allows us to use the loadSound() function. We‚Äôll use that to load our sounds, and use them for our soundboard. Let's go back to our setup() function, and declare the sounds. It should now look like this:"
          },
          {
            "type": "pre",
            "text": "function setup() {\n  canvas = createCanvas(weight, height);\n\n  // load sounds\n  vine_boom = loadSound('vine_boom.mp3');\n  retro_game = loadSound('retro_game.wav');\n  whoosh = loadSound('whoosh.wav');\n  acute_guitar = loadSound('acute_guitar.wav');\n  guitar_string = loadSound('guitar_string.wav');\n  guitar_notif = loadSound('guitar_notif.wav');\n}"
          },
          {
            "type": "h3-li",
            "h3": "## Creating Buttons",
            "li": [
              "Where the mouse click occurs (x and y position)",
              "Where the button is to be able to click on",
              "How the button should move once there is a click",
              "What the button should do once there is a click"
            ]
          },
          {
            "type": "p",
            "text": "Sweet! We have our sounds loaded, now it's time to start creating buttons! For this, we‚Äôre going to create new instances of our buttons. We‚Äôre going to add the parameters like how we defined them in our Button class."
          },
          {
            "type": "p",
            "text": "As we established earlier, we‚Äôre going to use the x and y position ratios from our grid map. We‚Äôll be using 9 variables (b1-b9) to reference our Button instances. For the width and the height, I am using the values 200 and 80 respectively. Feel free to play around with different values! Additionally, you‚Äôll want to choose 9 main body colors and an additional 9 lighter, accent colors. We will add these below our sounds in our setup() method."
          },
          {
            "type": "pre",
            "text": "  let b1 = new Button(weight/3, height/3, 200, 80, color(226, 132, 19), color(244, 190, 124), vine_boom);\n  let b2 = new Button(weight/2, height/3, 200, 80, color(0, 159, 183), color(153, 241, 255), retro_game);\n  let b3 = new Button(2*weight/3, height/3, 200, 80, color(145, 145, 233), color(204, 204, 245), whoosh);\n\n  let b4 = new Button(weight/3, height/2, 200, 80, color(205, 92, 92), color(240, 128, 128), vine_boom);\n  let b5 = new Button(weight/2, height/2, 200, 80, color(72, 209, 204), color(175, 238,238), retro_game);\n  let b6 = new Button(2*weight/3, height/2, 200, 80, color(255, 215, 0), color(255, 255, 0), whoosh);\n\n  let b7 = new Button(weight/3, 2*height/3, 200, 80, color(255, 163, 175), color(255, 214, 220), acute_guitar);\n  let b8 = new Button(weight/2, 2*height/3, 200, 80, color(143, 45, 86), color(216, 131, 166), guitar_string);\n  let b9 = new Button(2*weight/3, 2*height/3, 200, 80, color(236, 78, 32), color(234, 162, 133), guitar_notif);"
          },
          {
            "type": "p",
            "text": "For my 3x3 grid, I‚Äôll have 3 rows and 3 columns. Let's add each row of buttons into their own array. This way, we can access them in other functions, and show them on our canvas."
          },
          {
            "type": "p",
            "text": "At the top of our file, let's declare the following arrays:"
          },
          {
            "type": "pre",
            "text": "let buttons_top = [];\nlet buttons_middle = [];\nlet buttons_bottom = [];"
          },
          {
            "type": "p",
            "text": "Using the .push() array method, let's add all of our references to the array."
          },
          {
            "type": "pre",
            "text": "  buttons_top.push(b1);\n  buttons_top.push(b2);\n  buttons_top.push(b3);\n\n  buttons_middle.push(b4);\n  buttons_middle.push(b5);\n  buttons_middle.push(b6);\n\n  buttons_bottom.push(b7);\n  buttons_bottom.push(b8);\n  buttons_bottom.push(b9);"
          },
          {
            "type": "p",
            "text": "Your current sketch.js file should now look like this!"
          },
          {
            "type": "pre",
            "text": "let weight = window.innerWidth;\nlet height = window.innerHeight;\n\nlet buttons_top = [];\nlet buttons_middle = [];\nlet buttons_bottom = [];\n\nlet vine_boom;\nlet retro_game;\nlet whoosh;\nlet acute_guitar;\nlet guitar_string;\nlet guitar_notif;\n\nfunction setup() {\n  canvas = createCanvas(weight, height);\n  vine_boom = loadSound('vine_boom.mp3');\n  retro_game = loadSound('retro_game.wav');\n  whoosh = loadSound('whoosh.wav');\n  acute_guitar = loadSound('acute_guitar.wav');\n  guitar_string = loadSound('guitar_string.wav');\n  guitar_notif = loadSound('guitar_notif.wav');\n\n  let b1 = new Button(weight/3, height/3, 200, 80, color(226, 132, 19), color(244, 190, 124), vine_boom);\n  let b2 = new Button(weight/2, height/3, 200, 80, color(0, 159, 183), color(153, 241, 255), retro_game);\n  let b3 = new Button(2*weight/3, height/3, 200, 80, color(145, 145, 233), color(204, 204, 245), whoosh);\n\n  let b4 = new Button(weight/3, height/2, 200, 80, color(205,92,92), color(240,128,128), vine_boom);\n  let b5 = new Button(weight/2, height/2, 200, 80, color(72,209,204), color(175,238,238), retro_game);\n  let b6 = new Button(2*weight/3, height/2, 200, 80, color(255,215,0), color(255,255,0), whoosh);\n\n  let b7 = new Button(weight/3, 2*height/3, 200, 80, color(255, 163, 175), color(255, 214, 220), acute_guitar);\n  let b8 = new Button(weight/2, 2*height/3, 200, 80, color(143, 45, 86), color(216, 131, 166), guitar_string);\n  let b9 = new Button(2*weight/3, 2*height/3, 200, 80, color(236, 78, 32), color(234, 162, 133), guitar_notif);\n\n  buttons_top.push(b1);\n  buttons_top.push(b2);\n  buttons_top.push(b3);\n\n  buttons_middle.push(b4);\n  buttons_middle.push(b5);\n  buttons_middle.push(b6);\n\n  buttons_bottom.push(b7);\n  buttons_bottom.push(b8);\n  buttons_bottom.push(b9);\n}\n\nfunction draw() {\n  background(51, 92, 129);\n  noStroke();\n }\n\nclass Button {\n  constructor(x, y, w, h, color, accent, sound) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.color = color;\n    this.accent = accent;\n    this.sound = sound;\n  }\n\n  show() {\n    noStroke();\n    fill(this.color);\n    rect((this.x), this.y, this.w, 50);\n\n    fill(this.accent);\n    ellipse(this.x, this.y, this.w, this.h);\n\n    fill(this.color);\n    arc(this.x, (this.y), this.w, this.h, TWO_PI, PI);\n  }\n}"
          },
          {
            "type": "p",
            "text": "Let‚Äôs now see our buttons!"
          },
          {
            "type": "p",
            "text": "Using a for loop, let's go through each array to display all 9 buttons. In the draw() function, it should now look like this:"
          },
          {
            "type": "pre",
            "text": "function draw() {\n  background(51, 92, 129);\n  noStroke();\n  for (let i = 0; i < buttons_top.length; i++) {\n    buttons_top[i].show(); // using our show() function from our Button class.\n    buttons_middle[i].show();\n    buttons_bottom[i].show();\n  }\n}"
          },
          {
            "type": "p",
            "text": "You‚Äôll notice that we have some shapes on the screen! But they look a little weird‚Ä¶ The shapes are there, but not in the right position. Let's manipulate some values to arrange the shapes correctly!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/weird-buttons.png"
          },
          {
            "type": "p",
            "text": "You‚Äôll remember that in our Button class, the show() function establishes the x and y position for the shapes."
          },
          {
            "type": "p",
            "text": "Let's go back and take a look at what‚Äôs currently wrong with our shapes. Our rectangle is shifted to the right, and our arc shape is too high. You‚Äôll recall that we set our initial button width to 200. The rectangle is halfway between the top ellipse, so we‚Äôll move the rectangle 100 units to the left, in the x direction."
          },
          {
            "type": "pre",
            "text": "rect((this.x - 100), this.y, this.w, this.h);"
          },
          {
            "type": "p",
            "text": "This is what we see now!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/weird2-buttons.png"
          },
          {
            "type": "p",
            "text": "Awesome! Now, let‚Äôs shift our arc shape down further to create the illusion of a button shape. If you recall, I chose the height of my rectangle body to be 50 units. That is how much I will shift the arc shape down."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/buttons2.png"
          },
          {
            "type": "p",
            "text": "Ta Da!!!! We have buttons!!!!"
          },
          {
            "type": "h3-li",
            "h3": "## Creating a mousePressed() Function",
            "li": [
              "Where the mouse click occurs (x and y position)",
              "Where the button is to be able to click on",
              "How the button should move once there is a click",
              "What the button should do once there is a click"
            ]
          },
          {
            "type": "p",
            "text": "Wonderful! We have officially created art using code! Now, let‚Äôs begin adding our music and animating our buttons to have a fun pop! üôå"
          },
          {
            "type": "p",
            "text": "Because the clicking for each button will apply to all of the buttons, let‚Äôs go back to our Button class and create a universal .clicked() method for our buttons."
          },
          {
            "type": "p",
            "text": "Let‚Äôs think about what we need to know‚Ä¶"
          },
          {
            "type": "p",
            "text": "Using the p5.js dist() function, we can return a number of the distance between 2 distinct points. In our case, that will be the button and the mouse click. We want our button to do something if we click within the certain area of the button. Our .clicked() method should take in the px and py parameters of the mouse click."
          },
          {
            "type": "p",
            "text": "Note: Here‚Äôs the math the dist() function is doing behind the scenes. üëÄ"
          },
          {
            "type": "p",
            "text": "Let‚Äôs see what this looks like in code:"
          },
          {
            "type": "pre",
            "text": "clicked(px, py) {\n  let d = dist(px, py, this.x, this.y);\n}"
          },
          {
            "type": "p",
            "text": "We know that when we click a button we want it to do two things:"
          },
          {
            "type": "p",
            "text": "Let‚Äôs go ahead and add that to our .clicked() method:"
          },
          {
            "type": "pre",
            "text": "  if (d < this.w / 2) { // if the distance is less than half of the width of the button\n    this.y = this.y + 10; // add 10 units to the y position of the button\n    this.sound.play(); // play the sound\n  }"
          },
          {
            "type": "p",
            "text": "Great! Your Button class should now be complete, and should look like this!"
          },
          {
            "type": "pre",
            "text": "class Button {\n  constructor(x, y, w, h, color, accent, sound) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.color = color;\n    this.accent = accent;\n    this.sound = sound;\n  }\n\n  show() {\n    noStroke();\n    fill(this.color);\n    rect((this.x - 100), this.y, this.w, 50);\n\n    fill(this.accent);\n    ellipse(this.x, this.y, this.w, this.h);\n\n    fill(this.color);\n    arc(this.x, (this.y + 50), this.w, this.h, TWO_PI, PI);\n  }\n\n  clicked(px, py) {\n    let d = dist(px, py, this.x, this.y);\n\n    if (d < this.w / 2) {\n      this.y = this.y + 10;\n      this.sound.play();\n    }\n  }\n}"
          },
          {
            "type": "p",
            "text": "Now let‚Äôs call our clicked button, and see the button move!"
          },
          {
            "type": "p",
            "text": "For this, we‚Äôll need the p5.js mousePressed() function, which is called once after every time a mouse button is pressed. Let‚Äôs use this to call our clicked function we made for our Button class, and apply this to every button we made!"
          },
          {
            "type": "p",
            "text": "Because we have our buttons in three separate arrays, let‚Äôs iterate through them with a for loop, and call the .clicked() method we made. For its parameters, we can use p5.js‚Äôs interactive mouseX and mouseY variables to detect the coordinates of mouse clicks!"
          },
          {
            "type": "pre",
            "text": "function mousePressed() {\n  for (let i = 0; i < buttons_top.length; i++) {\n    buttons_top[i].clicked(mouseX, mouseY);\n    buttons_middle[i].clicked(mouseX, mouseY);\n    buttons_bottom[i].clicked(mouseX, mouseY);\n  }\n}"
          },
          {
            "type": "p",
            "text": "Try pressing a button! And again. And again and again. You‚Äôll see that we have the sounds going wild and the button never comes back up‚Ä¶"
          },
          {
            "type": "h3-li",
            "h3": "## Creating a mouseReleased() Function",
            "li": [
              "Create a confetti animation when you click on the button.",
              "The button or background color changes every time you click.",
              "Create a music player that plays your notes using play and stop buttons."
            ]
          },
          {
            "type": "p",
            "text": "Let‚Äôs tell our soundboard to move our buttons back up once we stop clicking! Like we did with the last function, mousePressed(), p5.js provides a mouseReleased() function that we can use!"
          },
          {
            "type": "p",
            "text": "We‚Äôll iterate through our arrays like before, but this time, we‚Äôll bring the rows back up to their original height:"
          },
          {
            "type": "pre",
            "text": "function mouseReleased() {\n  for (let i = 0; i < buttons_top.length; i++) {\n    buttons_top[i].y = height/3;\n    buttons_middle[i].y = height/2;\n    buttons_bottom[i].y = 2*height/3;\n  }\n}"
          },
          {
            "type": "p",
            "text": "Press a button and see it pop! ü•≥ü§Ø"
          },
          {
            "type": "p",
            "text": "Your final code should look like this:"
          },
          {
            "type": "pre",
            "text": "let width = window.innerWidth;\nlet height = window.innerHeight;\n\nlet buttons_top = [];\nlet buttons_middle = [];\nlet buttons_bottom = [];\n\nlet vine_boom;\nlet retro_game;\nlet whoosh;\nlet acute_guitar;\nlet guitar_string;\nlet guitar_notif;\n\nfunction setup() {\n  canvas = createCanvas(width,height);\n  vine_boom = loadSound('vine_boom.mp3');\n  retro_game = loadSound('retro_game.wav');\n  whoosh = loadSound('whoosh.wav');\n  acute_guitar = loadSound('acute_guitar.wav');\n  guitar_string = loadSound('guitar_string.wav');\n  guitar_notif = loadSound('guitar_notif.wav');\n\n  let b1 = new Button(width/3, height/3, 200, 80, color(226, 132, 19), color(244, 190, 124), vine_boom);\n  let b2 = new Button(width/2, height/3, 200, 80, color(0, 159, 183), color(153, 241, 255), retro_game);\n  let b3 = new Button(2*width/3, height/3, 200, 80, color(145, 145, 233), color(204, 204, 245), whoosh);\n\n  let b4 = new Button(width/3, height/2, 200, 80, color(205,92,92), color(240,128,128), vine_boom);\n  let b5 = new Button(width/2, height/2, 200, 80, color(72,209,204), color(175,238,238), retro_game);\n  let b6 = new Button(2*width/3, height/2, 200, 80, color(255,215,0), color(255,255,0), whoosh);\n\n  let b7 = new Button(width/3, 2*height/3, 200, 80, color(255, 163, 175), color(255, 214, 220), acute_guitar);\n  let b8 = new Button(width/2, 2*height/3, 200, 80, color(143, 45, 86), color(216, 131, 166), guitar_string);\n  let b9 = new Button(2*width/3, 2*height/3, 200, 80, color(236, 78, 32), color(234, 162, 133), guitar_notif);\n\n  buttons_top.push(b1);\n  buttons_top.push(b2);\n  buttons_top.push(b3);\n\n  buttons_middle.push(b4);\n  buttons_middle.push(b5);\n  buttons_middle.push(b6);\n\n  buttons_bottom.push(b7);\n  buttons_bottom.push(b8);\n  buttons_bottom.push(b9);\n}\n\nfunction mousePressed() {\n  for (let i = 0; i < buttons_top.length; i++) {\n    buttons_top[i].clicked(mouseX, mouseY);\n    buttons_middle[i].clicked(mouseX, mouseY);\n    buttons_bottom[i].clicked(mouseX, mouseY);\n  }\n}\n\nfunction mouseReleased() {\n  for (let i = 0; i < buttons_top.length; i++) {\n    buttons_top[i].y = height/3;\n    buttons_middle[i].y = height/2;\n    buttons_bottom[i].y = 2*height/3;\n  }\n}\n\nfunction draw() {\n  background(51, 92, 129);\n  noStroke();\n  for (let i = 0; i < buttons_top.length; i++) {\n    buttons_top[i].show(); // using our show function from our Button class.\n    buttons_middle[i].show();\n    buttons_bottom[i].show();\n  }\n}\n\nclass Button {\n  constructor(x, y, w, h, color, accent, sound) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.color = color;\n    this.accent = accent;\n    this.sound = sound;\n  }\n\n  show() {\n    noStroke();\n    fill(this.color);\n    rect((this.x - 100), this.y, this.w, 50);\n\n    fill(this.accent);\n    ellipse(this.x, this.y, this.w, this.h);\n\n    fill(this.color);\n    arc(this.x, (this.y + 50), this.w, this.h, TWO_PI, PI);\n  }\n\n  clicked(px, py) {\n    let d = dist(px, py, this.x, this.y);\n\n    if (d < this.w / 2) {\n      this.y = this.y + 10;\n      this.sound.play();\n    } \n  }\n}"
          }
        ]
      },
      {
        "checkpoint": "# Demo",
        "content": [
          {
            "type": "p",
            "text": "You just built your own interactive and animated soundboard with p5.js! Pretty cool right?"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-soundboard-with-p5js/images/demo.gif"
          },
          {
            "type": "p",
            "text": "View the full source code here."
          },
          {
            "type": "p",
            "text": "This particular soundboard is also deployed on this website."
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! You created a super fun soundboard that you can make beats with and share with friends! And we did this with the p5.js JavaScript library, and some HTML and sound files!"
          },
          {
            "type": "p",
            "text": "Like with every project, there's room for growth, expansion, and some more ‚ú®art‚ú®!! Here are some ideas I came up with at the top of my head to help expand the project if you‚Äôre interested in building the soundboard further:"
          },
          {
            "type": "p",
            "text": "Once you've finished this project, feel free to post the images, GIFs, or videos of the interactive soundboard on Twitter and tag @codedex_io and @exrlla! We would love to see your approach to creative development. ü©∑"
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "p5.js",
              "Setting up Your Local Development Environment with Python on VS Code",
              "p5.js Sound Effects",
              "p5.js Interactivity"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Build a Chat Game with p5.js",
    "link": "https://www.codedex.io/projects/build-a-conversational-game-in-p5js",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/conversation-project-card.png",
    "prerequisite": {
      "Prerequisites": ": p5.js, JavaScript",
      "Version": ": p5 1.11.2",
      "Read Time": ": 30 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Hi, my name is ‚ú®Julien‚ú®, and I‚Äôm the new Senior Curriculum Developer here at Cod√©dex! I love zines, games, indie comics, park hangs, and experimental baking (holiday cookie box loading‚Ä¶). I‚Äôm based in Brooklyn, and am originally from Los Angeles! I‚Äôve always made art, and didn‚Äôt consider myself a technical person until my coding journey unexpectedly began about a decade ago."
          },
          {
            "type": "p",
            "text": "Since this is my first project tutorial here at Cod√©dex, I‚Äôm revisiting the first coding project I ever finished. I made it ten years ago using Processing (the Java-based precursor to the p5.js library)."
          }
        ]
      },
      {
        "checkpoint": "# A Conversation",
        "content": [
          {
            "type": "p",
            "text": "Here's the project:"
          },
          {
            "type": "p",
            "text": "The game is called A Conversation, and it‚Äôs a two-player game of Pong, but with a twist. Instead of each paddle, I drew a person‚Äôs head facing toward the center, and instead of a ball, I drew a speech bubble. As players hit the speech bubble back and forth, the text inside the speech bubble changes to form a conversation."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/94X89Jo.gif"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/dgqpb3M.png"
          },
          {
            "type": "p",
            "text": "I spent a lot of 2014 thinking about the ways people communicate nonverbally while playing games, so I decided to make those invisible conversations, well, visible."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/f8m1zfQ.jpeg"
          },
          {
            "type": "p",
            "text": "brainstorming sketches from 2014"
          },
          {
            "type": "p",
            "text": "The conversation itself was‚Ä¶hm‚Ä¶it was pretty dramatic. I wasn‚Äôt sure if I was going to make this tutorial, because I was a little embarrassed by the narrative stylings of nineteen-year-old Julien. But honestly? I think it‚Äôs important to honor our past selves. I was learning to code for the first time after a lifetime of considering myself An Artist Not A Programmer."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/XyJaet1.png"
          },
          {
            "type": "p",
            "text": "Since this project was created in 2014 on an ancient laptop I no longer have access to, I‚Äôm recreating it from scratch in p5.js, a JavaScript library. If you‚Äôve completed our p5.js course, you may remember coding a simple game of Pong in one of the exercises!"
          },
          {
            "type": "p",
            "text": "In this project tutorial, I'll expand the one-player Pong game from the WASD exercise in our p5.js course into a two-player game, using the conceptual framing of two characters having a conversation."
          },
          {
            "type": "p",
            "text": "I found this email to my community college professor where I gave her some context about my goals so she could write me a recommendation letter:"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/qKVVVtZ.png"
          },
          {
            "type": "p",
            "text": "Omg,,,,\nAnyway, let‚Äôs dive in!"
          }
        ]
      },
      {
        "checkpoint": "# Pong",
        "content": [
          {
            "type": "p",
            "text": "Since Pong is a super popular game, I had a hunch that there would be lots of existing resources online to help me debug. I had a lot of ideas, but didn‚Äôt quite have the technical know-how to build something from scratch! I wanted to learn from other people. Experienced programmers still do this! The googling never stops."
          },
          {
            "type": "p",
            "text": "For this year‚Äôs iteration of Pong, I decided to have a conversation with my past self. I initially thought about talking to 2014 me, but then I decided to go way, waaaaay back, to 1997. Let's have a chat."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/4r8RZbT.gif"
          },
          {
            "type": "h3-li",
            "h3": "## Upgrading From Simple Pong",
            "li": [
              "Add a background image (a particularly foggy night with a blurry moon)",
              "Resize the paddles to be wrapped to the images",
              "Figure out what I want to talk to myself about, and write it down",
              "Add brat font",
              "Add custom messages for different game states",
              "Add custom text to the title",
              "Flip the game to vertical orientation",
              "Add a second paddle",
              "Add arrow key controls for player 2",
              "Track score",
              "Add ability to restart game"
            ]
          },
          {
            "type": "p",
            "text": "There were a few elements I added to upgrade the sketch from the WASD (Pong) exercise in our p5.js tutorial. Here is a link to the Cod√©dex exercise that features single-player Pong. Here is the starter code for a basic two-player pong game, which looks a bit different from the Cod√©dex exercise."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/leVbTL9.gif"
          },
          {
            "type": "p",
            "text": "üëÅÔ∏è üëÅÔ∏è I could watch this for hours üíøüü¶"
          },
          {
            "type": "p",
            "text": "So, how do we go from a screensaver to a conversation? I find it helpful to break down the process into smaller steps. I‚Äôm gonna show you three things that can personalize our basic Pong game. üïπÔ∏è"
          },
          {
            "type": "p",
            "text": "üéß Step 1: Add a looping soundtrack"
          },
          {
            "type": "p",
            "text": "The first thing I want to do is add a soundtrack, to give the game ambiance. To play sound files in p5.js in the Cod√©dex IDE, you‚Äôll need to link to a url containing a .ogg audio file. You can find a ton of .ogg files with varying moods here. I chose an ambient outdoor summer track since I‚Äôve always loved laying in the grass while reading a book in the park!"
          },
          {
            "type": "p",
            "text": "Declare a gameSoundtrack variable and define it in the preload function, where audio (and images!) load before the setup() function."
          },
          {
            "type": "pre",
            "text": "let gameSoundtrack;\n\nfunction preload() {\n  gameSoundtrack = loadSound(\"https://actions.google.com/sounds/v1/ambiences/outdoor_summer_ambience.ogg\");\n}"
          },
          {
            "type": "p",
            "text": "Then, we‚Äôll loop the soundtrack in the setup function."
          },
          {
            "type": "pre",
            "text": "function setup(){\n‚Ä¶\n  //loop the game soundtrack\n  gameSoundtrack.loop();\n‚Ä¶\n}"
          },
          {
            "type": "p",
            "text": "üï∫üèª Step 2: Replace paddles with player images"
          },
          {
            "type": "p",
            "text": "To add images for the players, you‚Äôll need to draw or find transparent PNGs. Since I decided to have a conversation with my younger self this time, I found a recent photo of me posing in a way that‚Äôs similar to a photo of me posing as a kid. Then, I removed their backgrounds with Adobe‚Äôs Free Image Background Remover and did some light editing in Adobe Express."
          },
          {
            "type": "p",
            "text": "I uploaded the photos to Imgur, and added them to the preload function where my soundtrack lives."
          },
          {
            "type": "pre",
            "text": "let julien1997;\nlet julien2024;\n\nfunction preload() {\n...\n  julien1997 = loadImage(\"https://i.imgur.com/a0I87n4.png\");\n  julien2024 = loadImage(\"https://i.imgur.com/wkYjjo9.png\");\n}"
          },
          {
            "type": "p",
            "text": "I replaced the paddle rectangles with images in the showPaddle() function."
          },
          {
            "type": "pre",
            "text": "function showPaddle(playerNumber){\n...\n  push();\n  imageMode(CENTER);\n\n  image(\n    julien2024,\n    thisPlayer1.paddleH + 60,\n    thisPlayer1.paddleV,\n    PADDLE_WIDTH * 1.5, // adjusted width for photo proportions\n    PADDLE_HEIGHT * 1.5 // adjusted height for photo proportions\n  );\n  image(\n    julien1997,\n    thisPlayer2.paddleH - 20,\n    thisPlayer2.paddleV,\n    PADDLE_WIDTH / 1.2, // adjusted width for photo proportions\n    PADDLE_HEIGHT\n  );\n  pop();\n}"
          },
          {
            "type": "p",
            "text": "üí¨ Step 3: Add the chat text as an array of strings"
          },
          {
            "type": "p",
            "text": "I thought about what I would want to talk to myself about. I knew that baby me would probably want to ask me the silly philosophical questions he was asking everyone else. Growing up, my Russian-speaking grandmother recognized my innate curiosity and affectionately called me \"Pochemuchka\" ‚Äî loosely, ‚Äúone who asks too many questions‚Äù. üë¶üèª"
          },
          {
            "type": "p",
            "text": "I declare my array of strings and a variable tracking where we are in the array."
          },
          {
            "type": "pre",
            "text": "let convoText = [\n...\n  \"why is the moon broken?\",\n  \"it's just hiding behind the fog, babe\",\n  \"what about when it looks like someone took a bite out of it?\",\n  \"that's called a crescent moon\",\n...\n];\nlet phrase = 0;"
          },
          {
            "type": "p",
            "text": "In the drawGame() function, I draw the text, and position it with the ball coordinates."
          },
          {
            "type": "pre",
            "text": "  push();\n  imageMode(CENTER);\n  textSize(20);\n  fill(255);\n  textAlign(CENTER);\n\n  if (showBall == true){\n    text(convoText[phrase], ball.h, ball.v);\n  }\n  pop();"
          },
          {
            "type": "p",
            "text": "In the moveBall() function, I cycle through the text array each time the ball collides with a player."
          },
          {
            "type": "pre",
            "text": "    ...\n      phrase++;\n      // stop the array at the last phrase\n      if (phrase == convoText.length) {\n        phrase = 0;\n      }\n    }"
          },
          {
            "type": "p",
            "text": "ü™© üîÆ üé±"
          },
          {
            "type": "p",
            "text": "Some other changes from the original lesson code:"
          },
          {
            "type": "p",
            "text": "Here is a link to my final code for the 2024 version of A Conversation."
          },
          {
            "type": "h3-li",
            "h3": "## Your Turn!",
            "li": []
          },
          {
            "type": "p",
            "text": "If you could use a game to have a conversation, what would you say, and who would you have a conversation with? You could also imagine a conversation between two other people. You and a friend? You and a family member? What would your pet say to you if they could communicate with words? What about those two people you saw at a restaurant ‚Äì who are they to each other, and what might they be discussing? What about two characters from a TV show? Make a two-player Pong game based on your conversation of choice."
          },
          {
            "type": "p",
            "text": "Past Lives (2023), directed by Celine Song\nWhat do you think they‚Äôre talking about?"
          },
          {
            "type": "p",
            "text": "Extra challenge: Think of some other games that could be turned into conversations. Find existing code examples and see if you can find a way to modify them into this conversational format."
          },
          {
            "type": "p",
            "text": "Happy chatting!"
          }
        ]
      }
    ]
  },
  {
    "title": "50 Terminal Project Ideas with Python",
    "link": "https://www.codedex.io/projects/50-terminal-project-ideas-using-python",
    "tags": [
      "Python",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/50-terminal-project-ideas-with-python.png",
    "prerequisite": {
      "Prerequisite:": "Programming fundamentals",
      "Versions:": "Python 3.10",
      "Read Time:": "20 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "If you have finished the Cod√©dex challenges and are wondering, \"What should I build now?\" You have come to the right place."
          },
          {
            "type": "p",
            "text": "Our team has compiled a list of 50 project ideas, ranging from intermediate to advanced, for you to build for yourself, your friends, or your fam. We hope to get your creative juices flowing and inspire you to jump into a personal project! üêç"
          }
        ]
      },
      {
        "checkpoint": "# 50 Ideas",
        "content": [
          {
            "type": "h3-li",
            "h3": "## Level 1",
            "li": [
              "ü•† Fortune Cookie",
              "üé≤ Dice Rolling Simulator",
              "ü´± Rock Paper Scissors",
              "ü´± Rock Paper Scissors Lizard Spock",
              "ü§ë Who Wants to Be a Millionaire",
              "‚ùì Quiz Game",
              "‚öîÔ∏è Text-Based Adventure",
              "ü§ñ Chatbot",
              "üôà Truth or Dare",
              "üóì Leap Year",
              "‚ô£Ô∏è Baby Blackjack",
              "‚ô£Ô∏è Blackjack",
              "üìè Metric Conversion Tool",
              "üìê Area Calculator",
              "üî¢ Guess My Number",
              "üî° Word Counter",
              "üÜò Morse Code Translator",
              "üèõ Roman Numeral Converter",
              "üöá NYC MetroCard Calculator",
              "üîê Caesar Cipher"
            ]
          },
          {
            "type": "p",
            "text": "The first batch is the perfect way to get started."
          },
          {
            "type": "p",
            "text": "These might require if/else, random number generator, and loops."
          },
          {
            "type": "h3-li",
            "h3": "## Level 2",
            "li": [
              "üè¶ Bank Account",
              "ü™ê Horoscope",
              "üìã To-Do Lists",
              "üõí Grocery",
              "üíñ Faves List",
              "üìù Class Schedule",
              "üí∏ Expense Tracker",
              "üìö Library Management System",
              "‚òéÔ∏è Contact Book",
              "üç≤ Recipe Book",
              "üîé Pok√©dex"
            ]
          },
          {
            "type": "p",
            "text": "Here are projects that users can find or add a database entry."
          },
          {
            "type": "p",
            "text": "These might require lists, objects, and file inputs/outputs."
          },
          {
            "type": "h3-li",
            "h3": "## Level 3",
            "li": [
              "ü™¶ Hangman",
              "‚ùå Tic-Tac-Toe",
              "üö¢ Battleship",
              "üî¥ Connect Four",
              "üêç Snake",
              "üèì Pong",
              "üí® Tron",
              "üí• Breakout",
              "üëæ Space Invaders",
              "üß† 2048",
              "üü© Wordle",
              "‚è∞ GUI Alarm Clock",
              "‚ûó GUI Calculator",
              "üß± Tetris",
              "‚óºÔ∏è Cards Against Humanity",
              "ü¶ñ T-Rex Run!",
              "üí£ Minesweeper",
              "üé® Paint"
            ]
          },
          {
            "type": "p",
            "text": "Lastly, we have a section of mini-games and super advanced terminal projects. It will require a lot of Googling to complete these."
          },
          {
            "type": "p",
            "text": "Beware, only the brave should venture forth:"
          },
          {
            "type": "p",
            "text": "And that's all for now! Hopefully, you have found a couple of ideas that you want to attempt."
          },
          {
            "type": "p",
            "text": "Let us know what you build by tagging @codedex_io on Twitter!"
          },
          {
            "type": "p",
            "text": "Happy coding!"
          }
        ]
      }
    ]
  },
  {
    "title": "Generate a Blog with OpenAI",
    "link": "https://www.codedex.io/projects/generate-a-blog-with-openai",
    "tags": [
      "AI",
      "Python"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/generate-a-blog-with-openai.png",
    "prerequisite": {
      "Prerequisites:": "Python fundamentals",
      "Versions:": "Python 3.10, python-dotenv 0.21.0, openai 1.0.0",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Artificial Intelligence (AI) is becoming the next big technology to harness. From smart fridges to self-driving cars, AI is implemented in almost everything you can think of. So let's get ahead of the pack and learn how we can leverage the power of AI with Python and OpenAI."
          },
          {
            "type": "p",
            "text": "In this tutorial, we'll learn how to create a blog generator with GPT-3, an AI model provided by OpenAI. The generator will read a topic to talk about as the input, and GPT-3 will return us a paragraph about that topic as the output."
          },
          {
            "type": "p",
            "text": "So AI will be \"writing\" stuff for us. Say goodbye to writer's block!"
          },
          {
            "type": "p",
            "text": "But wait, hold on! Artificial intelligence?! AI models?! This must be complicated to code. üòµ"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/generate-a-blog-with-openai/calculation-math.gif"
          },
          {
            "type": "p",
            "text": "Nope, it's easier than you think. It takes around 25 lines of Python code!"
          },
          {
            "type": "p",
            "text": "The final result will look something like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/generate-a-blog-with-openai/generator-demo.gif"
          },
          {
            "type": "p",
            "text": "Who knows, maybe this entire project was written by the generator we're about to create. üëÄ"
          }
        ]
      },
      {
        "checkpoint": "# What is GPT-3?",
        "content": [
          {
            "type": "p",
            "text": "GPT-3 is an AI model released by OpenAI in 2020. An AI model is a program trained on a bunch of data to perform a specific task. In this case, GPT-3 was trained to speak like a human and predict what comes next given the context of a sentence, with its training dataset being 45 terabytes of text (!) from the internet."
          },
          {
            "type": "p",
            "text": "Since GPT-3 was trained on internet data, it knows what the internet knows (not everything of course). This means that if we were to give GPT-3 a sentence, it would be able to predict what comes next in that sentence with high accuracy, based on all the text that was used to train it."
          },
          {
            "type": "p",
            "text": "Now we know what we'll be working with, let's build the program!"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "h3-li",
            "h3": "## OpenAI Account",
            "li": [
              "0: The same response every time.",
              "1: A different response every time, even if it's the same prompt."
            ]
          },
          {
            "type": "p",
            "text": "Before we do anything, we need an OpenAI account. We'll need this to access an API key for using GPT-3. Note that OpenAI no longer offers free credits, so you'll need to purchase at least 5 dollars worth of credits to start using the API."
          },
          {
            "type": "p",
            "text": "Go to www.openai.com and sign up for an OpenAI account."
          },
          {
            "type": "p",
            "text": "After you've created an account, click on your profile picture on the top right, then click \"View API keys\" to access your API key. You should see this page and it should look like:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/generate-a-blog-with-openai/api-key.png"
          },
          {
            "type": "p",
            "text": "Now that we know where the API key is located, let's keep it in mind for later."
          },
          {
            "type": "h3-li",
            "h3": "## Python Setup",
            "li": [
              "0: The same response every time.",
              "1: A different response every time, even if it's the same prompt."
            ]
          },
          {
            "type": "p",
            "text": "For this project, we'll need Python 3 and pip (package installer) installed."
          },
          {
            "type": "p",
            "text": "Assuming that we have those two installed, let's open up the code editor of our choice (we recommend VS Code) and create a new file called blog_generator.py."
          },
          {
            "type": "p",
            "text": "Note: You can name this file anything except for openai.py, since the name will clash with a package we'll be installing."
          }
        ]
      },
      {
        "checkpoint": "# Beginning the Project",
        "content": [
          {
            "type": "p",
            "text": "At the core of this project, all we'll be doing is sending data with instructions to a server owned by OpenAI, then receiving a response back from that server and displaying it."
          },
          {
            "type": "h3-li",
            "h3": "## Install openai",
            "li": [
              "0: The same response every time.",
              "1: A different response every time, even if it's the same prompt."
            ]
          },
          {
            "type": "p",
            "text": "We'll be interacting with GPT-3 model using a python package called openai. This package consists of methods that can connect to the internet and grant us access to the GPT-3 model hosted by OpenAI, the company."
          },
          {
            "type": "p",
            "text": "To install openai, all we have to do is run the following command in our terminal:"
          },
          {
            "type": "pre",
            "text": "pip install openai"
          },
          {
            "type": "p",
            "text": "We can now use this package by importing it into our blog_generator.py file like so:"
          },
          {
            "type": "pre",
            "text": "import openai"
          },
          {
            "type": "h3-li",
            "h3": "## Authorize API Key",
            "li": [
              "0: The same response every time.",
              "1: A different response every time, even if it's the same prompt."
            ]
          },
          {
            "type": "p",
            "text": "Before we can work with GPT-3 we need to set our API key in the openai module. Remember, the API key is what gives us access to GPT-3; it authorizes us and says we're allowed to use this API."
          },
          {
            "type": "p",
            "text": "We can set our API key by extending a method in the openai module called api_key:"
          },
          {
            "type": "pre",
            "text": "openai.api_key = 'Your_API_Key'"
          },
          {
            "type": "p",
            "text": "The method will take in the API key as a string. Remember, your API key is located in your OpenAI account."
          },
          {
            "type": "p",
            "text": "So far, the code should look like this:"
          },
          {
            "type": "pre",
            "text": "import openai\n\nopenai.api_key = 'sk-jAjqdWoqZLGsh7nXf5i8T3BlbkFJ9CYRk' # Fill in your own key"
          }
        ]
      },
      {
        "checkpoint": "# The Core Function",
        "content": [
          {
            "type": "p",
            "text": "Now that we have access to GPT-3, we can get to the meat of the application, which is creating a function that takes in a prompt as user input and returns a paragraph about that prompt."
          },
          {
            "type": "p",
            "text": "That function will look like this:"
          },
          {
            "type": "pre",
            "text": "def generate_blog(paragraph_topic):\n  response = openai.completions.create(\n    model = 'gpt-3.5-turbo-instruct',\n    prompt = 'Write a paragraph about the following topic. ' + paragraph_topic,\n    max_tokens = 400,\n    temperature = 0.3\n  )\n\n  retrieve_blog = response.choices[0].text\n\n  return retrieve_blog"
          },
          {
            "type": "p",
            "text": "Let's break down this function and see what's going on here."
          },
          {
            "type": "p",
            "text": "First, we defined a function called generate_blog(). There's a single parameter called paragraph_topic, which will be the topic used to generate the paragraph:"
          },
          {
            "type": "pre",
            "text": "def generate_blog(paragraph_topic):\n  # The code inside"
          },
          {
            "type": "p",
            "text": "And let's go inside the function. Here's the first part:"
          },
          {
            "type": "pre",
            "text": "def generate_blog(paragraph_topic):\n  response = openai.completions.create(\n    model = 'gpt-3.5-turbo-instruct',\n    prompt = 'Write a paragraph about the following topic. ' + paragraph_topic,\n    max_tokens = 400,\n    temperature = 0.3\n  )"
          },
          {
            "type": "p",
            "text": "This is the bulk of our function and where we use GPT-3. We created a variable called response to store the response generated by the output of the completions.create() method call in our openai module."
          },
          {
            "type": "p",
            "text": "GPT-3 has different endpoints for specific purposes, but for our goal, we'll use the completion endpoint. The completion endpoint will generate text depending on the provided prompt. You can read about the different endpoints in the documentation."
          },
          {
            "type": "p",
            "text": "Now that we have access to the completion endpoint, we need to specify a few things, The first one being:"
          },
          {
            "type": "p",
            "text": "model: The model parameter will take in the model we want to use. OpenAI offers several models with different capabilities. For this tutorial, we are using gpt-3.5-turbo-instruct to provide clear and reliable examples."
          },
          {
            "type": "p",
            "text": "Syntax and capabilities varies between models. You can read more about the available models in the documentation."
          },
          {
            "type": "pre",
            "text": "prompt = 'Write a paragraph about the following topic. ' + paragraph_topic,"
          },
          {
            "type": "p",
            "text": "prompt: This is where we design the main instructions for GPT-3. This parameter will take in our paragraph_topic argument, but before that, we can tell GPT-3 what to do with that argument. Currently, we are instructing GPT-3 to Write a paragraph about the following topic. GPT-3 will try its best to follow this instruction and return us a paragraph."
          },
          {
            "type": "p",
            "text": "GPT-3 is very flexible; if the initial string is changed to Write a blog outline about the following topic, it will give us an outline instead of a normal paragraph. You can later play around with this by telling the model exactly what it should generate and seeing what interesting responses you get."
          },
          {
            "type": "pre",
            "text": "max_tokens = 400"
          },
          {
            "type": "p",
            "text": "tokens: The token number decides how long the response is going to be. A larger token number will produce a longer response. By setting a specific number, we're saying that the response can't go past this token size. The way tokens are counted towards a response is a bit complex, but you can read this article by OpenAI that explains how token size is calculated."
          },
          {
            "type": "p",
            "text": "Roughly 75 words is about 100 tokens. A paragraph has 300 words on average. So, 400 tokens is about the length of a normal paragraph. The model gpt-3.5-turbo-instruct has a token limit of 4,096."
          },
          {
            "type": "pre",
            "text": "temperature = 0.3"
          },
          {
            "type": "p",
            "text": "temperature: Temperature determines the randomness of a response. A higher temperature will produce a more creative response, while a lower temperature will produce a more well-defined response."
          },
          {
            "type": "p",
            "text": "There are plenty of other fields that we can specify to fine-tune the model even more, which you can read in the documentation, but for now, these are the four fields we need to concern ourselves with."
          },
          {
            "type": "p",
            "text": "Now that we have our model setup, we can run our function, and the following things will happen:"
          },
          {
            "type": "p",
            "text": "That returned object will look like this:"
          },
          {
            "type": "pre",
            "text": "{\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"text\": \"\\n\\nPython is a programming language with many features, such as an intuitive syntax and powerful data structures. It was created in the late 1980s by Guido van Rossum, with the goal of providing a simple yet powerful scripting language. Python has since become one of the most popular programming languages, with a wide range of applications in fields such as web development, scientific computing, and artificial intelligence.\"\n    }\n  ],\n  \"created\": 1664302504,\n  \"id\": \"cmpl-5v9OiMOjRyoyypRQWAdpyAtjtgVev\",\n  \"model\": \"gpt-3.5-turbo-instruct\",\n  \"object\": \"text_completion\",\n  \"usage\": {\n    \"completion_tokens\": 80,\n    \"prompt_tokens\": 19,\n    \"total_tokens\": 99\n  }\n}"
          },
          {
            "type": "p",
            "text": "We‚Äôre provided with tons of information about the response, but the only thing we care about is the text field containing generated text."
          },
          {
            "type": "p",
            "text": "We can access the value in the text field like so:"
          },
          {
            "type": "pre",
            "text": "retrieve_blog = response.choices[0].text"
          },
          {
            "type": "p",
            "text": "Finally, we return the retrieve_blog variable which holds the paragraph we just dug out of the dictionary."
          },
          {
            "type": "pre",
            "text": "return retrieve_blog"
          },
          {
            "type": "p",
            "text": "Whoah! Let's take a moment and breathe. That was a lot we just covered. Let's give ourselves a pat on the back as we're 90% done with the application."
          },
          {
            "type": "p",
            "text": "We can test to see if our code works so far by printing out the generate_blog() function we just created, giving it a topic to write about, and seeing the response we get."
          },
          {
            "type": "pre",
            "text": "print(generate_blog('Why NYC is better than your city.'))"
          },
          {
            "type": "p",
            "text": "Here's the complete code so far:"
          },
          {
            "type": "pre",
            "text": "import openai\n\nopenai.api_key = 'sk-jAjqdWoqZLGsh7nXf5i8T3BlbkFJ9CYRk' # Fill in your own key\n\ndef generate_blog(paragraph_topic):\n  response = openai.completions.create(\n    model = 'gpt-3.5-turbo-instruct',\n    prompt = 'Write a paragraph about the following topic. ' + paragraph_topic,\n    max_tokens = 400,\n    temperature = 0.3\n  )\n\n  retrieve_blog = response.choices[0].text\n\n  return retrieve_blog\n\nprint(generate_blog('Why NYC is better than your city.'))"
          },
          {
            "type": "p",
            "text": "And boom, after 2-3 seconds, it should spit out a paragraph like this:"
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "Try running the code a couple more times; the output should be different every time! ü§Ø"
          }
        ]
      },
      {
        "checkpoint": "# Multiple Paragraphs",
        "content": [
          {
            "type": "p",
            "text": "Right now, if we run our code, we'll only be able to generate one paragraph worth of text. Remember, we're trying to create a blog generator, and a blog has multiple sections, with each paragraph having a different topic."
          },
          {
            "type": "p",
            "text": "Let's add some additional code to generate as many paragraphs as we want, with each paragraph discussing a different topic:"
          },
          {
            "type": "pre",
            "text": "keep_writing = True\n\nwhile keep_writing:\n  answer = input('Write a paragraph? Y for yes, anything else for no. ')\n  if (answer == 'Y'):\n    paragraph_topic = input('What should this paragraph talk about? ')\n    print(generate_blog(paragraph_topic))\n  else:\n    keep_writing = False"
          },
          {
            "type": "p",
            "text": "First, we defined a variable called keep_writing, to use as a boolean value for the following while loop."
          },
          {
            "type": "p",
            "text": "In the while loop, we created an answer variable that will take in an input from the user using the built-in input() function."
          },
          {
            "type": "p",
            "text": "We then created an if statement that will either continue the loop or stop the loop."
          },
          {
            "type": "p",
            "text": "With that complete, we can now write as many paragraphs as we want by running the program once!"
          },
          {
            "type": "h3-li",
            "h3": "## Rate Limit",
            "li": [
              "Solution on GitHub",
              "OpenAI",
              "python-dotenv"
            ]
          },
          {
            "type": "p",
            "text": "Since we're using a while loop, we have the potential to be rate limited."
          },
          {
            "type": "p",
            "text": "This is normally done to protect the API from abuse or DoS attacks."
          },
          {
            "type": "p",
            "text": "For GPT-3, the rate limit is 20 requests per minute. As long as we don't run the function that fast, we'll be fine. But in a rare case that it does occur, GPT-3 will stop producing responses and make us wait a minute to produce another response."
          },
          {
            "type": "h3-li",
            "h3": "## Credit Limit",
            "li": [
              "Solution on GitHub",
              "OpenAI",
              "python-dotenv"
            ]
          },
          {
            "type": "p",
            "text": "By this point, if you have been playing with the API nonstop, there's a chance that you might have exceeded your purchased credit limit. The following error is thrown when that happens:"
          },
          {
            "type": "pre",
            "text": "openai.error.RateLimitError:  \nYou exceeded your current quota, please check your plan and billing details."
          },
          {
            "type": "p",
            "text": "If that's the case, go to OpenAI's Billing overview page and purchase additional credits."
          },
          {
            "type": "p",
            "text": "Let's take another breather. We're almost done!"
          }
        ]
      },
      {
        "checkpoint": "# Securing Our App",
        "content": [
          {
            "type": "p",
            "text": "Let's think about this for a minute. We created this amazing application and want to share it with the world, right? Well, when we deploy it to the web or share it with our friends, they'll be able to see every piece of code in the program. That's where the issue lies!"
          },
          {
            "type": "p",
            "text": "At the beginning of this article, we created an account with OpenAI and were assigned an API key. Remember, this API key is what gives us access to GPT-3. Since GPT-3 is a paid service, the API key is also used to track usage and charge us accordingly. So what happens when someone knows our API key? They'll be able to use the service with our key, and we'll be the one charged, potentially thousands of dollars!"
          },
          {
            "type": "p",
            "text": "In order to protect ourselves, we need to hide the API key in our code but still be able to use it. Let's see how we can do that."
          },
          {
            "type": "h3-li",
            "h3": "## Install python-dotenv",
            "li": [
              "Solution on GitHub",
              "OpenAI",
              "python-dotenv"
            ]
          },
          {
            "type": "p",
            "text": "python-dotenv is a package that allows us to create and use environment variables without having to set them in the operating system manually."
          },
          {
            "type": "p",
            "text": "We can install python-dotenv by running the following command in the terminal:"
          },
          {
            "type": "pre",
            "text": "pip install python-dotenv"
          },
          {
            "type": "h3-li",
            "h3": "## .env File",
            "li": [
              "Solution on GitHub",
              "OpenAI",
              "python-dotenv"
            ]
          },
          {
            "type": "p",
            "text": "Then in our project's root directory, create a file called .env. This file will hold our environment variable."
          },
          {
            "type": "p",
            "text": "Open up the .env file and create a variable like so:"
          },
          {
            "type": "pre",
            "text": "API_KEY=<Your_API_Key>"
          },
          {
            "type": "p",
            "text": "The variable will take in our API key without any quotation marks or spaces. Remember to name this variable as API_KEY only."
          },
          {
            "type": "h3-li",
            "h3": "## Python File",
            "li": [
              "Solution on GitHub",
              "OpenAI",
              "python-dotenv"
            ]
          },
          {
            "type": "p",
            "text": "Now that we have our environment variable set, let's open up the blog_generator.py file, and paste this code under import openai."
          },
          {
            "type": "pre",
            "text": "from dotenv import dotenv_values\n\nconfig = dotenv_values(\".env\")"
          },
          {
            "type": "p",
            "text": "First, we've imported a method called dotenv_values from the module."
          },
          {
            "type": "p",
            "text": "The dotenv_values() will take in the path to the .env file and return us a dictionary with all the variables in the .env file. We then created a config variable to hold that dictionary."
          },
          {
            "type": "p",
            "text": "Now, all we have to do is replace the exposed API key with the environment variable in the config dictionary like so:"
          },
          {
            "type": "pre",
            "text": "openai.api_key = config['API_KEY']"
          },
          {
            "type": "p",
            "text": "That's it! Our API key is now safe and hidden from the main code."
          },
          {
            "type": "p",
            "text": "Note: If you want to push your code to GitHub, you don't want to push the .env file as well. In the root directory of your project, create a file called .gitignore, and in the Git ignore file, type in .env. This will prevent the file from being tracked by Git and ultimately pushed to GitHub."
          },
          {
            "type": "p",
            "text": "With all that set and done, we‚Äôre finished! The code should now look like this!"
          },
          {
            "type": "p",
            "text": "blog_generator.py file:"
          },
          {
            "type": "pre",
            "text": "# Generate a Blog with OpenAI üìù\n\nimport openai\nfrom dotenv import dotenv_values\n\nconfig = dotenv_values('.env')\n\nopenai.api_key = config['API_KEY']\n\ndef generate_blog(paragraph_topic):\n  response = openai.completions.create(\n    model = 'gpt-3.5-turbo-instruct',\n    prompt = 'Write a paragraph about the following topic. ' + paragraph_topic,\n    max_tokens = 400,\n    temperature = 0.3\n  )\n  retrieve_blog = response.choices[0].text\n  return retrieve_blog\n\nkeep_writing = True\n\nwhile keep_writing:\n  answer = input('Write a paragraph? Y for yes, anything else for no. ')\n  if (answer == 'Y'):\n    paragraph_topic = input('What should this paragraph talk about? ')\n    print(generate_blog(paragraph_topic))\n  else:\n    keep_writing = False"
          },
          {
            "type": "p",
            "text": ".env file:"
          },
          {
            "type": "pre",
            "text": "API_KEY=sk-jAjqdWoqZLGsh7nXf5i8T3BlbkFJ9CYRk"
          }
        ]
      },
      {
        "checkpoint": "# Finish Line",
        "content": [
          {
            "type": "p",
            "text": "Congrats, you just created a blog generator with OpenAI and Python! Throughout the project, we learned how to use GPT-3 to generate a paragraph, use a while loop to create multiple paragraphs, and secure our app with a .env file. üôå"
          },
          {
            "type": "p",
            "text": "AI is expanding rapidly, and the first few to utilize it properly through services like GPT-3 will become the inovators in the field. Hope this project helps you understand it a bit more."
          },
          {
            "type": "p",
            "text": "And lastly, we would love to see what you build with this tutorial! Tag @codedex_io and @openai on Twitter if you make something cool!"
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Solution on GitHub",
              "OpenAI",
              "python-dotenv"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Build a Search Engine with Exa",
    "link": "https://www.codedex.io/projects/build-a-custom-search-engine-with-exa-ai",
    "tags": [
      "Python",
      "AI"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/exa-ai.png",
    "prerequisite": {
      "Prerequisites:": "Python fundamentals, Command Line",
      "Versions:": "Python 3.10",
      "Read Time:": "45 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Picture this: You read a funny tweet (probably ours...), but you forgot who tweeted it and where you saw it. You‚Äôre sad. What if there was a search engine that rediscovers exactly what you‚Äôre thinking about?"
          },
          {
            "type": "p",
            "text": "It's now possible with a specific kind of machine learning called natural language processing (NLP). It teaches computers to understand, interpret, and generate human language."
          },
          {
            "type": "p",
            "text": "In this tutorial, we'll build a custom search engine using an API with LLM capabilities! üöÄ"
          },
          {
            "type": "p",
            "text": "LLMs (short for large language models) are a powerful tool within the broader field of NLP. These models are trained on insane amounts of data and can grasp the intricacies of human language. ü§Ø A popular LLM that you might already be using is GPT-3."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-custom-search-engine-with-exa-ai/token.gif"
          },
          {
            "type": "p",
            "text": "LLMs leverage deep learning techniques to generate text, translate languages, answer questions, and so much more. The model estimates the probability of a token or a sequence of tokens in a sequence. A token refers to a unit of language extracted from a larger piece of text."
          },
          {
            "type": "p",
            "text": "However, accessing LLMs is a little tricky since training models is both time-consuming and expensive. APIs solve this. APIs serve as a tool to access NLP tasks, such as text generation, translation, summarization, and more, which we'll explore today!"
          },
          {
            "type": "p",
            "text": "Let's learn how we can even build our very own custom search engine! üëÄ"
          },
          {
            "type": "h3-li",
            "h3": "## Exa API",
            "li": [
              "score: The score associated indicates its relevance within the query system; higher scores mean greater relevance.",
              "title: This is the name of the article/blog/website.",
              "id & url: The link to the result's web page.",
              "publishedDate: This lists the publish date.",
              "author: This credits a writer. This will return \"None\" if there is no credited writer."
            ]
          },
          {
            "type": "p",
            "text": "Exa (formerly \"Metaphor\") is an API (application programming interface) that retrieves the best content on the web. With Exa, anyone can semantically search the web to get high-quality, relevant information. With Exa's technology, we can rediscover the content on the internet. Unlike Google, which relies on keyword search (matching the exact words of the query to the web content), Exa can understand both the user's input and the content out there. Wow, right?"
          },
          {
            "type": "p",
            "text": "Exa utilizes LLMs as a core component, and has been extensively trained to help computers understand human language."
          },
          {
            "type": "p",
            "text": "In this tutorial, we will use Exa's capabilities to build a basic search engine that can help you find exactly what you are searching for."
          }
        ]
      },
      {
        "checkpoint": "# Set Up",
        "content": [
          {
            "type": "p",
            "text": "First, we need to create an Exa account to access an API key for building out the \"search\" functionality of our search engine! You'll automatically get 1000 free requests just for signing up. After creating an account, navigate to \"Overview\" to retrieve your API key."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-custom-search-engine-with-exa-ai/exa_dashboard.jpg"
          },
          {
            "type": "p",
            "text": "Note: Keep your API keys private and safe and avoid sharing and posting them online. üîí"
          },
          {
            "type": "p",
            "text": "For this project, we'll need Python 3 and pip (package installer) installed."
          },
          {
            "type": "p",
            "text": "Assuming that we have those two installed, let's open up our preferred code editor (we recommend VS Code) and create a new file called main.py."
          },
          {
            "type": "h3-li",
            "h3": "## Packages and Imports",
            "li": [
              "score: The score associated indicates its relevance within the query system; higher scores mean greater relevance.",
              "title: This is the name of the article/blog/website.",
              "id & url: The link to the result's web page.",
              "publishedDate: This lists the publish date.",
              "author: This credits a writer. This will return \"None\" if there is no credited writer."
            ]
          },
          {
            "type": "p",
            "text": "With Python installed, let's go ahead and use pip to download Exa:"
          },
          {
            "type": "pre",
            "text": "pip install exa_py"
          },
          {
            "type": "p",
            "text": "Note: If this command doesn't work, try pip3 install exa_py."
          },
          {
            "type": "p",
            "text": "In our main.py file, we're going to import Exa, and initialize Exa with our API key!"
          },
          {
            "type": "pre",
            "text": "from exa_py import Exa\n\nexa = Exa('YOUR_KEY_HERE')"
          }
        ]
      },
      {
        "checkpoint": "# Getting Started with Searching! ‚ö°",
        "content": [
          {
            "type": "p",
            "text": "In the same file, let's create a variable called query, which will hold the response to the input of what we want to search!"
          },
          {
            "type": "pre",
            "text": "from exa_py import Exa\n\nexa = Exa('YOUR_KEY_HERE')\n\nquery = input('Search here: ')"
          },
          {
            "type": "p",
            "text": "Now, let's take a look at Exa's .search() function:"
          },
          {
            "type": "pre",
            "text": "from exa_py import Exa\n\nexa = Exa('YOUR_KEY_HERE')\n\nquery = input('Search here: ')\n\nresponse = exa.search(\n  'Best Chicago cold brew',\n  num_results=10,\n)"
          },
          {
            "type": "p",
            "text": "Here's one result (of 10) from the returned data for searching \"Best Chicago cold brew\":"
          },
          {
            "type": "pre",
            "text": "{\n  \"score\": 0.1940334290266037,\n  \"title\": \"13 Innovative Cold Brew Drinks from Coffee Shops Around the Country\",\n  \"id\": \"https://www.thrillist.com/drink/nation/best-cold-brew-coffee-drinks\",\n  \"url\": \"https://www.thrillist.com/drink/nation/best-cold-brew-coffee-drinks\",\n  \"publishedDate\": \"2017-07-10\",\n  \"author\": \"Dan Gentile\"\n},"
          },
          {
            "type": "p",
            "text": "For each search result, we get:"
          },
          {
            "type": "p",
            "text": "To customize our Exa results further, we can play around with Exa's filters to find the exact type of content we need. You can explore the filters here Exa's API Search documentation."
          },
          {
            "type": "p",
            "text": "Here are some of our favorite filters:"
          },
          {
            "type": "p",
            "text": "The search example below will return 10 results for \"best pizza in Brooklyn\" searching through Twitter since May 2023:"
          },
          {
            "type": "pre",
            "text": "response = exa.search(\n  'best pizza in Brooklyn',\n  num_results=10,\n  start_published_date='2023-05-01', \n  category='tweet', \n  use_autoprompt=True,\n)"
          }
        ]
      },
      {
        "checkpoint": "# Search Coffee on TikTok",
        "content": [
          {
            "type": "p",
            "text": "This is where the fun customization begins! ‚ú®üíñ"
          },
          {
            "type": "p",
            "text": "For this tutorial, you'll learn how to search TikTok to obtain top coffee drink accounts!"
          },
          {
            "type": "p",
            "text": "In our case, we will want only the top 5 search results, and only from https://www.tiktok.com. Additionally, we're going to treat our search function like a keyword, so we need to declare that as well!"
          },
          {
            "type": "p",
            "text": "Let's go ahead and use the Exa parameters to accomplish this. To display this, let's also add a print statement at the end of our file to search!"
          },
          {
            "type": "pre",
            "text": "from exa_py import Exa\n\nexa = Exa('YOUR_KEY_HERE')\n\nquery = input('Search here: ')\n\nresponse = exa.search(\n  query,\n  num_results=5,\n  type='keyword',\n  include_domains=['https://www.tiktok.com'],\n)\n\nprint(response)"
          },
          {
            "type": "p",
            "text": "Run the script by going to your terminal and typing:"
          },
          {
            "type": "pre",
            "text": "python3 main.py"
          },
          {
            "type": "p",
            "text": "After pressing enter, you should now see the following:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-custom-search-engine-with-exa-ai/coffee_exa_search_results.gif"
          },
          {
            "type": "p",
            "text": "You might notice some information on each result like score, author, and text. Depending on your search query, you may or may not want these to be displayed every time you write a query."
          },
          {
            "type": "p",
            "text": "Let's format our code so that for our React documentation search engine, we only get the Title and the URL. Delete the print statement, and add the following to main.py."
          },
          {
            "type": "pre",
            "text": "for result in response.results:\n  print(f'Title: {result.title}')\n  print(f'URL: {result.url}')\n  print()"
          },
          {
            "type": "p",
            "text": "Now, your search results should look something like this!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-custom-search-engine-with-exa-ai/coffee_search_results.png"
          },
          {
            "type": "p",
            "text": "A lot easier on the eyes, right? ü§©üí´"
          },
          {
            "type": "p",
            "text": "At this point, your main.py file should look like this:"
          },
          {
            "type": "pre",
            "text": "from exa_py import Exa\n\nexa = Exa('YOUR_KEY_HERE')\n\nquery = input('Search here: ')\n\nresponse = exa.search(\n  query,\n  num_results=5,\n  type='keyword',\n  include_domains=['https://www.tiktok.com'],\n)\n\nfor result in response.results:\n  print(f'Title: {result.title}')\n  print(f'URL: {result.url}')\n  print()"
          }
        ]
      },
      {
        "checkpoint": "# Mission Accomplished!",
        "content": [
          {
            "type": "p",
            "text": "Congrats, you just created a custom search engine! ‚ú®"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-custom-search-engine-with-exa-ai/neural_search.gif"
          },
          {
            "type": "p",
            "text": "Here are some additional ideas on what you could search with the Exa API!"
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Source Code",
              "Exa.ai Documentation",
              "Exa.ai Cheat Sheet",
              "Google for Developers: Intro to LLMs",
              "Cod√©dex Discord",
              "Exa Discord"
            ]
          },
          {
            "type": "p",
            "text": "Thanks for following along, here are some helpful links!"
          },
          {
            "type": "p",
            "text": "We would love to see what you build with this tutorial! Tag @codedex_io and @ExaAILabs on Twitter if you make something cool! ‚ö°"
          },
          {
            "type": "p",
            "text": "P.S. Snaps & slays to Sarah Chieng from Exa for reviewing the project."
          }
        ]
      }
    ]
  },
  {
    "title": "Generate a Poem with Google Gemini",
    "link": "https://www.codedex.io/projects/generate-a-poem-with-google-gemini",
    "tags": [
      "JS",
      "AI"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/generate-a-poem-with-google-gemini.png",
    "prerequisite": {
      "Prerequisites:": "HTML, CSS, JavaScript fundamentals",
      "Versions:": "Node.js 18, Vite 5, React 18",
      "Read Time:": "45 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Words, lyrics, music, poetry. Whether it's John Lennon or William Blake, songwriters and poets manage to express feelings that appeal to generations with their writing style. Now imagine if you could combine their styles or even create a new style. In this project tutorial, we will create a poem-generating website using the power of Google Gemini. The poem below changes after a certain number of seconds to always keep you inspired. The best part is that you can customize this completely based on your preferences by the end of this tutorial."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/generate-a-poem-with-google-gemini/poem_ai_screen_result.png"
          },
          {
            "type": "p",
            "text": "Before we dive into the wonders of literary voices and how their styles can be mimicked, let's go over the basics of what you will need to complete this project."
          }
        ]
      },
      {
        "checkpoint": "# Get an API Key üîë",
        "content": [
          {
            "type": "p",
            "text": "To use the Gemini API, we need an API key. Visit the Google AI Studio, and sign in to a Google account to quickly create a key. Remember: Store your Google Gemini key in a separate file for best practice."
          },
          {
            "type": "p",
            "text": "For more information, you can check out the Google Gemini Documentation."
          }
        ]
      },
      {
        "checkpoint": "# Setting Up üî®",
        "content": [
          {
            "type": "pre",
            "text": "npm install @google/generative-ai"
          },
          {
            "type": "h3-li",
            "h3": "## Initialize Your Server",
            "li": [
              "Create a prompt that will generate our poem.",
              "Await a result from the model.",
              "Generate a response that we'll use to update the state.",
              "Catch if an error occurs."
            ]
          },
          {
            "type": "p",
            "text": "Now that we have our base React application ready to go, let's initiate our development server!"
          },
          {
            "type": "pre",
            "text": "npm install\nnpm run dev"
          }
        ]
      },
      {
        "checkpoint": "# Creating the Poem Generator",
        "content": [
          {
            "type": "p",
            "text": "Let's get started with becoming our very own AI poet! In the src folder of your project, create a PoemBox.jsx file. Here, we're going to connect to Gemini and generate our poems!"
          },
          {
            "type": "p",
            "text": "Let's get started by importing the model:"
          },
          {
            "type": "pre",
            "text": "import { GoogleGenerativeAI } from \"@google/generative-ai\";"
          },
          {
            "type": "p",
            "text": "Define a <PoemBox> function component. Then, we're going to create a function called fetchPoem(). We'll place our data fetching code here in a try-catch block so we're able to detect and understand errors when we're developing!"
          },
          {
            "type": "p",
            "text": "Here, let's also create a variable called genAI, and initialize our instance of the model. Remember your API key that's been stored away? Go ahead and copy that into your instance!"
          },
          {
            "type": "pre",
            "text": "import { GoogleGenerativeAI } from \"@google/generative-ai\";\nexport default function PoemBox() {\n  function fetchPoem() {\n    try {\n      const genAI = new GoogleGenerativeAI(\"YOUR_API_KEY\"); // replace with your key\n    }\n  } catch (err) {\n    // error handle here\n  }\n}"
          },
          {
            "type": "p",
            "text": "Now, let's focus on setting up the state so we can update our poem! You're going to create three state variables inside your <PoemBox> component."
          },
          {
            "type": "pre",
            "text": "const [response, setResponse] = useState(\"\");\nconst [error, setError] = useState(null);\nconst [currentTime, setCurrentTime] = useState(new Date());"
          },
          {
            "type": "p",
            "text": "Going back to our fetchPoem() function, let's get started with prompting Gemini!"
          }
        ]
      },
      {
        "checkpoint": "# Using Gemini",
        "content": [
          {
            "type": "p",
            "text": "At this point, our API key should be ready to go! Let's use the current Google generative AI model, gemini-1.5-flash. We're then going to:"
          },
          {
            "type": "p",
            "text": "Your function should now look like so"
          },
          {
            "type": "pre",
            "text": "const fetchPoem = async () => {\n  try {\n    const genAI = new GoogleGenerativeAI(\"YOUR_API_KEY\");\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n    const prompt = \"AI PROMPT HERE\";\n    const result = await model.generateContent(prompt);\n    const text = result.response.text();\n    setResponse(text);\n  } catch (err) {\n    setError(err.message);\n  }\n};"
          },
          {
            "type": "h3-li",
            "h3": "## More on Prompting",
            "li": [
              "If you want: a poem that rhymes about sunsets",
              "Prompt for: \"write me a sonnet about sunsets in New York\""
            ]
          },
          {
            "type": "p",
            "text": "Like ChapGPT, Google Gemini is made of LLMs that use NLP to interpret and respond to user inputs. LLMs (short for \"Large Language Models\") are machine learning models that can understand and generate text based on human language patterns. NLP (short for \"Natural Language Processing\") is the technology that lets models interpret and manipulate human language. Much like any conversation, you have to have good prompts to experience the best results.\nPrompting on Gemini is like prompting for any other LLM. Here are some things you should remember as you write your prompt."
          },
          {
            "type": "p",
            "text": "üí¨ Natural Language: talk to the language model as if you are giving instructions to a stranger."
          },
          {
            "type": "p",
            "text": "üéØ Precise Instructions: avoid using vague or filler words. (e.g., \"like, some, a few\")"
          },
          {
            "type": "p",
            "text": "üòä Context: the more context you provide the more useful Gemini can be."
          },
          {
            "type": "p",
            "text": "üîë Keywords: Gemini works better when specific keywords are used in the prompt."
          },
          {
            "type": "p",
            "text": "Note: Be respectful of literary intellectual property, technology is a tool that should be used ethically. Learn more about AI Responsibility here."
          }
        ]
      },
      {
        "checkpoint": "# The Timer",
        "content": [
          {
            "type": "p",
            "text": "We're just a tad bit closer to unlocking your inner AI poet! We want our component to generate a new poem about every 30 seconds!"
          },
          {
            "type": "p",
            "text": "Note: For testing purposes, decrease the interval between each poem to observe the results more quickly. However, we don‚Äôt recommend promoting the model too quickly since it can overwhelm the version of our model."
          },
          {
            "type": "p",
            "text": "Let's use a handy useEffect() hook to create an interval!"
          },
          {
            "type": "pre",
            "text": "useEffect(() => {\n  // Fetch a poem on initial render\n  fetchPoem();\n\n  // Fetch a new poem every 30 seconds\n  const poemIntervalId = setInterval(fetchPoem, 30000);\n  return () => {\n    clearInterval(poemIntervalId); // Cleanup poem interval on component unmount\n  };\n}, []);"
          }
        ]
      },
      {
        "checkpoint": "# Completion",
        "content": [
          {
            "type": "p",
            "text": "Let's display our poems! ‚úçÔ∏è"
          },
          {
            "type": "p",
            "text": "Remember the error handling we set up in our fetchPoem() function? We'll conditionally render our poem based on whether there are any errors. Our return statement should look like this:"
          },
          {
            "type": "pre",
            "text": "return <div>{error ? <p>{error}</p> : <p>{response}</p>}</div>;"
          },
          {
            "type": "p",
            "text": "That's it you just created a <PoemBox> component! Don't forget to import it and use the <PoemBox> component in the App.js file to make it all come together."
          }
        ]
      },
      {
        "checkpoint": "# Congrats",
        "content": [
          {
            "type": "p",
            "text": "You just created your very own poem generator! üöÄ"
          },
          {
            "type": "p",
            "text": "Here is how you can take your poem generator to the next level:"
          },
          {
            "type": "p",
            "text": "Here are some examples we made to inspire your creativity:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/generate-a-poem-with-google-gemini/poem_css_examples.png"
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": [
          {
            "type": "p",
            "text": "Hope you had fun generating poems, here are some helpful links!"
          },
          {
            "type": "p",
            "text": "Share your poems! We would love to see what you built, so make sure to tag us @codedex_io on Twitter ‚úçÔ∏è"
          }
        ]
      }
    ]
  },
  {
    "title": "Generate AI Art with Krea.AI",
    "link": "https://www.codedex.io/projects/generate-ai-art-with-krea-ai",
    "tags": [
      "Beginner",
      "AI"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/Generate%20AI%20Art%20with%20Krea.AI.png",
    "prerequisite": {
      "Prerequisites:": "HTML, CSS",
      "Versions:": "Krea AI Free Account",
      "Read Time:": "15 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Ever wondered how AI can transform your ideas into stunning visuals?"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/add-krea-ai/projects/generate-ai-art-with-krea-ai/Krea%20intro.gif"
          },
          {
            "type": "p",
            "text": "Similar to how we learned to pick up on context clues in conversations or text, AI image models reference their knowledge base to output images based on prompts. Krea is an AI image model that can help you visualize your text."
          },
          {
            "type": "p",
            "text": "In this tutorial, we will be creating a wallpaper using Krea‚Äôs pattern tool."
          }
        ]
      },
      {
        "checkpoint": "# How Krea Works",
        "content": [
          {
            "type": "p",
            "text": "AI image models like Krea work based on anticipation. The image generators are trained using Language Learning Models (LLM)."
          },
          {
            "type": "p",
            "text": "Predicting images is very similar to predicting words. Let‚Äôs think of fill-in-the-blanks statements. When you are given a sentence such as:"
          },
          {
            "type": "pre",
            "text": "Dear (name), You are (adverb) invited!"
          },
          {
            "type": "p",
            "text": "You can easily interpret this as an invitation and fill in the blanks. You can anticipate an invitation and fill this in accordingly."
          },
          {
            "type": "pre",
            "text": "Dear Ellie, You are enthusiastically invited!"
          },
          {
            "type": "p",
            "text": "Now, let‚Äôs make it a little harder:"
          },
          {
            "type": "pre",
            "text": "This summer we will take a vacation in (adjective). Please respond with a (verb) to confirm your attendance."
          },
          {
            "type": "p",
            "text": "This fill-in-the-blank statement is a little harder to complete without any context. This can easily be an invitation to anywhere in the world and there are so many ways to confirm attendance. So what exactly do fill-in-the-blank statements have to do with generative image models?"
          },
          {
            "type": "p",
            "text": "We can identify context clues to successfully fill in the blanks regardless of the amount of text you are presented with. Let‚Äôs think of context as noise. Noise in generative modeling is not sound, it is random variation in an image."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/add-krea-ai/projects/generate-ai-art-with-krea-ai/cat%20noise.png"
          },
          {
            "type": "p",
            "text": "Source"
          },
          {
            "type": "p",
            "text": "Image models are trained to reduce the noise, engineers do this by taking real images and adding a little noise to them. The models are then asked to look through the noise and correctly return a cohesive image. Like an Olympic athlete, models go through extensive training to look through the noise. Standout models such as DALL-E can find images in extreme noise. Much like our fill-in-the-blank sentences, these image generators try different variations to return a cohesive image."
          },
          {
            "type": "img",
            "src": "https://github.com/codedex-io/projects/blob/add-krea-ai/projects/generate-ai-art-with-krea-ai/cute%20frog.gif?raw=true"
          },
          {
            "type": "p",
            "text": "Source"
          }
        ]
      },
      {
        "checkpoint": "# Vector Space",
        "content": [
          {
            "type": "p",
            "text": "For the image-generating model to return exactly what we picture in our mind through the noise, we need to define our prompts. Let‚Äôs go back to our fill-in-the-blank statements."
          },
          {
            "type": "pre",
            "text": "This summer we will take a vacation in (adjective). Please respond with a (verb) to confirm your attendance."
          },
          {
            "type": "p",
            "text": "This is a lot easier to fill in if I share that this invitation is for a ‚Äúvoice-message-loving family who loves the Mediterranean‚Äù. This narrows down our choices for adjectives and we can safely assume the verb in question is a ‚Äúvoice message‚Äù."
          },
          {
            "type": "p",
            "text": "LLMs are trained to cluster concepts on a vector space. An LLM will find the next word in a sentence by looking for it in a vector space. An LLM will predict our adjective based on the context in our fill-in-the-blank example. Since the Mediterranean is mentioned in the context, it will look for a word in that vector space. In this case, an LLM will fill in the ‚Äúadjective‚Äù blank with countries or popular family-friendly destinations in the Mediterranean."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/add-krea-ai/projects/generate-ai-art-with-krea-ai/vector%20space.png"
          },
          {
            "type": "p",
            "text": "Just like an LLM can correctly fill in the blank with context, we can ask our generative image models to focus on a particular region of vector space through prompting. Similar to context, the more specific the prompt the better. The more specific a prompt, the smaller the target in the vector becomes and the better the results."
          }
        ]
      },
      {
        "checkpoint": "# Getting Started with Krea",
        "content": [
          {
            "type": "p",
            "text": "Now that we know a little more about what goes on behind image-generating models, it‚Äôs time to get started with Krea."
          },
          {
            "type": "p",
            "text": "After you sign up for a free account, head for the ‚ÄúPattern Tool‚Äù on the home page."
          },
          {
            "type": "img",
            "src": "https://github.com/codedex-io/projects/blob/add-krea-ai/projects/generate-ai-art-with-krea-ai/locate%20tool.gif?raw=true"
          }
        ]
      },
      {
        "checkpoint": "# Create a Pattern",
        "content": [
          {
            "type": "p",
            "text": "Time to build!\nWhen you use the ‚ÄúPattern Tool‚Äù, you will be asked for two different inputs."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/add-krea-ai/projects/generate-ai-art-with-krea-ai/Pattern%20tool.gif"
          },
          {
            "type": "h3-li",
            "h3": "## Prompt",
            "li": [
              "Just like prompting ChatGPT, remember to be as descriptive as possible. In the prompt box, you will need to specify what you wish for your pattern to visually look like."
            ]
          },
          {
            "type": "h3-li",
            "h3": "## Pattern",
            "li": [
              "A pattern is the shape that Krea will generate images around. Krea provides a few select patterns that are readily available for your use and even allows you to upload your own."
            ]
          },
          {
            "type": "p",
            "text": "After you select a pattern and fill in the prompt, hit generate. Wall paper generated! üéâ"
          }
        ]
      },
      {
        "checkpoint": "# Have Fun",
        "content": [
          {
            "type": "p",
            "text": "Remember that Krea is generating images based on your prompt and selected pattern and may require a few iterations to generate a cohesive image. Krea makes generative image processing fun to work with. If you want to take it to the next level, Krea also offers AI Video generation."
          },
          {
            "type": "p",
            "text": "If you want some inspiration, look at the examples of patterns and prompts below and try to guess the album covers that inspired the prompts. üîç"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/add-krea-ai/projects/generate-ai-art-with-krea-ai/Krea_albums.png"
          }
        ]
      },
      {
        "checkpoint": "# Congrats",
        "content": [
          {
            "type": "p",
            "text": "üöÄ That‚Äôs a wrap! You just created your very own wallpaper. Hope you had fun generating AI-powered images, here are some helpful links to make your wallpaper stand out!"
          },
          {
            "type": "p",
            "text": "Share your creation! We would love to see what you spun up, so make sure to tag @codedex_io and @krea_ai on Twitter. ü´∂"
          }
        ]
      }
    ]
  },
  {
    "title": "Detect Hotdog With Hugging Face",
    "link": "https://www.codedex.io/projects/detect-hotdog-with-hugging-face",
    "tags": [
      "AI",
      "Python"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/detect-hotdog-with-hugging-face.png",
    "prerequisite": {
      "Prerequisites:": "Hugging Face, HTML, Python Fundamentals",
      "Read Time:": "30 Minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Unlock the power of innovation around detecting if an image is a hot dog or a \"not hot dog\" just like Jian Yang from Silicon Valley using machine learning models on hugging face."
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "To do this we will be using Hugging Face, a community and platform that hosts a bunch of open source machine learning models, datasets, and more."
          },
          {
            "type": "p",
            "text": "Let's get started! üå≠"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "p",
            "text": "Create a new directory named nothotdog. This is where our project will live."
          },
          {
            "type": "p",
            "text": "Next, enter your directory in the terminal, so we can start getting ready for our code:"
          },
          {
            "type": "pre",
            "text": "cd nothotdog"
          }
        ]
      },
      {
        "checkpoint": "# Create the Virtual Environment",
        "content": [
          {
            "type": "p",
            "text": "Let's create a virtual environment or venv, which is an isolated environment that contains a Python installation in addition to other packages. If you want to learn more check out this link."
          },
          {
            "type": "pre",
            "text": "python3 -m venv .venv"
          },
          {
            "type": "p",
            "text": "Now, let's activate the virtual environment:"
          },
          {
            "type": "pre",
            "text": "source .venv/bin/activate"
          }
        ]
      },
      {
        "checkpoint": "# Install Flask",
        "content": [
          {
            "type": "p",
            "text": "Now we are going to install Flask, which is a web framework in Python that makes it easy create to web applications and APIs. You can read more about it here."
          },
          {
            "type": "pre",
            "text": "python -m pip install flask"
          }
        ]
      },
      {
        "checkpoint": "# Install Dotenv",
        "content": [
          {
            "type": "p",
            "text": "We also have to install the dotenv library which we use to load environment variables. You can find the package link here."
          },
          {
            "type": "pre",
            "text": "pip install python-dotenv"
          }
        ]
      },
      {
        "checkpoint": "# Install Requests",
        "content": [
          {
            "type": "p",
            "text": "The last package we need to add is requests which is a library to handle http requests. You can find the package link here."
          },
          {
            "type": "pre",
            "text": "pip install python-dotenv"
          }
        ]
      },
      {
        "checkpoint": "# Create a templates folder for our HTML",
        "content": [
          {
            "type": "p",
            "text": "In Flask, if we are going to have HTML files we typically store them in a folder called templates so Flask is able to find them. Create a folder called templates, which should end up looking like this:"
          },
          {
            "type": "pre",
            "text": "‚îú‚îÄ‚îÄ root folder\n‚îÇ   ‚îú‚îÄ‚îÄ templates"
          }
        ]
      },
      {
        "checkpoint": "# Create a file called index.html",
        "content": [
          {
            "type": "p",
            "text": "In the templates folder create a index.html file."
          }
        ]
      },
      {
        "checkpoint": "# Add the HTML code",
        "content": [
          {
            "type": "p",
            "text": "Go into the index.html code and copy and paste the code below. It is just a simple form that will post to an API route on our flask server."
          },
          {
            "type": "pre",
            "text": "<!-- templates/index.html -->\n<html>\n    <head>\n    </head>\n    <body>\n        <h1>Hot dog or Not Hot dog?</h1>\n        <form method=\"post\" action=\"{{ url_for('upload') }}\" enctype=\"multipart/form-data\">\n            <input type=\"file\" name=\"file1\">\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n    </body>\n</html>"
          },
          {
            "type": "p",
            "text": "It is important to note method=\"post\" action=\"{{ url_for('upload') }}\" in our form. This tells our form two things: what action we want to perform which is POST and what API route to send our data which is going /upload."
          }
        ]
      },
      {
        "checkpoint": "# Create an .env file",
        "content": [
          {
            "type": "p",
            "text": "Create an .env file at the root of the project. This is where we will place our Hugging Face variables."
          }
        ]
      },
      {
        "checkpoint": "# Add variables to the .env file",
        "content": [
          {
            "type": "p",
            "text": "Open the .env file and add HUGGING_FACE_API_URL= and HUGGING_FACE_API_KEY=, adding in your API key and URL. This is where we place the hugging face data to allow us to use hugging face's models."
          },
          {
            "type": "pre",
            "text": "HUGGING_FACE_API_URL=https://api-inference.huggingface.co/models/julien-c/hotdog-not-hotdog\nHUGGING_FACE_API_KEY="
          }
        ]
      },
      {
        "checkpoint": "# Create a Hugging Face token:",
        "content": [
          {
            "type": "p",
            "text": "Go to https://huggingface.co/settings/tokens and create a token."
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "Now fill your HUGGING_FACE_API_KEY with that value."
          }
        ]
      },
      {
        "checkpoint": "# Create the server file",
        "content": [
          {
            "type": "p",
            "text": "At the root of our folder create a file called web.py. This is where all of our Flask server code will be."
          }
        ]
      },
      {
        "checkpoint": "# Import the necessary libraries",
        "content": [
          {
            "type": "p",
            "text": "We are using Flask, and a couple of built in libaries to handle file types like JSON."
          },
          {
            "type": "pre",
            "text": "#web.py\n\nfrom flask import Flask, render_template, request, jsonify\nimport requests\nimport json\nimport os\nfrom dotenv import load_dotenv"
          }
        ]
      },
      {
        "checkpoint": "# Load and use the environment variables and initialize flask",
        "content": [
          {
            "type": "p",
            "text": "Here we will load the enviroment variables that we will get from Hugging face later including the URL and the API_KEY."
          },
          {
            "type": "pre",
            "text": "#web.py\n\nfrom flask import Flask, render_template, request, jsonify\nimport requests\nimport json\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\nAPI_URL = os.getenv(\"HUGGING_FACE_API_URL\")\nheaders = {'Authorization': f'Bearer {os.getenv(\"HUGGING_FACE_API_KEY\")}'}\n\napp = Flask(__name__)"
          },
          {
            "type": "p",
            "text": "Here we load our environment variables. First we store our url as API_URL and then we will load API_KEY as an Authorization header variable that will be used in our request later to prove to Hugging Face we have access. The specific code that loads from our environment is os.getenv(\"Our Variable\")."
          }
        ]
      },
      {
        "checkpoint": "# Add a query method",
        "content": [
          {
            "type": "p",
            "text": "This will be the method that actually queries the hugging face model via API with an image upload from the html form."
          },
          {
            "type": "pre",
            "text": "#web.py\n\nfrom flask import Flask, render_template, request, jsonify\nimport requests\nimport json\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nAPI_URL = os.getenv(\"HUGGING_FACE_API_URL\")\nheaders = {'Authorization': f'Bearer {os.getenv(\"HUGGING_FACE_API_KEY\")}'}\n\napp = Flask(__name__)\n\ndef query(data):\n    response = requests.request('POST', API_URL, headers=headers, data=data)\n    return json.loads(response.content.decode('utf-8'))"
          },
          {
            "type": "p",
            "text": "Essentially the query method will take incoming image data that will be coming in from our form and then use the requests package to make a POST call to the Hugging Face API. We can observe this in this specific code example below."
          },
          {
            "type": "pre",
            "text": "def query(data):\n    response = requests.request('POST', API_URL, headers=headers, data=data)\n    return json.loads(response.content.decode('utf-8'))"
          }
        ]
      },
      {
        "checkpoint": "# Now add the necessary routes",
        "content": [
          {
            "type": "p",
            "text": "Now the two things that are missing are the API routes in flask to host our web form and to handle the posting of image data to our server. So to fix this we will add one route to serve our index.html template and the other will handle the form post that will receive the image file and send it to our query function."
          },
          {
            "type": "pre",
            "text": "#web.py\n\n#web.py\n\nfrom flask import Flask, render_template, request, jsonify\nimport requests\nimport json\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nAPI_URL = os.getenv(\"HUGGING_FACE_API_URL\")\nheaders = {'Authorization': f'Bearer {os.getenv(\"HUGGING_FACE_API_KEY\")}'}\n\napp = Flask(__name__)\n\ndef query(data):\n    response = requests.request('POST', API_URL, headers=headers, data=data)\n    return json.loads(response.content.decode('utf-8'))\n\n@app.route('/')\ndef index():\n    return render_template('./index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file1']\n    modeldata = query(file)\n    return jsonify(modeldata)\n\n\napp.run(host='0.0.0.0', port=81)"
          },
          {
            "type": "p",
            "text": "So here we add the first route by creating a route for our index.html file by typing out @app.route('/'). Next we add our index method to render the template. Altogether this looks like this:"
          },
          {
            "type": "pre",
            "text": "@app.route('/')\ndef index():\n    return render_template('./index.html')"
          },
          {
            "type": "p",
            "text": "So the code above takes care of telling flask to render our index.html template but we still have to handle the image data that will come from our form. So to do that we add @app.route('/upload', methods=['POST']). Notice we use /upload and POST, which matches what we have in the HTML form. Then under that we write the logic to parse out an image file and then send it to our query method. This can all be reflected in the code snippet below."
          },
          {
            "type": "pre",
            "text": "def upload():\n    file = request.files['file1']\n    modeldata = query(file)\n    return jsonify(modeldata)"
          },
          {
            "type": "p",
            "text": "Nice now all of our flask code is done!"
          }
        ]
      },
      {
        "checkpoint": "# Now run the project.",
        "content": [
          {
            "type": "pre",
            "text": "python3 web.py"
          }
        ]
      },
      {
        "checkpoint": "# Bonus implement the successor Not Banana.",
        "content": [
          {
            "type": "p",
            "text": "The not_hot_dog model was originally created by Julien C at https://huggingface.co/julien-c. Now the fun thing is you can actually train your own version of the model, which we can save for another time, but in the meantime you can replace your HUGGING_FACE_API_URL with one I created for not bananas. Just upload pictures of bananas instead of hot dogs."
          }
        ]
      },
      {
        "checkpoint": "# Replace your Url",
        "content": [
          {
            "type": "p",
            "text": "Just set your HUGGING_FACE_API_URL in your .env file to https://api-inference.huggingface.co/models/andrewvanbeek/autotrain-not-something-2133568871."
          },
          {
            "type": "pre",
            "text": "HUGGING_FACE_API_URL=https://api-inference.huggingface.co/models/andrewvanbeek/autotrain-not-something-2133568871"
          },
          {
            "type": "p",
            "text": "Now run the project again and upload bananas or anything not bananas."
          }
        ]
      },
      {
        "checkpoint": "# Final Words",
        "content": [
          {
            "type": "p",
            "text": "You did it, you are a Silicon Valley Legend just like Jian Yang, and now we have two APIs that can detect whether something is not a hot dog or is not a banana. If you keep this innovation up you will be raising money from Top VCs like Peter Gregory at Raviga and be on your way to be the next Hooli or Pied Piper. Thanks for reading!"
          },
          {
            "type": "p",
            "text": "Hope you enjoyed the tutorial. If you have any questions, reach out to me on my linkedin andrewryanvanbeek. Also if you are interested in following what I am personally building check out Dev-Docs."
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": []
      }
    ]
  },
  {
    "title": "Animate Images with CSS keyframes",
    "link": "https://www.codedex.io/projects/animate-images-with-keyframes-using-css",
    "tags": [
      "HTML",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/htmlanimate.png",
    "checkpoints": [
      {
        "checkpoint": "# What are animations in CSS",
        "content": [
          {
            "type": "p",
            "text": "Before we get started, it's important to note what animations are in CSS. Animations are made up of a series of frames, or in this case, HTML elements that change over time."
          },
          {
            "type": "h3-li",
            "h3": "## keyframes",
            "li": [
              "colorChange is the name of our animation",
              "2s is the length in seconds of how long the animation lasts",
              "infinite is indicating it will loop forever"
            ]
          },
          {
            "type": "p",
            "text": "CSS animations have \"steps\" in them (also known as keyframes) to signify each moment of change in the animation."
          },
          {
            "type": "p",
            "text": "For example,"
          },
          {
            "type": "pre",
            "text": "<div className=\"box\"></div>"
          },
          {
            "type": "pre",
            "text": "@keyframes colorChange {\n  0% { background-color: red; }\n  50% { background-color: yellow; }\n  100% { background-color: red; }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: red;\n  animation: colorChange 2s infinite;  \n}"
          },
          {
            "type": "p",
            "text": "would look like"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/bBzHFra.gif"
          },
          {
            "type": "p",
            "text": "So at 0% of the animation, the color is red, at 50% it's yellow, and at 100% or at the end, it's red again, hence the loop!"
          },
          {
            "type": "p",
            "text": "Let's also take a look at this line of code:"
          },
          {
            "type": "pre",
            "text": "animation: colorChange 2s infinite;  "
          },
          {
            "type": "p",
            "text": "The line of code above is attached to the .box class from our HTML file! Animations can only show up if they are defined in the animation:."
          }
        ]
      },
      {
        "checkpoint": "# Easing",
        "content": [
          {
            "type": "p",
            "text": "Easing in CSS animations is essential to understanding the pace in which an animation progresses over time."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/9C7DeEg.gif"
          },
          {
            "type": "p",
            "text": "Some common ones you'll see:"
          },
          {
            "type": "p",
            "text": "These can differ and are added right in the animation: of your CSS."
          },
          {
            "type": "pre",
            "text": ".tinker_bell {\n  animation: bounce 1s linear infinite;\n}"
          },
          {
            "type": "p",
            "text": "Note: Easing can get pretty complicated based on the type of motion you want to create! You can review the open source MDN Web Docs for more information on easing and animation examples."
          },
          {
            "type": "h3-li",
            "h3": "## Spin Animation",
            "li": [
              "bounce effect",
              "heartbeat pulse",
              "zoom in/out",
              "shake or vibration",
              "pop on hover",
              "wave effect",
              "+ many more!"
            ]
          },
          {
            "type": "p",
            "text": "Think of the last time you saw a spinning loader:"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/lW1fWrY.gif"
          },
          {
            "type": "p",
            "text": "This can be recreated with a spin animation like so:"
          },
          {
            "type": "pre",
            "text": "<div className=\"sensei\">\n  <img src=\"sensei.png\" alt=\"club penguin gray sensei penguin\" />\n</div>"
          },
          {
            "type": "pre",
            "text": "/* spinning animation */\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.sensei {\n  display: flex;\n  justify-content: center; \n  align-items: center; \n  height: 100vh; \n  animation: spin 1s linear infinite;\n}"
          },
          {
            "type": "p",
            "text": "Here, we're using the CSS function rotate() to establish which degree we want to start and end at. In this example, we're using the keywords from and to which are shortcuts for 0% and 100%."
          },
          {
            "type": "p",
            "text": "The result of the club penguin sensei looks like this üî•üî•"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/YVnPHFA.gif"
          }
        ]
      },
      {
        "checkpoint": "# Hovering Animation",
        "content": [
          {
            "type": "p",
            "text": "Imagine you're playing a video game and you're choosing which character to play as, or you're in an idle mode."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/PVfHyBD.gif"
          },
          {
            "type": "p",
            "text": "This is a hovering animation that we can create with keyframes!"
          },
          {
            "type": "pre",
            "text": "<div className=\"sensei\">\n  <img src=\"sensei.png\" alt=\"club penguin gray sensei penguin\" />\n</div>"
          },
          {
            "type": "pre",
            "text": "/* bouncing animation (floating)  */\n@keyframes bounce {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-30px);\n  }\n}\n\n.sensei {\n  animation: bounce 1s linear infinite;\n  display: flex;\n  justify-content: center; \n  align-items: center; \n  height: 100vh; \n}"
          },
          {
            "type": "p",
            "text": "Here, we're translating (aka moving) the object's Y position by 30 pixels halfway through the animation, and returning it to its original spot at the end using a linear ease."
          },
          {
            "type": "p",
            "text": "The beautiful result:"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/69VUqyO.gif"
          },
          {
            "type": "p",
            "text": "To achieve this animation speed, we set the length of time to 1s, but you can play around with this value to get the effect you want!"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congrats! You've learned the basics of CSS image animation, and as you can tell, it's a world of opportunities to add flair to your website or project! ‚ú®‚ú®‚ú®"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/7QS4kBF.gif"
          },
          {
            "type": "p",
            "text": "Some other ways you can animate images include:"
          },
          {
            "type": "p",
            "text": "Share your projects with the team @codedex_io and me, @exrlla! Let us know what you come up with!"
          }
        ]
      }
    ]
  },
  {
    "title": "Analyze U.S. Census Data with SciPy",
    "link": "https://www.codedex.io/projects/analyze-us-census-data-with-scipy",
    "tags": [
      "Python",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/scipy.png",
    "prerequisite": {
      "Prerequisites": ": Python, NumPy, SciPy",
      "Version": ": Python 3",
      "Read Time": ": 45 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "No matter where you are on your journey to mastering data science, it's always helpful to practice the basics of finding, cleaning, and analyzing real-world datasets. Back in 2020, COVID-19 sent us many of us into quarantine and while its long-term impact is still relatively unknown, we can reference a handful of public datasets to begin to scratch the surface."
          },
          {
            "type": "p",
            "text": "In this project tutorial, we'll be analyzing a dataset gathered from the 2022 U.S. Census covering geographic relocation roughly two years after quarantine."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/QSycenX.gif"
          },
          {
            "type": "p",
            "text": "We will begin to test our assumptions and answer some basic questions about various demographic groups using SciPy, NumPy, Pandas, and some basic working knowledge of statistics."
          },
          {
            "type": "p",
            "text": "The questions include:"
          }
        ]
      },
      {
        "checkpoint": "# Cleaning Raw Data",
        "content": [
          {
            "type": "p",
            "text": "As you can see below, the original data provided by census.gov contains two separate CSVs, one with the raw data and another with metadata that contains details of what each column represents."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/uvbRfkQ.png"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/nxdFv8j.png"
          },
          {
            "type": "p",
            "text": "When this happens, it's helpful to have some basic data preparation skills. While this isn't typically a requirement for using the SciPy package or conducting basic statistical analysis, you can look at each step we took to clean and structure the data by referencing the source code here."
          }
        ]
      },
      {
        "checkpoint": "# About the Clean Datasets",
        "content": [
          {
            "type": "p",
            "text": "The source code cranks out multiple categories of the same data, including information on the total population in 2022:"
          },
          {
            "type": "p",
            "text": "For the categories listed, each dataset contains the following columns, which are all characterized by the levels of detail noted below:"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/dzkXTSC.gif"
          },
          {
            "type": "h3-li",
            "h3": "## Geographical Data",
            "li": [
              "Geography ID: a unique identifier used to reference specific geographic areas",
              "Census Tract: a small, relatively permanent subdivision of a county",
              "State: the state in which the Census Tract is located",
              "County: the county within the state in which the Census Tract resides",
              "Region: the broader geographic area in which the state or county is located, typically referring to one of four major regions: Northeast, Midwest, South, or West",
              "Division: a sub-region within a Census Bureau-defined region, used for more detailed geographic analysis",
              "Total Population: the total number of people residing in a specific Census Tract"
            ]
          },
          {
            "type": "h3-li",
            "h3": "## Citizenship Status",
            "li": [
              "Total U.S. Citizens (Native): the total number of individuals who are U.S. citizens by birth",
              "Total U.S. Citizens (Naturalized): the total number of individuals who have obtained U.S. citizenship through the naturalization process after being born in another country",
              "Total Non-Citizens: the total number of individuals who are not U.S. citizens, including both legal immigrants, visa holders, and undocumented individuals"
            ]
          },
          {
            "type": "h3-li",
            "h3": "## Marital Status",
            "li": [
              "Married: the total number of individuals who are legally married at the time of the census",
              "Never Married: the total number of individuals who have never been legally married",
              "Separated: the total number of individuals who are legally married but currently living apart from their spouse due to marital separation",
              "Divorced: the total number of individuals who have been legally divorced",
              "Widowed: the total number of individuals who have lost their spouse and have not remarried"
            ]
          },
          {
            "type": "h3-li",
            "h3": "## Educational Attainment",
            "li": [
              "Less than a High School Graduate: the total number of individuals who have not completed high school or its equivalent",
              "High School Graduate (or its Equivalency): the total number of individuals who have completed high school or obtained an equivalent diploma, such as a GED",
              "Some College or Associate's Degree: the total number of individuals who have attended college or earned an Associate's Degree but have not completed a Bachelor's Degree",
              "Bachelor's Degree: the total number of individuals who have earned a Bachelor's Degree, typically after completing four years of undergraduate education at a university or college",
              "Graduate or Professional Degree: the total number of individuals who have earned a Master's Degree, Doctoral Degree (Ph.D.), or other professional degrees such as a Law Degree (J.D.) or Medical Degree (M.D.)"
            ]
          },
          {
            "type": "p",
            "text": "In this tutorial, we'll use SciPy to run some analysis and find out whether there are statistically significant differences in relocation patterns for each group ‚Äì but first, let‚Äôs review the basics."
          }
        ]
      },
      {
        "checkpoint": "# Some Basic Stats",
        "content": [
          {
            "type": "p",
            "text": "When conducting an exploratory analysis, we first want to make sure that our data abides by the underlying assumptions of whatever method we use. This is extremely important because it can make or break the credibility of our work in the long-term, and that‚Äôs a huge no-no for the data science industry."
          },
          {
            "type": "p",
            "text": "Generally speaking, most data science models abide by what we call parametric assumptions, which refer to normal distribution of a fixed set of parameters. In our particular case, those parameters include, but are not limited to, the columns we listed above. The three parametric assumptions are independence, normality, and homogeneity of variances."
          },
          {
            "type": "p",
            "text": "Additionally, traditional A/B testing typically utilizes one of two methods: either a chi-squared (which looks for dependence between two categorical variables) or a t-test (which looks for a statistically significant difference between the averages of two groups) to validate what we refer to as the null hypothesis (which is the assumption that there is no relationship or comparison between two patterns of behavior)."
          },
          {
            "type": "p",
            "text": "For this tutorial, we'll be running t-tests."
          }
        ]
      },
      {
        "checkpoint": "# Getting Started",
        "content": [
          {
            "type": "p",
            "text": "To get started, you'll need the following datasets and a copy of this Google Colab notebook."
          },
          {
            "type": "p",
            "text": "Feel free to manually upload the CSVs to the notebook if you don't already see them embedded in your copy."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/Iz1PLIY.png"
          },
          {
            "type": "p",
            "text": "First we'll begin by importing the necessary packages:"
          },
          {
            "type": "pre",
            "text": "import pandas as pd\nimport numpy as np\nfrom scipy import stats"
          },
          {
            "type": "p",
            "text": "Next, we'll load the CSV files to their own dataframes using pandas."
          },
          {
            "type": "pre",
            "text": "c = (\"/content/moved_same_state.csv\")\nv = (\"/content/moved_between_states.csv\")"
          },
          {
            "type": "pre",
            "text": "control = pd.read_csv(c)\nvariant = pd.read_csv(v)\n\n# control.head()\n# variant.head()"
          }
        ]
      },
      {
        "checkpoint": "# Let's Explore",
        "content": [
          {
            "type": "p",
            "text": "Let's begin by manually creating an empty dataframe (table) based on each level of detail (County, State, Division, and Region) listed by the U.S. Census."
          },
          {
            "type": "pre",
            "text": "county = pd.DataFrame()\nstate = pd.DataFrame()\ndivision = pd.DataFrame()\nregion = pd.DataFrame()"
          },
          {
            "type": "p",
            "text": "Now let's complete a simple pandas exercise. Sum the total number of people that relocated within the U.S. in both the control and variant groups at the state level."
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "pre",
            "text": "state[\"Relocated Within State\"] = control.groupby(\"State\")[\"Total Population\"].sum()\nstate[\"Relocated Between States\"] = variant.groupby(\"State\")[\"Total Population\"].sum()\n\nstate.head()"
          },
          {
            "type": "p",
            "text": "Comparing California residents to those from New York only, is there a significant difference in mobility between those that relocated within the same area (in this case, state) versus those that moved across state lines?"
          },
          {
            "type": "p",
            "text": "We'll use the .loc[] method to search for the two states and extract the summed values that we calculated in the exercise above."
          },
          {
            "type": "pre",
            "text": "cny = state.loc[[\"California\", \"New York\"]]\n\ncny"
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "pre",
            "text": "t_stat, p_value = stats.ttest_ind(cny[\"Relocated Within State\"], cny[\"Relocated Between States\"])\n\nprint(\"t-statistic:\", t_stat)\nprint(\"p-value:\", p_value)"
          },
          {
            "type": "p",
            "text": "A p-value of ~0.20 suggests that we can be roughly 80% certain the rate at which New York acquired new residents compared to retaining its current ones was higher than that of California roughly two years after quarantine."
          },
          {
            "type": "p",
            "text": "The common threshold for statistical significance is < 0.05, however, which would indicate a confidence interval of 95%."
          },
          {
            "type": "p",
            "text": "Comparing prior residents only (meaning those that moved within state lines), was there a significant difference in mobility amongst immigrants between the two states?"
          },
          {
            "type": "p",
            "text": "This time, instead of summing the values before we index the states we want to look at, we'll filter the dataset so that we are running calculations on only the specific categories that we want to test."
          },
          {
            "type": "pre",
            "text": "d = control[(control[\"State\"] == \"California\") | (variant[\"State\"] == \"New York\")]\n\ncny2 = pd.DataFrame()\ncny2[\"Total U.S. Citizens (Naturalized)\"] = d.groupby(\"State\")[\"Total US Citizens (Naturalized)\"].sum()\ncny2[\"Total Non-Citizens\"] = d.groupby(\"State\")[\"Total Non-Citizens\"].sum()\n\ncny2"
          },
          {
            "type": "pre",
            "text": "t_stat, p_value = stats.ttest_ind(cny2[\"Total U.S. Citizens (Naturalized)\"], cny2[\"Total Non-Citizens\"])\n\nprint(\"t-statistic:\", t_stat)\nprint(\"p-value:\", p_value)"
          },
          {
            "type": "p",
            "text": "The p-value is much higher in this instance, suggesting that we can be only 62% certain that there was a difference in mobility amongst immigrants between the two states."
          },
          {
            "type": "p",
            "text": "Now what about when comparing U.S. citizens only?"
          },
          {
            "type": "pre",
            "text": "cny3 = pd.DataFrame()\ncny3[\"Total U.S. Citizens (Native)\"] = d.groupby(\"State\")[\"Total US Citizens (Native)\"].sum()\ncny3[\"Total U.S. Citizens (Naturalized)\"] = cny2[\"Total U.S. Citizens (Naturalized)\"]\n\ncny3"
          },
          {
            "type": "pre",
            "text": "t_stat, p_value = stats.ttest_ind(cny3[\"Total U.S. Citizens (Native)\"], cny3[\"Total U.S. Citizens (Naturalized)\"])\n\nprint(\"t-statistic:\", t_stat)\nprint(\"p-value:\", p_value)"
          },
          {
            "type": "p",
            "text": "The p-value is even higher in this instance, suggesting that there is no difference in domestic mobility between the two amongst U.S. citizens (or that there's merely a 35% chance that it is)."
          }
        ]
      },
      {
        "checkpoint": "# Additional Questions",
        "content": [
          {
            "type": "p",
            "text": "When comparing the Northeast to the South, is there a difference between the total number of high school graduates that relocated compared to those with bachelors' degrees?"
          },
          {
            "type": "p",
            "text": "From this point on, we'll reuse the methods from the above section."
          },
          {
            "type": "pre",
            "text": "region[\"High School Graduate (or its Equivalency)\"] = control.groupby(\"Region\")[\"High School Graduate (or its Equivalency)\"].sum()\nregion[\"Bachelor's Degree\"] = control.groupby(\"Region\")[\"Bachelor's Degree\"].sum()\n\nnem = region.loc[region.index.isin([\"Northeast\", \"South\"])]\n# nem"
          },
          {
            "type": "pre",
            "text": "t_stat, p_value = stats.ttest_ind(nem[\"High School Graduate (or its Equivalency)\"], nem[\"Bachelor's Degree\"])\n\nprint(\"t-statistic:\", t_stat)\nprint(\"p-value:\", p_value)"
          },
          {
            "type": "p",
            "text": "Lastly, let's compare marital status in more conservative divisions like the South Atlantic (Washington D.C., Georgia, Florida, North Carolina, etc.) and the Mountain States (Colorado, Wyoming, Nevada, Arizona, etc.)."
          },
          {
            "type": "p",
            "text": "Did those who have yet to marry relocate more often than those who already are amongst the control group (meaning those that moved within state lines)?"
          },
          {
            "type": "pre",
            "text": "division[\"Never Married\"] = control.groupby(\"Division\")[\"Never Married\"].sum()\ndivision[\"Married\"] = control.groupby(\"Division\")[\"Married\"].sum()\n\nsam = division.loc[division.index.isin([\"South Atlantic\", \"Mountain\"])]\n# sam"
          },
          {
            "type": "pre",
            "text": "t_stat, p_value = stats.ttest_ind(sam[\"Never Married\"], sam[\"Married\"])\n\nprint(\"t-statistic:\", t_stat)\nprint(\"p-value:\", p_value)"
          },
          {
            "type": "p",
            "text": "Now answer the same exact question at the county level using two counties that you know of and follow the same formula as above."
          },
          {
            "type": "pre",
            "text": "county[\"Never Married\"] = control.groupby(\"County\")[\"Never Married\"].sum()\ncounty[\"Married\"] = control.groupby(\"County\")[\"Married\"].sum()\n\n# home = county.loc[county.index.isin([\"Your Home county\", \"Home County 2\"])]"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "So what have we learned?? We've learned that:"
          },
          {
            "type": "p",
            "text": "Why does this matter? It matters because it demonstrates that there's actually a sound and scientific method for answering these questions when they come up. Feel free to try your hand at doing the same the next time you run into an interesting dataset! Or, consider ways you can examine how mobility influences local economies, or even how it impacts the environment."
          },
          {
            "type": "p",
            "text": "Thanks for coding with us!"
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Source Code",
              "NumPy course",
              "A/B Testing"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Build Tic-Tac-Toe With JavaScript",
    "link": "https://www.codedex.io/projects/build-tic-tac-toe-with-javascript",
    "tags": [
      "JS",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/tictactoe.png",
    "prerequisite": {
      "Prerequisites": ": JavaScript fundamentals",
      "Version": ": Node.js 16.14.0",
      "Read Time": ": 30 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Even in ancient times, people across the world still enjoyed playing games. One game that has stood the test of time is Tic-Tac-Toe. From Egyptian merchants who played on roofing tiles to Roman Soldiers who knew a similar game as ‚ÄúTerni Lapilli‚Äù, Tic-Tac-Toe has been widely played and appreciated over many millennia."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/o6imkVE.png"
          },
          {
            "type": "p",
            "text": "In this project tutorial, we will learn to build a Tic-Tac-Toe game with JavaScript in the console! ‚ùå ‚≠ïÔ∏è"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/aimW37h.png"
          },
          {
            "type": "p",
            "text": "You'll be using:"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "p",
            "text": "Our first task is to install Node.js, a runtime environment that lets us run JavaScript code from the terminal rather than the browser."
          },
          {
            "type": "p",
            "text": "You can install it from the Node.js website, or check if you already have it installed with the node -v command. If not, you can type npm install prompt-sync in the terminal to install the package after downloading from the Node.js website. To execute your program simply run node <filename> in the terminal and press enter."
          },
          {
            "type": "pre",
            "text": "node tictactoe.js"
          },
          {
            "type": "p",
            "text": "In this example, tictactoe.js is the name of the file you saved your code in."
          },
          {
            "type": "p",
            "text": "We will need to import the 'prompt-sync' package to handle user input. This can be done with the following code:"
          },
          {
            "type": "pre",
            "text": "const prompt = require('prompt-sync')();"
          },
          {
            "type": "p",
            "text": "Next, we need to set up the game variables such as the game board, player names, and state of the game."
          },
          {
            "type": "p",
            "text": "Below where we imported prompt-sync, let's define the following variables:"
          },
          {
            "type": "p",
            "text": "Since the game will be played on the console, we can use blank spaces to represent the gameBoard as an array with 9 positions:"
          },
          {
            "type": "pre",
            "text": "let gameBoard = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '];"
          },
          {
            "type": "p",
            "text": "In addition to this, we also need to assign a name for players to track which players turn it is."
          },
          {
            "type": "p",
            "text": "While players would typically use Xs and Os to play Tic-Tac-Toe, we will use goats and grapes. Thus, player 1 be ‚Äòüêê‚Äô, but you can assign any name to it."
          },
          {
            "type": "pre",
            "text": "let currentPlayer = 'üêê';"
          },
          {
            "type": "p",
            "text": "You may have noticed that we only assigned one name to a player, despite there being two players in a Tic-Tac-Toe game. Don‚Äôt worry ‚Äì we‚Äôll address this later in the program."
          },
          {
            "type": "p",
            "text": "We also need to set up a game state, so the program knows when to stop and finish. When we run the program, we can start with the gameActive variable being set to true. This ensures the game keeps going until there is a win or a draw."
          },
          {
            "type": "pre",
            "text": "let gameActive = true;"
          },
          {
            "type": "p",
            "text": "Now that we've initialized our essential variables, it's time to work on the game functionality."
          }
        ]
      },
      {
        "checkpoint": "# Printing the board",
        "content": [
          {
            "type": "p",
            "text": "With the gameBoard array we defined previously, let's make a function that displays the current state of the game board. As time goes on and the game gets played, the array will alter itself so we need placeholders for the data being inserted. We will make a set of strings that can be easily manipulated, which is done via string interpolation."
          },
          {
            "type": "pre",
            "text": "function printBoard() {\n  console.log(`\n    ${gameBoard[0]} | ${gameBoard[1]} | ${gameBoard[2]}\n    ---------\n    ${gameBoard[3]} | ${gameBoard[4]} | ${gameBoard[5]}\n    ---------\n    ${gameBoard[6]} | ${gameBoard[7]} | ${gameBoard[8]}\n  `);\n}"
          },
          {
            "type": "p",
            "text": "This piece of code creates a multi-line string, with ${} interpolation syntax being used to set values of the gameBoard array elements to their corresponding positions. ${gameboard[0]} relates to the first value of the gameBoard, allowing us to easily manipulate each cell's contents on the Tic-tac-toe grid. Since arrays use 0-indexing, each number 0-8 corresponds to a cell on the TicTacToe grid:"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/jG3saIL.png"
          }
        ]
      },
      {
        "checkpoint": "# Making Moves",
        "content": [
          {
            "type": "p",
            "text": "In Tic-Tac-Toe, players cannot take a space that is already occupied by the opponent or themselves. As a result, we need to check if a space is taken."
          },
          {
            "type": "p",
            "text": "Since we assigned a blank space to each cell initially, a blank space means it isn't taken and we can update the board with the player's move. This turns out to be a relatively easy if/else statement that checks if the player's chosen cell is indeed empty, or prompting the player to try again if not."
          },
          {
            "type": "p",
            "text": "Let's make a handleMove() function that takes in the player's position as an argument:"
          },
          {
            "type": "pre",
            "text": "function handleMove(position) {\n  if (gameBoard[position] === \" \") {\n    gameBoard[position] = currentPlayer;\n  } else {\n    console.log(\"Cell already taken, choose another one.\");\n    return false;\n  }\n}"
          },
          {
            "type": "p",
            "text": "Later, we will make a checkWin() function to tell if a player has won or not. But for now, after every move, we will just add an if-statement to the handleMove() function to check if a player has won."
          },
          {
            "type": "p",
            "text": "If a player has won, the game will no longer be active and the program will display a winning message!"
          },
          {
            "type": "pre",
            "text": "  if (checkWin()) {\n    printBoard();\n    console.log(`Player ${currentPlayer} wins!`);\n    gameActive = false;\n    return true;\n  }"
          },
          {
            "type": "p",
            "text": "In the real game, when all the cells are filled without there being a winner, it's a draw. Let's create a function that checks if all cells from the gameBoard array are filled, and if so, concludes the game with a draw. We'll use arrow function syntax to make a checkDraw() function:"
          },
          {
            "type": "pre",
            "text": "  if (gameBoard.every(cell => cell !== \" \")) {\n    printBoard();\n    console.log(\"It's a draw!\");\n    gameActive = false;\n    return true;\n  }"
          },
          {
            "type": "p",
            "text": "The handleMove() function runs every time a player makes a move, so after one player's move, we need to switch to the next player. This can be done by checking if the currentPlayer variable is equal to ‚Äòüêê‚Äô, and if the condition is true it will be swapped out by üçá, and vice versa. In other words, we are toggling currentPlayer between üêê and üçá after every move by replacing the variable with it's alternative."
          },
          {
            "type": "p",
            "text": "We'll use a ternary operator to do this, which is a shorthand for an if/else statement."
          },
          {
            "type": "pre",
            "text": "  currentPlayer = currentPlayer === \"üêê\" ? \"üçá\" : \"üêê\";\n  return true;"
          },
          {
            "type": "p",
            "text": "Note: The code from this section is in one function! Make sure your handleMove() function looks like this, with indentation and brackets matching up before moving on."
          },
          {
            "type": "pre",
            "text": "function handleMove(position) {\n  if (board[position] === \" \") {\n    board[position] = currentPlayer;\n  } else {\n    console.log(\"Cell already taken, choose another one.\");\n    return false;\n  }\n\n  if (checkWin()) {\n    printBoard();\n    console.log(`Player ${currentPlayer} wins!`);\n    active = false;\n    return true;\n  }\n\n  if (board.every(cell => cell !== \" \")) {\n    printBoard();\n    console.log(\"It's a draw!\");\n    active = false;\n    return true;\n  }\n\n  currentPlayer = currentPlayer === \"üêê\" ? \"üçá\" : \"üêê\";\n  return true;\n}"
          }
        ]
      },
      {
        "checkpoint": "# Finishing Touches",
        "content": [
          {
            "type": "p",
            "text": "Only a few more things must be done before the program is runnable and works! Let's now create the checkWin() function that's used in the handleMove() function:"
          },
          {
            "type": "pre",
            "text": "function checkWin() {\n  const conditions = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n}"
          },
          {
            "type": "p",
            "text": "This function determines if the current player has won, with conditions being an array of all the possible winning combinations as displayed on the board. For example, [0,1,2] corresponds to the first column being occupied by one player, which would yield a win."
          },
          {
            "type": "p",
            "text": "Now we need to evaluate the conditions. For each winning condition, we test a, b, and c to check if the values at these index properties all match the current player. As long as one condition is met, the player will win."
          },
          {
            "type": "p",
            "text": "Let's add this return statement after the conditions array inside of our checkWin() function:"
          },
          {
            "type": "pre",
            "text": " return conditions.some(condition => {\n    const [a, b, c] = condition;\n    return gameBoard[a] === currentPlayer && gameBoard[b] === currentPlayer && gameBoard[c] === currentPlayer;\n  });"
          },
          {
            "type": "p",
            "text": "The last part of the program is creating a loop that allows the game to go on until someone wins or there is a draw. With the gameState boolean variable, we can use a while loop to do this. Since we want the 'position' variable to be an integer before we pass it on to the later code, we use the parseInt() function to convert from a string to an integer."
          },
          {
            "type": "p",
            "text": "We also have to make a domain for the possible moves. A single game lasts for 9 moves that must be made in a position between 0 and 8. This loop will continuously run until gameActive is false, so we want it to be independent from the checkWin() function."
          },
          {
            "type": "pre",
            "text": "while (gameActive) {\n  printBoard();\n  const position = prompt(`Player ${currentPlayer}, enter your move (0-8): `);\n\n  if (position >= 0 && position <= 8) {\n    handleMove(parseInt(position));\n  } else {\n    console.log(\"Invalid position, enter a number between 0 and 8.\");\n  }\n}"
          },
          {
            "type": "p",
            "text": "We repeat the loop until gameActive is false. After each move, we log (or print) the updated gameBoard to the console and prompt the next player for their move. Since the board only has a total of 9 cells (0 - 8), the player must pick again if their move is out of range. Otherwise, a move within range is sent back to the handleMove() function to be processed."
          },
          {
            "type": "p",
            "text": "At this point, go ahead and save your tictactoe.js file and run again in the console with node tictactoe.js. You should now see the following:"
          }
        ]
      },
      {
        "checkpoint": "# Congrats!",
        "content": [
          {
            "type": "p",
            "text": "You have made it to the end! With control flow, arrays, input handling, and game logic, you've coded Tic-Tac-Toe right on your computer! If you would like to challenge yourself more, create a tally or score system to keep track of how many times each player has won."
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Source code",
              "Node.js official site",
              "Tic-tac-toe (Wikipedia)"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Build a 3D Model with Three.js",
    "link": "https://www.codedex.io/projects/build-an-interactive-3d-model-with-threejs",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/Threejs%20Project%20Card.png",
    "prerequisite": {},
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Think of one of the coolest websites you've ever seen‚Ä¶ Do they have some cool 3D scroll effects or interactive elements? Some of the coolest websites online right now are leveled up with the power of 3D graphics! üî•"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-3d-model-with-threejs/images/threejs-demo.gif"
          },
          {
            "type": "p",
            "text": "Chances are, these websites are powered by WebGL (Web Graphics Library), a JavaScript API that lets us create 3D graphics! Three.js is a JavaScript library built on top of WebGL that's easier to program with, and it can draw and render 3D components on the browser! üåé"
          },
          {
            "type": "p",
            "text": "In this project tutorial, we'll cover the basics of Three.js, and how to load a GLB/GLTF file that holds a 3D render of a Shiba dog! üê∂"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-3d-model-with-threejs/images/shiba-final-demo.gif"
          },
          {
            "type": "p",
            "text": "We'll interact with the Shiba to move it around the canvas and create a jumping animation! ‚ú® (Yes, she's on a website!)"
          },
          {
            "type": "p",
            "text": "Let's get coding! ‡¥¶‡µç‡¥¶‡¥ø (À∂·µî ·µï ·µîÀ∂)~‚úß"
          }
        ]
      },
      {
        "checkpoint": "# Setup Dev Environment",
        "content": [
          {
            "type": "p",
            "text": "For this project, we'll be using Node.js to load and manage dependencies. We'll also be using Vite as our build tool to compile our website!"
          },
          {
            "type": "pre",
            "text": "npm create vite@latest"
          },
          {
            "type": "p",
            "text": "You now have your project folder set up! üöÄ"
          },
          {
            "type": "p",
            "text": "Let's go ahead and open this folder in your code editor of choice. In your project folder directory, run the following commands:"
          },
          {
            "type": "pre",
            "text": "npm i \nnpm run dev "
          },
          {
            "type": "p",
            "text": "You should now see the Vite logo, and your development environment all set up!"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/hWcsGF7.png"
          },
          {
            "type": "p",
            "text": "Set up a blank slate and remove the boilerplate code provided by Vite. Replace the following files:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link\n      rel=\"icon\"\n      href=\"data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üêï</text></svg>\"\n    />\n    <title>Three.js Project</title>\n  </head>\n  <body>\n    <script type=\"module\" src=\"/main.js\"></script>\n    <div id=\"canvas-container\">\n      <canvas></canvas>\n    </div>\n  </body>\n</html>"
          },
          {
            "type": "p",
            "text": "Your project directory should look like the following:"
          },
          {
            "type": "pre",
            "text": "project-name/\n  ‚îú‚îÄ‚îÄ node_modules/\n  ‚îú‚îÄ‚îÄ public/\n  ‚îú‚îÄ‚îÄ .gitignore\n  ‚îú‚îÄ‚îÄ index.html\n  ‚îú‚îÄ‚îÄ main.js\n  ‚îú‚îÄ‚îÄ package-lock.json\n  ‚îú‚îÄ‚îÄ package.json\n  ‚îî‚îÄ‚îÄstyle.css"
          },
          {
            "type": "p",
            "text": "Now, without any further delay, let's move on to all the fun 3D jazz!"
          }
        ]
      },
      {
        "checkpoint": "# The World of 3D",
        "content": [
          {
            "type": "p",
            "text": "Before we start coding, let's understand the Three.js library a bit and its shenanigans to know how exactly 3D objects are placed in 2D space."
          },
          {
            "type": "p",
            "text": "For any 3D scene (think of your favorite 3D animated movie), we need shapes or geometries. This will be our Shiba dog! Additionally, there are textures and materials, lights, and the camera perspective. The scene is our container for all of our assets."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/a3eCzf8.png"
          },
          {
            "type": "h3-li",
            "h3": "## The Camera",
            "li": [
              "fieldOfView: FOV is the extent of the scene that is seen on the display at any given moment. The value is in degrees.",
              "aspectRatio: Typically, the width of the element divided by the height",
              "nearPlane: Objects closer to the camera than the value of near are clipped, or not rendered",
              "farPlane: Objects further away from the camera than the value of far are clipped, or not rendered.",
              "The near and far clipping planes make up the View Frustum, which controls which objects will be visible to the camera itself."
            ]
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/Nj3ijwx.png"
          },
          {
            "type": "p",
            "text": "The diagram above shows us the view of a Perspective Camera. Three.js offers a variety of cameras, but for this project, we will stick with the one most similar to visualizing an object through human eyes."
          },
          {
            "type": "p",
            "text": "In Three.js, we define a camera as such:"
          },
          {
            "type": "pre",
            "text": "const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);"
          },
          {
            "type": "p",
            "text": "We'll add actual code values in the next section! ü§©"
          }
        ]
      },
      {
        "checkpoint": "# Make a Scene",
        "content": [
          {
            "type": "p",
            "text": "Let's go ahead and use npm to install Three.js:"
          },
          {
            "type": "pre",
            "text": "npm i three"
          },
          {
            "type": "p",
            "text": "For the rest of the tutorial, we'll be writing code in our main.js file!"
          },
          {
            "type": "p",
            "text": "Let's get started and import Three.js in our file, and the GLTF loader, which will allow us to load the 3D Shiba model!"
          },
          {
            "type": "pre",
            "text": "import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';"
          },
          {
            "type": "p",
            "text": "Let's now create a new scene that we'll call scene, and create the new perspective camera that we'll call camera."
          },
          {
            "type": "pre",
            "text": "const scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);"
          },
          {
            "type": "p",
            "text": "Above, we have defined the typical default values for our field of view angle, aspect ratio, and view frustum. Once we have our model loaded later on, feel free to experiment with these values! üòÄ"
          },
          {
            "type": "p",
            "text": "Now, we need to use the Three.js Renderer to render our model on our page, and we'll use the document.querySelector to render our 3D model, and set the size and color."
          },
          {
            "type": "pre",
            "text": "const renderer = new THREE.WebGLRenderer({ canvas: document.querySelector('canvas') });\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setClearColor(new THREE.Color(0xffffff)); // hex for white"
          },
          {
            "type": "h3-li",
            "h3": "## GLTFLoader",
            "li": [
              "Click and download the Shiba file here",
              "Not a Shiba fan? No worries! Sketchfab is an online community with hundreds of 3D models for you to pick from. Be sure to download either the GLTF or GLB file for this project."
            ]
          },
          {
            "type": "p",
            "text": "Inside your /public folder, we're going to add our Shiba GLB file."
          },
          {
            "type": "p",
            "text": "Let's now create a new GLTFLoader object, and create a function that will load our Shiba model to work alongside Three.js. Additionally, let's also add a line of code that changes the position of the camera to ‚Äúzoom out‚Äù and places the Shiba model farther in the z-direction. Be sure to switch the values out depending on how far away or close you want the model to be."
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/BT6iqFa.jpg"
          },
          {
            "type": "pre",
            "text": "const loader = new GLTFLoader();\n\nlet shiba;\nloader.load(\n    './shiba.glb', // Replace with the path to your Shiba model\n    function (gltf) {\n        shiba = gltf.scene;\n        scene.add(shiba);\n    },\n    undefined,\n    function (error) {\n        console.error(error);\n    }\n);\n\ncamera.position.z = 5;"
          },
          {
            "type": "p",
            "text": "Now, let's create the animate() function which will set up an animation loop and render the scene we have created. The function is recursively calling itself using requestAnimationFrame. This creates an infinite loop where the browser continuously calls the animate function!"
          },
          {
            "type": "pre",
            "text": "function animate() {\n  requestAnimationFrame(animate);\n  renderer.render(scene, camera);\n}\n\nanimate();"
          },
          {
            "type": "p",
            "text": "Let's take a look at our site!"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/ZCkQvI4.png"
          },
          {
            "type": "p",
            "text": "Your site should now have our little Shiba dog!!!! You'll notice now, our Shiba dog is immovable‚Ä¶\nSo, let's learn about Orbit Controls! üõ∞Ô∏è"
          }
        ]
      },
      {
        "checkpoint": "# Orbit Controls",
        "content": [
          {
            "type": "p",
            "text": "Using our mouse or trackpad, we want to be able to control Shiba and move her around in our 3D scene. At the top of our imports, let's go ahead and import the OrbitControls class provided by Three.js. Our imports at the top of main.js should now look like the following:"
          },
          {
            "type": "pre",
            "text": "import * as THREE from 'three';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';"
          },
          {
            "type": "p",
            "text": "After the renderer variable, let's go ahead and add in a couple of lines of code!"
          },
          {
            "type": "pre",
            "text": "// const renderer = new THREE.WebGLRenderer();\n// renderer.setSize(window.innerWidth, window.innerHeight);\n// document.body.appendChild(renderer.domElement);\n\n\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true; // enable damping"
          },
          {
            "type": "p",
            "text": "Here, we've initialized the Orbit Controls, which takes the camera and the HTML element that connects the 3D Model to the browser as arguments. We have also enabled damping, which is just a fun way of making the camera movements smoother by slowing down the camera's motion when the user stops interacting with the controls."
          },
          {
            "type": "p",
            "text": "Let's now update our animate() function to include the orbit controls. We'll use a built-in method called .update() to update the controls. Your function should now look like this:"
          },
          {
            "type": "pre",
            "text": "function animate() {\n  requestAnimationFrame(animate);\n  controls.update(); // Update controls with damping\n  renderer.render(scene, camera);\n}\n\nanimate();"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-an-interactive-3d-model-with-threejs/images/testing_shiba.gif"
          },
          {
            "type": "p",
            "text": "Try to move your shiba now! (‚Äû‚Ä¢ ÷ä ‚Ä¢‚Äû)‡©≠"
          }
        ]
      },
      {
        "checkpoint": "# Click to Jump",
        "content": [
          {
            "type": "p",
            "text": "Woohoo! We have a working movable Shiba dog! Now, let's make the Shiba jump every time we click on her to have another layer of interactivity."
          },
          {
            "type": "p",
            "text": "Let's start by installing an additional library that's going to help us create and animate our Three.js object called GSAP. Enter the following command in your terminal:"
          },
          {
            "type": "pre",
            "text": "npm i gsap"
          },
          {
            "type": "p",
            "text": "Then, add GSAP to the imports at the top of the file. Your imports should now include the following:"
          },
          {
            "type": "pre",
            "text": "import * as THREE from 'three';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport gsap from 'gsap';"
          },
          {
            "type": "p",
            "text": "We now need a couple of things to activate our click-to-jump Shiba dog:"
          },
          {
            "type": "p",
            "text": "The intersection point of the Shiba dog and your click.\nThe coordinates of where you click."
          },
          {
            "type": "p",
            "text": "Luckily, we have some objects from Three.js to help us out! We're going to add a raycaster object which performs ‚Äúraycasting‚Äù, a technique for detecting the intersection of a line with objects in a 3D scene. We will also create a vector object that holds the mouse coordinates!"
          },
          {
            "type": "p",
            "text": "Let's add these lines of code above the animate() function"
          },
          {
            "type": "pre",
            "text": "const raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();"
          },
          {
            "type": "p",
            "text": "Under these lines of code, let's create a function called onDocumentMouseDown(). We want\nthis function to handle mouse-down events on our page to detect clicks on the Shiba in a Three.js scene and trigger the jump!"
          },
          {
            "type": "p",
            "text": "Let's create this function that takes in event as a parameter, and normalizes the device coordinates. Then, check if the shiba is intersected by the raycaster ray, and make it jump if the value is greater than one, or has intersected."
          },
          {
            "type": "pre",
            "text": "function onDocumentMouseDown(event) {\n    event.preventDefault();\n\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n\n    raycaster.setFromCamera(mouse, camera);\n\n    const intersects = raycaster.intersectObjects(scene.children, true);\n\n    if (intersects.length > 0) {\n        const jumpHeight = 1.5;\n        const jumpDuration = 0.4;\n        gsap.to(shiba.position, { y: jumpHeight, duration: jumpDuration, yoyo: true, repeat: 1, ease: \"power1.inOut\" });\n    }\n}"
          },
          {
            "type": "p",
            "text": "You'll notice that when you try to click on your site, the shiba doesn't jump üòû. Add an event listener that will detect the mouse click, and run the onDocumentMouseDown() function!"
          },
          {
            "type": "p",
            "text": "Add this line after the end of the function you just made."
          },
          {
            "type": "pre",
            "text": "document.addEventListener('mousedown', onDocumentMouseDown, false);"
          },
          {
            "type": "p",
            "text": "CLICK ON SHIBA!"
          },
          {
            "type": "img",
            "src": "https://i.imgur.com/0l9WifA.png"
          }
        ]
      },
      {
        "checkpoint": "# Congrats!",
        "content": [
          {
            "type": "p",
            "text": "Woohoo! ‚ú®Congratulations on creating your first Three.js project!"
          },
          {
            "type": "p",
            "text": "There are no limits to how you can continue to develop your website or project. Here are a few ideas to get you inspired:"
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": [
          {
            "type": "p",
            "text": "Check out the live demo version here! Here are some helpful resources as well to help you with your future Three.js endeavors!"
          },
          {
            "type": "p",
            "text": "Feel free to also check out the source code for this project! ‚ú®We would love to see what you build with this tutorial! Tag @codedex_io, @threejs and @exrlla on Twitter if you make something cool! ‚ÇäÀö‚äπ·∞î"
          }
        ]
      }
    ]
  },
  {
    "title": "Create a React App with Vite",
    "link": "https://www.codedex.io/projects/create-a-react-app-with-vite",
    "tags": [
      "React",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/publish-vite.png",
    "prerequisite": {
      "Prerequisites:": "Command Line",
      "Versions:": "Node v18, Vite 5.0.12",
      "Read Time:": "25 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "For the last decade, React has grown from a project used by a small Facebook team into a tool used by a global community. React's ability to let you code your website with reusable components and make edits from fewer places changed the world of web development."
          },
          {
            "type": "p",
            "text": "But like many tools, getting React set up on your local computer can be tricky. It isn't as simple as installing one package or double-clicking an .html file."
          },
          {
            "type": "p",
            "text": "In this tutorial, you will create and run a React app with Vite! ‚ö°"
          },
          {
            "type": "h3-li",
            "h3": "## What is Vite?",
            "li": [
              "For Mac:\nCopy: cmd + c\nPaste: cmd + v",
              "Windows:\nCopy: ctrl + c\nPaste: ctrl + v"
            ]
          },
          {
            "type": "p",
            "text": "We can render our React code with Vite."
          },
          {
            "type": "p",
            "text": "Vite is a tool that allows us to create and run light to mid-sized React applications."
          },
          {
            "type": "p",
            "text": "While there are other ways to launch a React app, Vite is the most straightforward."
          },
          {
            "type": "p",
            "text": "Vite (French for \"quick\"), is a remarkably speedy frontend build tool. Though not a full-fledged framework for React, Vite is nice for small to moderate-sized apps."
          },
          {
            "type": "p",
            "text": "In order to use Vite, we'll need to do a few things first. Let's get started!"
          }
        ]
      },
      {
        "checkpoint": "# Node",
        "content": [
          {
            "type": "p",
            "text": "Vite can be installed as a package from a Node package manager. In this tutorial, we will use npm (or \"node package manager\")."
          },
          {
            "type": "p",
            "text": "But wait, what is \"Node\"?"
          },
          {
            "type": "p",
            "text": "Node.js is a special tool that lets you run your JavaScript code on a server, in addition to a browser. When Node is installed, you already have npm!"
          },
          {
            "type": "p",
            "text": "To check if Node is installed, run the following command on the terminal:"
          },
          {
            "type": "pre",
            "text": "node -v"
          },
          {
            "type": "p",
            "text": "If Node is installed, this command will print the version number you're using. This means you'll also have npm installed! If Node is not found, then download it here."
          },
          {
            "type": "p",
            "text": "Next, we will need an editor to write our React code. We recommend VS Code but feel free to use any editor you like."
          },
          {
            "type": "p",
            "text": "If your Node version is older than 18, or you don't get a version number at all, make sure to download the latest version here."
          }
        ]
      },
      {
        "checkpoint": "# Install Vite",
        "content": [
          {
            "type": "p",
            "text": "Now that we've ensured that Node is installed, it's time to start using npm!"
          },
          {
            "type": "p",
            "text": "We can use npm to install Vite."
          },
          {
            "type": "p",
            "text": "Enter the following in the terminal and press enter:"
          },
          {
            "type": "pre",
            "text": "npm install vite@latest"
          },
          {
            "type": "p",
            "text": "This will download the latest version of Vite."
          }
        ]
      },
      {
        "checkpoint": "# Setup React App",
        "content": [
          {
            "type": "p",
            "text": "Now, let's set up our React app!"
          },
          {
            "type": "p",
            "text": "Run the following command:"
          },
          {
            "type": "pre",
            "text": "npm create vite@latest"
          },
          {
            "type": "p",
            "text": "This will begin with a set of prompts that you'll need to fill out to create the app."
          },
          {
            "type": "p",
            "text": "The first asks what you want to name your project. Maybe something like my-first-app?"
          },
          {
            "type": "p",
            "text": "Next, you'll be asked what kind of app you want to make. Use the arrow keys to go to \"React\" and select with enter."
          },
          {
            "type": "p",
            "text": "Note: With Vite, you can make more than just a React app. Even ones in Vue or Svelte!"
          },
          {
            "type": "p",
            "text": "You'll then be asked whether you want the React app set up with TypeScript or regular JavaScript. Let's go for just JavaScript."
          },
          {
            "type": "p",
            "text": "But wait, what about this \"SWC\" thing? This stands for \"Speedy Web Compiler\" and it allows your code to get processed a little quicker. For this tutorial, it doesn't matter if you select it."
          }
        ]
      },
      {
        "checkpoint": "# Run React App",
        "content": [
          {
            "type": "p",
            "text": "After this point, everything should be set and Vite will print directions for how to run your React app!"
          },
          {
            "type": "p",
            "text": "First, use the cd command to change into the new Vite folder you made:"
          },
          {
            "type": "pre",
            "text": "cd my-first-app"
          },
          {
            "type": "p",
            "text": "Next, run the following npm command:"
          },
          {
            "type": "pre",
            "text": "npm install"
          },
          {
            "type": "p",
            "text": "Just like how we are using Vite as a tool, Vite itself uses tools, or dependencies, to work as expected. Similar to booting up a game console, running npm install starts up these dependencies so that Vite can work."
          },
          {
            "type": "p",
            "text": "Lastly, we will run this command:"
          },
          {
            "type": "pre",
            "text": "npm run dev"
          },
          {
            "type": "p",
            "text": "Vite will now build up our app and then serve it with a localhost link, similar to this:"
          },
          {
            "type": "p",
            "text": "If we copy/paste this link on a browser, we should see the following output:"
          },
          {
            "type": "p",
            "text": "To copy/paste, here are the keyboard shortcuts:"
          }
        ]
      },
      {
        "checkpoint": "# Vite App Structure",
        "content": [
          {
            "type": "p",
            "text": "When creating a new React project, Vite sets up all the files and folders usually needed. This way, we can get right to building."
          },
          {
            "type": "p",
            "text": "If we open our my-first-app folder in an editor like VS Code, the following files and folders are usually found:"
          },
          {
            "type": "p",
            "text": "Inside most Vite React apps, there is a src folder (short for \"source\") that contains all the source code, including .jsx files."
          },
          {
            "type": "p",
            "text": "In the package.json file, we'll find:"
          },
          {
            "type": "pre",
            "text": "\"dependencies\": {\n  \"react\": \"^18.0.0\",\n  \"react-dom\": \"^18.0.0\"\n}"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "There you have it! We've just learned to create and run a React app with Vite! üéâ"
          },
          {
            "type": "p",
            "text": "Vite is currently one of the best options for getting new ideas up and running quickly. And React is one of the best ways to express those ideas!"
          },
          {
            "type": "p",
            "text": "Feel free to play around with the code in the files, especially in App.jsx. Also, don't be afraid to start your next project with Vite!"
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": []
      }
    ]
  },
  {
    "title": "Run a Website Locally with HTML",
    "link": "https://www.codedex.io/projects/run-a-website-locally-with-html",
    "tags": [
      "HTML",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/local-html.png",
    "prerequisite": {
      "Prerequisites:": "HTML fundamentals",
      "Versions:": "HTML5, VS Code 1.85.1",
      "Read Time:": "25 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "HTML ultimately rests underneath the websites we use. But how can we test or preview the websites we build with HTML on our local computer?"
          },
          {
            "type": "p",
            "text": "This tutorial shows a few ways to do just that!"
          },
          {
            "type": "p",
            "text": "Note: Make sure to create a new index.html file somewhere on your computer. Then place anything in the <body> element so we can render it later."
          }
        ]
      },
      {
        "checkpoint": "# Option A: Double-Click the File",
        "content": [
          {
            "type": "p",
            "text": "The first option involves using our computer's file manager (\"Finder\" for Mac; \"File Explorer\" for Windows)."
          },
          {
            "type": "p",
            "text": "This is how to access a web page in Mac:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/run-a-website-locally-with-html/open-html-on-mac-finder.gif"
          },
          {
            "type": "p",
            "text": "If you double-click the index.html file, it should open on your default browser window. Boom, you just opened a web page!"
          },
          {
            "type": "p",
            "text": "Note: This page is not on the internet; you can tell by looking at the file path in the browser. It exists locally on your computer."
          },
          {
            "type": "p",
            "text": "Every time you make a change to your index.html file, just save the file and then refresh the browser window to render the updated page."
          },
          {
            "type": "p",
            "text": "You can also use keyboard shortcuts for this:"
          },
          {
            "type": "p",
            "text": "To open a page in Windows:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/run-a-website-locally-with-html/open-html-in-windows-explorer.png"
          },
          {
            "type": "p",
            "text": "Like with the Mac Finder, double-click the index.html file and a browser window should open the page."
          }
        ]
      },
      {
        "checkpoint": "# Option B: Live Server (VS Code Extension)",
        "content": [
          {
            "type": "p",
            "text": "Visual Studio Code (VS Code) is a popular code editor for building websites. It uses extensions for added functionality, including running HTML locally!"
          },
          {
            "type": "h3-li",
            "h3": "## VS Code Overview",
            "li": [
              "Windows: ctrl + shift + x",
              "Mac: command + shift + x"
            ]
          },
          {
            "type": "p",
            "text": "If you're not familiar with VS Code, or you don't have it installed, you can follow the steps in this tutorial to do so."
          },
          {
            "type": "p",
            "text": "After installing, launch VS Code by double-clicking the icon. When the window opens, there is a group of icons located on the left-side (highlighted below):"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/run-a-website-locally-with-html/vs-code-activity-bar.png"
          },
          {
            "type": "p",
            "text": "This is known as the \"Activity Bar.\" The topmost icon is the \"Explorer\", where you can create files and folders for your projects! Let's select this icon and then create a new index.html file (if needed)."
          },
          {
            "type": "p",
            "text": "Extensions give us special abilities such as code highlighting and formatting. Thousands of extensions are available for install via the \"Extensions\" icon in the Activity Bar:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/run-a-website-locally-with-html/vs-code-extensions.gif"
          },
          {
            "type": "p",
            "text": "Alternatively, we can access with \"View\" > \"Extensions\" or keyboard shortcuts:"
          },
          {
            "type": "p",
            "text": "Let's now explore one that supports HTML!"
          },
          {
            "type": "h3-li",
            "h3": "## Live Server",
            "li": []
          },
          {
            "type": "p",
            "text": "A popular extension for running local HTML is the Live Server."
          },
          {
            "type": "p",
            "text": "When installed, it can start a new localhost server for an .html file via a \"Go Live\" button near the bottom-right corner of the VS Code window:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/run-a-website-locally-with-html/live-server-button.png"
          },
          {
            "type": "p",
            "text": "This button appears while viewing an .html file on VS Code. When clicked, a new localhost server is started and can be accessed at an address such as 127.0.0.01.5501/filename.html."
          },
          {
            "type": "p",
            "text": "If you edit and save the file while the server is still running, the browser automatically refreshes the page:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/run-a-website-locally-with-html/live-server-demo.gif"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congrats! You learned two ways to run and preview local HTML. Whether you're using your file manager or a VS code extension, you have options for your next project!"
          }
        ]
      }
    ]
  },
  {
    "title": "Predict Prices with Linear Regression",
    "link": "https://www.codedex.io/projects/predict-home-prices-with-python-and-linear-regression",
    "tags": [
      "DS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/linear-regression.jpg",
    "prerequisite": {
      "Prerequisites:": "Python fundamentals",
      "Versions:": "Anaconda Online",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Have you ever wanted to know how much an apartment or house costs to rent or own in your area? How do machine learning and statistics work with a powerful programming language like Python?"
          },
          {
            "type": "p",
            "text": "Machine learning is a major field that lets computers take in data and learn patterns to make predictions and decisions. We will be using Python to learn about one of the fundamentals of predictive modeling in machine learning and, more specifically, linear regression. To help us out, we will use a few data science libraries:"
          }
        ]
      },
      {
        "checkpoint": "# Linear Regression",
        "content": [
          {
            "type": "p",
            "text": "In statistics, linear regression is used to model relationships between independent x variables (e.g., house sizes) and a dependent y variable (e.g., house prices) by fitting a linear equation to observed data. Put simply, we are drawing a straight line through a dataset to map out and predict. In data science, linear regression is widely used for tasks such as predicting sales, analyzing economic trends, and understanding the impact of variables on an outcome."
          },
          {
            "type": "p",
            "text": "In this tutorial, we will create a linear regression model to predict house prices based on house sizes. Using a scatterplot of test data, the model will form a relationship between the two variables and then makes predictions."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/predict-home-prices-with-python-and-linear-regression/data.gif"
          }
        ]
      },
      {
        "checkpoint": "# Getting Set Up with Anaconda",
        "content": [
          {
            "type": "p",
            "text": "This tutorial will show you how to use predictive modeling on the Anaconda Online editor. We are eliminating the need for local installations. Anaconda Online uses integrated Jupyter Notebooks and powerful package management that make running complex programs, including linear regression, super easy."
          },
          {
            "type": "p",
            "text": "Note: To use the editor, make sure you've signed up for a free account."
          },
          {
            "type": "p",
            "text": "Begin by opening your web browser and visiting Anaconda Online."
          },
          {
            "type": "p",
            "text": "Next, sign into your account to get to the homepage. Then, select \"Launch Notebook\" under the \"Code Online\" section:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/predict-home-prices-with-python-and-linear-regression/anaconda.png"
          }
        ]
      },
      {
        "checkpoint": "# Our Tools of Choice",
        "content": [
          {
            "type": "p",
            "text": "Libraries! Gotta love 'em. In this tutorial, we will be using the following Python libraries for data analysis, data visualization, and machine learning:"
          },
          {
            "type": "p",
            "text": "If you ever wondered how ‚Äúprediction‚Äù charts are created in Python, the odds are that 1 of these 4 tools was involved. They make it easy for beginners to unlock the power of Python in data science."
          },
          {
            "type": "p",
            "text": "After launching Notebook on Anaconda, open a new project:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/predict-home-prices-with-python-and-linear-regression/notebook.png"
          }
        ]
      },
      {
        "checkpoint": "# Getting Started",
        "content": [
          {
            "type": "p",
            "text": "In this tutorial, we will be using a data set that compares house size and house prices of properties recently sold in Brooklyn's Dumbo neighborhood to predict the cost of houses based on size."
          },
          {
            "type": "p",
            "text": "Note: This data was gathered from Zillow."
          },
          {
            "type": "p",
            "text": "To get started, let's import the libraries. Remember that since you are using an online emulator there is no need for local installations. This is a simple setup for linear regression using the scikit-learn library."
          },
          {
            "type": "pre",
            "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression"
          },
          {
            "type": "p",
            "text": "For a quick refresher, we imported the following libraries:"
          },
          {
            "type": "p",
            "text": "Next, let's import some data. You will need to download the data set and upload it to Anaconda."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/predict-home-prices-with-python-and-linear-regression/file.png"
          },
          {
            "type": "p",
            "text": "This CSV file contains 59 pairs of data points. After uploading it, let's add the following code:"
          },
          {
            "type": "pre",
            "text": "# Load data from CSV file\ndata = pd.read_csv('home_dataset.csv')\n \n# Extract features and target variable\nhouse_sizes = data ['HouseSize'].values\nhouse_prices = data['HousePrice'].values"
          },
          {
            "type": "p",
            "text": "We are using pd.read_csv() to read the CSV file. Next, we are extracting the values corresponding to the features on the data sheet. In this case, the data from the column named ‚ÄúHouseSize‚Äù is being added to the house_size variable."
          },
          {
            "type": "p",
            "text": "Let's now get started on plotting the data via the plt object from Matplotlib."
          },
          {
            "type": "p",
            "text": "First, we use plt.scatter() to create a scatter plot of house prices vs. house size. Next, we assign a title and labels for the x- and y-axes. Then, we use plt.show() to display the graph."
          },
          {
            "type": "pre",
            "text": "# Visualize the data\nplt.scatter(house_sizes, house_prices, marker ='o', color ='blue')\nplt.title('House Prices vs. House Size')\nplt.xlabel('House Size (sq.ft)')\nplt.ylabel('House Price ($)')\nplt.show()"
          },
          {
            "type": "p",
            "text": "At this point, we can run our code to see this scatter plot by selecting the \"run\" button at the top of the notebook file:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/predict-home-prices-with-python-and-linear-regression/run-button.png"
          }
        ]
      },
      {
        "checkpoint": "# Train Test",
        "content": [
          {
            "type": "p",
            "text": "Now that we have extracted our data and plotted on a graph, it's time for the linear regression part."
          },
          {
            "type": "p",
            "text": "A train-test splits the generated data into training and testing sets using the train_test_split() function from Sklearn."
          },
          {
            "type": "p",
            "text": "The train test split is a model validation procedure commonly used in predictive machine learning to simulate how a model will work with new/unknown data. It is commonly used with large data sets or when you need a quick estimate."
          },
          {
            "type": "p",
            "text": "Let's now add the following:"
          },
          {
            "type": "pre",
            "text": "# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = train_test_split(house_sizes, house_prices, test_size=0.2, random_state=42)"
          },
          {
            "type": "p",
            "text": "The code above splits the data 80/20:"
          },
          {
            "type": "p",
            "text": "In this next step, we are creating and training the model to make predictions with the following code:"
          },
          {
            "type": "pre",
            "text": "# Reshape the data for NumPy\nx_train = x_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)"
          },
          {
            "type": "p",
            "text": "After preparing our data for Numpy with .reshape(), we can create the linear regression model with LinearRegression() and train it using our x_train and y_train data."
          }
        ]
      },
      {
        "checkpoint": "# Predicting",
        "content": [
          {
            "type": "p",
            "text": "The model we just trained will now be able to make predictions on the test set x-test and y-test. The results are stored in the predictions variable."
          },
          {
            "type": "p",
            "text": "We are now going to plot our results from our predictive modeling:"
          },
          {
            "type": "pre",
            "text": "# Predict prices for the test set\npredictions = model.predict(x_test)\n\n# Visualize the predictions\nplt.scatter(x_test, y_test, marker='o', color='blue', label='Actual Prices')\nplt.plot(x_test, predictions, color='red', linewidth=2, label='Predicted Prices')\nplt.title('Dumbo Property Price Prediction with Linear Regression')\nplt.xlabel('House Size (sq.ft)')\nplt.ylabel('House Price (millions $)')\nplt.legend()\nplt.show()"
          },
          {
            "type": "p",
            "text": "With our plt object, we use a scatter plot to visualize the actual and predicted prices. Selecting the \"run\" button will show the results with blue dots and a red regression line:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/predict-home-prices-with-python-and-linear-regression/graph.png"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "That's it, you have now officially trained and visualized a predictive modeling algorithm!"
          },
          {
            "type": "p",
            "text": "To take your skills to the next level, consider sourcing data and utilizing linear regression for visualization. Kaggle is a great place to find data sets that have already been proven but you can also import any data. You can use linear regression to predict so many things:"
          },
          {
            "type": "p",
            "text": "The possibilities are endless! Get creative and remember to format your data for easy access."
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "üëÄ Source code for this tutorial.",
              "üìä Kaggle Datasets: Explore diverse datasets for various machine learning projects.",
              "ü§ñ Scikit-Learn Documentation: Dive into detailed information on machine learning.",
              "üìñ Pandas Documentation: Learn more about data manipulation and analysis.",
              "üìà Matplotlib Documentation: Explore the Matplotlib documentation for creating captivating visualizations."
            ]
          },
          {
            "type": "p",
            "text": "For additional learning and exploration, here are some resources to deepen your understanding:"
          }
        ]
      }
    ]
  },
  {
    "title": "VR Solar System with A-Frame",
    "link": "https://www.codedex.io/projects/create-a-vr-solar-system-with-a-frame",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/create-a-vr-solar-system-with-a-frame.png",
    "prerequisite": {
      "Prerequisites:": "HTML/CSS, JavaScript",
      "Versions:": "HTML5, CSS3, ES6+ (JavaScript)",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "One of my most cherished and formative memories was our 4th grade field trip to the local planetarium. In advance of the trip, we had a whole 1-month unit on our solar system. I remember learning the basic facts on other planets in the solar system (at that time, Pluto was still a planet), about other galaxies, and the life cycle of a star. Before going to the planetarium, we each built our own model of the solar system like the image you see below!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-vr-solar-system-with-a-frame/solar-system-model.png"
          },
          {
            "type": "p",
            "text": "We're bringing back the nostalgia of crafting solar system models by going virtual!"
          },
          {
            "type": "p",
            "text": "In this tutorial, you'll learn how to create a virtual reality solar system using A-frame."
          },
          {
            "type": "p",
            "text": "If you google ‚ÄúA-Frame‚Äù you may find pictures of houses with sloped roofs and unique window designs. I'd love to retire in one of these someday and live my best outdoorsy life."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-vr-solar-system-with-a-frame/a-frame-image.png"
          },
          {
            "type": "p",
            "text": "We'll be focusing on this A-Frame, which is an open-source web framework for creating and building virtual reality (VR) experiences."
          },
          {
            "type": "p",
            "text": "With basic HTML and JavaScript knowledge, A-Frame allows you to easily build immersive VR experiences. You could build anything, ranging from interactive museum exhibits to escape rooms and everything in between. The possibilities are truly endless!"
          },
          {
            "type": "p",
            "text": "By the end, our finished solar system will look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-vr-solar-system-with-a-frame/finished-solar-system.gif"
          },
          {
            "type": "p",
            "text": "Let's get started!"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "h3-li",
            "h3": "## VS Code Setup",
            "li": [
              "<a-scene> is the container element for our entire VR experience.",
              "<a-sky> is the A-Frame element for defining a sky."
            ]
          },
          {
            "type": "p",
            "text": "For this tutorial, we'll be using Visual Studio Code (VS Code) as our code editor. You can download VS Code directly from its website."
          },
          {
            "type": "p",
            "text": "Then, let's open VS Code and create a new HTML file:"
          },
          {
            "type": "p",
            "text": "Let's open the index.html file and enter the following starter code:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html>\n  <head></head>\n  <body></body>\n</html>"
          },
          {
            "type": "p",
            "text": "Next, make sure you've downloaded the Live Server extension for VS Code."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-vr-solar-system-with-a-frame/live-server.png"
          },
          {
            "type": "p",
            "text": "At various times, after saving changes made in our index.html file, we will use Live Server to see what our solar system looks like thus far. It can be started with the \"Go Live\" button found near the bottom-right of the VS Code window:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-vr-solar-system-with-a-frame/go-live-button.png"
          },
          {
            "type": "p",
            "text": "Let's now get started in our index.html file!"
          },
          {
            "type": "h3-li",
            "h3": "## Include the A-Frame Library",
            "li": [
              "<a-scene> is the container element for our entire VR experience.",
              "<a-sky> is the A-Frame element for defining a sky."
            ]
          },
          {
            "type": "p",
            "text": "As mentioned before, we will be working with A-frame web to build our VR solar system experience. We need to include its library in our index.html file. Add the following inside the <head> element:"
          },
          {
            "type": "pre",
            "text": "<head>\n  <script src=\"https://aframe.io/releases/1.2.0/aframe.min.js\"></script> \n</head>"
          },
          {
            "type": "h3-li",
            "h3": "## Create a Textures Folder",
            "li": [
              "<a-scene> is the container element for our entire VR experience.",
              "<a-sky> is the A-Frame element for defining a sky."
            ]
          },
          {
            "type": "p",
            "text": "We are going to use image files to represent the textures (or appearance) of the night sky, Sun, and planets of our solar system!"
          },
          {
            "type": "p",
            "text": "Under the same directory as your index.html file, create a new planet_textures/ folder. Next, you can find the texture files for our system here. Go ahead and download each file and add them to your planet_textures/ folder."
          }
        ]
      },
      {
        "checkpoint": "# Start with the Sky",
        "content": [
          {
            "type": "p",
            "text": "We're going to start with creating a background sky. Inside the <body> element of your index.html* file, add the following code:"
          },
          {
            "type": "pre",
            "text": "<body>\n  <a-scene>\n    <a-sky src=\"planet_textures/nightsky.jpeg\"></a-sky>\n  </a-scene>\n</body>"
          },
          {
            "type": "p",
            "text": "In this snippet, you'll see:"
          },
          {
            "type": "p",
            "text": "The src attribute within the <a-sky> element specifies the image file path. Case sensitivity matters, so make sure the file name and extension match exactly with the image you saved."
          },
          {
            "type": "p",
            "text": "Preview your scene by saving the HTML file and opening it in your web browser. The image should be displayed as the background sky in your VR scene."
          },
          {
            "type": "p",
            "text": "Note: If you don't see the image, double-check the image path and file names for any potential errors."
          },
          {
            "type": "p",
            "text": "Great work on adding your first A-Frame element! üåå"
          }
        ]
      },
      {
        "checkpoint": "# Add the Sun",
        "content": [
          {
            "type": "p",
            "text": "Next, we'll add the first celestial body and star (no pun intended) of our virtual solar system: the Sun. For each celestial body, we'll be:"
          },
          {
            "type": "h3-li",
            "h3": "## A-Frame Element Creation",
            "li": [
              "rotation = \"0 0 0\" sets the initial rotation and ensures that the Sun begins its animation with no prior rotation, thus creating a clean and consistent starting point..",
              "The animation attribute rotates the Sun with the following sub-attributes:\nproperty: rotation indicates that the Sun should rotate.\nto: 0 360 0 specifies the final rotation angles in degrees along the x, y, and z axes. This means that the Sun completes a full 360-degree rotation around the y-axis.\nloop: true creates a continuous, cyclic motion and ensures the rotation animation repeats indefinitely.\ndur: 22224 sets the duration of the animation in milliseconds. Here, the Sun takes around 22 seconds to complete one full rotation. Adjusting this value will change the speed of the rotation: a longer duration slows down the rotation. You can change this to match and scale how the Sun rotates relative to other planets."
            ]
          },
          {
            "type": "p",
            "text": "Start by creating the Sun using <a-sphere> element with an id of ‚Äúsun‚Äù:"
          },
          {
            "type": "pre",
            "text": "<a-sphere id=\"sun\"> </a-sphere> "
          },
          {
            "type": "p",
            "text": "Note: This element goes after the <a-sky> element we added in the previous section."
          },
          {
            "type": "h3-li",
            "h3": "## A-Frame Position",
            "li": [
              "rotation = \"0 0 0\" sets the initial rotation and ensures that the Sun begins its animation with no prior rotation, thus creating a clean and consistent starting point..",
              "The animation attribute rotates the Sun with the following sub-attributes:\nproperty: rotation indicates that the Sun should rotate.\nto: 0 360 0 specifies the final rotation angles in degrees along the x, y, and z axes. This means that the Sun completes a full 360-degree rotation around the y-axis.\nloop: true creates a continuous, cyclic motion and ensures the rotation animation repeats indefinitely.\ndur: 22224 sets the duration of the animation in milliseconds. Here, the Sun takes around 22 seconds to complete one full rotation. Adjusting this value will change the speed of the rotation: a longer duration slows down the rotation. You can change this to match and scale how the Sun rotates relative to other planets."
            ]
          },
          {
            "type": "p",
            "text": "Next, we want to determine the spatial location of the Sun within the virtual environment:"
          },
          {
            "type": "pre",
            "text": "<a-sphere id=\"sun\" position=\"0 1.25 -5\"></a-sphere>"
          },
          {
            "type": "p",
            "text": "The position attribute sets the Sun's initial position in our virtual space using a three-dimensional coordinate system (x, y, z). In this example, the Sun is positioned at coordinate (0, 1.25, -5), which moves the Sun slightly above the center and closer to the viewer."
          },
          {
            "type": "p",
            "text": "Note: When you're first starting out, it's helpful to experiment and acclimate yourself to the coordinate system by ‚Äúplugging and chugging‚Äù different numbers, observing how they position the element and finding what best suits your vision."
          },
          {
            "type": "h3-li",
            "h3": "## A-Frame Size",
            "li": [
              "rotation = \"0 0 0\" sets the initial rotation and ensures that the Sun begins its animation with no prior rotation, thus creating a clean and consistent starting point..",
              "The animation attribute rotates the Sun with the following sub-attributes:\nproperty: rotation indicates that the Sun should rotate.\nto: 0 360 0 specifies the final rotation angles in degrees along the x, y, and z axes. This means that the Sun completes a full 360-degree rotation around the y-axis.\nloop: true creates a continuous, cyclic motion and ensures the rotation animation repeats indefinitely.\ndur: 22224 sets the duration of the animation in milliseconds. Here, the Sun takes around 22 seconds to complete one full rotation. Adjusting this value will change the speed of the rotation: a longer duration slows down the rotation. You can change this to match and scale how the Sun rotates relative to other planets."
            ]
          },
          {
            "type": "p",
            "text": "Now that we've got the Sun where we want it to be, let's change the size of our <a-sphere> element with the radius attribute:"
          },
          {
            "type": "pre",
            "text": "<a-sphere id=\"sun\" position=\"0 1.25 -5\" radius =\"3\"></a-sphere> "
          },
          {
            "type": "p",
            "text": "We're using 3 as the value in this tutorial, since we want it to be large relative to the other planets, but feel free to explore different scales to create your solar system."
          },
          {
            "type": "h3-li",
            "h3": "## A-Frame Texture",
            "li": [
              "rotation = \"0 0 0\" sets the initial rotation and ensures that the Sun begins its animation with no prior rotation, thus creating a clean and consistent starting point..",
              "The animation attribute rotates the Sun with the following sub-attributes:\nproperty: rotation indicates that the Sun should rotate.\nto: 0 360 0 specifies the final rotation angles in degrees along the x, y, and z axes. This means that the Sun completes a full 360-degree rotation around the y-axis.\nloop: true creates a continuous, cyclic motion and ensures the rotation animation repeats indefinitely.\ndur: 22224 sets the duration of the animation in milliseconds. Here, the Sun takes around 22 seconds to complete one full rotation. Adjusting this value will change the speed of the rotation: a longer duration slows down the rotation. You can change this to match and scale how the Sun rotates relative to other planets."
            ]
          },
          {
            "type": "p",
            "text": "Similar to the night sky, find a Sun texture image and add it as a src attribute:"
          },
          {
            "type": "pre",
            "text": "<a-sphere id=\"sun\" position=\"0 1.25 -5\" radius = \"3\" src=\"planet_textures/sun.jpeg\"></a-sphere>"
          },
          {
            "type": "h3-li",
            "h3": "## A-Frame Animation",
            "li": [
              "rotation = \"0 0 0\" sets the initial rotation and ensures that the Sun begins its animation with no prior rotation, thus creating a clean and consistent starting point..",
              "The animation attribute rotates the Sun with the following sub-attributes:\nproperty: rotation indicates that the Sun should rotate.\nto: 0 360 0 specifies the final rotation angles in degrees along the x, y, and z axes. This means that the Sun completes a full 360-degree rotation around the y-axis.\nloop: true creates a continuous, cyclic motion and ensures the rotation animation repeats indefinitely.\ndur: 22224 sets the duration of the animation in milliseconds. Here, the Sun takes around 22 seconds to complete one full rotation. Adjusting this value will change the speed of the rotation: a longer duration slows down the rotation. You can change this to match and scale how the Sun rotates relative to other planets."
            ]
          },
          {
            "type": "p",
            "text": "Lastly, let's bring the Sun to life by adding a rotation. Use the rotation attribute to specify the rotation angles along the x, y, and z axes:"
          },
          {
            "type": "pre",
            "text": "<a-sphere id=\"sun\" position=\"0 1.25 -5\" radius =\"3\" src=\"planet_textures/sun.jpeg\" rotation =\"0 0 0\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 22224\"></a-sphere>"
          },
          {
            "type": "p",
            "text": "Let's break down each of the properties in the rotation animation:"
          },
          {
            "type": "p",
            "text": "Note: There are other A-Frame animation properties, such as animating the scale, transparency, or position of an element. You can read more about it with A-Frame's documentation."
          }
        ]
      },
      {
        "checkpoint": "# Repeating With Other Planets",
        "content": [
          {
            "type": "p",
            "text": "Now that we've successfully animated the Sun, it's your turn to bring the rest of the solar system to life! Repeat the steps we've taken for the Sun, adjust the size, position, rotation values, and texture for each planet."
          },
          {
            "type": "p",
            "text": "You can also refer to the table below with information derived from NASA's databases with some A-Frame suggested values to help with some of your customizable values:"
          },
          {
            "type": "p",
            "text": "For example, if we want to add Mercury with the information from the table above:"
          },
          {
            "type": "pre",
            "text": "<a-sphere id=\"mercury\" position=\"3.9 1.25 -5\" radius=\"0.1\" src=\"planet_textures/mercury.jpeg\" rotation=\"0 0 0\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 58650\"></a-sphere>"
          },
          {
            "type": "p",
            "text": "Note: Don't forget to add a fun image to the src attribute for each planet!"
          },
          {
            "type": "p",
            "text": "Your finished solar system should now look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/create-a-vr-solar-system-with-a-frame/finished-solar-system.gif"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! üéä"
          },
          {
            "type": "p",
            "text": "You've reached the end of the tutorial and built your very own VR solar system using A-Frame!"
          },
          {
            "type": "p",
            "text": "As a potential extension, my 4th-grade teacher asked us to add one non-planet in our physical models so I'm going to ask you to do the same in this tutorial. The possibilities are endless and some potential ideas are:"
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": []
      }
    ]
  },
  {
    "title": "Debug Your Web App in VS Code",
    "link": "https://www.codedex.io/projects/debug-your-web-app-in-vs-code",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/debug-card.png",
    "prerequisite": {
      "Prerequisites:": "JavaScript fundamentals",
      "Versions:": "VS Code 1.84",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "In this tutorial, you will learn to set up Visual Studio Code (VS Code) for debugging a todo list JavaScript project."
          },
          {
            "type": "p",
            "text": "At some point, programmers of all levels will spend time debugging the code that they write. The main difference is that more seasoned programmers can not only debug code effectively, but also create debuggable code. This is why learning to debug your code is arguably one of the most crucial steps in becoming a programmer."
          },
          {
            "type": "h3-li",
            "h3": "## What is Debugging?",
            "li": [
              "addTodo()",
              "renderTodos()",
              "generateTodoHTML()",
              "completeTodo()",
              "validateTodo()"
            ]
          },
          {
            "type": "p",
            "text": "Debugging is the systematic process of identifying and resolving issues within code. It's an extensive field where the specifics can vary greatly depending on the code in question. Generally, the more abstract the code, the more abstract and complex the debugging process can be. Although the goal for any programmer is to create code that is simple and easy to comprehend, achieving this simplicity is more an ideal than a routine practice."
          },
          {
            "type": "p",
            "text": "For this project, \"debugging\" will involve a detailed review of code, inspecting each line to uncover any errors that might lead to unexpected behavior in the application. Fortunately, VS Code provides a highly convenient debugger that we will be using to assist with this task."
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "p",
            "text": "In order for VS Code to debug the JavaScript code, you will have to either launch the app through VS Code's built-in debugger, or attach it. In this project, we will go over what both of these terms mean."
          },
          {
            "type": "p",
            "text": "First, make sure you see the extension in VS Code. If it isn't already in your Activity Bar, then you can right-click your Activity Bar, and then select ‚ÄúRun and Debug.‚Äù You can also press ctrl+shift+d to see the extension."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/activity-bar-example.png"
          },
          {
            "type": "p",
            "text": "After clicking into the extension, you should see the following options:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/activity-bar-example-2.png"
          },
          {
            "type": "p",
            "text": "Now that your debugger is at a good state, you can refer to the project's repo and clone the development branch so that you can use the app for this project."
          },
          {
            "type": "pre",
            "text": "git clone -b development https://github.com/mdwiltfong/codedex_todo.git"
          }
        ]
      },
      {
        "checkpoint": "# Beginning the Project",
        "content": [
          {
            "type": "h3-li",
            "h3": "## Project Goals",
            "li": [
              "addTodo()",
              "renderTodos()",
              "generateTodoHTML()",
              "completeTodo()",
              "validateTodo()"
            ]
          },
          {
            "type": "p",
            "text": "In order to learn about debugging, we'll need buggy code. The repo contains a todo app with a bug inside of the script.js file. Specifically, users can set up dates for todo items but they can even enter dates from the past, and this shouldn't be possible."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/todo-app-error.png"
          },
          {
            "type": "p",
            "text": "Ideally, the app should alert the user of this invalid data."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/todo-app-desired-behaviour.png"
          },
          {
            "type": "h3-li",
            "h3": "## App Breakdown",
            "li": [
              "addTodo()",
              "renderTodos()",
              "generateTodoHTML()",
              "completeTodo()",
              "validateTodo()"
            ]
          },
          {
            "type": "p",
            "text": "The script.js file consists of five functions:"
          },
          {
            "type": "p",
            "text": "The main functions we will be focusing on are the addTodo() and validateTodo() functions."
          },
          {
            "type": "p",
            "text": "When a user creates a new item, the addTodo() function adds a new todo to the todos array. It does this by obtaining a variety of values from the event object."
          },
          {
            "type": "p",
            "text": "Note: When a form is submitted, the page reloads by default. We want to prevent this so the todos we add with addTodo() aren't lost. Therefore, we used event.preventDefault() to stop this default behavior ."
          },
          {
            "type": "p",
            "text": "A validateCallback parameter is used as a callback function in addTodo() to ensure the new todo item can be added without error. Since validateTodo() is the only function passed into addTodo() (line 84 in script.js), validateTodo() and the validateCallback can be thought of as being the same."
          },
          {
            "type": "p",
            "text": "In order to prevent the user from entering incorrect data, the app uses validateTodo() to perform a variety of checks on the information the user is submitting. Notice that there is an if-statement that specifically checks if todo.todoDate is less than Date.now()."
          },
          {
            "type": "p",
            "text": "With this basic understanding of the app, we can finally jump into debugging."
          },
          {
            "type": "h3-li",
            "h3": "## Launch the App",
            "li": [
              "\"Pause\"",
              "\"Step Over\"",
              "\"Step Into\"",
              "\"Step Out\"",
              "\"Restart\"",
              "\"Stop\""
            ]
          },
          {
            "type": "p",
            "text": "A common strategy to debugging code is using breakpoints to tell the code where you would like to pause the execution of it. This allows you to inspect the state of the application at that point in time. In VS Code, you can set a breakpoint by clicking on the line number of the line you want to pause the code at. You can also set a breakpoint by right-clicking the line number and selecting \"Add Breakpoint.\""
          },
          {
            "type": "p",
            "text": "More importantly, you will have to launch the app with VS Code's debugger. With this app, it's as simple as clicking a button! First, open index.html and then click on the \"Run and Debug\" button in the \"Run and Debug\" extension. Your screen should look similar to the image below:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/run-and-debug.png"
          },
          {
            "type": "p",
            "text": "Once you click on the \"Run and Debug\" button, the app will open up in your computer's default browser."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/todo-app-form.png"
          },
          {
            "type": "p",
            "text": "After the app is launched, you will see the debugger widget appear in VS Code."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/debugger-widget.png"
          },
          {
            "type": "p",
            "text": "The widget contains a series of buttons which we will use. From left to right, we have:"
          },
          {
            "type": "p",
            "text": "Keep in mind that the \"Pause\" button becomes a \"Play\" button (a green arrow) when the debugger is at a breakpoint, and the app will stay at this point until you press \"Play.\" We will be exploring \"Step Over\" and \"Step Into\" in this tutorial."
          },
          {
            "type": "h3-li",
            "h3": "## Debugging Todo Date",
            "li": []
          },
          {
            "type": "p",
            "text": "With our app launched in the debugger, and a basic understanding of the issue, let's begin debugging!"
          },
          {
            "type": "p",
            "text": "Let's add a breakpoint at line 73 in script.js. Then, let's create a todo with a date from the past. VS Code should pause the app at the breakpoint, and allow you to see the values of the variables until that point."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/todo-string.png"
          },
          {
            "type": "p",
            "text": "The app is indeed picking up the date the user entered, but it is assigning a string! Considering that Date.now() returns a number, the app is expecting todo.todoDate to be a number as well. This would explain why the if-statement is not picking up this error. The best way to solve this is through the Date object."
          },
          {
            "type": "p",
            "text": "Date.now() specifically returns the date in \"epoch time\", or the number of seconds since January 1st, 1970. If we passed in the date as a string into the Date object, we can take advantage of the various helper functions in Date to convert the string into epoch time, like with the .getTime() method."
          },
          {
            "type": "p",
            "text": "This fix will take place in two places. First, in addTodo(), let's create a new Date object and pass event.target[2].value into it:"
          },
          {
            "type": "pre",
            "text": "function addTodo(event, todos, validateCallback) {\n  event.preventDefault();\n  const todoTitle = event.target[0].value;\n  const todoNumOfPeople = event.target[1].value;\n  const todoDate = new Date(event.target[2].value);\n  const todoDescription = event.target[3].value;\n  const todo = {\n    todoTitle,\n    todoNumOfPeople,\n    todoDate,\n    todoDescription,\n  };\n  errors = validateCallback(todo, errors);\n  if (errors.length > 0) {\n    alert(\"Uh oh! There are some errors in your form \\n\" + errors.join(\"\\n\"));\n    return todos;\n  }\n  const newTodos = [...todos, todo];\n  return newTodos;\n}"
          },
          {
            "type": "p",
            "text": "Then, in validateTodo(), let's update the if-statement that checks if todo.todoDate is less than Date.now() by using the .getTime() method:"
          },
          {
            "type": "pre",
            "text": "function validateTodo(todo, errors) {\n  errors = [];\n  if (todo.todoTitle.length < 5) {\n    errors.push(\"Todo title must be at least 5 characters long\");\n  }\n  if (todo.todoNumOfPeople < 1) {\n    errors.push(\"Number of people must be greater than 0\");\n  }\n  if (todo.todoDate.getTime() < Date.now()) {\n    errors.push(\"Date must be in the future\");\n  }\n  if (todo.todoDescription.length < 10) {\n    errors.push(\"Description must be at least 10 characters long\");\n  }\n  return errors;\n}"
          },
          {
            "type": "p",
            "text": "With this fix in place, let's remove the breakpoint at line 73 (you can do this by clicking on the red dot itself) and then test whether the alert box will appear if we enter a todo date in the past."
          },
          {
            "type": "p",
            "text": "Note: Make sure to restart the debugger by opening index.html first and then choosing \"Run and Debug\"."
          },
          {
            "type": "p",
            "text": "After confirming this, let's test what happens when the user adds no date at all. As in, they leave yyyy-mm-dd in the input field. You should see the following in the app."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/invalid-date-error.png"
          },
          {
            "type": "p",
            "text": "This isn't right! Let's put a breakpoint back at line 73 and recreate this scenario in the app to see what's happening."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/todo-invalid-date.png"
          },
          {
            "type": "p",
            "text": "As we can see on the left hand side, todo.todoDate is being assigned a value of Invalid Date. This is a hint that something is not being correctly passed into new Date() in addTodo(). Let's add a breakpoint at line 20 in script.js to see what's being passed into new Date() and then recreate the scenario that is causing the bug. This breakpoint is a little more involved than the others, mainly because the event object is multi-layered."
          },
          {
            "type": "p",
            "text": "To see what event.target[2].value equals, you can place your mouse over .target[2] and a modal will appear. This modal represents .target. If you access the third element (2nd index) in the .target array, and then search for the .value property, you will see the app is passing an empty string."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/empty-string-value.gif"
          },
          {
            "type": "p",
            "text": "Let's resolve this by adding another if-statement in validateTodo() that checks if todo.todoDate is equal to \"Invalid Date\":"
          },
          {
            "type": "pre",
            "text": "function validateTodo(todo, errors) {\n  errors = [];\n  if (todo.todoTitle.length < 5) {\n    errors.push(\"Todo title must be at least 5 characters long\");\n  }\n  if (todo.todoNumOfPeople < 1) {\n    errors.push(\"Number of people must be greater than 0\");\n  }\n  if (todo.todoDate == \"Invalid Date\") {\n    errors.push(\"Date must be in the format of YYYY-MM-DD\");\n  }\n  if (todo.todoDate.getTime() < Date.now()) {\n    errors.push(\"Date must be in the future\");\n  }\n  if (todo.todoDescription.length < 10) {\n    errors.push(\"Description must be at least 10 characters long\");\n  }\n  return errors;\n}"
          },
          {
            "type": "p",
            "text": "With this fix, let's recreate the scenario where a user doesn't enter a date at all."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/debug-your-web-app-in-vs-code/invalid-date-solution.png"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Excellent! We not only identified the reason causing the bug, but we resolved it as well! At this point, you have learned how to use VS Code to debug web apps using vanilla JavaScript, as well as generic debugging strategies that you can use in any other app."
          },
          {
            "type": "p",
            "text": "If you are interested in learning more about debugging in VS Code, you can always refer to Microsoft's documentation."
          }
        ]
      }
    ]
  },
  {
    "title": "Weather with HTML, CSS, & JS",
    "link": "https://www.codedex.io/projects/view-weather-with-html-css-js",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/view-weather-with-html-css-js.png",
    "prerequisite": {
      "Prerequisites:": "HTML/CSS, JavaScript",
      "Versions:": "HTML5, CSS3, ES6+ (JavaScript)",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Have you ever wondered how some apps and sites let you check the weather?"
          },
          {
            "type": "p",
            "text": "In this tutorial, we're going build a web app that displays the current weather, using HTML, CSS, JavaScript, and a special ingredient... APIs!"
          },
          {
            "type": "p",
            "text": "With the power of Open Weather and a bit of coding magic, we can check our local weather forecast."
          },
          {
            "type": "p",
            "text": "By the end of this tutorial, you will have learned to:"
          },
          {
            "type": "p",
            "text": "The finished weather app will look and work like this:"
          },
          {
            "type": "p",
            "text": "Let's get started!"
          }
        ]
      },
      {
        "checkpoint": "# Step 1: Project Setup",
        "content": [
          {
            "type": "p",
            "text": "First, we'll need to create the folders and files that will hold the code for our project. Let's begin by opening a terminal and creating a new folder named weather-app using the mkdir command. Then, go into this folder by using the cd command:"
          },
          {
            "type": "pre",
            "text": "mkdir weather-app\ncd weather-app\ntouch index.html styles.css script.js"
          },
          {
            "type": "p",
            "text": "This will create the following files in the weather-app folder:"
          },
          {
            "type": "p",
            "text": "We will return to these files later on. But for now, let's head over to OpenWeather!"
          }
        ]
      },
      {
        "checkpoint": "# Step 2: Get API Key From OpenWeather",
        "content": [
          {
            "type": "p",
            "text": "OpenWeather provides several APIs (or application programming interfaces) for fetching weather-related data."
          },
          {
            "type": "p",
            "text": "If you haven't already, you must create an OpenWeather account with a username, email, and password:"
          },
          {
            "type": "p",
            "text": "Note: You'll be sent a verification email; make sure to answer it!"
          },
          {
            "type": "p",
            "text": "Next, you'll be prompted to state what you want to do with OpenWeather's API."
          },
          {
            "type": "p",
            "text": "I recommend choosing \"Education/Science\" or \"Other\"."
          },
          {
            "type": "p",
            "text": "You should now be ready to view your API key! After creating a new account, a new key should be generated for you. Near the top right, select your username, followed by \"My API keys\" in the dropdown:"
          },
          {
            "type": "p",
            "text": "After confirming you have an active API key, let's move on to the next step!"
          }
        ]
      },
      {
        "checkpoint": "# Step 3: Write HTML",
        "content": [
          {
            "type": "p",
            "text": "It's time to start writing some code!"
          },
          {
            "type": "p",
            "text": "Let's return to our code editor and re-open the index.html file."
          },
          {
            "type": "p",
            "text": "Add the following HTML to start:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link href=\"styles.css\" rel=\"stylesheet\" />\n  <title>Weather App</title>\n</head>\n<body>\n  \n</body>\n</html>"
          },
          {
            "type": "p",
            "text": "Aside from the necessary <!DOCTYPE html> declaration, we've included a <link> element in the <head> to connect our HTML with our styles.css file (which we'll work on in the next step)."
          },
          {
            "type": "p",
            "text": "Next, let's add the following HTML inside the <body> element:"
          },
          {
            "type": "pre",
            "text": "<body>\n  <main>\n    <section id=\"weather-wrapper\">\n      <h1>Weather App</h1>\n      <div id=\"weather-search\">\n        <input id=\"search\" type=\"text\" placeholder=\"Search by city\" />\n        <input id=\"submit\" type=\"submit\" onclick=\"fetchWeather()\" value=\"Search\" />\n      </div>\n      <div id=\"weather-data\" style=\"display: none;\"></div>\n    </section>\n  </main>\n  <script src=\"script.js\"></script>\n</body>"
          },
          {
            "type": "p",
            "text": "The <main> element holds all of our app structure, and includes a <section> element with the following:"
          },
          {
            "type": "p",
            "text": "We also added a <script> element to connect our HTML with the script.js file."
          },
          {
            "type": "p",
            "text": "Note: The <script> element is written before the closing </body> tag to ensure all of the HTML is loaded and accessible to JavaScript."
          },
          {
            "type": "p",
            "text": "If we save the index.html file and open it on the browser, it should look like this:"
          },
          {
            "type": "p",
            "text": "It's looking pretty bare-bones right now. But not to worry! We'll take care of that in the next step."
          }
        ]
      },
      {
        "checkpoint": "# Step 4: Write CSS",
        "content": [
          {
            "type": "p",
            "text": "Let's add a little pizazz to our weather app by styling it with CSS!"
          },
          {
            "type": "p",
            "text": "For the most of this step, we will use plain CSS. However, we'll also use a fun layout model for CSS called Flexbox to help arrange our application content."
          },
          {
            "type": "p",
            "text": "Inside of our styles.css file, let's begin by adding the following:"
          },
          {
            "type": "pre",
            "text": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url(https://bit.ly/4bcK1Hc);\n  background-repeat: no-repeat;\n  background-size: cover;\n  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  height: 100vh;\n}"
          },
          {
            "type": "p",
            "text": "Here's what we did in the snippet above:"
          },
          {
            "type": "p",
            "text": "Next, we're gonna select the <main> element and add the following styles:"
          },
          {
            "type": "pre",
            "text": "main {\n  background-color: rgba(227, 193, 173, 0.85);\n  position: relative;\n  top: 30%;\n  border: 1px solid;\n  border-radius: 5px;\n  min-width: 540px;\n  max-width: 50%;\n  margin: auto;\n  padding: 2em;\n}\n\nh1 {\n  margin-bottom: 20px;\n}"
          },
          {
            "type": "p",
            "text": "We styled the <main> element with the following:"
          },
          {
            "type": "p",
            "text": "Lastly, we added some space below the h1 element with margin-bottom."
          },
          {
            "type": "p",
            "text": "Let's save our styles.css file. At this point, our rendered weather app should look like this:"
          },
          {
            "type": "p",
            "text": "Now, let's make the <input> elements appear larger to better match the <h1> heading above them. Select these elements with #search and #submit, and add the following:"
          },
          {
            "type": "pre",
            "text": "#search {\n  border-radius: 5px 0 0 5px;\n  border: none;\n  padding: 10px;\n  font-size: 16px;\n  width: 70%;\n  height: 42px;\n}\n\n#submit {\n  border-radius: 0 5px 5px 0;\n  padding: 10px;\n  font-size: 16px;\n  width: 5em;\n  cursor: pointer;\n}"
          },
          {
            "type": "p",
            "text": "Both of these elements get the same styles for padding, and font-size."
          },
          {
            "type": "p",
            "text": "The #search element gets a 70% width, as well as a height of 42px and no border."
          },
          {
            "type": "p",
            "text": "The #submit element gets a width of 5em, along with a cursor: pointer style that makes the arrow turn into a pointing hand while hovering above this element."
          },
          {
            "type": "p",
            "text": "Let's save styles.css and re-render the page:"
          },
          {
            "type": "p",
            "text": "Next, we're going to apply some CSS Flexbox to easily center-align the content in our weather app."
          },
          {
            "type": "p",
            "text": "Select the #weather-wrapper and #weather-search elements, and add the following:"
          },
          {
            "type": "pre",
            "text": "#weather-wrapper {\n  display: flex;\n}\n\n#weather-search {\n  display: flex;\n}"
          },
          {
            "type": "p",
            "text": "This turns the #weather-wrapper and #weather-search elements into flex containers. Therefore, their child elements become flex items that we can align with certain properties."
          },
          {
            "type": "p",
            "text": "Update these elements with the following:"
          },
          {
            "type": "pre",
            "text": "#weather-wrapper {\n  display: flex;\n  flex-direction: column;\n  place-items: center;\n  justify-content: space-between;\n}\n\n#weather-search {\n  display: flex;\n  width: 50%;\n}"
          },
          {
            "type": "p",
            "text": "By default, flex items are displayed in a row. But we changed this for the #weather-wrapper element by setting flex-direction to column."
          },
          {
            "type": "p",
            "text": "To center-align the items, we used the place-items property. We also made the #weather-search element half the width of its parent #weather-wrapper element."
          },
          {
            "type": "p",
            "text": "If we save the styles.css file again, the rendered page should look like this:"
          },
          {
            "type": "p",
            "text": "Excellent! Our app is coming together!"
          },
          {
            "type": "p",
            "text": "In the next step, we will code the JavaScript for our weather app. However, it will involve coming back to style our #weather-data element!"
          }
        ]
      },
      {
        "checkpoint": "# Step 5: Write JavaScript",
        "content": [
          {
            "type": "p",
            "text": "Remember the submit-type <input id=\"submit\" type=\"submit\" > element we created in the last step? It had an onclick attribute set to a function called fetchWeather()."
          },
          {
            "type": "p",
            "text": "In this final step, we are going to write this fetchWeather() function! Afterwards, when we type something and use the \"Search\" button, this function will activate every time."
          },
          {
            "type": "h3-li",
            "h3": "## Define Our Function",
            "li": [
              "We created a searchInput variable with the #search element's value, selected via document.getElementById().",
              "We also selected the #weather-data element, where our search result will appear.\nWhen we first made this element in Step 3, its display property was set to none. We changed this to block in the function so the fetched data can be seen.",
              "Lastly, we initialized an apiKey variable with a placeholder string. Make sure to replace this with your OpenWeather API Key (from Step 2)."
            ]
          },
          {
            "type": "p",
            "text": "Let's open our script.js file and start by defining a new fetchWeather() function:"
          },
          {
            "type": "pre",
            "text": "function fetchWeather() {\n\n}"
          },
          {
            "type": "p",
            "text": "This function takes no parameters. Next, let's create a few variables inside the function:"
          },
          {
            "type": "pre",
            "text": "function fetchWeather() {\n  let searchInput = document.getElementById(\"search\").value;\n  const weatherDataSection = document.getElementById(\"weather-data\");\n  weatherDataSection.style.display = \"block\";\n  const apiKey = \"REPLACE WITH YOUR API KEY\"; \n}"
          },
          {
            "type": "p",
            "text": "In the snippet above, we did the following:"
          },
          {
            "type": "p",
            "text": "Note: Never, ever share your API keys in public to prevent hacking and inappropriate use of API services. If you intend on pushing your tutorial code to a place like GitHub, replace the value of apiKey with a comment or empty string."
          },
          {
            "type": "p",
            "text": "Since we now have a variable representing the #weather-data element, let's add an if statement that displays a custom message for empty input with the innerHTML property of the weatherDataSection variable:"
          },
          {
            "type": "pre",
            "text": "if (searchInput == \"\") {\n  weatherDataSection.innerHTML = `\n  <div>\n    <h2>Empty Input!</h2>\n    <p>Please try again with a valid <u>city name</u>.</p>\n  </div>\n  `;\n  return;\n}"
          },
          {
            "type": "p",
            "text": "Note: Make sure this is done in the fetchWeather() function."
          },
          {
            "type": "p",
            "text": "Next, let's define two inner functions that will help us with getting our weather information."
          },
          {
            "type": "pre",
            "text": "function fetchWeather() {\n  // Previous code\n\n  async function getLonAndLat() {\n\n  }\n\n  async function getWeatherData(lon, lat) {\n\n  }\n}"
          },
          {
            "type": "p",
            "text": "We need these functions to use two separate APIs from OpenWeather:"
          },
          {
            "type": "p",
            "text": "You may have noticed that these functions have the async keyword in front of them. We'll be using the companion await keyword, along with the fetch() function, to ensure we get valid weather information each time."
          },
          {
            "type": "h3-li",
            "h3": "## Write getLonAndLat() Function",
            "li": [
              "data.weather[0].icon for an image representation of the current weather.",
              "data.name for the location/city.",
              "data.main.temp for the temperature (measured in Kelvins by default, hence the rounding).",
              "data.weather[0].description for a brief description of the current weather."
            ]
          },
          {
            "type": "p",
            "text": "First, let's write the code for the getLonAndLat() function that will use OpenWeather's GeoCoding API to return the longitude and latitude data based on our searchInput."
          },
          {
            "type": "p",
            "text": "We're only going to search by location. Therefore, the searchInput should be a string of a valid location or city name (e.g., \"Pittsburgh\" or \"Brooklyn, NY\")."
          },
          {
            "type": "p",
            "text": "Note: But feel free to add more search criteria to this code (e.g., zip code)!"
          },
          {
            "type": "p",
            "text": "Let's define two variables in getLonAndLat():"
          },
          {
            "type": "pre",
            "text": "async function getLonAndLat() {\n  const countryCode = 1;\n  const geocodeURL = `https://api.openweathermap.org/geo/1.0/direct?q=${searchInput.replace(\" \", \"%20\")},${countryCode}&limit=1&appid=${apiKey}`;\n}"
          },
          {
            "type": "p",
            "text": "We defined a countryCode integer that is needed for the GeoCoding API to work. Next, we made a geocodeURL of the API endpoint that includes the countryCode along with the apiKey we defined earlier."
          },
          {
            "type": "p",
            "text": "Note: The countryCode for the U.S. is 1, but yours may be different. Try searching for yours here."
          },
          {
            "type": "p",
            "text": "To return the longitude and latitude data, we need to fetch it from the API. Let's add the following to getLonAndLat():"
          },
          {
            "type": "pre",
            "text": "const response = await fetch(geocodeURL);\nif (!response.ok) {\n  console.log(\"Bad response! \", response.status);\n  return;\n}"
          },
          {
            "type": "p",
            "text": "This returns a response object from the API. However, because this data is coming from another computer (probably a server), it may not be returned immediately. Also, the program is allowed to run ahead, even if there is no response yet."
          },
          {
            "type": "p",
            "text": "This is why we use async/await; the await-part prevents the associated async function from continuing until response data is returned from fetch(). We then store this in a response variable. If we get a bad response (i.e., !response.ok), then an error message is logged and nothing is returned."
          },
          {
            "type": "p",
            "text": "Next, we want to get the actual geocode data in JSON (or JavaScript Object Notation). We can use the response object's .json() to do this! And since the data is coming from the response, it is asynchronous and we must use the await keyword:"
          },
          {
            "type": "pre",
            "text": "const data = await response.json();"
          },
          {
            "type": "p",
            "text": "Then, let's add the following if/else statement below where we defined data:"
          },
          {
            "type": "pre",
            "text": "if (data.length == 0) {\n  console.log(\"Something went wrong here.\");\n  weatherDataSection.innerHTML = `\n  <div>\n    <h2>Invalid Input: \"${searchInput}\"</h2>\n    <p>Please try again with a valid <u>city name</u>.</p>\n  </div>\n  `;\n  return;\n} else {\n  return data[0];\n}"
          },
          {
            "type": "p",
            "text": "If our API call wasn't successful, our data array will be empty and an error message will be rendered. Otherwise, there should be a JSON object stored as the first element and we'll return that in the else clause."
          },
          {
            "type": "p",
            "text": "Now it's time to work on the next inner function!"
          },
          {
            "type": "h3-li",
            "h3": "## Write getWeatherData() Function",
            "li": [
              "data.weather[0].icon for an image representation of the current weather.",
              "data.name for the location/city.",
              "data.main.temp for the temperature (measured in Kelvins by default, hence the rounding).",
              "data.weather[0].description for a brief description of the current weather."
            ]
          },
          {
            "type": "p",
            "text": "The getWeatherData() function accepts a lon and lat parameter that will be used in the API call for the current weather data. This information comes from the getLonAndLat() function we defined earlier."
          },
          {
            "type": "p",
            "text": "Because this function will also works with fetched response data, it also gets the async keyword."
          },
          {
            "type": "p",
            "text": "First, we'll define a weatherURL variable and assign the other OpenWeather API endpoint string to it:"
          },
          {
            "type": "pre",
            "text": "const weatherURL = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}`;"
          },
          {
            "type": "p",
            "text": "Next, we'll define a response variable and assign to it the object returned by the fetch() function with the weatherURL passed in."
          },
          {
            "type": "p",
            "text": "Note: Don't forget the await keyword for the response and data variables!"
          },
          {
            "type": "pre",
            "text": "const response = await fetch(weatherURL);\nif (!response.ok) {\n  console.log(\"Bad response! \", response.status);\n  return;\n}\n\nconst data = await response.json();"
          },
          {
            "type": "p",
            "text": "Like before, we'll print an error message and return nothing if there's a problem. Otherwise, we'll press on and make another data object with the JSON object for the current weather data."
          },
          {
            "type": "h3-li",
            "h3": "## Display Weather Data",
            "li": [
              "data.weather[0].icon for an image representation of the current weather.",
              "data.name for the location/city.",
              "data.main.temp for the temperature (measured in Kelvins by default, hence the rounding).",
              "data.weather[0].description for a brief description of the current weather."
            ]
          },
          {
            "type": "p",
            "text": "For this next part, we'll finish work inside of the getWeatherData() function, as well as in the outer fetchWeather() function. We'll be displaying the data information we just got to our HTML file. Then, we'll get to actually see the requested API data displayed on the browser!"
          },
          {
            "type": "p",
            "text": "Using the weather information from the data variable, let's do the following with the weatherDataSection:"
          },
          {
            "type": "pre",
            "text": "weatherDataSection.innerHTML = `\n<img src=\"https://openweathermap.org/img/wn/${data.weather[0].icon}.png\" alt=\"${data.weather[0].description}\" width=\"100\" />\n<div>\n  <h2>${data.name}</h2>\n  <p><strong>Temperature:</strong> ${Math.round(data.main.temp - 273.15)}¬∞C</p>\n  <p><strong>Description:</strong> ${data.weather[0].description}</p>\n</div>\n`"
          },
          {
            "type": "p",
            "text": "We used the .innerHTML property to assign some new HTML to the selected #weather-data element, such as:"
          },
          {
            "type": "p",
            "text": "We are now finished with writing the getWeatherData() function! But now, we need to actually use the functions we just defined to finish writing the outer fetchWeather() function."
          },
          {
            "type": "p",
            "text": "Near the closing curly brace } of the outer fetchWeather() function, add the following:"
          },
          {
            "type": "pre",
            "text": "document.getElementById(\"search\").value = \"\";\nconst geocodeData = await getLonAndLat();\ngetWeatherData(geocodeData.lon, geocodeData.lat);"
          },
          {
            "type": "p",
            "text": "Since the data returned by getLonAndLat() is asynchronous response data, we placed an await keyword before it. Therefore, we need to add the async keyword to our outer fetchWeather() function:"
          },
          {
            "type": "pre",
            "text": "async function fetchWeather() {\n  // Rest of code below\n}"
          },
          {
            "type": "p",
            "text": "Let's save script.js and test if our app now displays weather data when we search by location."
          },
          {
            "type": "h3-li",
            "h3": "## Style Weather Data",
            "li": [
              "A background-color that is semi-transparent (rgba()).",
              "Some box layer settings for border-radius, padding, and margin-top.",
              "Center-aligned text.",
              "A few Flexbox-centric properties that align the icon and weather info towards the center and puts a little gap between them."
            ]
          },
          {
            "type": "p",
            "text": "We're almost finished!"
          },
          {
            "type": "p",
            "text": "There are just a few last things to do for both the CSS and JavaScript files. Our #weather-data element is behaving as expected, but now let's style it a bit more!"
          },
          {
            "type": "p",
            "text": "In the getWeatherData() function, let's place the weather information beside the icon by changing the display property of the weatherDataSection variable from \"block\" to \"flex\":"
          },
          {
            "type": "pre",
            "text": "weatherDataSection.style.display = \"flex\";\nweatherDataSection.innerHTML = `\n<img src=\"https://openweathermap.org/img/wn/${data.weather[0].icon}.png\" alt=\"${data.weather[0].description}\" width=\"100\" />\n<div>\n  <h2>${data.name}</h2>\n  <p><strong>Temperature:</strong> ${Math.round(data.main.temp - 273.15)}¬∞C</p>\n  <p><strong>Description:</strong> ${data.weather[0].description}</p>\n</div>\n`"
          },
          {
            "type": "p",
            "text": "We made the #weather-data element a flex container with JavaScript code... wow! Go ahead and save script.js."
          },
          {
            "type": "p",
            "text": "Now, re-open the styles.css file and add the following to the bottom:"
          },
          {
            "type": "pre",
            "text": "#weather-data {\n  background-color: rgba(255, 255, 255, 0.85);\n  border-radius: 5px;\n  padding: 1.5em;\n  margin-top: 20px;\n\n  text-align: center;\n  align-items: center;\n  gap: 12px;\n}\n\n#weather-data > img {\n  border-radius: 50%;\n  background-color: lightskyblue;\n}"
          },
          {
            "type": "p",
            "text": "In the snippet above, we added some more styles to the #weather-data element, including:"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! We finished building our weather application!"
          },
          {
            "type": "p",
            "text": "Let's go ahead and save our styles.css file one last time! Refresh the rendered page and try typing in your favorite city:"
          },
          {
            "type": "p",
            "text": "Using the three building blocks of HTML, CSS, and JavaScript, we were able to build a functional application that uses some deep frontend and backend elements such as:"
          },
          {
            "type": "p",
            "text": "How would you build upon this application? Some ideas could be adding more data like humidity and wind/gust speed, or including a 5- or 10-day forecast."
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Source code for this tutorial",
              "OpenWeather API page",
              "Basic DOM Manipulation (MDN Documentation)",
              "Asynchronous Programming (Chapter from Eloquent JavaScript book)"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Build a Chat App With Socket.IO",
    "link": "https://www.codedex.io/projects/build-a-chat-app-with-socket-io",
    "tags": [
      "JS",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/chatapp-with-socket-io.png",
    "prerequisite": {
      "Prerequisites:": "JavaScript, Node.js, async/await, Promises, ExpressJS",
      "Versions:": "Node.js v10+",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Are you ready to dive into the wonderful world of chat apps? In this beginner-friendly tutorial, we'll help you build your very own chat application using the infamous Socket.IO library for JavaScript!"
          },
          {
            "type": "p",
            "text": "You'll learn about the following:"
          },
          {
            "type": "p",
            "text": "By the end of this tutorial, we'll have a chat application that looks and works like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/final_project_output.gif"
          },
          {
            "type": "p",
            "text": "For those who want to directly jump into code, you can start at the ‚ÄúSetup‚Äù section."
          },
          {
            "type": "p",
            "text": "Without further ado, let's get started!"
          },
          {
            "type": "h3-li",
            "h3": "## How Do We Connect Users?",
            "li": [
              "A frontend/ directory with code that runs on the user's browser via HTML and JavaScript: index.html and script.js.",
              "A backend/ directory with two files: server-starter.js and server-completed.js."
            ]
          },
          {
            "type": "p",
            "text": "All chat applications need a functional connection between the user-facing chat window and the chat server. The traditional HTTP protocol is based on the request-response architecture."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/request_response_diagram.png"
          },
          {
            "type": "p",
            "text": "For example, when a user types ‚Äúwww.codedex.io‚Äù in their browser, they are requesting that another computer respond with a specific page. The user must initiate the request first, before the computer (or server) can respond. In this case, the server responded with the webpage that was stored at the location www.codedex.io. The key step being the user initiated the request. The server can never contact the user without the user initializing the request first."
          },
          {
            "type": "p",
            "text": "This system wouldn't work in a chat application because it requires real time communication. For example, let's say user A, user B, and user C are connected in a chat and all three of them send a message. However, user B never requested for new messages to be sent as a response because user B wasn't aware that there were new messages being posted. Then, the chat would immediately break."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/req_res_issue.png"
          },
          {
            "type": "p",
            "text": "To prevent this, whenever a new message is posted, everyone involved in the chat should automatically receive it without ever having to request it from the server. Since the request-response architecture would never work, we need a new set of communication rules that will enable both sides to send messages instead of just one side always making a request and another side always sending back a response."
          },
          {
            "type": "h3-li",
            "h3": "## What Are WebSockets?",
            "li": [
              "A frontend/ directory with code that runs on the user's browser via HTML and JavaScript: index.html and script.js.",
              "A backend/ directory with two files: server-starter.js and server-completed.js."
            ]
          },
          {
            "type": "p",
            "text": "The WebSocket protocol allows both the browser and the web server to independently send and receive messages from each other in real time. This means that messages can be sent from the browser to the server, and the server can send messages back to the browsers without needing any formal request."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/two_way_websockets.png"
          },
          {
            "type": "p",
            "text": "Now that we've got the concepts down, it's time for some real-time (pun intended) code in action."
          }
        ]
      },
      {
        "checkpoint": "# Setup",
        "content": [
          {
            "type": "p",
            "text": "Let's begin with some starter code by downloading this GitHub repo."
          },
          {
            "type": "p",
            "text": "In order to download the starter files, follow these steps:"
          },
          {
            "type": "p",
            "text": "The folder should have the following contents in it:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/project_folder_structure.png"
          },
          {
            "type": "p",
            "text": "Once you have this setup, open a new terminal window at this folder's location. In the window, enter the command npm install."
          },
          {
            "type": "p",
            "text": "While the dependencies are being installed, let's go over the folder structure to understand what files we'll be working with."
          },
          {
            "type": "p",
            "text": "In the root codedex-chat-app/ directory, there are two directories available:"
          },
          {
            "type": "p",
            "text": "We'll be working in the server-starter.js file. At the end, it'll have the same code as the server-completed.js file. Alternatively, the server-completed.js file can also be referred to if anyone gets stuck in the middle of this tutorial."
          }
        ]
      },
      {
        "checkpoint": "# Import Libraries & Create Servers",
        "content": [
          {
            "type": "p",
            "text": "In this section, we'll focus on setting up our web server and web socket server."
          },
          {
            "type": "p",
            "text": "Open the backend/server-starter.js file. At this point, you'll find some import statements at the top of the file:"
          },
          {
            "type": "pre",
            "text": "// server-starter.js file\n\nimport { uniqueNamesGenerator, colors, names } from \"unique-names-generator\";\nimport express from \"express\";\nimport http from \"http\";"
          },
          {
            "type": "p",
            "text": "We'll need these to create our web server which will send HTML pages that will connect to our WebSocket server in order to chat and we'll be using a random name generator to generate usernames for people joining in the chat."
          },
          {
            "type": "p",
            "text": "Below these lines, we'll write our first piece of code under the comment labeled // write code here for step: 1."
          },
          {
            "type": "p",
            "text": "First, let's import the socket.io library in order to create a WebSocket server and write the following code:"
          },
          {
            "type": "pre",
            "text": "// server-starter.js file\n\n// import the socket.io library\nimport { Server } from \"socket.io\";"
          },
          {
            "type": "p",
            "text": "Next, we need to initialize the servers since the relevant libraries have been imported. Go down to step 2 and add the following:"
          },
          {
            "type": "pre",
            "text": "// server-starter.js file\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server);"
          },
          {
            "type": "p",
            "text": "In the code above, we created a new express app variable to form both the HTTP and WebSocket servers, via http and socket-io respectively. The web server will be responsible for sending the page back to the browser with the visible chat window and the WebSocket server, named io, will be responsible for our chat functionality."
          },
          {
            "type": "p",
            "text": "Note: Per the Socket.IO naming conventions, we named our WebSocket server io."
          },
          {
            "type": "p",
            "text": "At this point, we can start the server by running the npm run serve command in the terminal. If everything worked correctly, you should be able to see the following output in your terminal window."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/backend_server_terminal.png"
          },
          {
            "type": "p",
            "text": "Note: If this doesn't work, you can try again or join the Cod√©dex Discord server where our Code Mentors will help you with the problem you're facing."
          },
          {
            "type": "p",
            "text": "If the server is functional, it will be listening on port 3000. We can now open our browser and visit the http://localhost:3000/ URL. This should show us a very beautiful chat application page."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/static_html_page.png"
          },
          {
            "type": "p",
            "text": "We've got the HTTP web server working! üéâ"
          },
          {
            "type": "p",
            "text": "Behind the scenes, our HTTP server is simply taking the index.html file and script.js file (inside the frontend/ directory) and serving the updated index.html file back to the browser. The index.html file is responsible for showing all of this UI to us in the browser."
          },
          {
            "type": "p",
            "text": "But, the chat functionality doesn't work at this point since we haven't set up the WebSocket server necessary to chat. So, let's do that now."
          }
        ]
      },
      {
        "checkpoint": "# Connect the WebSocket Server",
        "content": [
          {
            "type": "p",
            "text": "For every chat session, there is a connected chat history. Everytime we open a chat application, we can find the previous messages. For the sake of simplicity, we won't be creating a persistent chat that'll be stored even after the server goes offline. So, for our use-case, we'll create an empty array and call it chatHistory. This chatHistory array will lose all its contents every time the server goes offline or it restarts."
          },
          {
            "type": "p",
            "text": "Go back to the server-starter.js file and find the comment that says step 3 and create a new empty array called chatHistory."
          },
          {
            "type": "pre",
            "text": "const chatHistory = [];"
          },
          {
            "type": "p",
            "text": "After that, we need to receive the connection requests from the user-facing frontend that is trying to connect to our WebSocket server backend."
          },
          {
            "type": "p",
            "text": "To do that, let's go to step 4 and start by using our io WebSocket server object:"
          },
          {
            "type": "pre",
            "text": "io.on(‚Äúconnection‚Äù, function callback(socket) {\n  console.log(‚Äúconnection successful‚Äù);\n});"
          },
          {
            "type": "p",
            "text": "Let's understand what we did here. So, first of all, we called the io object's .on() method that requires 2 arguments:"
          },
          {
            "type": "p",
            "text": "Saving the file and refreshing the browser tab should show new console logs in our terminal console like so:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/successful_connection_terminal.png"
          },
          {
            "type": "p",
            "text": "Now, although we won't be editing any of the frontend code, let's understand how we will be connecting to our WebSocket server backend. To do that, go to the frontend/ folder and let's open the /index.html and script.js files."
          },
          {
            "type": "p",
            "text": "Inside the index.html file, we're getting the socket.IO library code first using the following line in our <head> element."
          },
          {
            "type": "pre",
            "text": "<script src=\"https://cdn.socket.io/4.5.4/socket.io.min.js\"></script>"
          },
          {
            "type": "p",
            "text": "This line allows us to use the socket.io package on the frontend."
          },
          {
            "type": "p",
            "text": "Note: The packages for the frontend and backend consist of different code even though they're both called socket.io."
          },
          {
            "type": "p",
            "text": "So, let's open the script.js file and take a look at the following line:"
          },
          {
            "type": "pre",
            "text": "const socket = io();"
          },
          {
            "type": "p",
            "text": "We're only able to do this because we included the earlier script in our index.html file, or else this would throw an error."
          },
          {
            "type": "p",
            "text": "This line is handling so many important steps behind the scenes,such as:"
          },
          {
            "type": "p",
            "text": "These are just some of the core tasks it's performing. But, because of this line, we get the ‚Äùconnection successful‚Äù printed in our console."
          },
          {
            "type": "p",
            "text": "Let's continue with our backend server-starter.js file. So, going back to the callback() function inside our ‚Äùconnection‚Äù event, let's generate a unique username for a new user who joins the chat. The boilerplate is already provided so we just need to call the getUniqueUsername() function and then assign it to a new username variable and print it in the console."
          },
          {
            "type": "pre",
            "text": "io.on(\"connection\", function callback(socket) {\n  const username = getUniqueUsername();\n  console.log(`${username} connected`);\n});"
          },
          {
            "type": "p",
            "text": "Now that we've handled the connection, before continuing with the chat logic, let's also handle the disconnect case. In order to do that, we need to understand what the socket parameter is and how to use it."
          },
          {
            "type": "p",
            "text": "In the callback() function, as seen above, the socket parameter is a very important object that lets us interact with a connected client. One can think of the socket parameter object like a personal mobile phone. Today, everyone holds a personal, Wi-Fi-connected phone. Even though everyone is connected to the Wi-Fi router, the way each person uses the internet is completely personal and different for them from everyone else. Similarly, each time a new chat client connects to our server by opening a new window/tab and going to http://localhost:3000/, the callback() function is run and it generates a unique socket parameter pertaining to only that particular connection."
          },
          {
            "type": "p",
            "text": "Therefore, we can use this parameter to listen for a ‚Äùdisconnect‚Äù event that is triggered when a client closes the tab or the browser."
          },
          {
            "type": "pre",
            "text": "io.on(\"connection\", function callback(socket) {\n  const username = getUniqueUsername();\n  console.log(`${username} connected`);\n\n  // newly added code\n  socket.on(‚Äúdisconnect‚Äù, function() {\n    console.log(`${username} disconnected`);\n  });\n});"
          },
          {
            "type": "p",
            "text": "Using the socket object, we've added an .on() event listener which will trigger when the ‚Äùdisconnect‚Äù event occurs and it'll notify us that the client has disconnected."
          },
          {
            "type": "p",
            "text": "Notice how we added the event listener to the individual socket object and not the io object. That is because we only want to know information about which particular socket session (or user) is being disconnected and not all of them."
          }
        ]
      },
      {
        "checkpoint": "# Add the Chat Logic",
        "content": [
          {
            "type": "p",
            "text": "Alright, we're very close to building out the fully functional chat application. We just need to incorporate the logic to allow users to send messages, save those messages, and send those messages back to everyone in the chat."
          },
          {
            "type": "p",
            "text": "In order to do that, we'll first start with our frontend logic to see what custom events have been created to signify that a message is being sent when the send button is clicked. Inside the script.js, we'll see that an event listener is executed when the ‚Äúsubmit‚Äù event takes place."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/frontend_code_submit_listener.png"
          },
          {
            "type": "p",
            "text": "The function body is executing another function called sendMessage(). This function is using the socket object and emitting a new event called ‚Äùpost-message‚Äù which sends the value of the text currently typed into the input box to our WebSocket backend server. This message is transformed into an object with the message property."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/frontend_code_send_listener.png"
          },
          {
            "type": "p",
            "text": "Therefore, we'll create a new event listener which listens for ‚Äùpost-message‚Äù on our backend. Going back to the server-starter.js file, we'll add the following code:"
          },
          {
            "type": "pre",
            "text": "io.on(\"connection\", function callback(socket) {\n  const username = getUniqueUsername();\n  console.log(`${username} connected`);\n\n  // newly added code:\n  socket.on(\"post-message\", function receiveMessage(data) {\n    const { message } = data || { message: \"\" };\n    console.log(message);\n    chatHistory.push({\n      username,\n      message,\n    });\n  });\n\n  socket.on(\"disconnect\", () => {\n    console.log(`${username} disconnected`);\n  });\n});"
          },
          {
            "type": "p",
            "text": "We've now added a ‚Äùpost-message‚Äù event listener that is being sent from the frontend. This event listener also takes a receiveMessage() callback function that receives the data being sent from the frontend in the form of an object with the message property."
          },
          {
            "type": "p",
            "text": "Once we've received the message, we log it to our console. For example, if we type in Hello! in our input box and send it, it'll be printed like so:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/server_printing_usernames_messages.png"
          },
          {
            "type": "p",
            "text": "So, we're now able to connect to the user, and send messages to the server. What's left? We need to add the ability to send those messages back to the user who sent the message as well as all other users in this chat."
          },
          {
            "type": "p",
            "text": "To do that, we'll add some more code inside the receiveMessages() callback function as follows:"
          },
          {
            "type": "pre",
            "text": "io.on(\"connection\", function callback(socket) {\n  const username = getUniqueUsername();\n  console.log(`${username} connected`);\n\n  socket.on(\"post-message\", function receiveMessages(data) {\n    const { message } = data || { message: \"\" };\n    chatHistory.push({\n      username,\n      message,\n    });\n\n    // newly added code:\n    io.emit(\"receive-messages\", {\n      chatHistory: getAllMessages(),\n    });\n  });\n\n  socket.on(\"disconnect\", () => {\n    console.log(`${username} disconnected`);\n  });\n});"
          },
          {
            "type": "p",
            "text": "Notice how we switched from using the socket object to io object. This is because when a user sends a message, the user isn't the only one who should receive the message, right? Everyone in the chat should receive it."
          },
          {
            "type": "p",
            "text": "We also changed the method from .on() to .emit() because this time, the WebSocket server backend wants to create and send a new event to all the connected web browsers in the chat. Similar to the .on() method, the .emit() method also takes in 2 arguments:"
          },
          {
            "type": "p",
            "text": "In this case, the data is the entire chat history that includes all the messages that have been sent by the users as well the usernames."
          },
          {
            "type": "p",
            "text": "At this point, our messages that we sent should be visible to everyone in the chat like so:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/usernames_messages_on_screen.png"
          },
          {
            "type": "p",
            "text": "The final piece in this chat app puzzle is to receive the chat history once you're connected to the backend. As of now, the chat history only appears when the user first sends a message. We want to display the chat history even before the first message is sent."
          },
          {
            "type": "p",
            "text": "To accomplish this, we'll send back the entire chatHistory right after a user is connected by adding the following code:"
          },
          {
            "type": "pre",
            "text": "io.on(\"connection\", function callback(socket) {\n  const username = getUniqueUsername();\n  console.log(`${username} connected`);\n\n  // Newly added code:\n  socket.emit(\"receive-messages\", {\n    chatHistory: getAllMessages(),\n    username,\n  });\n\n  socket.on(\"post-message\", function receiveMessages(data) {\n    const { message } = data || { message: \"\" };\n    chatHistory.push({\n      username,\n      message,\n    });\n\n    io.emit(\"receive-messages\", {\n      chatHistory: getAllMessages(),\n    });\n  });\n\n  socket.on(\"disconnect\", () => {\n    console.log(`${username} disconnected`);\n  });\n});"
          },
          {
            "type": "p",
            "text": "Every connection to our WebSocket server now emits an event which sends back the entire chatHistory, along with the randomly generated username, back to the connected user. But notice how, this time, we're emitting the event using the socket object and not the io object. This is because the user who just connected needs to receive the chat history and not everyone already present in the chat since they'll already have received the most recent chat history."
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Bravo! You just built a chat application! ü•≥"
          },
          {
            "type": "p",
            "text": "You can test it out by creating 2 or more tabs in your browser and sending messages!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/build-a-chat-app-with-socket-io/final_project_output.gif"
          },
          {
            "type": "p",
            "text": "Let's look at all of the code written in the server-starter.js file."
          },
          {
            "type": "pre",
            "text": "// imports required for server\nimport { uniqueNamesGenerator, colors, names } from \"unique-names-generator\";\nimport express from \"express\";\nimport http from \"http\";\n\n// import the socket.io library\nimport { Server } from \"socket.io\";\n\n// initializing the servers: HTTP as well as Web Socket\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server);\n\n// create the chat history array for storing messages\nconst chatHistory = [];\n\n// listen for new web socket connections\nio.on(\"connection\", function callback(socket) {\n  const username = getUniqueUsername();\n  console.log(`${username} connected`);\n\n  // send the chat history to the client\n  socket.emit(\"receive-messages\", {\n    chatHistory: getAllMessages(),\n    username,\n  });\n\n  // listen for new messages from the client\n  socket.on(\"post-message\", function receiveMessages(data) {\n    const { message } = data || { message: \"\" };\n    chatHistory.push({\n      username,\n      message,\n    });\n\n    // send the updated chat history to all clients\n    io.emit(\"receive-messages\", {\n      chatHistory: getAllMessages(),\n    });\n  });\n\n  // listen for disconnects and log them\n  socket.on(\"disconnect\", () => {\n    console.log(`${username} disconnected`);\n  });\n});\n\n// Boilerplate code as well as Bonus section\n// HTTP server setup to serve the page assets\napp.use(express.static(process.cwd() + \"/frontend\"));\n\n// HTTP server setup to serve the page at /\napp.get(\"/\", (req, res) => {\n  return res.sendFile(process.cwd() + \"/frontend/index.html\");\n});\n\n// start the HTTP server to serve the page\nserver.listen(3000, () => {\n  console.log(\"listening on http://localhost:3000\");\n});\n\n// helper functions\n// get all messages in the order they were sent\nfunction getAllMessages() {\n  return Array.from(chatHistory).reverse();\n}\n\n// generate a unique username for each user\nfunction getUniqueUsername() {\n  return uniqueNamesGenerator({\n    dictionaries: [names, colors],\n    length: 2,\n    style: \"capital\",\n    separator: \" \",\n  });\n}"
          },
          {
            "type": "p",
            "text": "View the full source code here."
          },
          {
            "type": "h3-li",
            "h3": "## Next Steps",
            "li": [
              "Adding a database support to permanently store messages and not lose history when the server disconnects.",
              "Adding support for creating multiple chats. Currently, our chat application only supports a single chat window.",
              "Adding authentication support so that any random stranger can't join a chat without identifying who they are first."
            ]
          },
          {
            "type": "p",
            "text": "Once we fully understand how the core chatting function works, we can build more features such as:"
          },
          {
            "type": "p",
            "text": "Once you've finished this project, feel free to post the images of the functional chat app on Twitter and tag @codedex_io and @coder_kun_."
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Socket.IO official site",
              "WebSockets (MDN Documentation)"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Analyze Best Selling Books with Pandas",
    "link": "https://www.codedex.io/projects/analyze-spreadsheet-data-with-pandas-chatgpt",
    "tags": [
      "DS",
      "Python"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/analyze-best-selling-books-with-pandas.png",
    "prerequisite": {
      "Prerequisites:": "Python",
      "Versions:": "Python 3.9.6, pandas 2.0.1",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Python is a powerful programming language that can be used for a variety of tasks, including analyzing data from a CSV file. We'll go over how to use Python to import data and run an analysis on it. We'll be using the pandas library, a popular data analysis tool for Python."
          },
          {
            "type": "p",
            "text": "Amazon Best Sellers are updated every hour. The actual list is made of 100 books, but the data we're working with features just the top 50 books. üìñ"
          }
        ]
      },
      {
        "checkpoint": "# The Dataset",
        "content": [
          {
            "type": "p",
            "text": "In this tutorial, we will work with a CSV (comma-separated values) file that features some fun data about the top 50 best selling books on Amazon from 2009 to 2019 (provided by Kaggle)."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/analyze-spreadsheet-data-with-pandas-chatgpt/best-sellers-csv-data.png"
          },
          {
            "type": "p",
            "text": "Note: If you don't have a Kaggle account, you can also download it here in our GitHub:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/analyze-spreadsheet-data-with-pandas-chatgpt/file_download_btn_github.png"
          },
          {
            "type": "p",
            "text": "The .csv file contains 550 books. Here are the seven columns:"
          },
          {
            "type": "p",
            "text": "Poke around and see if you have any questions. For example: Who are the best selling authors? What are the books with 4.8+ user ratings? Which one performed better: fiction or non-fiction?"
          },
          {
            "type": "p",
            "text": "Let's dig in!"
          }
        ]
      },
      {
        "checkpoint": "# Step 1: Install and Import pandas",
        "content": [
          {
            "type": "p",
            "text": "Before we begin, we need to install the pandas library. To do this, open the terminal and type the following command:"
          },
          {
            "type": "pre",
            "text": "pip3 install pandas"
          },
          {
            "type": "p",
            "text": "We can confirm that pandas was installed by running pip3 list."
          },
          {
            "type": "p",
            "text": "Note: If you run into any issues when running these commands, check if pip is installed by running pip --version or pip3 --version. If you don't get a version number, follow these steps to install pip on your computer."
          },
          {
            "type": "p",
            "text": "Next, we'll create a folder named amazon-best-sellers-analysis. Inside the folder, create a main.py file and then import pandas (using pd as an alias):"
          },
          {
            "type": "pre",
            "text": "import pandas as pd\n\n# Rest of the file go here..."
          }
        ]
      },
      {
        "checkpoint": "# Step 2: Import pandas and Load the Spreadsheet",
        "content": [
          {
            "type": "p",
            "text": "Next, we need to import the pandas library and load the data into our Python program.\nDownload the bestsellers.csv file and add it to the same folder as your main.py file, amazon-best-sellers-analysis."
          },
          {
            "type": "p",
            "text": "To read CSV files, we'll use the .read_csv() function provided by pandas. Then we will save this data to a new df variable:"
          },
          {
            "type": "pre",
            "text": "import pandas as pd\n\ndf = pd.read_csv('bestsellers.csv')"
          },
          {
            "type": "p",
            "text": "The df variable is a DataFrame object that allows us to work with tabular data via pandas."
          },
          {
            "type": "p",
            "text": "Let's save the main.py file and move to the next step!"
          }
        ]
      },
      {
        "checkpoint": "# Step 3: Explore the Data",
        "content": [
          {
            "type": "p",
            "text": "Once we've loaded the spreadsheet data, we can explore it to get a better understanding of what we're working with. We can use various functions provided by pandas to do this. Here are a few examples:"
          },
          {
            "type": "pre",
            "text": "# Get the first 5 rows of the spreadsheet\nprint(df.head())\n\n# Get the shape of the spreadsheet\nprint(df.shape)\n\n# Get the column names of the spreadsheet\nprint(df.columns)\n\n# Get summary statistics for each column\nprint(df.describe())"
          },
          {
            "type": "p",
            "text": "These functions will give us a good overview of the data we're working with, including:"
          },
          {
            "type": "p",
            "text": "Let's save the main.py file and run python amazon-best-sellers-analysis/main.py to print the following:"
          },
          {
            "type": "pre",
            "text": "                                                Name  ...        Genre\n0                      10-Day Green Smoothie Cleanse  ...  Non Fiction\n1                                  11/22/63: A Novel  ...      Fiction\n2            12 Rules for Life: An Antidote to Chaos  ...  Non Fiction\n3                             1984 (Signet Classics)  ...      Fiction\n4  5,000 Awesome Facts (About Everything!) (Natio...  ...  Non Fiction\n\n[5 rows x 7 columns]\n(550, 7)\nIndex(['Name', 'Author', 'User Rating', 'Reviews', 'Price', 'Year', 'Genre'], dtype='object')\n       User Rating       Reviews       Price         Year\ncount   550.000000    550.000000  550.000000   550.000000\nmean      4.618364  11953.281818   13.100000  2014.000000\nstd       0.226980  11731.132017   10.842262     3.165156\nmin       3.300000     37.000000    0.000000  2009.000000\n25%       4.500000   4058.000000    7.000000  2011.000000\n50%       4.700000   8580.000000   11.000000  2014.000000\n75%       4.800000  17253.250000   16.000000  2017.000000\nmax       4.900000  87841.000000  105.000000  2019.000000"
          }
        ]
      },
      {
        "checkpoint": "# Step 4: Clean the Data",
        "content": [
          {
            "type": "p",
            "text": "Once we've explored the data, we may need to clean it before running an analysis."
          },
          {
            "type": "h3-li",
            "h3": "## Drop Duplicates",
            "li": [
              "Imported book data about the top 50 books on Amazon from 2009 to 2019.",
              "Explored and cleaned the data with DataFrame methods.",
              "Exported the modified data to a new CSV file."
            ]
          },
          {
            "type": "p",
            "text": "The first thing we can do is check for and remove any duplicate rows in the dataset using the drop_duplicates() function."
          },
          {
            "type": "pre",
            "text": "df.drop_duplicates(inplace=True)"
          },
          {
            "type": "p",
            "text": "By setting the inplace parameter to True, the changes are made directly to the original DataFrame."
          },
          {
            "type": "h3-li",
            "h3": "## Renaming Columns",
            "li": [
              "Imported book data about the top 50 books on Amazon from 2009 to 2019.",
              "Explored and cleaned the data with DataFrame methods.",
              "Exported the modified data to a new CSV file."
            ]
          },
          {
            "type": "p",
            "text": "Next, we can rename the columns of the DataFrame to make them more descriptive and easier to work with. We can use the rename() function to do this."
          },
          {
            "type": "pre",
            "text": "df.rename(columns={\"Name\": \"Title\", \"Year\": \"Publication Year\", \"User Rating\": \"Rating\"}, inplace=True)"
          },
          {
            "type": "p",
            "text": "This code renames the \"Name\" column to \"Title\" and the \"Year\" column to \"Publication Year\". Again, by setting the inplace parameter to True, the changes are made directly to the original DataFrame."
          },
          {
            "type": "h3-li",
            "h3": "## Converting Data Types",
            "li": [
              "Imported book data about the top 50 books on Amazon from 2009 to 2019.",
              "Explored and cleaned the data with DataFrame methods.",
              "Exported the modified data to a new CSV file."
            ]
          },
          {
            "type": "p",
            "text": "Finally, we can convert the \"Price\" column to a float data type to make it easier to work with. We can use the astype() function to do this."
          },
          {
            "type": "pre",
            "text": "df[\"Price\"] = df[\"Price\"].astype(float)"
          },
          {
            "type": "p",
            "text": "This code converts the \"Price\" column to a float data type. Note that we select the \"Price\" column of the DataFrame using the square bracket notation, and then apply the astype() function to it. The resulting values are then stored back in the \"Price\" column of the DataFrame."
          },
          {
            "type": "p",
            "text": "After performing these cleaning operations, our DataFrame should be ready for analysis."
          }
        ]
      },
      {
        "checkpoint": "# Step 5: Run an Analysis",
        "content": [
          {
            "type": "p",
            "text": "Once we've cleaned the data, we can run an analysis on it. This could involve calculating summary statistics or creating visualizations."
          },
          {
            "type": "p",
            "text": "Here are a few examples:"
          },
          {
            "type": "h3-li",
            "h3": "## Analyzing Author Popularity",
            "li": [
              "Imported book data about the top 50 books on Amazon from 2009 to 2019.",
              "Explored and cleaned the data with DataFrame methods.",
              "Exported the modified data to a new CSV file."
            ]
          },
          {
            "type": "p",
            "text": "Using methods from our df DataFrame object, we can get a glimpse of which authors have the most books on the Amazon Best Sellers list."
          },
          {
            "type": "p",
            "text": "This can be done by selecting the 'Author' column data and using the value_counts() method. We can assign this to an author_counts variable:"
          },
          {
            "type": "pre",
            "text": "author_counts = df['Author'].value_counts()\nprint(author_counts)"
          },
          {
            "type": "p",
            "text": "We can then print it and output the following:"
          },
          {
            "type": "pre",
            "text": "Author\nJeff Kinney                           12\nGary Chapman                          11\nRick Riordan                          11\nSuzanne Collins                       11\nAmerican Psychological Association    10\n                                      ..\nKeith Richards                         1\nChris Cleave                           1\nAlice Schertle                         1\nCeleste Ng                             1\nAdam Gasiewski                         1\nName: count, Length: 248, dtype: int64"
          },
          {
            "type": "h3-li",
            "h3": "## Average Rating by Genre",
            "li": [
              "Imported book data about the top 50 books on Amazon from 2009 to 2019.",
              "Explored and cleaned the data with DataFrame methods.",
              "Exported the modified data to a new CSV file."
            ]
          },
          {
            "type": "p",
            "text": "We can also use the cleaned data to determine the average rating for each genre in the dataset. We can do this by grouping the data by the \"Genre\" column and calculating the mean of the \"Rating\" column."
          },
          {
            "type": "pre",
            "text": "avg_rating_by_genre = df.groupby(\"Genre\")[\"Rating\"].mean()\nprint(avg_rating_by_genre)"
          },
          {
            "type": "p",
            "text": "This code groups the data by the \"Genre\" column, and then calculates the mean of the \"Rating\" column for each genre. It then prints the resulting series of average ratings by genre."
          },
          {
            "type": "pre",
            "text": "Genre\nFiction        4.648333\nNon Fiction    4.595161\nName: Rating, dtype: float64"
          },
          {
            "type": "p",
            "text": "These are just a few examples of the types of analyses we can run on our data. The possibilities are endless, depending on the type of data we're working with and the questions we're trying to answer."
          }
        ]
      },
      {
        "checkpoint": "# Step 6: Export the Results",
        "content": [
          {
            "type": "p",
            "text": "Finally, once we have performed our analysis and obtained some insights from the data, we may want to export the results to a file for further analysis or sharing with others. We can use the to_csv() function to export our cleaned and analyzed DataFrame to a CSV file."
          },
          {
            "type": "pre",
            "text": "# Export top selling authors to a CSV file\nauthor_counts.head(10).to_csv(\"top_authors.csv\")\n\n# Export average rating by genre to a CSV file\navg_rating_by_genre.to_csv(\"avg_rating_by_genre.csv\")"
          },
          {
            "type": "p",
            "text": "This will export the top 10 selling authors and the average rating by genre to a separate .csv files."
          },
          {
            "type": "p",
            "text": "By default, these files will be saved in the same directory as our main.py file. We can specify a different directory by providing a file path instead of just a file name."
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! We've made it to the end of the tutorial! üéä"
          },
          {
            "type": "p",
            "text": "We were able to harness the power of Python libraries like pandas to analyze data from a CSV file. Specifically, we did the following:"
          },
          {
            "type": "p",
            "text": "View the full source for this project here."
          },
          {
            "type": "p",
            "text": "Also, check out the following resources to learn more about data analysis with Python:"
          }
        ]
      }
    ]
  },
  {
    "title": "Convert Roman Numerals in Python",
    "link": "https://www.codedex.io/projects/convert-roman-numerals-with-python",
    "tags": [
      "Python",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/convert-roman-numerals-with-python.png",
    "prerequisite": {
      "Prerequisites": ": Python fundamentals",
      "Version": ": Python 3.10",
      "Read Time": ": 30 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Roman numerals originated, as the name suggests, in ancient Rome more than 2,800 years ago. After the Romans‚Äô eventual demise, numerals were still widely used during the Middle Ages. Even today, Roman numerals are prevalent in our everyday lives, showing up in clocks, movie titles, and more!"
          },
          {
            "type": "p",
            "text": "Instead of numbers like 1 and 2, Roman numerals use letters (predominantly \"I\" and \"V\")."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/convert-roman-numerals-with-python/roman_numeral_chart.png"
          },
          {
            "type": "p",
            "text": "Using the chart above, \"I\" is 1, \"V\" is 5, \"X\" is 10, and so on‚Ä¶"
          },
          {
            "type": "p",
            "text": "However, when a large combination of these values gets thrown together, the value of the numeral becomes difficult to read."
          },
          {
            "type": "p",
            "text": "Luckily, a sequence of Roman numerals can be easily converted to numbers with Python!"
          },
          {
            "type": "p",
            "text": "In this tutorial, we will be using loops, control flow statements, and built-in Python functions to convert any Roman numeral into a number. Let‚Äôs jump in!"
          }
        ]
      },
      {
        "checkpoint": "# Setup",
        "content": [
          {
            "type": "p",
            "text": "You'll need an editor for this tutorial. This can be achieved with any of the following:"
          },
          {
            "type": "p",
            "text": "After setting up, feel free to move onward!"
          }
        ]
      },
      {
        "checkpoint": "# Step 1: Get User Input",
        "content": [
          {
            "type": "p",
            "text": "To actually enter a sequence of Roman numerals, we need to ask the user for input. This can be done with the built-in input() function:"
          },
          {
            "type": "pre",
            "text": "numeral_input = input(\"Enter the roman numerals you want to convert: \")"
          },
          {
            "type": "p",
            "text": "Here, you are creating a variable called numeral_input and assigning the user's input to it."
          }
        ]
      },
      {
        "checkpoint": "# Step 2: Define roman_to_int() Function",
        "content": [
          {
            "type": "p",
            "text": "Now that we have the user submitting input, let's define a roman_to_int() function to translate the Roman numerals into an integer value:"
          },
          {
            "type": "pre",
            "text": "def roman_to_int(numeral):"
          },
          {
            "type": "p",
            "text": "In the function definition, we are specifying a numeral parameter that is a string of the Roman numeral we want to convert."
          },
          {
            "type": "p",
            "text": "Inside the function, Iet‚Äôs loop through each character in the numeral string and convert them to integers!"
          },
          {
            "type": "p",
            "text": "At the start, we need to create a final_answer integer variable, initialized at 0, for storing our converted integer:"
          },
          {
            "type": "pre",
            "text": "final_answer = 0"
          },
          {
            "type": "p",
            "text": "The final_answer will be printed at the end of the function."
          },
          {
            "type": "p",
            "text": "Next let's create a for loop that repeats a particular block of code for all the characters of the numeral variable (our user input):"
          },
          {
            "type": "pre",
            "text": "for i in numeral:"
          },
          {
            "type": "p",
            "text": "Now, inside the loop, let‚Äôs use if-elif statements to check if our i variable satisfies certain constraints. If they do, we'll add its corresponding integer value to our final_answer variable:"
          },
          {
            "type": "pre",
            "text": "for i in numeral:\n  if i == \"M\":\n    final_answer += 1000\n  elif i == \"D\":\n    final_answer += 500\n  elif i == \"C\":\n    final_answer += 100\n  elif i == \"L\":\n    final_answer += 50\n  elif i == \"X\":\n    final_answer += 10\n  elif i == \"V\":\n    final_answer += 5\n  elif i == \"I\":\n    final_answer += 1"
          },
          {
            "type": "p",
            "text": "Next, when we print the final_answer at the end, we should cast it as a string with the built-in str() function so that it can be printed with the rest of the message:"
          },
          {
            "type": "pre",
            "text": "print(\"The roman numerals you entered translates to: \" + str(final_answer) + \"!\")"
          },
          {
            "type": "p",
            "text": "Make sure the print() statement is on the same indentation as the if-elif statements. Otherwise, Python will think you‚Äôre trying to put the print() command in an if-elif statement before everything is calculated."
          },
          {
            "type": "p",
            "text": "Lastly, outside the roman_to_int() function, let's use the input we prompted the user for so that our converted integer is printed:"
          },
          {
            "type": "pre",
            "text": "roman_to_int(numeral_input)"
          },
          {
            "type": "p",
            "text": "Let's save the file and run the code! When prompted, type ‚ÄúXX‚Äù to test the roman_to_int() function. Your output should say:"
          },
          {
            "type": "pre",
            "text": "‚ÄúThe Roman numerals you entered translate to: 20!‚Äù"
          },
          {
            "type": "p",
            "text": "Next, try ‚ÄúMDC‚Äù. You should receive an output relating to the value ‚Äú1600‚Äù. If that is what you got, great! You‚Äôre almost done!"
          }
        ]
      },
      {
        "checkpoint": "# Step 3: Handle Edge Cases",
        "content": [
          {
            "type": "p",
            "text": "Not all Roman numerals are represented by one letter. For example, the numeral for 4 is \"IV\" (two letters, \"I\" and \"V\"). Same thing with 9, which translates to \"IX\"."
          },
          {
            "type": "p",
            "text": "We need to make code that handles these edge cases. Right now, we do not get \"IV\" when 4 is passed to our romanToInt() function. Instead, we will have an output of 6."
          },
          {
            "type": "p",
            "text": "We will place this code before the for loop we made in the last step."
          },
          {
            "type": "p",
            "text": "This can be done by the following:"
          },
          {
            "type": "pre",
            "text": "if \"CM\" in numeral:\n  final_answer += 900\n  numeral = numeral.replace(\"CM\", \"\")\nif \"CD\" in numeral:\n  final_answer += 400\n  numeral = numeral.replace(\"CD\", \"\")\nif \"XC\" in numeral:\n  final_answer += 90\n  numeral = numeral.replace(\"XC\", \"\")\nif \"XL\" in numeral:\n  final_answer += 40\n  numeral = numeral.replace(\"XL\", \"\")\nif \"IX\" in numeral:\n  final_answer += 9\n  numeral = numeral.replace(\"IX\", \"\")\nif \"IV\" in numeral:\n  final_answer += 4\n  numeral = numeral.replace(\"IV\", \"\")"
          },
          {
            "type": "p",
            "text": "If one of these values is in the numeral string, its corresponding integer value is added to the final_answer variable. Finally, these \"nonwhole\" Roman numerals with two letters are removed from the numeral variable since they are now calculated. This ensures the code runs smoothly and prints the correct answer."
          },
          {
            "type": "p",
            "text": "For example, if you were to input \"XLI,\" the code would see there is an \"XL\" in the numeral variable. It would add 40 to the final_answer, then remove the \"XL\" from numeral so the rest of the input is processed in the for loop..."
          },
          {
            "type": "p",
            "text": "Now that you're done, save your file and test out your program with the following to see if you get the correct integers:"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Congratulations! You've successfully programmed a Roman numeral converter! We defined a function that uses loops, control flow statements, and built-in functions to convert a Roman numeral into its equivalent integer value. Additionally, we also included code that handled an edge case where a given Roman numeral was made of two letters, instead of one."
          },
          {
            "type": "p",
            "text": "Bonus: Ready for a new challenge with this? Write a new int_to_roman() function that converts an integer into a Roman numeral!"
          },
          {
            "type": "p",
            "text": "View the full solution code here."
          }
        ]
      }
    ]
  },
  {
    "title": "Build Pong with PyGame",
    "link": "https://www.codedex.io/projects/build-pong-with-pygame",
    "tags": [
      "Python",
      "Advanced"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/build-pong-with-pygame.png",
    "prerequisite": {
      "Prerequisites:": "Python fundamentals, Game development concepts",
      "Versions:": "Python 3.10",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Can you guess what the first commercially successful video game ever created was? It was called Pong!"
          },
          {
            "type": "p",
            "text": "Pong is a simple 2D table tennis arcade game created by Atari in 1972. With today's technology, it's much easier to make!"
          },
          {
            "type": "p",
            "text": "In this tutorial, you'll learn how to recreate Pong using Python and the PyGame library. You will learn how this game engine works and how you can make simple collision detection so you and a friend can play Pong on the same computer!"
          },
          {
            "type": "p",
            "text": "This is what the game will look like at the end:"
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "Without any further ado, let's get into it!"
          },
          {
            "type": "p",
            "text": "Note: This is an advanced project, so it is recommended that you go through \"The Legend of Python\" course before making this Pong clone."
          }
        ]
      },
      {
        "checkpoint": "# Setting Everything Up",
        "content": [
          {
            "type": "p",
            "text": "Before writing any code, go into your terminal and install the Pygame library using pip. Here, we're using the pip3 command (which comes with pip), because we'll be writing our code for Python 3."
          },
          {
            "type": "pre",
            "text": "pip3 install pygame"
          },
          {
            "type": "p",
            "text": "It's also a good idea to wrap our code in a main() function, and to call that function when the script is run.\nTo do this, you simply need to add this to the Python file:"
          },
          {
            "type": "pre",
            "text": "def main():\n\nif __name__ == '__main__':\n  main()"
          },
          {
            "type": "p",
            "text": "For more information on what the equality check means, click here."
          },
          {
            "type": "p",
            "text": "Also, add import pygame and import random at the start of the file to import the pygame and random libraries."
          }
        ]
      },
      {
        "checkpoint": "# Creating a Window",
        "content": [
          {
            "type": "p",
            "text": "Before we code any of the game logic, we first need to render a simple window with PyGame."
          },
          {
            "type": "p",
            "text": "We'll also set the screen size to 960x720 and the background color to COLOR_BLACK (a constant), which represents the color black in a Python tuple. We also go over the Pygame event loop, to check for the QUIT event. If this event is triggered, we exit the function by calling return."
          },
          {
            "type": "p",
            "text": "This event loop will be used again later. Finally, we also set the name of the window to \"Pong\"."
          },
          {
            "type": "p",
            "text": "Here is the code for all of this:"
          },
          {
            "type": "pre",
            "text": "import pygame\nimport random\n# constants for the windows width and height values\nSCREEN_WIDTH = 960\nSCREEN_HEIGHT = 720\n\n# the RGB values for the colors used in the game\nCOLOR_BLACK = (0, 0, 0)\nCOLOR_WHITE = (255, 255, 255)\n\ndef main():\n  # GAME SETUP\n\n  # initialize the PyGame library (this is absolutely necessary)\n  pygame.init()\n\n  # this creates the window for the game\n  screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n\n  # set the window's title\n  pygame.display.set_caption(\"Pong\")\n\n  # GAME LOOP\n  while True:\n    \"\"\"\n    set the back ground color to black\n    needs to be called everytime the game updates\n    \"\"\"\n    screen.fill(COLOR_BLACK)\n\n    # checking for events\n    for event in pygame.event.get():\n\n      # if the user exits the window\n      if event.type == pygame.QUIT:\n\n        # exit the function, to finish the game\n        return"
          },
          {
            "type": "p",
            "text": "NOTE: You will notice that I have separated the code before and after the while loop with two comments.\nFrom now on, I will refer to the code before this loop as the setup. The code after will be called the game loop."
          },
          {
            "type": "p",
            "text": "You can also see that we initialized some variables before the main() function. Since these are constants (i. e. they will not change), it is best to name them with capitalized letters. Now you will see that in the game loop we have a for loop to go through pygame.event.get(). This is where all the game engine related events (such as the user exiting the window, keypresses, etc.) will be handled. You can also create your own custom events, though that will not be covered in this tutorial. Here we simply check if the event list contains the pygame.QUIT event, which is triggered when the [X] button is clicked on a window. If that is the case, we simply return out of the main() function, which ends the while loop and closes the window."
          },
          {
            "type": "p",
            "text": "You can run the script, and an empty window should appear, which you can close out of."
          }
        ]
      },
      {
        "checkpoint": "# Creating the Players and the Ball",
        "content": [
          {
            "type": "p",
            "text": "Now, in the setup, we need to add some variables for the players and the ball. For the players, they each need a Rect object, which is essentially a rectangular sprite with collisions. We also need variables to hold the value of the players' movement. For the ball, we have a Rect as well, and two \"acceleration\" variables (similar to the players' \"move\" variables). We set those to a random number between 2 and 4 to give some speed variety. We also randomize the direction of the ball by multiplying the acceleration variables by -1, one times out of two. We do this multiplication because, by default, a positive ball_accel_x will make the ball go right (because of Pygame coordinates). A positive ball_accel_y will make the ball go down. By multiplying these variables on the flip of a coin, we randomize the vertical and horizontal direction of the ball."
          },
          {
            "type": "p",
            "text": "Here is the code for this part (it goes in the setup section):"
          },
          {
            "type": "pre",
            "text": "\"\"\"\nthese are the players' game paddles\nthe pygame.Rect function need the x, y, width and height\nof the rectangles we will be drawing\n\"\"\"\npaddle_1_rect = pygame.Rect(30, 0, 7, 100)\npaddle_2_rect = pygame.Rect(SCREEN_WIDTH - 50, 0, 7, 100)\n\n# this is to track by how much the players' paddles will move per frame\npaddle_1_move = 0\npaddle_2_move = 0\n\n# this is the rectangle that represents the ball\nball_rect = pygame.Rect(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 25, 25)\n\n# determine the x and y speed of the ball (0.1 is just to scale the speed down)\nball_accel_x = random.randint(2, 4) * 0.1\nball_accel_y = random.randint(2, 4) * 0.1\n\n# randomize the direction of the ball\nif random.randint(1, 2) == 1:\n  ball_accel_x *= -1\nif random.randint(1, 2) == 1:\n  ball_accel_y *= -1"
          },
          {
            "type": "p",
            "text": "Finally, to draw these rectangles to the screen, add this add the bottom of the game loop:"
          },
          {
            "type": "pre",
            "text": "# draw player 1 and player 2's paddle rects with the white color\npygame.draw.rect(screen, COLOR_WHITE, paddle_1_rect)\npygame.draw.rect(screen, COLOR_WHITE, paddle_2_rect)\n\n# draw the ball with the white color\npygame.draw.rect(screen, COLOR_WHITE, ball_rect)\n\n# update the display (this is necessary for Pygame)\npygame.display.update()"
          }
        ]
      },
      {
        "checkpoint": "# Making the Ball Move",
        "content": [
          {
            "type": "p",
            "text": "Next, let's make the ball move! First we'll need to define a variable clock in the setup: it is a PyGame Clock object."
          },
          {
            "type": "p",
            "text": "This is probably the most important part of the code, since it allows us to tell what the time is, but most importantly, allow us to determine the delta time."
          },
          {
            "type": "p",
            "text": "Here is the code for that:"
          },
          {
            "type": "pre",
            "text": "# create the clock object to keep track of the time\nclock = pygame.time.Clock()\n\n\"\"\"\nthis is to check whether or not to move the ball\nwe will make it move after 3 seconds\n\"\"\"\nstarted = False"
          },
          {
            "type": "p",
            "text": "In the loop, let's add this little bit of code. This code snippet will also include setting the delta_time variable."
          },
          {
            "type": "pre",
            "text": "\"\"\"\nget the time elapse between now and the last frame\n60 is an arbitrary number but the game runs smooth at 60 FPS\n\"\"\"\ndelta_time = clock.tick(60)"
          },
          {
            "type": "p",
            "text": "Before that, in the loop, let's add a start screen. This can be easily done with the following code (place it after the line that make the screen black):"
          },
          {
            "type": "pre",
            "text": "# make the ball move after 3 seconds\nif not started:\n  # load the Consolas font\n  font = pygame.font.SysFont('Consolas', 30)\n\n  # draw some text to the center of the screen\n  text = font.render('Press Space to Start', True, COLOR_WHITE)\n  text_rect = text.get_rect()\n  text_rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)\n  screen.blit(text, text_rect)\n\n  # update the display\n  pygame.display.flip()\n\n  clock.tick(60)\n\n  for event in pygame.event.get():\n    if event.type == pygame.QUIT:\n      pygame.quit()\n      return\n    if event.type == pygame.KEYDOWN:\n      if event.key == pygame.K_SPACE:\n        started = True"
          },
          {
            "type": "p",
            "text": "NOTE: when looking at the next part of the code, please keep in mind that that PyGame coordinates place (0, 0) at the top-left corner of the screen, and that increasing x means going to the right, and increasing y means going down."
          },
          {
            "type": "p",
            "text": "To finish making the ball move, add this code to the end of the game loop, right before where we draw the rectangles."
          },
          {
            "type": "p",
            "text": "First we check if the ball goes out of bounds on the right or left side of the screen. If it does, we end the game by ending the function."
          },
          {
            "type": "p",
            "text": "After that, we can very simply check if the ball collides with the bottom or the top of the screen."
          },
          {
            "type": "p",
            "text": "Next, we check if the ball rectangle collides with the player rectangles."
          },
          {
            "type": "p",
            "text": "We also check if the ball is in front of the paddle, because if it isn't, then it doesn't make sense to change its direction. To change it, we simply multiply the ball_accel_x variable from earlier by -1, and add or substract some value to or from x (for a PyGame Rect, this is called left). This is to make sure no glitchy collisions happen (if you don't believe me, try removing those two lines, and play around for a bit. You'll see what I mean)."
          },
          {
            "type": "p",
            "text": "Finally, if the ball can move (i.e. if started is True), we simply move the ball by adding the ball_accel_x and ball_accel_y to the left and top properties of the ball_rect object (remember to always multiply by delta_time)."
          },
          {
            "type": "p",
            "text": "Here is the code:"
          },
          {
            "type": "pre",
            "text": "# if the ball goes out of bounds, end the game\nif ball_rect.left <= 0 or ball_rect.left >= SCREEN_WIDTH:\n  return\n\n# if the ball is getting close to the top (15 is an arbitrary number, but I found that it worked great)\nif ball_rect.top < 0:\n  # invert its vertical velocity\n  ball_accel_y *= -1\n  # add a bit of y to it to not trigger the above code again\n  ball_rect.top = 0\n# do the same thing with the bottom\nif ball_rect.bottom > SCREEN_HEIGHT - ball_rect.height:\n  ball_accel_y *= -1\n  ball_rect.top = SCREEN_HEIGHT - ball_rect.heigh\n\n\"\"\"\nif paddle_1_rect collides with the ball and the ball is in front of it,\nchange the speed of the ball and make it move a little in the other way\n\"\"\"\nif paddle_1_rect.colliderect(ball_rect) and paddle_1_rect.left < ball_rect.left:\n  ball_accel_x *= -1\n  ball_rect.left += 5\n# do the same with paddle_2_rect\nif paddle_2_rect.colliderect(ball_rect) and paddle_2_rect.left > ball_rect.left:\n  ball_accel_x *= -1\n  ball_rect.left -= 5\n\n# if the game is started (after 3 seconds this is true)\nif started:\n  # move the ball\n  ball_rect.left += ball_accel_x * delta_time\n  ball_rect.top += ball_accel_y * delta_time"
          }
        ]
      },
      {
        "checkpoint": "# Making the Players Move",
        "content": [
          {
            "type": "p",
            "text": "Making the players move is slightly more complicated. However, the result is definitely worth it. Since, in PyGame, KEYDOWN and KEYUP events are different things, we need to check for both. When it's KEYDOWN, we set the \"move\" variable to move the player. When it's KEYUP, we can reset the \"move\" variable. We only actually move the players after this."
          },
          {
            "type": "p",
            "text": "Here is the code, that goes in the for event in pygame.event.get(): loop:"
          },
          {
            "type": "pre",
            "text": "# if the user is pressing a key\nif event.type == pygame.KEYDOWN:\n\n  # PLAYER 1\n  # if the key is W, set the movement of paddle_1 to go up\n  if event.key == pygame.K_w:\n    paddle_1_move = -0.5\n\n  # if the key is S, set the movement of paddle_1 to go down\n  if event.key == pygame.K_s:\n    paddle_1_move = 0.5\n\n  # PLAYER 2\n  # if the key is the up arrow, set the movement of paddle_2 to go up\n  if event.key == pygame.K_UP:\n    paddle_2_move = -0.5\n  # if the key is the down arrow, set the movement of paddle_2 to go down\n  if event.key == pygame.K_DOWN:\n    paddle_2_move = 0.5\n\n# if the player released a key\nif event.type == pygame.KEYUP:\n  # if the key released is w or s, stop the movement of paddle_1\n  if event.key == pygame.K_w or event.key == pygame.K_s:\n    paddle_1_move = 0.0\n\n  # if the key released is the up or down arrow, stop the movement of paddle_2\n  if event.key == pygame.K_UP or event.key == pygame.K_DOWN:\n    paddle_2_move = 0.0"
          },
          {
            "type": "p",
            "text": "Add this outside of the loop to move the players:"
          },
          {
            "type": "pre",
            "text": "\"\"\"\nmove paddle_1 and paddle_2 according to their `move` variables\nwe also multiply the `move` variable by the delta time to keep movement consistent through frames\n\"\"\"\npaddle_1_rect.top += paddle_1_move * delta_time\npaddle_2_rect.top += paddle_2_move * delta_time"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "And voil√†! Your Pong clone is done! You can now play Pong with your friend on the same computer."
          },
          {
            "type": "p",
            "text": "One of you two uses the W and S keys, while the other uses the UP and DOWN arrow keys."
          },
          {
            "type": "p",
            "text": "If you want to make the game a little better by preventing the players from going completely of limits with their paddles, add this in the game loop:"
          },
          {
            "type": "pre",
            "text": "if paddle_1_rect.top < 0:\n  paddle_1_rect.top = 0\nif paddle_1_rect.bottom > SCREEN_HEIGHT:\n  paddle_1_rect.bottom = SCREEN_HEIGHT\n\nif paddle_2_rect.top < 0:\n  paddle_2_rect.top = 0\nif paddle_2_rect.bottom > SCREEN_HEIGHT:\n  paddle_2_rect.bottom = SCREEN_HEIGHT"
          },
          {
            "type": "p",
            "text": "Notice how I haven't commented the code. This is because I want you to try and understand it on your own! Happy coding!"
          },
          {
            "type": "p",
            "text": "NOTE: see below for the full code if you are having trouble with arranging the different snippets."
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": []
      }
    ]
  },
  {
    "title": "Animate Fireworks with JavaScript",
    "link": "https://www.codedex.io/projects/animate-fireworks-with-javascript-and-canvas",
    "tags": [
      "JS",
      "Advanced"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/fireworks-with-javascript-and-canvas.png",
    "prerequisite": {
      "Prerequisites:": "HTML, CSS, JavaScript fundamentals",
      "Versions:": "None",
      "Read Time:": "75 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "The holiday season is a special time for everyone. Christmas and New Year are around the corner, and fireworks will light up the sky. If you can't wait to see the fireworks in action, I've got the answer for you. ü™Ñ"
          },
          {
            "type": "p",
            "text": "We're going to make our very own fireworks using JavaScript and the Canvas API. This way, you will be able to show your project to your family and friends and believe me, it will spark a smile on their faces."
          },
          {
            "type": "p",
            "text": "By the end, you will create the following:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/animate-fireworks-with-javascript-and-canvas/completed-animation.gif"
          },
          {
            "type": "p",
            "text": "And it is: let's code it up!"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "p",
            "text": "Let's start by setting up the project and the structure. But before that, a quick recap."
          },
          {
            "type": "p",
            "text": "üí° What is Canvas API? If you have never worked with it before, no worries! It is fairly simple and so much fun!"
          },
          {
            "type": "p",
            "text": "Let's get it rolling! üéâ"
          },
          {
            "type": "p",
            "text": "Let's open up the code editor of your choice (we recommend VS Code). If you are using VS Code, search for the \"Live Server\" extension:"
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "Install it and relaunch the editor. You should see the ‚ÄúGo Live‚Äù option in the bottom right corner of your editor."
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "Next, create a new file called index.html. It will be our starting point ‚Äî the backbone that our code will rely on."
          },
          {
            "type": "p",
            "text": "The next thing we need to do is add the following base code:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>New Year Fireworks üéâ</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <!-- We will write more code here -->\n  </body>\n</html>"
          },
          {
            "type": "p",
            "text": "Notice that body tags are currently empty. This is where we will place two canvas elements and two script elements in."
          },
          {
            "type": "p",
            "text": "In the <body> element, replace the comment with the following snippet:"
          },
          {
            "type": "pre",
            "text": "<body>\n  <canvas id=\"canvas-background\"></canvas>\n  <canvas id=\"fireworks\"></canvas>\n  <script src=\"canvas-background.js\"></script>\n  <script src=\"canvas-fireworks.js\"></script>\n</body>"
          },
          {
            "type": "p",
            "text": "As a convention, the value of the id is typically just ‚Äúcanvas‚Äù. But since we've got two canvases, I decided to name them canvas-background and canvas-fireworks so that we can differentiate between them. This of course can be any name of your choosing, just pick something that is easy to remember."
          },
          {
            "type": "p",
            "text": "Now, why do we need two separate canvases? Well, it is because we will have two layers:"
          },
          {
            "type": "p",
            "text": "Create canvas-background.js and canvas-fireworks.js files, and keep them empty for now. We will come back to it in a second. These files should be in the same directory as the index.html. The base code we pasted in the index.html file links HTML and CSS together."
          },
          {
            "type": "p",
            "text": "Let's also create a styles.css and add some generic code to it:"
          },
          {
            "type": "pre",
            "text": "body {\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n}\n\nh1, p {\n  padding: 0;\n  margin: 0;\n}\n\ncanvas {\n  cursor: pointer;\n  position: absolute;\n}"
          },
          {
            "type": "p",
            "text": "margin: 0 and padding: 0 on body resets the margin and padding on your body as we are going to make the canvas occupy the whole screen and we don't want to see any white space around it. It's a good practice to remove paddings and margins from your text elements like h1 and p. Add overflow: hidden to the body tag so that the content will be clipped if necessary to fit the padding box."
          },
          {
            "type": "p",
            "text": "It is also essential to set canvas elements to the position absolute as we want to overlay them on top of each other for an immersive experience."
          },
          {
            "type": "p",
            "text": "Extend your styles.css with the following:"
          },
          {
            "type": "pre",
            "text": "@import url('https://fonts.googleapis.com/css2?family=Pacifico&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Work+Sans&display=swap');\n\nbody {\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n  font-family: 'Pacifico', cursive;\n  color: #fff;\n}\n\nh1, p {\n  padding: 0;\n  margin: 0;\n}\n\nh1 {\n  z-index: 2;\n  text-transform: uppercase;\n  font-size: 6vw;\n  padding: 0 1rem;\n}\n\np {\n  z-index: 2;\n  text-transform: uppercase;\n  font-size: 1.5vw;\n  font-family: 'Work Sans', sans-serif;\n}\n\ncanvas {\n  cursor: pointer;\n  position: absolute;\n}"
          },
          {
            "type": "p",
            "text": "Add custom fonts. We will use Google fonts. For this tutorial, let's select Pacifico for h1 and Work Sans for p elements."
          },
          {
            "type": "p",
            "text": "Start by importing the fonts on top of the file and set the font family across the entire site to be 'Pacifico', cursive. p elements will have 'Work Sans', sans-serif; set explicitly which will overwrite the default font set on the body."
          },
          {
            "type": "p",
            "text": "Since h1 and p will be static elements, we need to make sure that they will overlay the canvases. z-index: 2; does this. (We will set an Avatar image to z-index: 1; later on.)"
          },
          {
            "type": "p",
            "text": "Let's quickly recap on rem and vw."
          },
          {
            "type": "p",
            "text": "üí° Relative length values are defined in terms of some other value. These are, for example, rem, em, and vw. You can read more on this on MDN Web Docs. Just know, that rem is defined relative to the font size of the root element. If the root element's font size is not changed by the user this value is normally 16px. vw stands for 1% viewport width. That is to say that if you define the width property as 6vw, the element will take up 6% of the available viewport's width."
          },
          {
            "type": "p",
            "text": "Lastly, I have created two transparent avatar images using Canva App. These images can be found in the assets/ folder of the GitHub repository for this tutorial. Download them and then add them to your own assets/ folder."
          },
          {
            "type": "p",
            "text": "Time to launch the live server by clicking on ‚ÄúGo Live‚Äù in the bottom right corner of VS Code."
          }
        ]
      },
      {
        "checkpoint": "# Drawing the Background",
        "content": [
          {
            "type": "p",
            "text": "In order to get some things on the screen, we're going to add the background first."
          },
          {
            "type": "p",
            "text": "Open your canvas-background.js and add the following code:"
          },
          {
            "type": "pre",
            "text": "// canvas-background.js\n\nconst canvas = document.getElementById('canvas-background');\nconst context = canvas.getContext('2d');"
          },
          {
            "type": "p",
            "text": "Note: A comment with the file name will be included at the top of each JavaScript code snippet so that you can better tell which snippet goes with which .js file."
          },
          {
            "type": "p",
            "text": "The .getElementById() method gets a reference to the HTML <canvas> element. Next, the HTMLCanvasElement.getContext() method gets that element's rendering context - the thing onto which the drawing will be rendered."
          },
          {
            "type": "p",
            "text": "Once you have the initial skeleton set up, two attributes are required when setting up your canvas space. The desired width and height of the canvas need to be set."
          },
          {
            "type": "p",
            "text": "First, get the document's width and height, next set the canvas to take up the whole document's space:"
          },
          {
            "type": "pre",
            "text": "// canvas-background.js\n\n// get document's width and height\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\n// set background to be fullscreen\ncanvas.width = width;\ncanvas.height = height;"
          },
          {
            "type": "p",
            "text": "Moving forward, wrap your code in an IIFE."
          },
          {
            "type": "pre",
            "text": "// canvas-background.js\n\n(() => {\n  const canvas = document.getElementById('canvas-background');\n  const context = canvas.getContext('2d');\n  \n  // get document's width and height\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  \n  // set background to be fullscreen\n  canvas.width = width;\n  canvas.height = height;\n})();"
          },
          {
            "type": "p",
            "text": "üí° IIFE"
          },
          {
            "type": "p",
            "text": "Immediately Invoked Function Expression\nAn immediately invoked function expression (IIFE) is one of the most popular design patterns in JavaScript. It pronounces like iify. In short: It is a function expression that invokes itself automatically. Almost like magic! ü™Ñ"
          },
          {
            "type": "p",
            "text": "An IIFE is composed of three main components:"
          },
          {
            "type": "p",
            "text": "‚ÄúIffy‚Äù helps to avoid name collisions and polluting the global namespace. It is often used to execute an async function and create private and public variables and methods."
          },
          {
            "type": "p",
            "text": "Now that we know the power of IIFE, let's move on."
          },
          {
            "type": "p",
            "text": "Add our first arrow function to create the background. It will be in radial gradient, so let's see how to do it:"
          },
          {
            "type": "pre",
            "text": "// canvas-background.js\n\nconst drawBackground = () => {\n  // The inner circle is at x=0, y=0, with radius=height\n  // The outer circle is at x=0, y=0, with radius=width\n  const gradient = context.createRadialGradient(0, 0, height, 0, 0, width);\n  // offset and color\n  gradient.addColorStop(0, '#002D62');\n  gradient.addColorStop(0.5, '#0066b2');\n  gradient.addColorStop(1, '#6699CC');\n  \n  // make canvas the color of gradient\n  context.fillStyle = gradient;\n  // place its top-left corner at (0, 0), and\n  // and give it a size of \"width\" wide by \"height\" tall.\n  context.fillRect(0, 0, width, height);\n};\n\ndrawBackground();"
          },
          {
            "type": "p",
            "text": "Call drawBackground() at the bottom but within your IIFE."
          },
          {
            "type": "p",
            "text": "This will generate a smooth radial gradient from the left upper corner down to the right bottom corner. The .createRadialGradient() method creates a radial gradient using the size and coordinates of two circles. To be applied to a shape, the gradient must first be assigned to the fillStyle property."
          },
          {
            "type": "p",
            "text": "üí° The .createRadialGradient() method is specified by six parameters, three defining the gradient's start circle, and three defining the end circle. A radial CanvasGradient initialized with the two specified circles will be returned."
          },
          {
            "type": "p",
            "text": "createRadialGradient(x0, y0, r0, x1, y1, r1)"
          },
          {
            "type": "p",
            "text": "You can find more about it in the MDN Web Docs."
          },
          {
            "type": "p",
            "text": "Notice three color stops between the gradient's two circles are then created. addColorStop() method is being used taking in an offset and a color as arguments. Keep in mind, your offset needs to be a number between 0 and 1, where 0 is the start and 1 is the end of the gradient. Finally, the gradient is assigned to the canvas context and is rendered to a filled rectangle."
          },
          {
            "type": "p",
            "text": "To draw the foreground ‚Äî represented by a dark blue pedestal at the bottom ‚Äî extend the file with the following function:"
          },
          {
            "type": "pre",
            "text": "// canvas-background.js\n\nconst drawForeground = () => {\n  context.fillStyle = '#13274F';\n  context.fillRect(0, height * 0.95, width, height);\n  \n  context.fillStyle = '#002D62';\n  context.fillRect(0, height * 0.955, width, height);\n};\n\ndrawForeground();"
          },
          {
            "type": "p",
            "text": "Call drawForeground() at the bottom but within your IIFE."
          },
          {
            "type": "p",
            "text": "This will create a base on the last 5% of the canvas (height * 95%). At this step, you should have the following on the screen:"
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "Your canvas-background.js file should contain the following code by now:"
          },
          {
            "type": "pre",
            "text": "// canvas-background.js\n\n(() => {\n  const canvas = document.getElementById('canvas-background'); // gets a reference to the HTML <canvas> element\n  const context = canvas.getContext('2d'); // get the rendering context for the canvas\n  \n  // get document's width and height\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  \n  // set background to be fullscreen\n  canvas.width = width;\n  canvas.height = height;\n  \n  const drawBackground = () => {\n    // The inner circle is at x=0, y=0, with radius=height\n    // The outer circle is at x=0, y=0, with radius=width\n    const gradient = context.createRadialGradient(0, 0, height, 0, 0, width);\n    // offset and color\n    gradient.addColorStop(0, '#002D62');\n    gradient.addColorStop(0.5, '#0066b2');\n    gradient.addColorStop(1, '#6699CC');\n\n    // make canvas the color of gradient\n    context.fillStyle = gradient;\n    // place its top-left corner at (0, 0), and\n    // and give it a size of \"width\" wide by \"height\" tall.\n    context.fillRect(0, 0, width, height);\n  };\n   \n  const drawForeground = () => {\n    context.fillStyle = '#13274F';\n    context.fillRect(0, height * 0.95, width, height);\n    \n    context.fillStyle = '#002D62';\n    context.fillRect(0, height * 0.955, width, height);\n  };\n\n  drawBackground();\n  drawForeground();\n})();"
          }
        ]
      },
      {
        "checkpoint": "# Adding Avatars",
        "content": [
          {
            "type": "p",
            "text": "Remember in the setup you have added the images to your assets folder. Well, well! Let's use them."
          },
          {
            "type": "p",
            "text": "Avatars are static assets and those will be added to the scene within the HTML code. We will add some styling to position them on the page as well as JavaScript to toggle our heroes. Among them, we will introduce Santa Claus and his friends: reindeer, bear, snowman, and of course, cookie."
          },
          {
            "type": "p",
            "text": "Go back to index.html and add the following code snippet in between the body tag right before the first canvas:"
          },
          {
            "type": "pre",
            "text": "<div class=\"image-container\">\n  <img id=\"avatar\" src=\"./assets/santa.png\" alt=\"avatar\" />\n</div>"
          },
          {
            "type": "p",
            "text": "Add one more script tag before the other script tags:"
          },
          {
            "type": "pre",
            "text": "<script src=\"avatar-toggle.js\"></script>"
          },
          {
            "type": "p",
            "text": "Your code should look like this:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>New Year Fireworks üéâ</title>\n  // Add favicon\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"./assets/santa.png\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <div class=\"image-container\">\n      <img id=\"avatar\" src=\"./assets/santa.png\" alt=\"avatar\" />\n    </div>\n    <canvas id=\"canvas-background\"></canvas>\n    <canvas id=\"canvas-fireworks\"></canvas>\n\n    <script src=\"avatar-toggle.js\"></script>\n    <script src=\"canvas-background.js\"></script>\n    <script src=\"canvas-fireworks.js\"></script>\n  </body>\n</html>"
          },
          {
            "type": "p",
            "text": "Notice that we added a favicon. This tiny icon will be displayed in your tab which makes it very festive. The image is just one of the avatar images from your asset folder."
          },
          {
            "type": "p",
            "text": "We also added another script tag where the JavaScript magic for toggling avatars will happen."
          },
          {
            "type": "p",
            "text": "Let's quickly add the following styling to the div that wraps the image and img tag."
          },
          {
            "type": "p",
            "text": "In your styles.css file, add the following after the p tag styling:"
          },
          {
            "type": "pre",
            "text": ".image-container {\n  display: flex;\n  z-index: 1;\n  height: 20%;\n  width: 100%;\n  justify-content: center;\n}\n\nimg {\n  z-index: 1;\n  bottom: 5%;\n}"
          },
          {
            "type": "p",
            "text": "Also, add img to have position absolute and cursor pointer. We can just chain it before the canvas."
          },
          {
            "type": "pre",
            "text": "img, canvas {\n  cursor: pointer;\n  position: absolute;\n}"
          },
          {
            "type": "p",
            "text": "What's next? Your guess is correct. Create a new file called avatar-toggle.js and add the following code:"
          },
          {
            "type": "pre",
            "text": "// avatar-toggle.js\nconst image = document.getElementById('avatar');\n\nimage.addEventListener('click', function () {\n  if (image.src.match('./assets/santa.png')) {\n    image.src = './assets/reindeer.png';\n  } else if (image.src.match('./assets/reindeer.png')) {\n    image.src = './assets/bear.png';\n  } else if (image.src.match('./assets/bear.png')) {\n    image.src = './assets/cookie.png';\n  } else {\n    image.src = './assets/santa.png';\n  }\n});"
          },
          {
            "type": "p",
            "text": "So what's going on? Let's find out. It's pretty simple!"
          },
          {
            "type": "p",
            "text": "First, get an element by id. Remember, that the img tag in your html document has an id of avatar. This allows us to target it and use it for JavaScript manipulations."
          },
          {
            "type": "p",
            "text": "Next up is where the trick happens. And it is as simple as attaching an event listener to the grabbed image and playing with if else statement."
          },
          {
            "type": "p",
            "text": "Note: If you didn't know, JavaScript has a match() method that compares strings with a regular expression (regex). Or in other words, we can say that it is used to search string objects with any regex. But you can also pass a path to the image to it and it will work because it is just a string. In this tutorial, we wanted to introduce you to this simple but useful method."
          }
        ]
      },
      {
        "checkpoint": "# Adding Typography",
        "content": [
          {
            "type": "p",
            "text": "The same thing as with img, we will add static typography to our site."
          },
          {
            "type": "p",
            "text": "In index.html, add this snippet to your <body> element (right before the <div> element with an id of \"image-container\"):"
          },
          {
            "type": "pre",
            "text": "<div class=\"text-container\">\n  <h1>Ho Ho Ho!</h1>\n  <p>Click on the avatar to pick your hero</p>\n</div>"
          },
          {
            "type": "p",
            "text": "Your final index.html should look like this:"
          },
          {
            "type": "pre",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>New Year Fireworks üéâ</title>\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"./assets/santa.png\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <div class=\"text-container\">\n      <h1>Ho Ho Ho!</h1>\n      <p>Click on the avatar to pick your hero</p>\n    </div>\n    <div class=\"image-container\">\n      <img id=\"avatar\" src=\"./assets/santa.png\" alt=\"avatar\" />\n    </div>\n    <canvas id=\"canvas-background\"></canvas>\n    <canvas id=\"canvas-fireworks\"></canvas>\n\n    <script src=\"avatar-toggle.js\"></script>\n    <script src=\"canvas-background.js\"></script>\n    <script src=\"canvas-fireworks.js\"></script>\n  </body>\n</html>"
          },
          {
            "type": "p",
            "text": "Now, let's add some styles and animation to our typography. Navigate to styles.css. Your final CSS should look like this:"
          },
          {
            "type": "pre",
            "text": "@import url('https://fonts.googleapis.com/css2?family=Pacifico&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Work+Sans&display=swap');\n\nbody {\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n  font-family: 'Pacifico', cursive;\n  color: #fff;\n}\n\nh1, p {\n  padding: 0;\n  margin: 0;\n}\n\n/* add this */\n.text-container {\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  top: 5%;\n  width: 100%;\n  height: 20%;\n  z-index: 1;\n  justify-content: center;\n  align-items: center;\n}\n\n/* extend this */\nh1 {\n  z-index: 2;\n  text-transform: uppercase;\n  font-size: 6vw;\n  padding: 0 1rem;\n  background-image: linear-gradient(\n    to right top,\n    #ffff34,\n    #ffc812,\n    #ff8f2f,\n    #e44d2e,\n    #9e1b32\n  );\n  background-size: 50% auto;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  animation: gradientAnimation 7.5s ease alternate infinite;\n}\n\n/* add this */\n@keyframes gradientAnimation {\n  to {\n    background-position: 100% top;\n  }\n}\n\np {\n  z-index: 2;\n  text-transform: uppercase;\n  font-size: 1.5vw;\n  font-family: 'Work Sans', sans-serif;\n}\n\nimg {\n  z-index: 1;\n  bottom: 5%;\n}\n\n.image-container {\n  display: flex;\n  z-index: 1;\n  height: 20%;\n  width: 100%;\n  justify-content: center;\n}\n\nimg,\ncanvas {\n  cursor: pointer;\n  position: absolute;\n}"
          },
          {
            "type": "p",
            "text": "Notice the comments before the selectors that should be extended or added."
          },
          {
            "type": "p",
            "text": ".text-container is a wrapper around h1 and p. It will help us position texts to the top middle. For that, we use a flex container. The rest properties on .text-container selector help to make it a bit prettier."
          },
          {
            "type": "p",
            "text": "Extended h1 by adding colorful animation. You can play around with it to create your custom gradient and transition."
          },
          {
            "type": "p",
            "text": "At this point, our animation should look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/animate-fireworks-with-javascript-and-canvas/animation-wip.gif"
          },
          {
            "type": "p",
            "text": "To finish up the static part, let's draw some stars on the background canvas."
          }
        ]
      },
      {
        "checkpoint": "# Drawing Stars",
        "content": [
          {
            "type": "p",
            "text": "Next, let's draw stars! ‚ú®"
          },
          {
            "type": "p",
            "text": "In canvas-background.js, to make the stars easily customizable, add a numOfStars variable at the top of the file, as well as a helper function for generating random numbers between two values (right after setting the background to be fullscreen):"
          },
          {
            "type": "pre",
            "text": "// canvas-background.js\n\nconst numOfStars = 50;\n// helper function for generating random numbers between two values\nconst random = (min, max) => Math.random() * (max - min) + min;"
          },
          {
            "type": "p",
            "text": "And to draw the stars, add the drawStars() function to the end of the file:"
          },
          {
            "type": "pre",
            "text": "// canvas-background.js\n\nconst drawStars = () => {\n  let countOfStars = numOfStars;\n  \n  context.fillStyle = '#E6E6FA';\n  \n  while (countOfStars--) {\n    const x = random(25, width - 50);\n    const y = random(25, height * 0.5);\n    const size = random(1, 4);\n  \n    context.fillRect(x, y, size, size);\n  }\n};"
          },
          {
            "type": "p",
            "text": "It will create 50 stars in the view, at random positions, with random sizes, but not below half of the screen. height * 0.5 is responsible for it. To avoid getting stars drawn to the edge of the screen, a padding of 25px should be added. Notice the first argument in both random functions is 25."
          },
          {
            "type": "p",
            "text": "As a result, the upper half of the page will display stars, and padding of 25px will get added."
          },
          {
            "type": "p",
            "text": "Don't forget to call the function at the bottom but within your IIFE."
          },
          {
            "type": "p",
            "text": "Your final canvas-background.js file should look like this:"
          },
          {
            "type": "pre",
            "text": "// canvas-background.js\n\n(() => {\n  // gets a reference to the HTML <canvas> element\n  const canvas = document.getElementById('canvas-background');\n\n  // get the rendering context for the canvas\n  const context = canvas.getContext('2d');\n\n  // get document's width and height\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  // set background to be fullscreen\n  canvas.width = width;\n  canvas.height = height;\n\n  const numOfStars = 50;\n\n  // helper function for generating random numbers between two values\n  const random = (min, max) => Math.random() * (max - min) + min;\n\n  const drawBackground = () => {\n    // The inner circle is at x=0, y=0, with radius=height\n    // The outer circle is at x=0, y=0, with radius=width\n    const gradient = context.createRadialGradient(0, 0, height, 0, 0, width);\n    // offset and color\n    gradient.addColorStop(0, '#002D62');\n    gradient.addColorStop(0.5, '#0066b2');\n    gradient.addColorStop(1, '#6699CC');\n\n    // make canvas the color of gradient\n    context.fillStyle = gradient;\n    // place its top-left corner at (0, 0), and\n    // and give it a size of \"width\" wide by \"height\" tall.\n    context.fillRect(0, 0, width, height);\n  };\n\n  const drawForeground = () => {\n    context.fillStyle = '#13274F';\n    context.fillRect(0, height * 0.95, width, height);\n\n    context.fillStyle = '#002D62';\n    context.fillRect(0, height * 0.955, width, height);\n  };\n\n  const drawStars = () => {\n    let countOfStars = numOfStars;\n\n    context.fillStyle = '#E6E6FA';\n\n    while (countOfStars--) {\n      const x = random(25, width - 50);\n      const y = random(25, height * 0.5);\n      const size = random(1, 4);\n\n      context.fillRect(x, y, size, size);\n    }\n  };\n\n  drawBackground();\n  drawForeground();\n  drawStars();\n})();"
          },
          {
            "type": "p",
            "text": "And you are done with adding static content, CSS, and avatar toggling. Chapeau! üëí"
          },
          {
            "type": "p",
            "text": "Your site should look like this by now:"
          },
          {
            "type": "p",
            "text": ""
          }
        ]
      },
      {
        "checkpoint": "# Time for Dynamic Add-Ons!",
        "content": [
          {
            "type": "p",
            "text": "...and for the most interesting part where you will work with the second canvas."
          },
          {
            "type": "p",
            "text": "Once again, you want to give the same height and width for this canvas element as for the background. A better way than this would be to have a separate file or function that handles setting up all canvases. That way, you won't have code duplication. It is possible using ES Modules but as this is not part of this tutorial, we encourage you to look into it later and maybe even refactor your current code structure. But let's get back to our fireworks!"
          },
          {
            "type": "p",
            "text": "Add the following code to canvas-fireworks.js:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\n(() => {\n  // gets a reference to the HTML <canvas> element\n  const canvas = document.getElementById('canvas-fireworks');\n\n  // get the rendering context for the canvas\n  const context = canvas.getContext('2d');\n\n  // get document's width and height\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  // set background to be fullscreen\n  canvas.width = width;\n  canvas.height = height;\n\n  const positions = {\n    mouseX: 0,\n    mouseY: 0,\n    anchorX: 0,\n    anchorY: 0,\n  };\n\n})();"
          },
          {
            "type": "p",
            "text": "This time, we've also added a positions object that will hold the x and y coordinates both for the mouse as well as for the anchor."
          },
          {
            "type": "p",
            "text": "Next up, you want to define an anchor point. This will serve as a starting point for shooting the fireworks."
          },
          {
            "type": "p",
            "text": "Add this function:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nconst drawAnchor = () => {\n  // get the position for the anchor on the canvas\n  positions.anchorX = width / 2;\n  positions.anchorY = height * 0.9;\n  \n  context.clearRect(0, 0, width, height);\n  \n  // save context to remove transformation afterwards\n  context.save();\n  \n  context.translate(positions.anchorX, positions.anchorY);\n   \n  // restores the empty context state\n  context.restore();\n};"
          },
          {
            "type": "p",
            "text": "Let's shortly dive into it. First, we get the position of the anchor on the canvas on the X and Y axes. Basically, we want it to be right behind an avatar. This will create the effect of an avatar getting a bit rowdy and starting to shoot fireworks into the sky. üéÜ"
          },
          {
            "type": "p",
            "text": "We need to clear the context every time before running the function again. If we don't do it, then the fireworks will stay frozen on the screen. .clearRect() method does this job by erasing the pixels in a rectangular area."
          },
          {
            "type": "p",
            "text": "We also need to save this state to be able to translate the positions."
          },
          {
            "type": "p",
            "text": "We do it with save() method that will save the entire state of the canvas by pushing the current state onto a stack. But don't worry about it. üòá You just need to know that we are clearing the canvas and saving its new empty state before moving on. Skipping ahead, at the end of the function we use restore() method. It will restore the saved context once the function reaches its end. This way translate calls will not add up."
          },
          {
            "type": "p",
            "text": "So what does translate do?"
          },
          {
            "type": "p",
            "text": "The translate() method adds a translation transformation to the current matrix by moving the canvas and its origin x units horizontally and y units vertically on the grid."
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "In simple words, it will determine the spot on the canvas where our fireworks will burst."
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "Alright, so where do we use this function?"
          },
          {
            "type": "p",
            "text": "Add the following code right after drawAnchor() function:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\n// listen to the mousemove event and\nconst attachEventListeners = () => {\n  canvas.addEventListener('mousemove', (e) => {\n    // set the mouse positions to the correct coordinates\n    positions.mouseX = e.pageX;\n    positions.mouseY = e.pageY;\n  });\n};\n\nconst loop = () => {\n  requestAnimationFrame(loop); // call the loop function indefinitely and redraw the screen every frame\n  drawAnchor();\n};\n\nwindow.addEventListener('load', () => {\n  attachEventListeners();\n  loop();\n});"
          },
          {
            "type": "p",
            "text": "Once the window is loaded, you want to attach the event listeners as well as call a loop function for setting up the anchor. For the event listener, you want to listen to the mousemove event and set the mouse positions to the correct coordinates."
          },
          {
            "type": "p",
            "text": "requestAnimationFrame(loop) will call the loop function indefinitely and redraw the screen every frame. This function is asynchronous so it doesn't make much difference whether you will place it before drawAnchor() or after. In the second scenario, you would be able to add conditionals, but we won't cover them right now."
          },
          {
            "type": "p",
            "text": "By now, canvas-fireworks.js should contain the following code:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\n(() => {\n  // gets a reference to the HTML <canvas> element\n  const canvas = document.getElementById('canvas-fireworks');\n\n  // get the rendering context for the canvas\n  const context = canvas.getContext('2d');\n\n  // get document's width and height\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  // set background to be fullscreen\n  canvas.width = width;\n  canvas.height = height;\n\n  const positions = {\n    mouseX: 0,\n    mouseY: 0,\n    anchorX: 0,\n    anchorY: 0,\n  };\n\n  const drawAnchor = () => {\n    // get the position for the anchor on the canvas\n    positions.anchorX = width / 2;\n    positions.anchorY = height * 0.9;\n\n    context.clearRect(0, 0, width, height);\n\n    // save context to remove transformation afterwards\n    context.save();\n\n    context.translate(positions.anchorX, positions.anchorY);\n\n    // restores the empty context state\n    context.restore();\n  };\n\n  const attachEventListeners = () => {\n  // listen to the mousemove event and\n  // set the mouse positions to the correct coordinates\n    canvas.addEventListener('mousemove', (e) => {\n      positions.mouseX = e.pageX;\n      positions.mouseY = e.pageY;\n    });\n  };\n\n  const loop = () => {\n    requestAnimationFrame(loop); // call the loop function indefinitely and redraw the screen every frame\n    drawAnchor();\n  };\n\n  window.addEventListener('load', () => {\n    attachEventListeners();\n    loop();\n  });\n})();"
          }
        ]
      },
      {
        "checkpoint": "# Shooting Crackers üéá",
        "content": [
          {
            "type": "p",
            "text": "Finally! We are now at the point where we will have these crackers bursting! To help keep things more customizable, set up some variables and helper functions at the top of the file right after the positions object:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nconst fireworks = [];\nconst flecks = [];\nconst flecks2 = [];\nconst flecks3 = [];\nconst numberOfFlecks = 25; //  bear in mind: performance gets worse with higher number of flecks\n\nconst random = (min, max) => Math.random() * (max - min) + min;\n\n// calculate the distance between two points\n// using Pythagorean theorem\n// d = ‚àöx¬≤ + y¬≤, where x = x1 - x2, and y = y1 - y2\nconst getDistance = (x1, y1, x2, y2) => {\n  const xDistance = x1 - x2;\n  const yDistance = y1 - y2;\n\n  return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\n};\n\nlet mouseClicked = false;"
          },
          {
            "type": "p",
            "text": "Add four arrays for holding each firework, and eventually, the particles, or flecks, associated with them. We want three firework bursts and for that, we need to have three arrays of flecks."
          },
          {
            "type": "p",
            "text": "Moving on, add a variable for the number of flecks, so it's easier to tweak them. Bear in mind that performance will degrade fast if you increase the number of flecks. You also want a variable for keeping track of if the mouse is clicked. And lastly, include a function for calculating the distance between two points. For that, we can use the Pythagorean theorem."
          },
          {
            "type": "p",
            "text": "You need to track mouse-click events, so add the following two event listeners to the attachEventListeners function:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nconst attachEventListeners = () => {\n  // listen to the mousemove event\n  canvas.addEventListener('mousemove', (e) => {\n    // set the mouse positions to the correct coordinates\n    positions.mouseX = e.pageX;\n    positions.mouseY = e.pageY;\n  });\n  \n  // track mouse click events\n  canvas.addEventListener('mousedown', () => (mouseClicked = true));\n  canvas.addEventListener('mouseup', () => (mouseClicked = false));\n};"
          },
          {
            "type": "p",
            "text": "Our fireworks are going to be set off based on the value of mouseClicked variable. If it is true, then we want to draw fireworks. If it is false, then we want to stop drawing fireworks."
          },
          {
            "type": "p",
            "text": "To create new fireworks, we will use a class with an init function inside it:"
          },
          {
            "type": "p",
            "text": "Add this code at the bottom of your IIFE function:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nclass Firework {\n  constructor() {\n    const init = () => {\n      // Create the firework object\n      ...\n    }\n\n    init();\n  }\n}"
          },
          {
            "type": "p",
            "text": "Inside of init() you want to initialize the default values of each firework object, such as its coordinates, target coordinates, or color."
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nclass Firework {\n  constructor() {\n    const init = () => {\n      // current coordinates\n      this.x = positions.anchorX;\n      this.y = positions.anchorY;\n      \n      // target coordinates\n      this.target_x = positions.mouseX;\n      this.target_y = positions.mouseY;\n      \n      // distance from starting point to target\n      this.distanceToTarget = getDistance(\n        this.x,\n        this.y,\n        this.target_x,\n        this.target_y\n      );\n      this.distanceTraveled = 0;\n\n      this.coordinates = [];\n      this.angle = Math.atan2(\n        this.target_y - positions.anchorY,\n        this.target_x - positions.anchorX\n      );\n      this.speed = 15;\n      this.friction = 0.99;\n      this.hue = random(0, 360);\n\n      while (fireworkLength--) {\n        this.coordinates.push([this.x, this.y]);\n      }\n    }\n    init();\n  }\n}"
          },
          {
            "type": "p",
            "text": "First, add the length of the firework. The higher this value is, the longer the tail will be. Add the x, y, and target_x, target_y values. They will hold the initial and target coordinates. Initially, they will always equal the position of the anchor and the position where the\nclick occurred."
          },
          {
            "type": "p",
            "text": "Based on these values, you can use the getDistance function we defined earlier to get the distance between the two points on the canvas. And you also want to add a property distanceTraveled to keep track of the traveled distance. Set it to 0 for now."
          },
          {
            "type": "p",
            "text": "Additionally, you need to keep track of the coordinates, their angle, and speed in order to calculate the velocities. As well as a random color defined as hue."
          },
          {
            "type": "p",
            "text": "Call init() method at the bottom of the class."
          }
        ]
      },
      {
        "checkpoint": "# Drawing Fireworks",
        "content": [
          {
            "type": "p",
            "text": "Are you ready to draw some fireworks? Then let's go!"
          },
          {
            "type": "p",
            "text": "Add a new method to the Firework class called draw. It will draw each firework based on the defined values."
          },
          {
            "type": "p",
            "text": "After init method, add a new draw method:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nthis.draw = (index) => {\n  context.beginPath();\n  context.moveTo(\n    this.coordinates[this.coordinates.length - 1][0],\n    this.coordinates[this.coordinates.length - 1][1]\n  );\n  context.lineTo(this.x, this.y);\n\n  context.strokeStyle = `hsl(${this.hue}, 100%, 50%)`;\n  context.stroke();\n\n  this.animate(index);\n};"
          },
          {
            "type": "p",
            "text": "It will take in the index from the fireworks array and pass it down to the animate method that we will add in a moment."
          },
          {
            "type": "p",
            "text": "To draw the trails, you want to draw a line from the very last coordinates from the coordinates array to the current x and y positions."
          },
          {
            "type": "p",
            "text": "For the color, we can use HSL notation, where we give it a random hue, 100% saturation, and 50% brightness."
          },
          {
            "type": "p",
            "text": "This however won't complete the job. In order to see the fireworks, you need to animate them:"
          },
          {
            "type": "p",
            "text": "Before draw the method, add a new method called animate. Add the following code to it:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nthis.animate = (index) => {\n  this.coordinates.pop();\n  this.coordinates.unshift([this.x, this.y]);\n\n  this.speed *= this.friction;\n\n  let velocity_x = Math.cos(this.angle) * this.speed;\n  let velocity_y = Math.sin(this.angle) * this.speed;\n\n  this.distanceTraveled = getDistance(\n    positions.anchorX,\n    positions.anchorY,\n    this.x + velocity_x,\n    this.y + velocity_y\n  );\n\n  if (this.distanceTraveled >= this.distanceToTarget) {\n    let i = numberOfFlecks;\n    fireworks.splice(index, 1);\n  } else {\n    this.x += velocity_x;\n    this.y += velocity_y;\n  }\n};"
          },
          {
            "type": "p",
            "text": "Let's have a look at the animate method. It will pop, or remove, the last item from the coordinates array, and create a new entry at the beginning of the array via unshift."
          },
          {
            "type": "p",
            "text": "Next, it reassigns the speed to friction, and this way slows down the firework (by 1% each frame) as it reaches its destination."
          },
          {
            "type": "p",
            "text": "You also want to get the velocity for both axis based on the formula:"
          },
          {
            "type": "p",
            "text": "These values are used for updating the x and y coordinates of the firework, as long as it didn't reach its final destination."
          },
          {
            "type": "p",
            "text": "How can we verify that a firework has reached its final destination? Well, just get the distance between the anchor and its current positions, including the velocities, and check it against the target distance. For that, use our helper function defined at the top getDistance."
          },
          {
            "type": "p",
            "text": "Finally, you want to create as many flecks as you have defined at the beginning of the\nfile. Don't forget to remove the fireworks from the array once it's exploded using splice."
          },
          {
            "type": "p",
            "text": "Lastly, to create these new fireworks, add the following to your loop:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nif (mouseClicked) {\n  fireworks.push(new Firework());\n}\n\nlet fireworkIndex = fireworks.length;\nwhile (fireworkIndex--) {\n  fireworks[fireworkIndex].draw(fireworkIndex);\n}"
          },
          {
            "type": "p",
            "text": "Your Firework class should have the following code by now:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nclass Firework {\n  constructor() {\n    const init = () => {\n      let fireworkLength = 8;\n\n      // current coordinates\n      this.x = positions.anchorX;\n      this.y = positions.anchorY;\n\n      // target coordinates\n      this.target_x = positions.mouseX;\n      this.target_y = positions.mouseY;\n\n      // distance from starting point to target\n      this.distanceToTarget = getDistance(\n        this.x,\n        this.y,\n        this.target_x,\n        this.target_y\n      );\n      this.distanceTraveled = 0;\n\n      this.coordinates = [];\n      this.angle = Math.atan2(\n        this.target_y - positions.anchorY,\n        this.target_x - positions.anchorX\n      );\n      this.speed = 15;\n      this.friction = 0.99;\n      this.hue = random(0, 360);\n\n      while (fireworkLength--) {\n        this.coordinates.push([this.x, this.y]);\n      }\n    };\n\n    this.animate = (index) => {\n      this.coordinates.pop();\n      this.coordinates.unshift([this.x, this.y]);\n\n      this.speed *= this.friction;\n\n      let velocity_x = Math.cos(this.angle) * this.speed;\n      let velocity_y = Math.sin(this.angle) * this.speed;\n\n      this.distanceTraveled = getDistance(\n        positions.anchorX,\n        positions.anchorY,\n        this.x + velocity_x,\n        this.y + velocity_y\n      );\n\n      if (this.distanceTraveled >= this.distanceToTarget) {\n        let i = numberOfFlecks;\n        fireworks.splice(index, 1);\n      } else {\n        this.x += velocity_x;\n        this.y += velocity_y;\n      }\n    };\n\n    this.draw = (index) => {\n      context.beginPath();\n      context.moveTo(\n        this.coordinates[this.coordinates.length - 1][0],\n        this.coordinates[this.coordinates.length - 1][1]\n      );\n      context.lineTo(this.x, this.y);\n\n      context.strokeStyle = `hsl(${this.hue}, 100%, 50%)`;\n      context.stroke();\n\n      this.animate(index);\n    };\n\n    init();\n  }\n}"
          },
          {
            "type": "p",
            "text": "And your loop function should look like this by now:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nconst loop = () => {\n  requestAnimationFrame(loop); // call the loop function indefinitely and redraw the screen every frame\n  drawAnchor();\n  if (mouseClicked) {\n    fireworks.push(new Firework());\n  }\n\n  let fireworkIndex = fireworks.length;\n  while (fireworkIndex--) {\n    fireworks[fireworkIndex].draw(fireworkIndex);\n  }\n};"
          },
          {
            "type": "p",
            "text": "This will initiate a new Firework, every time the mouse is clicked. Until the array gets empty, it will draw, and animate your fireworks."
          }
        ]
      },
      {
        "checkpoint": "# Adding Flecks ‚ú®",
        "content": [
          {
            "type": "p",
            "text": "You are LITERALLY at the last section of this lesson. How far have you gone? Let's finish this up by adding flecks to create a beautiful effect of the fireworks bursting once the trail reaches the destination."
          },
          {
            "type": "p",
            "text": "Just as for the fireworks, create a new class with an init called Fleck."
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nclass Fleck {\n  constructor(x, y) {\n    const init = () => {\n      this.x = x;\n      this.y = y;\n      ...\n    }\n\n    init();\n  }\n}"
          },
          {
            "type": "p",
            "text": "The constructor will take x and y coordinates as parameters. In init, we set this parameter to this.x and this.y. It will allow us to use them within the init method."
          },
          {
            "type": "p",
            "text": "For the init, we will have similar properties as for fireworks."
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nclass Fleck {\n  constructor(x, y) {\n    const init = () => {\n      this.x = x;\n      this.y = y; \n      \n      let fleckLength = 7;\n      this.coordinates = [];\n \n      this.angle = random(0, Math.PI * 2);\n      this.speed = random(1, 10);\n   \n      this.friction = 0.95;\n      this.gravity = 2;\n   \n      this.hue = random(0, 360);\n      this.alpha = 1;\n      this.decay = random(0.015, 0.03);\n   \n      while (fleckLength--) {\n        this.coordinates.push([this.x, this.y]);\n      }\n    }\n\n    init();\n  }\n}"
          },
          {
            "type": "p",
            "text": "To start with, define the length of the flecks, and assign a random angle and speed to each individual fleck. random(0, Math.PI * 2) will generate a random radian, with every possible direction."
          },
          {
            "type": "p",
            "text": "friction and gravity will slow down flecks and make sure they fall downwards. For colors, define a random hue, and this time, an alpha for transparency. Add a decay value, which is used to tell how fast each particle should fade out."
          },
          {
            "type": "p",
            "text": "Now, how can we actually draw the flecks? Let's see."
          },
          {
            "type": "p",
            "text": "For drawing, add the draw method after the init method:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nclass Fleck {\n  constructor(x, y) {\n    const init = () => {\n      this.x = x;\n      this.y = y;\n       \n      let fleckLength = 7;\n      this.coordinates = [];\n \n      this.angle = random(0, Math.PI * 2);\n      this.speed = random(1, 10);\n   \n      this.friction = 0.95;\n      this.gravity = 2;\n   \n      this.hue = random(0, 360);\n      this.alpha = 1;\n      this.decay = random(0.015, 0.03);\n   \n      while (fleckLength--) {\n        this.coordinates.push([this.x, this.y]);\n      }\n    }\n    \n    // add this\n    this.draw = (index) => {\n      context.beginPath();\n      context.moveTo(\n        this.coordinates[this.coordinates.length - 1][0],\n        this.coordinates[this.coordinates.length - 1][1]\n      );\n      context.lineTo(this.x, this.y);\n  \n      context.strokeStyle = `hsla(${this.hue}, 100%, 50%, ${this.alpha})`;\n      context.stroke();\n  \n      this.animate(index);\n    };\n\n    init();\n  }\n}"
          },
          {
            "type": "p",
            "text": "Here the same logic that is used for the fireworks trail is applied. The only difference is, that the strokeStyle also contains an alpha value to fade out the flecks over time."
          },
          {
            "type": "p",
            "text": "Now, let's animate the flecks by adding the animate method. As you can see, this class has the same structure as Firework."
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nclass Fleck {\n  constructor(x, y) {\n    const init = () => {\n      this.x = x;\n      this.y = y;\n       \n      let fleckLength = 7; \n      this.coordinates = [];\n \n      this.angle = random(0, Math.PI * 2);\n      this.speed = random(1, 10);\n   \n      this.friction = 0.95;\n      this.gravity = 2;\n   \n      this.hue = random(0, 360);\n      this.alpha = 1;\n      this.decay = random(0.015, 0.03);\n   \n      while (fleckLength--) {\n        this.coordinates.push([this.x, this.y]);\n      }\n    }\n       \n    // add this\n    this.animate = (index) => {\n      this.coordinates.pop();\n      this.coordinates.unshift([this.x, this.y]);\n  \n      this.speed *= this.friction;\n      this.x += Math.cos(this.angle) * this.speed;\n      this.y += Math.sin(this.angle) * this.speed + this.gravity;\n  \n      this.alpha -= this.decay;\n  \n      if (this.alpha <= this.decay) {\n        flecks.splice(index, 1);\n        flecks2.splice(index, 1);\n        flecks3.splice(index, 1);\n      }\n    };\n\n    this.draw = (index) => {\n      context.beginPath();\n      context.moveTo(\n        this.coordinates[this.coordinates.length - 1][0],\n        this.coordinates[this.coordinates.length - 1][1]\n      );\n      context.lineTo(this.x, this.y);\n      \n      context.strokeStyle = `hsla(${this.hue}, 100%, 50%, ${this.alpha})`;\n      context.stroke();\n   \n      this.animate(index);\n    };\n\n    init();\n  }\n}"
          },
          {
            "type": "p",
            "text": "The same principle, start by getting rid of the last item in the coordinates and adding a new one to the beginning of the array with unshift. Then reassign speed to slow each fleck down over time, and don't forget to apply velocities for the x and y coordinates. Finally, the alpha value can be decreased in each frame until the fleck is not visible anymore. Once it's invisible, it can be removed from the array."
          },
          {
            "type": "p",
            "text": "One very important thing is to add the following code snippet to the animate method of the Firework (!) class right before splicing the firework."
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nwhile (i--) {\n  flecks.push(new Fleck(this.target_x, this.target_y));\n  flecks2.push(new Fleck(this.target_x + 50, this.target_y - 50));\n  flecks3.push(new Fleck(this.target_x - 100, this.target_y - 100));\n}"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\n// animate method within the Firework (!) class\nthis.animate = (index) => {\n  this.coordinates.pop();\n  this.coordinates.unshift([this.x, this.y]);\n\n  this.speed *= this.friction;\n\n  let velocity_x = Math.cos(this.angle) * this.speed;\n  let velocity_y = Math.sin(this.angle) * this.speed;\n\n  this.distanceTraveled = getDistance(\n    positions.anchorX,\n    positions.anchorY,\n    this.x + velocity_x,\n    this.y + velocity_y\n  );\n\n  if (this.distanceTraveled >= this.distanceToTarget) {\n    let i = numberOfFlecks;\n     \n    // Add this!\n    while (i--) {\n      flecks.push(new Fleck(this.target_x, this.target_y));\n      flecks2.push(new Fleck(this.target_x + 50, this.target_y - 50));\n      flecks3.push(new Fleck(this.target_x - 100, this.target_y - 100));\n    }\n\n    fireworks.splice(index, 1);\n  } else {\n    this.x += velocity_x;\n    this.y += velocity_y;\n  }\n};"
          },
          {
            "type": "p",
            "text": "This will actually add the flecks to their corresponding arrays and position them relative to each other when the firework or better to say its trail, itself will get drawn."
          },
          {
            "type": "p",
            "text": "Finally, remember to add the while loop to the loop function you have for the fireworks:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nlet fleckIndex = flecks.length;\nwhile (fleckIndex--) {\n  flecks[fleckIndex].draw(fleckIndex);\n}\n\nlet fleckIndex2 = flecks2.length;\nwhile (fleckIndex2--) {\n  flecks2[fleckIndex2].draw(fleckIndex2);\n}\n\nlet fleckIndex3 = flecks3.length;\nwhile (fleckIndex3--) {\n  flecks3[fleckIndex3].draw(fleckIndex3);\n}"
          },
          {
            "type": "p",
            "text": "The complete loop function should look like this:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\nconst loop = () => {\n    requestAnimationFrame(loop); // call the loop function indefinitely and redraw the screen every frame\n    drawAnchor();\n    if (mouseClicked) {\n      fireworks.push(new Firework());\n    }\n\n    let fireworkIndex = fireworks.length;\n    while (fireworkIndex--) {\n      fireworks[fireworkIndex].draw(fireworkIndex);\n    }\n\n    let fleckIndex = flecks.length;\n    while (fleckIndex--) {\n      flecks[fleckIndex].draw(fleckIndex);\n    }\n\n    let fleckIndex2 = flecks2.length;\n    while (fleckIndex2--) {\n      flecks2[fleckIndex2].draw(fleckIndex2);\n    }\n\n    let fleckIndex3 = flecks3.length;\n    while (fleckIndex3--) {\n      flecks3[fleckIndex3].draw(fleckIndex3);\n    }\n  };"
          },
          {
            "type": "p",
            "text": "And the complete canvas-fireworks.js has the following code:"
          },
          {
            "type": "pre",
            "text": "// canvas-fireworks.js\n\n(() => {\n  // Generic Canvas Setup\n\n  // gets a reference to the HTML <canvas> element\n  const canvas = document.getElementById('canvas-fireworks');\n\n  // get the rendering context for the canvas\n  const context = canvas.getContext('2d');\n\n  // get document's width and height\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  // set background to be fullscreen\n  canvas.width = width;\n  canvas.height = height;\n\n  const positions = {\n    mouseX: 0,\n    mouseY: 0,\n    anchorX: 0,\n    anchorY: 0,\n  };\n\n  // Variables and helper functions\n  const fireworks = [];\n  const flecks = [];\n  const flecks2 = [];\n  const flecks3 = [];\n  const numberOfFlecks = 25; //  bear in mind: performance gets worse with higher number of flecks\n\n  const random = (min, max) => Math.random() * (max - min) + min;\n\n  // calculate the distance between two points\n  // using Pythagorean theorem\n  // d = ‚àöx¬≤ + y¬≤, where x = x1 - x2, and y = y1 - y2\n  const getDistance = (x1, y1, x2, y2) => {\n    const xDistance = x1 - x2;\n    const yDistance = y1 - y2;\n\n    return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\n  };\n\n  let mouseClicked = false;\n\n  // Main Functionality\n  const drawAnchor = () => {\n    // get the position for the anchor on the canvas\n    positions.anchorX = width / 2;\n    positions.anchorY = height * 0.9;\n\n    context.clearRect(0, 0, width, height);\n\n    // save context to remove transformation afterwards\n    context.save();\n\n    context.translate(positions.anchorX, positions.anchorY);\n\n    // restores the empty context state\n    context.restore();\n  };\n\n  const attachEventListeners = () => {\n    // listen to the mousemove event and\n    // set the mouse positions to the correct coordinates\n    canvas.addEventListener('mousemove', (e) => {\n      positions.mouseX = e.pageX;\n      positions.mouseY = e.pageY;\n    });\n\n    // track mouse click events\n    canvas.addEventListener('mousedown', () => (mouseClicked = true));\n    canvas.addEventListener('mouseup', () => (mouseClicked = false));\n  };\n\n  const loop = () => {\n    requestAnimationFrame(loop); // call the loop function indefinitely and redraw the screen every frame\n    drawAnchor();\n    if (mouseClicked) {\n      fireworks.push(new Firework());\n    }\n\n    let fireworkIndex = fireworks.length;\n    while (fireworkIndex--) {\n      fireworks[fireworkIndex].draw(fireworkIndex);\n    }\n\n    let fleckIndex = flecks.length;\n    while (fleckIndex--) {\n      flecks[fleckIndex].draw(fleckIndex);\n    }\n\n    let fleckIndex2 = flecks2.length;\n    while (fleckIndex2--) {\n      flecks2[fleckIndex2].draw(fleckIndex2);\n    }\n\n    let fleckIndex3 = flecks3.length;\n    while (fleckIndex3--) {\n      flecks3[fleckIndex3].draw(fleckIndex3);\n    }\n  };\n\n  window.addEventListener('load', () => {\n    attachEventListeners();\n    loop();\n  });\n\n  // classes\n  class Firework {\n    constructor() {\n      const init = () => {\n        let fireworkLength = 8;\n\n        // current coordinates\n        this.x = positions.anchorX;\n        this.y = positions.anchorY;\n\n        // target coordinates\n        this.target_x = positions.mouseX;\n        this.target_y = positions.mouseY;\n\n        // distance from starting point to target\n        this.distanceToTarget = getDistance(\n          this.x,\n          this.y,\n          this.target_x,\n          this.target_y\n        );\n        this.distanceTraveled = 0;\n\n        this.coordinates = [];\n        this.angle = Math.atan2(\n          this.target_y - positions.anchorY,\n          this.target_x - positions.anchorX\n        );\n        this.speed = 15;\n        this.friction = 0.99;\n        this.hue = random(0, 360);\n\n        while (fireworkLength--) {\n          this.coordinates.push([this.x, this.y]);\n        }\n      };\n\n      this.animate = (index) => {\n        this.coordinates.pop();\n        this.coordinates.unshift([this.x, this.y]);\n\n        this.speed *= this.friction;\n\n        let velocity_x = Math.cos(this.angle) * this.speed;\n        let velocity_y = Math.sin(this.angle) * this.speed;\n\n        this.distanceTraveled = getDistance(\n          positions.anchorX,\n          positions.anchorY,\n          this.x + velocity_x,\n          this.y + velocity_y\n        );\n\n        if (this.distanceTraveled >= this.distanceToTarget) {\n          let i = numberOfFlecks;\n\n          while (i--) {\n            flecks.push(new Fleck(this.target_x, this.target_y));\n            flecks2.push(new Fleck(this.target_x + 50, this.target_y - 50));\n            flecks3.push(new Fleck(this.target_x - 100, this.target_y - 100));\n          }\n\n          fireworks.splice(index, 1);\n        } else {\n          this.x += velocity_x;\n          this.y += velocity_y;\n        }\n      };\n\n      this.draw = (index) => {\n        context.beginPath();\n        context.moveTo(\n          this.coordinates[this.coordinates.length - 1][0],\n          this.coordinates[this.coordinates.length - 1][1]\n        );\n        context.lineTo(this.x, this.y);\n\n        context.strokeStyle = `hsl(${this.hue}, 100%, 50%)`;\n        context.stroke();\n\n        this.animate(index);\n      };\n\n      init();\n    }\n  }\n\n  class Fleck {\n    constructor(x, y) {\n      const init = () => {\n        let fleckLength = 7;\n\n        this.x = x;\n        this.y = y;\n\n        this.coordinates = [];\n\n        this.angle = random(0, Math.PI * 2);\n        this.speed = random(1, 10);\n\n        this.friction = 0.95;\n        this.gravity = 2;\n\n        this.hue = random(0, 360);\n        this.alpha = 1;\n        this.decay = random(0.015, 0.03);\n\n        while (fleckLength--) {\n          this.coordinates.push([this.x, this.y]);\n        }\n      };\n\n      this.animate = (index) => {\n        this.coordinates.pop();\n        this.coordinates.unshift([this.x, this.y]);\n\n        this.speed *= this.friction;\n        this.x += Math.cos(this.angle) * this.speed;\n        this.y += Math.sin(this.angle) * this.speed + this.gravity;\n\n        this.alpha -= this.decay;\n\n        if (this.alpha <= this.decay) {\n          flecks.splice(index, 1);\n          flecks2.splice(index, 1);\n          flecks3.splice(index, 1);\n        }\n      };\n\n      this.draw = (index) => {\n        context.beginPath();\n        context.moveTo(\n          this.coordinates[this.coordinates.length - 1][0],\n          this.coordinates[this.coordinates.length - 1][1]\n        );\n        context.lineTo(this.x, this.y);\n\n        context.strokeStyle = `hsla(${this.hue}, 100%, 50%, ${this.alpha})`;\n        context.stroke();\n\n        this.animate(index);\n      };\n\n      init();\n    }\n  }\n})();"
          },
          {
            "type": "p",
            "text": "After saving all your files and re-launching the index.html file with Live Server, you should see the following:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/animate-fireworks-with-javascript-and-canvas/completed-animation.gif"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Wow! You've just created your first firework show using HTML, CSS, and JavaScript. This project is hosted on GitHub and can be found here."
          },
          {
            "type": "p",
            "text": "I hope that you have enjoyed this tutorial as much as I did! Happy coding! üíª"
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": []
      }
    ]
  },
  {
    "title": "Automate Secret Santa Emails",
    "link": "https://www.codedex.io/projects/automate-secret-santa-emails-with-smtp",
    "tags": [
      "Python",
      "Intermed."
    ],
    "image": "https://www.codedex.io/images/projects/card_images/automate-secret-santa-emails-with-smtp.png",
    "prerequisite": {
      "Prerequisites:": "Google Account",
      "Versions:": "Python 3.10",
      "Read Time:": "60 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "The holiday season is a time of giving; you know what that means ‚Äî present exchanges! üéÅ"
          },
          {
            "type": "p",
            "text": "Secret Santa is a not-to-be-missed holiday tradition amongst friends, families, and coworkers where everyone draws random names to become someone else's \"Secret Santa\". The Secret Santa is then given a wish list of gift ideas to give to their chosen giftee."
          },
          {
            "type": "p",
            "text": "After opening their present, the giftee has to guess which person was their Secret Santa. It‚Äôs a holiday classic where the guessing is as much a part of the fun as receiving the gift."
          },
          {
            "type": "p",
            "text": "Let's see how we can assign a random person to everyone using email automation and Python!"
          },
          {
            "type": "img",
            "src": "https://media2.giphy.com/media/wranrCRq3f90A/giphy.gif?cid=790b76119af9bb75ed16dc14bf67cb1c440853bbfa344fc1&rid=giphy.gif&ct=g"
          }
        ]
      },
      {
        "checkpoint": "# Secret Santa Rules",
        "content": [
          {
            "type": "p",
            "text": "Here's our version of Secret Santa:"
          },
          {
            "type": "p",
            "text": "This project tackles the first step: auto-generating Secret Santa emails using a tool called SMTP."
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "p",
            "text": "But wait, what is SMTP?"
          },
          {
            "type": "p",
            "text": "First, open a code editor of your choice (VS Code recommended), and create a new Python file called secret_santa.py. This is where we will be writing our code to automate emails."
          },
          {
            "type": "p",
            "text": "We need to install and use certain packages in our code:"
          },
          {
            "type": "p",
            "text": "We will break down the uses of each library in detail later."
          },
          {
            "type": "p",
            "text": "To install these libraries, run the following in the terminal:"
          },
          {
            "type": "pre",
            "text": "pip3 install python-dotenv ssl"
          },
          {
            "type": "p",
            "text": "After installing these libraries, we will import them into our Python file and load the local environment file."
          },
          {
            "type": "pre",
            "text": "from dotenv import load_dotenv\nimport os\nimport random\nimport smtplib\nimport ssl\n\nload_dotenv()"
          },
          {
            "type": "p",
            "text": "The next thing we need to do is actually set up the email sending process. We need to set up an ‚Äúapp password‚Äù, or an alternate password for apps to access our email."
          },
          {
            "type": "p",
            "text": "To generate an app password:"
          },
          {
            "type": "p",
            "text": "Next, create a file named .env, and add the following code inside:"
          },
          {
            "type": "pre",
            "text": "export password=your_app_password_here"
          },
          {
            "type": "p",
            "text": "This will allow us to use the app password later in our code. The app password works just like a regular password, but is used for third-party apps, like our script."
          }
        ]
      },
      {
        "checkpoint": "# Send the Email",
        "content": [
          {
            "type": "p",
            "text": "Let‚Äôs first write a function to send an email using SMTP."
          },
          {
            "type": "pre",
            "text": "def send_email(sender, receiver, recipient):\n  password = os.environ['password']\n  body_msg = f'''\\\nFrom: {sender}\nSubject: Your Secret Santa Present\n\nHi! Your secret santa is: {recipient}! üéÖ\nRemember to spend 10$-20$ on your gift, but don't stress about it being the perfect gift!\n'''\n  context = ssl.create_default_context()\n  with smtplib.SMTP_SSL('smtp.gmail.com', 465, context = context) as server:\n    server.login(sender, password)\n    server.sendmail(sender, receiver, body_msg)"
          },
          {
            "type": "p",
            "text": "Let‚Äôs break down this code. The parameters taken in to the function are the name of the sender email, receiver email, and name of the recipient. Let‚Äôs see how they are used."
          },
          {
            "type": "pre",
            "text": " password = os.environ['password']\n  body_msg = f'''\\\nFrom: {sender}\nSubject: Your Secret Santa Present\n\nHi! Your secret santa is: {recipient}! üéÖ\nRemember to spend 10$-20$ on your gift, but don't stress about it being the perfect gift!"
          },
          {
            "type": "p",
            "text": "Here, we create a password and body message. The password will be taken from the .env file, and the body_msg of the email will be the name of the secret santa recipient, followed by some information about how to pick your gift! Make sure that your body message follows this exact format, with a From: line, followed by a Subject line and then the specific text about the present."
          },
          {
            "type": "p",
            "text": "Notice that this is different from the usual strings you see. There is an f followed by three quotes. You can modify the text as you like by editing the f-string."
          },
          {
            "type": "pre",
            "text": "context = ssl.create_default_context()\nwith smtplib.SMTP_SSL('smtp.gmail.com', 465, context = context) as server:\n  server.login(sender, password)\n  server.sendmail(sender, receiver, body_msg)"
          },
          {
            "type": "p",
            "text": "Next, we create a SSL context. By creating a default context, we improve the security of the connection while connecting with Gmail's SMTP server using certificates. Then, we pass the context to this connection with our gmail account. The default SMTP-over-SSL port used by Google‚Äôs servers is 465, which is opened for email sending. Then, we login to the SMTP server using our email and password, and send an email to the receiver using our body message and email parameters."
          }
        ]
      },
      {
        "checkpoint": "# Automating Secret Santa",
        "content": [
          {
            "type": "p",
            "text": "To use this email method to automate secret santa, we first need to think about how the code should run."
          },
          {
            "type": "h3-li",
            "h3": "## Pseudocode",
            "li": [
              "Secret Santa",
              "Solution on GitHub",
              "smtplib",
              "ssl",
              "python-dotenv"
            ]
          },
          {
            "type": "p",
            "text": "If there are only two or three people, we can allow them to send presents to each other.\nOtherwise, pick two people where each person sends a present to the other. Go back to step one."
          },
          {
            "type": "p",
            "text": "Let‚Äôs look at how to implement this."
          },
          {
            "type": "p",
            "text": "First, we need to initialize a list of names and emails, and make a nested list of names and emails. For this example, we will use the names of the amazing Cod√©dex team!"
          },
          {
            "type": "pre",
            "text": "names_and_emails = [\n  ['Asiqur', 'asiqur@codedex.io'],\n  ['Dharma', 'dharma@codedex.io'],\n  ['Jerry', 'jerry@codedex.io'],\n  ['Lillian', 'lillian@codedex.io'],\n  ['Malcolm', 'malcolm@codedex.io'],\n  ['Rose', 'rose@codedex.io'],\n  ['Sonny', 'sonny@codedex.io'],\n]"
          },
          {
            "type": "p",
            "text": "Next, if there are less than two people, you cannot start a secret santa. Use an if statement to check for this possibility and exit."
          },
          {
            "type": "pre",
            "text": "if len(names_list) <= 1:\n  print('Not enough people to start secret santa!')\n  quit()"
          },
          {
            "type": "p",
            "text": "If there are enough people to start Secret Santa, we will shuffle the names, and then find a random person for the first person in the list to send a present to. After this, we will pop out this person, and reshuffle the list. We will do this until there are no more people left.\nWe also need to keep the first name in the list, so that the last person can buy a present for that first person in the list."
          },
          {
            "type": "pre",
            "text": "first_name = names_and_emails[0][0]\n\nwhile len(names_list) >= 2:\n  send_email('<your email here>', names_and_emails[0][1], names_and_emails[1][0])\n  names_and_emails.pop(0)\n  random.shuffle(names_and_emails)\n\nsend_email('<your email here>', names_and_emails[0][1], first_name)"
          },
          {
            "type": "p",
            "text": "We are finally done with the entire process. The final code can be found below:"
          }
        ]
      },
      {
        "checkpoint": "# Final Code",
        "content": [
          {
            "type": "pre",
            "text": "from dotenv import load_dotenv\nimport os\nimport random\nimport smtplib\nimport ssl\n\nload_dotenv()\n\ndef send_email(sender, receiver, recipient):\n  password = os.environ['password']\n  body_msg = f'''\\\nFrom: {sender}\nSubject: Your Secret Santa Present\n\nHi! Your secret santa is: {recipient}! üéÖ\nRemember to spend 10$-20$ on your gift, but don't stress about it being the perfect gift!\n'''\n  context = ssl.create_default_context()\n  with smtplib.SMTP_SSL('smtp.gmail.com', 465, context = context) as server:\n    server.login(sender, password)\n    server.sendmail(sender, receiver, body_msg)\n\nnames_list = ['Sonny', 'Dharma', 'Malcolm', 'Jerry', 'Asiqur', 'Rose', 'Lillian']\nnames_and_emails = [\n  ['Asiqur', 'asiqur@codedex.io'],\n  ['Dharma', 'dharma@codedex.io'],\n  ['Jerry', 'jerry@codedex.io'],\n  ['Lillian', 'lillian@codedex.io'],\n  ['Malcolm', 'malcolm@codedex.io'],\n  ['Rose', 'rose@codedex.io'],\n  ['Sonny', 'sonny@codedex.io'],\n]\n\nif len(names_list) <= 1:\n  print(\"Not enough people to start secret santa!\")\n  quit()\n\nfirst_name = names_and_emails[0][0]\n\nwhile len(names_list) >= 2:\n  send_email('<your email here>', names_and_emails[0][1], names_and_emails[1][0])\n  names_and_emails.pop(0)\n  random.shuffle(names_and_emails)\n\nsend_email('<your email here>', names_and_emails[0][1], first_name)"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Now that you know how to set up your own secret santa party using SMTP and Python, your christmas party planning just got so much easier!"
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Secret Santa",
              "Solution on GitHub",
              "smtplib",
              "ssl",
              "python-dotenv"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Set Up Local Dev Env with Python",
    "link": "https://www.codedex.io/projects/set-up-your-local-environment-in-python",
    "tags": [
      "Python",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/set-up-local-dev-environment-with-python.png",
    "prerequisite": {
      "Prerequisite:": "None",
      "Versions:": "Python 3.10",
      "Read Time:": "20 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "At Cod√©dex, we built an online code editor just for you. With no setup required, you can code to your heart‚Äôs desire. However, there is one minor issue: your code is in the cloud and requires the internet to run! Without Wi-Fi, you can no longer code. üò±"
          },
          {
            "type": "p",
            "text": "Well, there is a solution ‚Äì a local environment!"
          },
          {
            "type": "p",
            "text": "Running a program locally means using your computer's resources to execute a program. Therefore, a local environment is a simple setup to get your computer to run a program."
          },
          {
            "type": "p",
            "text": "This tutorial will cover how to install a code editor called VS Code and run Python on your own computer."
          },
          {
            "type": "p",
            "text": "Let‚Äôs get started!"
          }
        ]
      },
      {
        "checkpoint": "# Visual Studio Code",
        "content": [
          {
            "type": "p",
            "text": "The code editor we recommend here at Cod√©dex is called Visual Studio Code."
          },
          {
            "type": "p",
            "text": "Visual Studio Code, or VS Code for short, is a code editor created by Microsoft in 2015. It is now the editor of choice for professionals due to its ease of use and many features. We will highlight some of these features in a bit!"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "h3-li",
            "h3": "## Download VS Code",
            "li": [
              "For Windows users, there's a tiny bit more setup.",
              "For Mac users, you can skip the next section."
            ]
          },
          {
            "type": "p",
            "text": "First, download VS Code to your computer: https://code.visualstudio.com"
          },
          {
            "type": "p",
            "text": "Then, watch this quick 5-minute video about VS Code:"
          },
          {
            "type": "p",
            "text": "Follow the video at minute 2:20 to download the Python extension in VS Code."
          },
          {
            "type": "p",
            "text": "And that's it for the VS Code installation!"
          },
          {
            "type": "h3-li",
            "h3": "## Install Python (Windows)",
            "li": [
              "On the left-hand side, inside the ‚ÄúEXPLORER‚Äù section, you can see the structure of your folders and files.",
              "The middle is where all your code goes.",
              "On the right, there are tutorials and walkthroughs about how to use VS Code!",
              "On the bottom, you can see a command line, which is used to print outputs, access files, and more. You can use either a Windows command prompt or a Linux terminal!"
            ]
          },
          {
            "type": "p",
            "text": "For Windows users, we need to install Python:"
          },
          {
            "type": "p",
            "text": "You are now ready for the journey ahead!"
          }
        ]
      },
      {
        "checkpoint": "# Getting Familiar with VS Code",
        "content": [
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/set-up-your-local-environment-in-python/vscode_image.png"
          },
          {
            "type": "p",
            "text": "You‚Äôll see in your VS Code dashboard that you have access to many features specific to your dev environment!"
          }
        ]
      },
      {
        "checkpoint": "# Hacks (Advanced)",
        "content": [
          {
            "type": "p",
            "text": "Here are three Python VS Code hacks that you can start using right away!"
          },
          {
            "type": "h3-li",
            "h3": "## Hotkeys/Key Bindings",
            "li": [
              "pylance",
              "Jupyter"
            ]
          },
          {
            "type": "p",
            "text": "A key binding is a key, or a combination of keys, which causes something to happen when pressed. There are multiple key bindings you can use to streamline your dev environment. For example, you can paste the last line multiple times in a loop-like code, or add quotes to multiple strings at the same time! Some examples include shift+alt+‚Üì or ctrl + d!"
          },
          {
            "type": "p",
            "text": "Check the key bindings docs for more details!"
          },
          {
            "type": "h3-li",
            "h3": "## Debugging",
            "li": [
              "pylance",
              "Jupyter"
            ]
          },
          {
            "type": "p",
            "text": "While developing a program, programmers often run into bugs themselves. A software bug is an error that might cause a running program to behave unintendedly or even crash."
          },
          {
            "type": "p",
            "text": "A common strategy to identify which section of the code is causing a bug, is to use print() statements. However, some bugs can‚Äôt be debugged using a single strategy."
          },
          {
            "type": "p",
            "text": "Introducing the revolutionary technology of debuggers!"
          },
          {
            "type": "p",
            "text": "With VS Code debugging, you can quickly check your code for errors without writing a single line of extra code! We need to install the Python extension to enable debugging capabilities for Python code, which we‚Äôll look at in the next section."
          },
          {
            "type": "h3-li",
            "h3": "## Extensions",
            "li": [
              "pylance",
              "Jupyter"
            ]
          },
          {
            "type": "p",
            "text": "VS Code has a lot of built-in plugins and extensions to make your coding streamlined and effortless. These extensions can help you format code, highlight syntax, debug, and even provide real-time documentation with auto-complete suggestions! Find more information here."
          },
          {
            "type": "p",
            "text": "Some popular extensions include:"
          }
        ]
      },
      {
        "checkpoint": "# Pip",
        "content": [
          {
            "type": "p",
            "text": "The main feature that comes with installing Python is our package manager pip! Pip is used to download all external Python packages from Python Package Index called PyPI."
          },
          {
            "type": "p",
            "text": "To download a package, go into your terminal and run:"
          },
          {
            "type": "pre",
            "text": "pip install [package-name]"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "Now that you‚Äôve created your ideal development environment, go out there and explore ‚ÄúThe Legend of Python‚Äù with your new set up!"
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Visual Studio Code",
              "Visual Studio Code: Key Bindings",
              "Visual Studio Code: Debugging",
              "Python.org",
              "pip"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Web Scrape Amazon with BS4",
    "link": "https://www.codedex.io/projects/web-scrape-amazon-with-beautiful-soup",
    "tags": [
      "DS",
      "Python"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/web-scrape-amazon-with-beautiful-soup.png",
    "prerequisite": {
      "Prerequisites:": "Python fundamentals, HTML basics",
      "Versions:": "Python 3.10, requests 2.28.1, beautifulsoup4 4.11.1, lxml 4.9.1",
      "Read Time:": "40 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Have you ever missed an Amazon product that was available at a discounted price? Or dreamt of building an application that extracts data from a website?"
          },
          {
            "type": "p",
            "text": "In this project tutorial, we will build a Python program that \"web scrapes\" Amazon product information using a library called Beautiful Soup. üçú"
          },
          {
            "type": "p",
            "text": "The final result will look something like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/web-scrape-amazon-with-beautiful-soup/demo.gif"
          }
        ]
      },
      {
        "checkpoint": "# What is Web Scraping?",
        "content": [
          {
            "type": "p",
            "text": "Web scraping is the process of extracting data from a website. This data is collected and then exported in a way that the user will find more valuable, such as a CSV file. Manual web scraping is possible, but automated methods are typically preferred since they can be less expensive and faster."
          },
          {
            "type": "p",
            "text": "While web scraping is legal if the data is publicly available on the internet, it can become illegal if non-public information is extracted, such as personal data, intellectual property, or confidential data."
          },
          {
            "type": "p",
            "text": "Another thing to note is that web scraping can sometimes be tricky as the scraper may need to go through CAPTCHAs, or the website frequently changes the layout. This is something to watch out for!"
          },
          {
            "type": "p",
            "text": "In Python, we can use the Beautiful Soup library to extract data from HTML and XML files. With the help of parsers like lxml, we can navigate, search, and modify the parse tree."
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "p",
            "text": "First, open a code editor of your choice (VS Code recommended), and create a new Python file called scraper.py. This is where we will be writing our code to scrape Amazon."
          },
          {
            "type": "p",
            "text": "To start with, you will need to install three Python libraries:"
          },
          {
            "type": "p",
            "text": "To install the three libraries, run the following in your VS Code terminal:"
          },
          {
            "type": "pre",
            "text": "pip install requests beautifulsoup4 lxml"
          }
        ]
      },
      {
        "checkpoint": "# Scraping Amazon",
        "content": [
          {
            "type": "p",
            "text": "Before we get started, let's import the libraries we will be using in our Python file:"
          },
          {
            "type": "pre",
            "text": "import requests\nfrom bs4 import BeautifulSoup"
          },
          {
            "type": "p",
            "text": "When we send an HTTP request, we send some headers along with the request. If you open devtools in your browser (usually accessible through Command + Option + I or Control + Shift + I) and switch to the Network tab and reload any page, you can find the request headers that are similar to the ones shown below:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/web-scrape-amazon-with-beautiful-soup/request-headers.png"
          },
          {
            "type": "p",
            "text": "Similar to browsers, we will also send some headers along with our HTTP request."
          },
          {
            "type": "p",
            "text": "Let's define them in a dictionary called headers:"
          },
          {
            "type": "pre",
            "text": "headers = {\n  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36',\n  'Accept-Language': 'en-US,en;q=0.5'\n}"
          },
          {
            "type": "p",
            "text": "To determine your headers, you can also check out this website."
          },
          {
            "type": "p",
            "text": "Next, we will define a function get_product_details()."
          },
          {
            "type": "pre",
            "text": "def get_product_details(product_url: str) -> dict:\n  pass"
          },
          {
            "type": "p",
            "text": "The function accepts a string parameter product_url and returns a dictionary. Let's call this dictionary product_details."
          },
          {
            "type": "pre",
            "text": "def get_product_details(product_url: str) -> dict:\n  # Create an empty product details dictionary\n  product_details = {}"
          },
          {
            "type": "p",
            "text": "Now, let's make an HTTP request to get the HTML content of the product page. Using the BeautifulSoup class, we will create a soup of the page content."
          },
          {
            "type": "pre",
            "text": "def get_product_details(product_url: str) -> dict:\n  # Create an empty product details dictionary\n  product_details = {}\n\n  # Get the product page content and create a soup\n  page = requests.get(product_url, headers=headers)\n  soup = BeautifulSoup(page.content, features='lxml')"
          },
          {
            "type": "p",
            "text": "Now comes the most important part of the tutorial where we will extract data from the page. For the sake of this tutorial, we will extract two data:"
          },
          {
            "type": "p",
            "text": "But before extracting, let's learn how to view the HTML code that makes up any web page. Open a product page, say this one on your browser."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/web-scrape-amazon-with-beautiful-soup/amazon-product-page.png"
          },
          {
            "type": "p",
            "text": "To view the HTML code, we have an Inspect option in every browser. You can use the keyboard shortcuts:"
          },
          {
            "type": "p",
            "text": "Alternatively, right-click on the web page and choose Inspect to access the Developer tools panel. Make sure you are on the Elements tab in the Developer tools panel."
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/web-scrape-amazon-with-beautiful-soup/inspect-element.gif"
          },
          {
            "type": "h3-li",
            "h3": "## Extracting the Product Title",
            "li": [
              "Solution on GitHub",
              "Documentation: requests",
              "Documentation: beautifulsoup4"
            ]
          },
          {
            "type": "p",
            "text": "Use the Inspect option to view the HTML code used for the title of the product."
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "The title is wrapped with a span tag with an attribute id productTitle. Let's use this id to extract the title of the product."
          },
          {
            "type": "pre",
            "text": "title = soup.find('span', attrs={'id': 'productTitle'}).get_text().strip()"
          },
          {
            "type": "p",
            "text": "We use the .find() method to find a span element. Then pass the productTitle id in a dictionary called attrs that accepts the attributes. The .get_text() method returns the text in a string format. The .strip() method is used to remove any extra leading and trailing whitespaces."
          },
          {
            "type": "h3-li",
            "h3": "## Extracting the Product Price",
            "li": [
              "Solution on GitHub",
              "Documentation: requests",
              "Documentation: beautifulsoup4"
            ]
          },
          {
            "type": "p",
            "text": "Similar to the title of the product, if you inspect the prices by right clicking on them and opening devtools, you will find the below HTML code for the price of the product."
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "Thus, we can extract the price in a similar fashion."
          },
          {
            "type": "pre",
            "text": "price = soup.find('span', attrs={'class': 'a-price'}).get_text().strip()"
          },
          {
            "type": "p",
            "text": "But, you will see a problem when you print the price of the product. The extracted price will be something like $166.00$166.00 because the parent span element contains two span elements with the price text in them. But we can clean this extracted price to get the price of the product in the following way:"
          },
          {
            "type": "pre",
            "text": "extracted_price = soup.find('span', attrs={'class': 'a-price'}).get_text().strip()\nprice = '$' + extracted_price.split('$')[1]"
          },
          {
            "type": "p",
            "text": "First we split the extracted_price string using the $ symbol using extracted_price.split('$'). This will return a list: ['', '166.00', '166.00']. We then select the element at index 1 from the list. We also add the dollar sign before the price."
          },
          {
            "type": "p",
            "text": "Now that you have extracted the product details, you can put them inside the product_details dictionary as below:"
          },
          {
            "type": "pre",
            "text": "# Adding it to the product details dictionary\nproduct_details['title'] = title\nproduct_details['price'] = price"
          },
          {
            "type": "p",
            "text": "So, the final result of the get_product_details() function will now look like:"
          },
          {
            "type": "pre",
            "text": "def get_product_details(product_url: str) -> dict:\n  # Create an empty product details dictionary\n  product_details = {}\n\n  # Get the product page content and create a soup\n  page = requests.get(product_url, headers=headers)\n  soup = BeautifulSoup(page.content, features=\"lxml\")\n  try:\n    # Scrape the product details\n    title = soup.find('span', attrs={'id': 'productTitle'}).get_text().strip()\n    extracted_price = soup.find('span', attrs={'class': 'a-price'}).get_text().strip()\n    price = extracted_price.split('$')[1]\n\n    # Adding it to the product details dictionary\n    product_details['title'] = title\n    product_details['price'] = price\n    product_details['product_url'] = product_url\n\n    # Return the product details dictionary\n    return product_details\n  except Exception as e:\n    print('Could not fetch product details')\n    print(f'Failed with exception: {e}')"
          },
          {
            "type": "p",
            "text": "Notice that we have used a try-except block to catch any error."
          }
        ]
      },
      {
        "checkpoint": "# Running the Scraper",
        "content": [
          {
            "type": "p",
            "text": "To run the scraper, we will ask the user to enter any product URL. Then we will call the get_product_details() function with that product URL and print it."
          },
          {
            "type": "pre",
            "text": "product_url = input('Enter product url: ')\nproduct_details = get_product_details(product_url)\n\nprint(product_details)"
          },
          {
            "type": "p",
            "text": "The final scraper.py should look like:"
          },
          {
            "type": "pre",
            "text": "# Web Scrape Amazon with Beautiful Soup üì¶\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nheaders = {\n  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36',\n  'Accept-Language': 'en-US,en;q=0.5'\n}\n\ndef get_product_details(product_url: str) -> dict:\n  # Create an empty product details dictionary\n  product_details = {}\n\n  # Get the product page content and create a soup\n  page = requests.get(product_url, headers=headers)\n  soup = BeautifulSoup(page.content, features=\"lxml\")\n  try:\n    # Scrape the product details\n    title = soup.find(\n      'span', attrs={'id': 'productTitle'}).get_text().strip()\n    extracted_price = soup.find(\n      'span', attrs={'class': 'a-price'}).get_text().strip()\n    price = '$' + extracted_price.split('$')[1]\n\n    # Adding it to the product details dictionary\n    product_details['title'] = title\n    product_details['price'] = price\n\n    # Return the product details dictionary\n    return product_details\n  except Exception as e:\n    print('Could not fetch product details')\n    print(f'Failed with exception: {e}')\n\nproduct_url = input('Enter product url: ')\nproduct_details = get_product_details(product_url)\n\nprint(product_details)"
          }
        ]
      },
      {
        "checkpoint": "# Conclusion",
        "content": [
          {
            "type": "p",
            "text": "In this tutorial, we scraped Amazon to extract the title and price of a product. You can follow the same pattern to extract more details, like the rating of the product or its availability."
          },
          {
            "type": "p",
            "text": "As mentioned before, the layout of Amazon's website will keep changing. Hence, the code in this project may not be applicable without first inspecting the Amazon product page and looking for the exact attributes that the project mentions. Join Cod√©dex Club to get support from code mentors if you run into any trouble while going through this project!"
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": []
      }
    ]
  },
  {
    "title": "Generate a QR Code with Python",
    "link": "https://www.codedex.io/projects/generate-a-qr-code-with-python",
    "tags": [
      "Python",
      "Beginner"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/generate-a-qr-code-with-python.png",
    "prerequisite": {
      "Prerequisites:": "Python fundamentals",
      "Versions:": "Python 3.10, qrcode 7.3.1, Pillow 9.2.0",
      "Read Time:": "40 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "Have you ever wondered how QR codes work or how procedural images are generated? Have you ever wanted to send someone a website link in a much cooler way? If you said yes to any of these questions, you're in luck!"
          },
          {
            "type": "p",
            "text": "In this quick tutorial, we will learn how to create a QR code in Python with qrcode, pillow, and just five lines of code."
          },
          {
            "type": "p",
            "text": "Let's jump in!"
          },
          {
            "type": "p",
            "text": ""
          }
        ]
      },
      {
        "checkpoint": "# What Is a QR Code?",
        "content": [
          {
            "type": "p",
            "text": "The QR code, short for Quick Response code, was originally invented in 1994 by a Japanese tech company. It is a 2D barcode containing black patterns on a white background. However, this is no ordinary scribble: QR codes are capable of storing huge amounts of data in a deceivingly small amount of space. These black rectangles can store links, text, basically anything you want... and can be accessed simply by scanning from any mobile device!"
          },
          {
            "type": "p",
            "text": "A QR code is important since it gives users a simple way to access something on a non-conventional source (e.g., on a piece of paper). Putting a QR code on a piece of paper is a far better and faster experience for the user than placing a website link. Due to this, QR codes are now becoming more commonly used than UPC barcodes and are found on restaurant menus, business cards, and even Superbowl ads!"
          },
          {
            "type": "p",
            "text": "Enough about QR codes, let's learn how to create one!"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "p",
            "text": "First, go to the Python code editor of your choice (we recommend VS Code), and create a new file called qr_code.py. This is where we will be writing our code."
          },
          {
            "type": "p",
            "text": "Note: You can call your file any name except qrcode.py. This is because qrcode.py is a file that already exists as part of the qrcode library that we will use, and calling your file that will overwrite the library functions."
          },
          {
            "type": "p",
            "text": "To start, we need to install the two libraries:"
          },
          {
            "type": "p",
            "text": "To install qrcode and pillow, run this command inside the VS Code terminal:"
          },
          {
            "type": "pre",
            "text": "pip install qrcode pillow"
          },
          {
            "type": "p",
            "text": "For this tutorial, we are using qrcode version 7.3.1 and Pillow version 9.2.0."
          },
          {
            "type": "p",
            "text": "Next, add this line of code to the first line of qr_code.py:"
          },
          {
            "type": "pre",
            "text": "import qrcode"
          },
          {
            "type": "p",
            "text": "This line of code makes sure that the two libraries can be used in the rest of our code, since Python code runs from top to bottom in a file. We just need to import qrcode, because pillow is implicitly imported."
          }
        ]
      },
      {
        "checkpoint": "# Creating the QR Code",
        "content": [
          {
            "type": "p",
            "text": "First, we want a link that we want to showcase. Let's use a classic YouTube video."
          },
          {
            "type": "p",
            "text": "We can store this YouTube URL into a variable called website_link:"
          },
          {
            "type": "pre",
            "text": "website_link = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'"
          },
          {
            "type": "p",
            "text": "Next, we want to create an instance of qrcode. Since it's a Python library, we can call the package constructor to create a qrcode object, customized to our specifications."
          },
          {
            "type": "p",
            "text": "In this example, we will create a QR code with a version of 1, and a box size and border size of 5."
          },
          {
            "type": "pre",
            "text": "qr = qrcode.QRCode(version = 1, box_size = 5, border = 5)"
          },
          {
            "type": "p",
            "text": "As an exercise, try taking in these parameters as input, and explaining to the user how to set this up, so they can create the QR code to their own specifications."
          },
          {
            "type": "p",
            "text": "Visit documentation for more information about the parameters in qrcode.QRCode(...)."
          },
          {
            "type": "p",
            "text": "Then, the data (specifically, the link we specified before) is added to the QR code, using .add_data(). The QR code is then generated using .make():"
          },
          {
            "type": "pre",
            "text": "qr.add_data(website_link)\nqr.make()"
          },
          {
            "type": "p",
            "text": "Finally, we save this created QR code in an img pillow object using qr.make_image():"
          },
          {
            "type": "pre",
            "text": "img = qr.make_image(fill_color = 'black', back_color = 'white')"
          },
          {
            "type": "p",
            "text": "Finally, we have to store and save the file. We can do this using pillow's save() command. We specify the file name inside the brackets, which is youtube_qr.png in our case."
          },
          {
            "type": "pre",
            "text": "img.save('youtube_qr.png')"
          },
          {
            "type": "p",
            "text": "Now we are done! Here‚Äôs the whole code:"
          },
          {
            "type": "pre",
            "text": "import qrcode\n\nwebsite_link = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'\n\nqr = qrcode.QRCode(version = 1, box_size = 5, border = 5)\nqr.add_data(website_link)\nqr.make()\n\nimg = qr.make_image(fill_color = 'black', back_color = 'white')\nimg.save('youtube_qr.png')"
          },
          {
            "type": "p",
            "text": "You should see the youtube_qr.png image pop up on the left-hand side of VS Code, and you can open it to see what it looks like."
          },
          {
            "type": "p",
            "text": ""
          },
          {
            "type": "p",
            "text": "You can add this QR code to anywhere you like, on your website or in an email!"
          }
        ]
      },
      {
        "checkpoint": "# Improvements",
        "content": [
          {
            "type": "p",
            "text": "To improve this, we could do a couple of things:"
          }
        ]
      },
      {
        "checkpoint": "# More Resources",
        "content": []
      }
    ]
  },
  {
    "title": "Visualize YouTube Data with Plotly",
    "link": "https://www.codedex.io/projects/visualize-youtube-data-with-plotly",
    "tags": [
      "DS",
      "Python"
    ],
    "image": "https://www.codedex.io/images/projects/card_images/visualize-youtube-data-with-plotly.png",
    "prerequisite": {
      "Prerequisites:": "Python fundamentals, Microsoft Excel",
      "Versions:": "Python 3.10, Plotly 5.9",
      "Read Time:": "45 minutes"
    },
    "checkpoints": [
      {
        "checkpoint": "# Introduction",
        "content": [
          {
            "type": "p",
            "text": "So you want to learn about making data visualizations, huh? Well, you‚Äôre in the right spot!"
          },
          {
            "type": "p",
            "text": "Data visualization is translating data into a visual representation to make it easier on the human eye. It makes communicating complex ideas more effective, quick, and easy to follow. It is super important as it makes data more accessible and digestible."
          },
          {
            "type": "p",
            "text": "Plotly Express makes it easy to begin learning this process. It is an easy-to-use, high-level module that creates common figures such as line graphs and scatter plots. \"High-level\" means that it's more generic and therefore limited in functionality, but ideal for beginners. Plotly was actually the first library I used when I started my journey in data!"
          },
          {
            "type": "p",
            "text": "In this tutorial, we will create data visualizations of popular YouTube channels using Python, Pandas, Plotly Express, and Google Colab. We will use a histogram to look at subscriber counts, a pie chart to compare video categories, and a box plot to find patterns in the years that creators started YouTubing."
          },
          {
            "type": "p",
            "text": "Let‚Äôs get into it (yuh)!"
          }
        ]
      },
      {
        "checkpoint": "# Setting Up",
        "content": [
          {
            "type": "p",
            "text": "First, visit colab.research.google.com and start a \"New notebook\"."
          },
          {
            "type": "p",
            "text": "After that, make sure you have the latest version of Python on your machine. It would be best if you were running version 3.10 or above."
          },
          {
            "type": "p",
            "text": "You can check this by typing python3 --version in the Windows command prompt or the terminal on Mac and Linux, and pressing enter. It should look something like:"
          },
          {
            "type": "pre",
            "text": "$ python3 --version\nPython 3.10.5"
          },
          {
            "type": "p",
            "text": "Once you have checked this, pull up the Plotly Express docs page. It will come in handy while working. Finally, download the dataset used for this tutorial from down below. There would not be a data visualization without some data!"
          },
          {
            "type": "h3-li",
            "h3": "## About the Dataset",
            "li": [
              "rank: Rank of the channel as per total subscribers (1-1000)",
              "youtuber: Channel name",
              "subscribers: Total number of followers",
              "video views: Total views of all the videos combined",
              "video count: Number of videos uploaded",
              "category: Channel genre",
              "started: The year that the channel started"
            ]
          },
          {
            "type": "p",
            "text": "For this tutorial, we will use the \"Most Subscribed YouTube Channels\" dataset from Kaggle. The file is called most_subscribed_youtube_channels.csv. You can download it here."
          },
          {
            "type": "p",
            "text": "As the name suggests, it contains data about the top 1000 YouTube channels."
          },
          {
            "type": "p",
            "text": "There are seven columns:"
          },
          {
            "type": "p",
            "text": "It looks something like:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/visualize-youtube-data-with-plotly/dataset-screenshot.png"
          },
          {
            "type": "p",
            "text": "We have made acquaintance with our dataset. Now, let‚Äôs jump into some visualizations!"
          },
          {
            "type": "h3-li",
            "h3": "## Importing the Data to Google Colab",
            "li": [
              "The DataFrame df.",
              "The x value that needs to be displayed in the histogram. Since we are looking at subscriber count in this exercise, the x value will be the name of the column that contains the subscribers data in the DataFrame.",
              "The name for our graph. We do this through the title variable. Make sure you put quotation marks around them since they are considered a string."
            ]
          },
          {
            "type": "p",
            "text": "First things first (I‚Äôm the realest), we are going to import our data into our notebook. After downloading your dataset, you should return to your handy dandy Google Colab notebook."
          },
          {
            "type": "p",
            "text": "Inside the notebook, go ahead and input the following:"
          },
          {
            "type": "pre",
            "text": "from google.colab import files\n\nuploaded = files.upload()"
          },
          {
            "type": "p",
            "text": "Press the play button, and there will be a prompt to upload files from your computer. Look in your local drive for the dataset (most_subscribed_youtube_channels.csv) and upload the file."
          },
          {
            "type": "p",
            "text": "You should have something like this!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/visualize-youtube-data-with-plotly/import-data.png"
          },
          {
            "type": "p",
            "text": "The files.upload() returns a dictionary of the uploaded files. The dictionary's keys are the file names, and the dictionary's values are the file data, based on Google Colab's documentation on how to upload files to Colab."
          },
          {
            "type": "p",
            "text": "In our case, we only uploaded one file. And we are storing this dictionary in the variable uploaded, which we will use in a bit!"
          },
          {
            "type": "h3-li",
            "h3": "## Importing Pandas and Declaring a DataFrame",
            "li": [
              "The DataFrame df.",
              "The x value that needs to be displayed in the histogram. Since we are looking at subscriber count in this exercise, the x value will be the name of the column that contains the subscribers data in the DataFrame.",
              "The name for our graph. We do this through the title variable. Make sure you put quotation marks around them since they are considered a string."
            ]
          },
          {
            "type": "p",
            "text": "Pandas is the most widely used open source Python package to perform data analytics. To use it, we will import pandas as pd. pd serves as the alias (nickname) for referring to the Pandas package in our program."
          },
          {
            "type": "p",
            "text": "After importing Pandas, we will need to import io. Doing this will let us import our data into a DataFrame and work with file-related input/output operations:"
          },
          {
            "type": "pre",
            "text": "import pandas as pd\nimport io"
          },
          {
            "type": "p",
            "text": "Once you have done that, we need to create a Pandas DataFrame. A Pandas DataFrame stores data as a 2-dimensional table in Python. As analysts, we want to be quick in generating graphs, so we can take our time analyzing and reporting our findings. And DataFrames are a great way to structure our data; they are fast, easy to use, and integral to the Python data science ecosystem. You can use any shorthand name for the DataFrame variable, but for this example, we will use df."
          },
          {
            "type": "p",
            "text": "The df variable will store the DataFrame returned from the pd.read_csv() method. To do that, you would put in pd.read_csv(io.BytesIO(uploaded[file_name.csv])). This line reads our CSV (comma-separated value) file and returns it as a DataFrame."
          },
          {
            "type": "p",
            "text": "And lastly, use the display() function to show the df DataFrame."
          },
          {
            "type": "p",
            "text": "You should have the following after completing the steps above:"
          },
          {
            "type": "pre",
            "text": "import pandas as pd\nimport io\n\ndf = pd.read_csv(io.BytesIO(uploaded['most_subscribed_youtube_channels.csv']))\ndisplay(df)"
          },
          {
            "type": "p",
            "text": "Let‚Äôs break down and understand what the df = pd.read_csv(io.BytesIO(uploaded['most_subscribed_youtube_channels.csv'])) piece of code is doing."
          },
          {
            "type": "p",
            "text": "We know that uploaded is a dictionary with file names as keys and file data as values. So, uploaded['most_subscribed_youtube_channels.csv'] is simply getting the binary data inside the file named most_subscribed_youtube_channels.csv that we uploaded to Google Colab."
          },
          {
            "type": "p",
            "text": "Python's io module manages file-related input and output operations. So, io.BytesIO() receives all the binary data and creates a stream of data. pd.read_csv() can't directly process binary data so we need to convert it into a stream before we can make a DataFrame from this data."
          },
          {
            "type": "p",
            "text": "This stream of data is finally read by the pd.read_csv() method and turned into a DataFrame. We store this DataFrame in the df variable."
          },
          {
            "type": "p",
            "text": "Your notebook should now look like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/visualize-youtube-data-with-plotly/import-pandas.png"
          },
          {
            "type": "p",
            "text": "Notice how in some of the numeric columns, there are commas in between the numbers? Let's take out the commas using:"
          },
          {
            "type": "pre",
            "text": "df = df.replace(',', '')\ndisplay(df)"
          },
          {
            "type": "p",
            "text": "Here, we are using the .replace() method to replace all occurrences of commas ',' with nothing ''."
          },
          {
            "type": "p",
            "text": "For the next section, we will be creating three different graphs:"
          },
          {
            "type": "p",
            "text": "Let‚Äôs kick things off with the histogram!"
          }
        ]
      },
      {
        "checkpoint": "# Section 1: Make a Histogram",
        "content": [
          {
            "type": "p",
            "text": "Normally, people will import their library during setup. However, I like to have my imports and graph code together. Therefore, we are going to import the Plotly Python package by writing import plotly.express as px. px will serve as the alias for the package in this portion of the process. After you have imported Plotly Express, we will be ready to start on our histogram!"
          },
          {
            "type": "p",
            "text": "The import statement should be as follows:"
          },
          {
            "type": "pre",
            "text": "import plotly.express as px"
          },
          {
            "type": "p",
            "text": "Creating a histogram in Plotly Express is so much easier than you think. Do you know how we create them? Drum roll, please‚Ä¶ ü•Å"
          },
          {
            "type": "pre",
            "text": "fig = px.histogram(df, x='subscribers', title='Subscriber Count')\nfig.show()"
          },
          {
            "type": "p",
            "text": "Alright, let‚Äôs break down this line of code."
          },
          {
            "type": "p",
            "text": "First, we need to declare a variable fig. fig will allow us to work with the Plotly Express library that is accessible using the px alias. Remember px from earlier? We use it to determine the type of graph we want to utilize. For example, we typed out px.histogram() because we wanted to plot a histogram."
          },
          {
            "type": "p",
            "text": "The arguments passed in the method call are:"
          },
          {
            "type": "p",
            "text": "After we do this, we will use fig.show(), and the notebook should display something like this!"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/visualize-youtube-data-with-plotly/histogram.png"
          },
          {
            "type": "p",
            "text": "There is so much going on right now in the histogram, so let‚Äôs take it step by step."
          },
          {
            "type": "p",
            "text": "The first thing we want to do is pay attention to our axes. On the x-axis, we have our variable subscribers. On the y-axis, we have the count of channels with subscribers in that range. In histograms, the bars show us frequency rather than a solid number of things. For our example, we can see a high frequency of YouTubers with between 0 and 40 million subscribers."
          },
          {
            "type": "p",
            "text": "Also, a quick shoutout to the channel all the way at the end that made it to 200 million (T-Series). We already know their fan base is grinding."
          },
          {
            "type": "p",
            "text": "Plotly Express allows us to create much more customizable histograms by inputting a variety of arguments. Here's a link to histogram documentation for further reference. In this section, we only used the base version with numerical data. But other histograms can also be created using other columns in the YouTube data."
          }
        ]
      },
      {
        "checkpoint": "# Section 2: Make a Pie Chart",
        "content": [
          {
            "type": "p",
            "text": "We are going to do the same thing we did before, but this time we will create a pie chart. For this pie chart, we are going to analyze the different video categories and the top channel they belong to."
          },
          {
            "type": "p",
            "text": "All we need to do is replace px.histogram(df, x='subscribers') with px.pie(df, values='subscribers', names='category', title='YouTube Categories'):"
          },
          {
            "type": "pre",
            "text": "import plotly.express as px\n\nfig = px.pie(df, values='subscribers', names='category', title='YouTube Categories')\nfig.show()"
          },
          {
            "type": "p",
            "text": "However, this time we need to pass the following arguments to our method call:"
          },
          {
            "type": "p",
            "text": "That‚Äôs it. All that‚Äôs left now is to display the pie chart using the fig.show() method."
          },
          {
            "type": "p",
            "text": "You should end up with something like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/visualize-youtube-data-with-plotly/pie-chart.png"
          },
          {
            "type": "p",
            "text": "Pie charts are very straightforward to read. The bigger the chunk, the greater quantity we have. We can see here that the top category in our dataset is Music (24.9%). Coming in at number two is Entertainment (22.1%)."
          },
          {
            "type": "p",
            "text": "Pie chart documentation provides more information about further personalizing the pie charts by changing the colors of sectors and more."
          }
        ]
      },
      {
        "checkpoint": "# Section 3: Make a Box Plot",
        "content": [
          {
            "type": "p",
            "text": "I hope you all aren‚Äôt too square to make a box plot. Box plots can show us how spread out our data is. For this example, we are going to use a box plot to analyze the different years people start YouTube."
          },
          {
            "type": "p",
            "text": "Sticking to the theme of simplicity, all we have to do to create our box plot is input the following:"
          },
          {
            "type": "pre",
            "text": "import plotly.express as px\n\nfig = px.box(df, y='started', title='Years Started')\nfig.show()"
          },
          {
            "type": "p",
            "text": "The px.box() method follows the convention we have been using in this tutorial:"
          },
          {
            "type": "p",
            "text": "And like before, the graph is complete but isn‚Äôt shown on the notebook page. So, to show the graph, we use fig.show() method."
          },
          {
            "type": "p",
            "text": "It should look something like this:"
          },
          {
            "type": "img",
            "src": "https://raw.githubusercontent.com/codedex-io/projects/main/projects/visualize-youtube-data-with-plotly/box-plot.jpg"
          },
          {
            "type": "p",
            "text": "Like that one Tegan and Sara song, let‚Äôs get a little bit closer with our graph. In a box plot, we have our minimum value, lower fence, Q1, median, Q3, and maximum value. For this tutorial, we will only be looking at our lower fence, median, and maximum."
          },
          {
            "type": "p",
            "text": "Similar to histograms and pie charts, Plotly Express also provides documentation for box plots. By passing point='all' argument to the px.box(), we can also look at all the data points used to make the box plot."
          }
        ]
      },
      {
        "checkpoint": "# Wrapping Up",
        "content": [
          {
            "type": "p",
            "text": "Congrats, you just created three data visualizations analyzing the top dogs on YouTube!"
          },
          {
            "type": "p",
            "text": "Many people assume data visualization is such a complex thing, but it can be as easy as running a few lines of code. One piece of advice I would give you is to practice using one type of library for your first few months of learning data visualizations. It will give you the opportunity to get the hang of things and learn about your preferences."
          },
          {
            "type": "h3-li",
            "h3": "## More Resources",
            "li": [
              "Solution on GitHub",
              "Dataset on GitHub",
              "Dataset on Kaggle"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "",
    "link": "https://www.codedex.io/projects",
    "tags": [],
    "image": "",
    "checkpoints": [
      {
        "checkpoint": "Project Tutorials",
        "content": [
          {
            "type": "p",
            "text": "Real-world projects to get your reps in ‚ãÜÀô‚ü°"
          }
        ]
      },
      {
        "checkpoint": "Top Projects",
        "content": []
      },
      {
        "checkpoint": "Today's AI Picks For You",
        "content": []
      },
      {
        "checkpoint": "Newly Released Projects",
        "content": []
      },
      {
        "checkpoint": "Community Favorites",
        "content": []
      },
      {
        "checkpoint": "Hackathon Starter Pack",
        "content": []
      }
    ]
  }
]
[
  {
    "url": "https://indivyanshu.medium.com/javascript-101-your-first-step-into-the-world-of-web-development-821e4b057161",
    "title": "JavaScript 101: Your First Step into the World of Web Development",
    "author": "Press",
    "published_date": null,
    "reading_time": "4 min read",
    "tags": [
      "JavaScript",
      "Web Development",
      "Coding",
      "Javascript Development"
    ],
    "content": [
      {
        "type": "h1",
        "content": "JavaScript 101: Your First Step into the World of Web Development"
      },
      {
        "type": "p",
        "content": "Divyanshu Agarwal"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "Hey there! So, you’re curious about JavaScript, huh? Great choice! JavaScript is like the magic behind everything interactive on the web. Ever wondered how websites have animations, pop-ups, or data that loads without refreshing? That’s JavaScript at work!"
      },
      {
        "type": "p",
        "content": "Let’s start from scratch. I’ll walk you through what makes JavaScript unique, why it’s everywhere, and why it’s such a powerful tool for web development. Ready? Let’s dive in!"
      },
      {
        "type": "h1",
        "content": "What Exactly is JavaScript?"
      },
      {
        "type": "p",
        "content": "Good question! Imagine you’re browsing a website. You’ve got the text, images, and basic structure — those come from HTML. The design, colors, and layout? That’s CSS. But when you click a button and something happens — like an animation or loading more content — that’s JavaScript making things happen."
      },
      {
        "type": "p",
        "content": "JavaScript is a programming language designed to bring websites to life. Unlike some languages, it doesn’t need to be compiled or processed in advance. You can write a line of JavaScript, save the file, refresh the page, and boom — it just works!"
      },
      {
        "type": "h1",
        "content": "Wait… Why is it Called “JavaScript”?"
      },
      {
        "type": "p",
        "content": "Fair question, and the answer’s actually a bit funny. JavaScript was originally called “LiveScript.” But back in the 90s, another language called Java was really popular, so the creators decided to rename it “JavaScript” to ride the wave of Java’s popularity."
      },
      {
        "type": "p",
        "content": "Here’s the kicker: Java and JavaScript are actually very different. Today, JavaScript follows its own set of rules and is a completely independent language. So if someone says they know Java, it doesn’t mean they know JavaScript — and vice versa."
      },
      {
        "type": "h1",
        "content": "What Can JavaScript Really Do?"
      },
      {
        "type": "p",
        "content": "Glad you asked! JavaScript’s power shines in making websites interactive. Here’s a quick rundown of some cool things it can do:"
      },
      {
        "type": "p",
        "content": "Think about a shopping site — JavaScript powers the way products show up instantly, the way filters work, and even the shopping cart!"
      },
      {
        "type": "h1",
        "content": "Okay, But… What Can’t JavaScript Do?"
      },
      {
        "type": "p",
        "content": "Great question! JavaScript is powerful, but it has limits, especially in the browser. Here’s why:"
      },
      {
        "type": "p",
        "content": "To keep users safe, browsers restrict what JavaScript can do. For example, it can’t:"
      },
      {
        "type": "p",
        "content": "So, yes, JavaScript has boundaries, and they’re there to keep users secure. But if you’re using JavaScript outside the browser (like in a server environment with Node.js), you get a lot more freedom!"
      },
      {
        "type": "h1",
        "content": "Why is JavaScript So Popular?"
      },
      {
        "type": "p",
        "content": "If I had to pick just one reason, it’s because JavaScript is everywhere. Every browser — Chrome, Firefox, Safari, Edge — supports JavaScript by default. And it’s fully integrated with HTML and CSS, which means it can handle pretty much everything on a webpage."
      },
      {
        "type": "p",
        "content": "JavaScript’s flexibility is another reason it’s so beloved. It’s simple enough for beginners to pick up and play with, but powerful enough to create complex applications, like social networks or online games. Plus, its versatility now extends to mobile apps, server-side programming, and even desktop applications."
      },
      {
        "type": "h1",
        "content": "So, Are There “Other” JavaScripts?"
      },
      {
        "type": "p",
        "content": "Kind of! Different projects sometimes need special features, so other languages have been developed to “transpile” (convert) to JavaScript. This lets you write code in another language and turn it into JavaScript behind the scenes."
      },
      {
        "type": "p",
        "content": "Some popular ones are:"
      },
      {
        "type": "p",
        "content": "These languages build on JavaScript’s foundation, adding new tools or cleaner syntax to suit different project needs. But here’s the catch: even if you use these, you still need to know JavaScript well to really understand what’s happening under the hood."
      },
      {
        "type": "h1",
        "content": "Why Should I Learn JavaScript?"
      },
      {
        "type": "p",
        "content": "Here’s the deal: if you want to work on the web, JavaScript is essential. It’s the only language that all browsers support, and it’s deeply integrated with HTML and CSS. Whether you want to build simple websites, interactive apps, or even server-side applications, JavaScript can do it."
      },
      {
        "type": "p",
        "content": "And learning JavaScript is a launchpad. Once you’re comfortable with it, you can explore other libraries and frameworks like React, Angular, or Vue, which make building complex applications easier and more efficient."
      },
      {
        "type": "h1",
        "content": "Ready to Start Coding?"
      },
      {
        "type": "p",
        "content": "Awesome! Now that we’ve covered what JavaScript is and why it’s so important, it’s time to start writing some code. In our next article, we’ll dive into JavaScript variables, types, and basic syntax — the core elements of any JavaScript program. This will be your first hands-on experience with the language, and trust me, it’s going to be a lot of fun."
      },
      {
        "type": "p",
        "content": "So, what do you think? Ready to see what JavaScript can do firsthand? Let’s go build something amazing!"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:05.136684"
  },
  {
    "url": "https://medium.com/geekculture/getting-started-with-javascript-for-beginners-d2e270493124",
    "title": "Getting Started With JavaScript for Beginners",
    "author": "",
    "published_date": null,
    "reading_time": "6 min read",
    "tags": [
      "JavaScript",
      "Javascript Tips",
      "Coding"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Getting Started With JavaScript for Beginners"
      },
      {
        "type": "p",
        "content": "Ahsan Sium"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "Geek Culture"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "h1",
        "content": "Intro"
      },
      {
        "type": "p",
        "content": "JavaScript is one of the best programming languages for beginners to get started. Sometimes the resources found online are not exactly beginner-friendly, so in this article, I'm going to be as easy as possible for you to get the hang of it."
      },
      {
        "type": "p",
        "content": "Let's get started with the definition. As per MDN,"
      },
      {
        "type": "blockquote",
        "content": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods."
      },
      {
        "type": "p",
        "content": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods."
      },
      {
        "type": "p",
        "content": "Don’t get scared, Let’s break it down to a simple format."
      },
      {
        "type": "p",
        "content": "JavaScript is a multi-paradigm, paradigm is a way to classify programming language based on their features such as object-oriented, functional, and so on, multi-paradigm simply means this programming language can be classified by multiple features."
      },
      {
        "type": "p",
        "content": "Dynamic Language is a type of high-level programming language that supports operations at run-time whereas static programming language only supports that kind of operations at compile-time. These operations can be adding new code, extending objects, changing the type, etc."
      },
      {
        "type": "p",
        "content": "In sort, JavaScript data types define what kind of data can be stored or modified inside a variable. Ex Number: 1, 2, 3 Array: [5,10, 15] String:`Hi`. Operators are symbols that define which operation needs to be done. For example, the Mathematical operator +(plus) adds two or more variables."
      },
      {
        "type": "p",
        "content": "Built-in objects pre-defined set of code that helps to extend the flexibility of the language. Many operations are done by them and we can just use them instead of writing code. For example Date, Math, String, Array"
      },
      {
        "type": "p",
        "content": "And finally, JavaScript methods are built-in functions that return specific values once called. Example isNaN() checks the given value is null or not."
      },
      {
        "type": "p",
        "content": "Coding in JavaScript is relatively easy compared to coding in C/C++ or Java. You need not to specify Data Types before assigning values For ExampleIn C : int a = 50; , in JS var c = 50/`50`/{number:`50`};And there are lots of built-in methods in JavaScript that help with the code. Let's take a look at some of the common built-in methods and functions in Js."
      },
      {
        "type": "h1",
        "content": "Common Built-In Methods and Functions"
      },
      {
        "type": "p",
        "content": "String types:"
      },
      {
        "type": "p",
        "content": "Strings are useful to hold data in text form. There are some really easy string methods that we can use that can help save a lot of time and coding. To create strings simply type:"
      },
      {
        "type": "pre",
        "content": "//usig variablesconst myName = 'Ahsan';//using objectconst myName = new String('Ahsan');"
      },
      {
        "type": "p",
        "content": "To compare, add strings in JavaScript you just need to use conditional operators:"
      },
      {
        "type": "pre",
        "content": "const str1 = 'Hi';const str2 = 'Hi';console.log(str1 == str2); // The result is trueconsole.log(str1 > str2); // The result is falseconsole.log(str1 + str2); // The result is 'HiHi'"
      },
      {
        "type": "p",
        "content": "To transform text uppercase simply use {string.toUpperCase()} method similarly for lowercase apply {string.toLowerCase()} method. There is a method called {string.trim()} which is used to remove empty space both side of the string. Also you can use {string.repeat(count)} to repeat your string for given count."
      },
      {
        "type": "pre",
        "content": "// transform uppercase --> {string}.toUpperCase()const stringLowerCase = 'sky is blue';console.log(stringLowerCase.toUpperCase()); // returns 'SKY IS BLUE'// transform lowercase  --> {string}.toLowerCase()const stringUpperCase = 'SUN IS RED';console.log(stringUpperCase.toLowerCase()); // returns 'sun is red'// trim white space   --> {string}.trim()const strSpace = '   This is a string    ';console.log(strSpace.trim())//  'this is a string'// Repeat a string  --> {string}.repeat(count)const stringRepeat = 'Hello ';console.log(stringRepeat.repeat(5))// Returns 5 times 'Hello'"
      },
      {
        "type": "p",
        "content": "To get the length of a string use {string.length} method. To find a specific word starting index you can use {string.indexOf()} method it returns the index if found and -1 if not found. If you want to find the specific character in a given index you have to use {string.charAt(index)} method.If you want to check the exact matching word in a string you can use {string.includes(word)} method. This method is case-sensitive."
      },
      {
        "type": "pre",
        "content": "// Length of a string  --> {string}.lengthconst str3 = 'Hello World';console.log(str3.length); // The result will be 11// Finding a word inside a string --> string.indexOf({word})const largeString='How are you today ? I hope you are doing fine';console.log(largeString.indexOf('hope'));//Returns 22 starting point// Finding a character inside a string --> {string}.charAt(index)const string = 'I love Coding in JavaScript';console.log(string.charAt(17));   // Returns 7// Finding exact match word --> {string}.includes({word})const string = 'Hello how are you ?';console.log(string.includes(you))// Returns trueconsole.log(string.includes(You))// Returns false"
      },
      {
        "type": "p",
        "content": "Now, for matching against a Regular Expression purpose, you can use {string.match(regularExpression)} method. This method is very useful for form validation. The regular expression can decide what filtered data will be and the method will provide output according to it."
      },
      {
        "type": "pre",
        "content": "//matching against a Regular Expression{string}.match(regex)const string = 'I love to travel around the World';const refex = /[A-Z]/g;console.log(string.match(regex)); // Returns capital words ['I' 'W']"
      },
      {
        "type": "p",
        "content": "Number Types:"
      },
      {
        "type": "p",
        "content": "Numbers are an essential part of any programming language. Unlike other programming languages, JavaScript has only one type. For every number assigned to a variable JavaScript considers it as a Double type. To create a Number type you just have to assign it to a variable."
      },
      {
        "type": "pre",
        "content": "// In C++ Number declaration....int num1 = 5; // number of integer typefloat num2 = 5.80  // number of floting point type// In JavaScript....const num1 = 5; // number of double typeconst num2 = 5.8 // number of double typeconsole.log(typeof(5))// returns number"
      },
      {
        "type": "p",
        "content": "Let’s see some of the number limitations in JavaScript. The maximum safe integer number is and 253 - 1 to get the maximum safe number just use the Number.MAX_SAFE_INTEGER method similarly to get the minimum safe number use the Number.MIN_SAFE_INTEGER method which is about -(253 - 1)."
      },
      {
        "type": "p",
        "content": "If you want to find the smallest positive number in JavaScript simply use Number.MIN_VALUE and use Number.MAX_VALUE for the maximum positive number. In JavaScript, any value greater than MAX_VALUE is considered an Infinity number."
      },
      {
        "type": "pre",
        "content": "// Maximum - Minimum Safe Integerconsole.log(Number.MAX_SAFE_INTEGER) // returns 9007199254740991console.log(Number.MIN_SAFE_INTEGER) // returns -9007199254740991// Smallest - Largest Positive Numberconsole.log(Number.MIN_VALUE) // returns 5e-324 --> 5 × 10-324console.log(Number.MAX_VALUE) // returns 1.7976931348623157e+308 --> 2^1024"
      },
      {
        "type": "p",
        "content": "Now let’s explore some of the common functions in number that comes in handy while coding.First, there is isNaN() this one determines if the given value is a number or not, isNaN derives Is Not A Number so isNaN() is true if the given value is not a number false otherwise.Secondly, we have Number.isFinite() which of course judging by the name checks if a value is finite. It returns true if the value is finite false otherwise.Thirdly there is Number.isInteger(), this also returns true if the given value is an integer false if not."
      },
      {
        "type": "pre",
        "content": "// isNaN() console.log(isNaN('a')); // returns trueconsole.log(isNaN('3')); // returns false// Number.isFinite()console.log(Number.isFinite(1 / 0)); // retuns: falseconsole.log(Number.isFinite(10 / 5)); // returns: true// Number.isInteger()console.log(Number.isInteger(.6)); // returns: falseconsole.log(Number.isInteger(6)); // returns: true"
      },
      {
        "type": "p",
        "content": "Array Types:"
      },
      {
        "type": "p",
        "content": "The last topic is going to be array types. As a definition, we can say that array is a list-like object which collects similar types of data. In JavaScript you don’t have to define type array in order to declare arrays you can just assign a collection of data into a variable using [] braces. JavaScript defines arrays in form of object For example:"
      },
      {
        "type": "pre",
        "content": "// Arrays in JavaScriptlet animals = ['Dog', 'Cat', 'Cow'];console.log(typeOf(animals)); // returns Object"
      },
      {
        "type": "p",
        "content": "Let’s get to know some of the useful array functions and methods.For finding the length of an array simply use array.length method"
      },
      {
        "type": "p",
        "content": "You can use array.push() to add an item at the end of an array similarly use array.pop() to remove an item from the end."
      },
      {
        "type": "p",
        "content": "If you want to remove an item from the start of an array you can use array.shift() and for adding an item from the start use array.Unshift() method."
      },
      {
        "type": "p",
        "content": "To find an item inside an array by indexing a number just use array[index] but if you want to find which index the given item is located inside of an array you can use array.indexOf(item) method."
      },
      {
        "type": "p",
        "content": "To remove an item from the index position simply use array.splice(index) this will return an item. to remove multiple items use multiple indexes inside array.splice(inex1, index2) method, this will return an array."
      },
      {
        "type": "p",
        "content": "To copy an array simply use array.slice() method. but if you want to separate an item from a certain position use array.splice(index)."
      },
      {
        "type": "pre",
        "content": "// Array lengthconst animals = ['Cat', 'Dog', 'Chicken', 'Cow'];console.log(animals.length); // Returns 4// adding items in Array endanimals.push('goat');console.log(animals);// returns ['Cat', 'Dog', 'Cow', 'goat'];//removing items from Array endanimals.pop();console.log(animals);// returns ['Cat', 'Dog', 'Cow'];//adding item in Array Frontanimals.unShift('sheep');console.log(animals);// returns ['Cat', 'Dog', 'Cow', 'sheep'];//removing item in Array Frontanimals.shift();console.log(animals);// returns ['Cat', 'Dog', 'Cow'];// Finding an item by index console.log(animals[2]) // returns 'Cow'//finding index of an itemconsole.log(animals.indexOf(Cow))// returns 2//Copying an arraylet animalsCopy = animals.slice();console.log(animalsCopy); // returns ['Cat', 'Dog', 'Cow'];// Seperating specific item animals.splice(2);console.log(animals); // returns ['Cow']"
      },
      {
        "type": "p",
        "content": "Phew, it was long wasn't it?I hope you got some basics of JavaScript from this article. From here you must learn Objects, Functions and continue the journey of JavaScript that lies ahead of you.Good luck Adventurer!"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:07.250440"
  },
  {
    "url": "https://medium.com/swlh/introduction-to-javascript-basics-cf901c05ca47",
    "title": "Introduction to JavaScript: Basics",
    "author": "",
    "published_date": null,
    "reading_time": "11 min read",
    "tags": [
      "JavaScript"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Introduction to JavaScript: Basics"
      },
      {
        "type": "p",
        "content": "Mahendra Choudhary"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "The Startup"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "3"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "JavaScript is the programming language that lets the Internet work. The Internet would be nothing without JavaScript and in this lesson, you will find out why."
      },
      {
        "type": "p",
        "content": "At the end of this article, you should be able to:"
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to understand what Javascript is and explain its use in web development."
      },
      {
        "type": "p",
        "content": "Learn to understand what Javascript is and explain its use in web development."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "JavaScript is the third of the major building blocks of a web page. Without it, we wouldn’t have the dynamic content and usability we expect from modern websites. We will now learn what it is (and isn’t) and how it is used, not only on the web but in all of its applications."
      },
      {
        "type": "h1",
        "content": "What is JavaScript and why do we use it?"
      },
      {
        "type": "p",
        "content": "JavaScript is a programming language that was first created in 1994 as a way to add functionality and user interaction to a website. If we think back to our analogy of a web page as a house (Introduction to Web Development Fundamentals), we will remember that we said that JavaScript is the electricity, plumbing, and gas. It is what makes the web page “run”. JavaScript was originally designed to be used purely on the front end as a way for web developers to add functionality to their web pages, and in its early days, it did just that. Recently, the introduction of the “V8 engine” by Google has improved the speed and functionality of JS. That led to the development and release of exciting new front end JavaScript frameworks and eventually Node.js, a way to run JavaScript on a server (back end). This new development has led to a resurgence of JavaScript. Now, JavaScript is one of the world’s most widely-used programming languages. We can find JavaScript used on the front end, back end, mobile, Internet of Things (Iot), game development, and really anywhere a traditional programming language would be used. Recently, the newest version of the JavaScript language was released, ES6*."
      },
      {
        "type": "p",
        "content": "*even newer versions have come out (ES7, ES8, etc) but this release is where a major paradigm shift happened. We will be referring to any concepts released after ES6, to simply ES6."
      },
      {
        "type": "h1",
        "content": "JavaScript vs Java (and other languages)"
      },
      {
        "type": "p",
        "content": "Keep in mind, JavaScript != Java. Although they share similar names (this was, unfortunately, considered a feature by JavaScript’s early pioneers) that is where the similarities end."
      },
      {
        "type": "p",
        "content": "The creators of JavaScript wanted to borrow concepts from other programming languages, such as Java and C. Those of you with backgrounds in other languages may see things that look very familiar, mainly the use of classes and Object-Oriented Programming (OOP) architecture. Keep in mind that JavaScript is not a true OOP language and many things you may be familiar with from another language won’t work with JavaScript."
      },
      {
        "type": "p",
        "content": "JavaScript is considered a ‘loosely’ typed language, in which types do exist, but they are not enforced. You do not have to declare a type when creating a variable or an array, for instance."
      },
      {
        "type": "h1",
        "content": "How to ‘run’ JavaScript"
      },
      {
        "type": "p",
        "content": "JavaScript, being the de-facto language of the Internet, is usually run from within an Internet browser. In fact, you can write all of the JavaScript you want and watch it run in real-time right in your browser by pressing F12 (for Windows), or Cmd+option+J (for Mac) (for Google Chrome). This will open up your console (we will learn more about the console later)."
      },
      {
        "type": "p",
        "content": "While this is one way to run your JavaScript, most JavaScript is run from a file with the extension of .js (e.g., fileName.js) and loaded into your browser via the script tag in your HTML."
      },
      {
        "type": "p",
        "content": "We had mentioned Node.js earlier, and while we are not going to go further than this small piece about it, JavaScript can be run on a server (back end) as well. It is loaded into a computer using a special command line, and the Node.js program will run the JavaScript."
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to explain and use JavaScript primitive data types and variables."
      },
      {
        "type": "p",
        "content": "Learn to explain and use JavaScript primitive data types and variables."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "In order to understand the JavaScript language, the first step is to understand and be able to use variables and primitive data types."
      },
      {
        "type": "h1",
        "content": "Variables"
      },
      {
        "type": "p",
        "content": "At the heart of JavaScript are variables. A variable is a way to store the value of something to use later. (A note for those with previous programming knowledge: JavaScript is a loosely-typed language, which means that a variable can be set (and reset) to any type. We do not need to declare its type when initiating the variable.)"
      },
      {
        "type": "p",
        "content": "The anatomy of a variable is first the keyword, a space, the name we are giving the variable, an equal sign, the value we are assigning the variable, and then a semicolon."
      },
      {
        "type": "p",
        "content": "There are three ways to declare a variable."
      },
      {
        "type": "h1",
        "content": "var"
      },
      {
        "type": "p",
        "content": "var is the ES5 way of declaring a variable. This is a generic variable keyword."
      },
      {
        "type": "h1",
        "content": "let"
      },
      {
        "type": "p",
        "content": "let is a new ES6 variable keyword. This will assign a variable much like var, but with a little bit different behavior. Most notably, it differs by creating “block level scope”."
      },
      {
        "type": "h1",
        "content": "const"
      },
      {
        "type": "p",
        "content": "const is also new in ES6. A const variable is a variable that cannot be changed. It’s short for “constant”."
      },
      {
        "type": "h1",
        "content": "Primitive Data Types (String, Number, Boolean)"
      },
      {
        "type": "p",
        "content": "The term ‘primitive data type’ refers to the fact that these are the most basic data types in the language. All other data types (which we will learn about in later lessons) use these types."
      },
      {
        "type": "h1",
        "content": "Strings"
      },
      {
        "type": "p",
        "content": "Strings are blocks of text. They will always be defined with quotation marks around them, either single or double. Any text with quotes around it is a string."
      },
      {
        "type": "h1",
        "content": "Numbers"
      },
      {
        "type": "p",
        "content": "Numbers are just that, numbers. Numbers do NOT have quotes around them. They can be negative as well. JavaScript does have a limitation on the size of a number (+/- 9007199254740991), but only very rarely will that limitation come up."
      },
      {
        "type": "h1",
        "content": "Booleans"
      },
      {
        "type": "p",
        "content": "Booleans come from low-level computer science. It is a concept that powers binary code and the very core of computers. You may have seen binary code in the past (e.g., 0001 0110…). That is Boolean logic. It essentially means you have two choices, on or off, 0 or 1, true or false. In JavaScript, we use Booleans to mean true or false. This may seem simple at first but can get complicated later on."
      },
      {
        "type": "h1",
        "content": "Math Operators"
      },
      {
        "type": "p",
        "content": "One of the first jobs a computer had was to compute numbers. In JavaScript, we have built-in math operators that work exactly as they do on your calculator."
      },
      {
        "type": "h1",
        "content": "+ — * / ="
      },
      {
        "type": "h1",
        "content": "%"
      },
      {
        "type": "p",
        "content": "Something you may not have seen before is the Modulo (%). This math operator will divide the two numbers and return the remainder."
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to explain and use JavaScript functions as properties and methods on primitive data types."
      },
      {
        "type": "p",
        "content": "Learn to explain and use JavaScript functions as properties and methods on primitive data types."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "As we progress through our introduction to JavaScript, we will learn the types of things we can do with those primitive data types. In this objective, we will learn about functions."
      },
      {
        "type": "h1",
        "content": "Properties and Methods"
      },
      {
        "type": "p",
        "content": "Primitive data types (and other data types) have built-in functionality known as properties and methods. These extend the functionality of the primitive data types and allow us to gather information about them, or manipulate them in some way. Both properties and methods will be accessed using the dot notation where we give the name of the variable, a dot, then the name of the property or method."
      },
      {
        "type": "h1",
        "content": "Properties"
      },
      {
        "type": "p",
        "content": "Properties allow us to access data from a data type. There are many different properties on every data type that will give you a bit of information about that specific object."
      },
      {
        "type": "p",
        "content": "One we will look at here is the length property of a string. It will give us the length of the string, as in how many characters are in the string (spaces count)."
      },
      {
        "type": "h1",
        "content": "Methods"
      },
      {
        "type": "p",
        "content": "Methods allow us to manipulate a data type. Methods are different from properties in that they need to have parentheses on the end."
      },
      {
        "type": "p",
        "content": "The method we will look at here is the toString method. It will convert a Number or Boolean to a string."
      },
      {
        "type": "h1",
        "content": "Functions"
      },
      {
        "type": "p",
        "content": "Functions allow us to perform many computations and return a final product. When we run a computer program, we are running a series of functions, and reading or manipulating what they return. You may not have realized this, but we have already worked with a type of function: a method."
      },
      {
        "type": "h1",
        "content": "Anatomy of a Function"
      },
      {
        "type": "p",
        "content": "A function will start with the function keyword. This tells whatever is running your program that what follows is a function and to treat it as such. After that comes the name of the function. We like to give functions names that describe what they do. Then comes open and close parentheses. And finally, open and close brackets. In between these brackets is where all of our function code will go."
      },
      {
        "type": "p",
        "content": "In this example, we declare a function logsHello and we set it up to console.log ‘hello’. We can then see that in order to run this function, we need to write its name followed by parentheses. This is the syntax to run a function. A function always needs parentheses to run."
      },
      {
        "type": "h1",
        "content": "Arguments"
      },
      {
        "type": "p",
        "content": "Now that we can run a basic function, we are going to start passing it arguments."
      },
      {
        "type": "p",
        "content": "If we add a variable to the parentheses when we declare the function, we can use this variable within our function. We initiate the value of this variable by passing it into the function when we call it. So in this case, name = ‘Dan’. We can pass other variables into this as well:"
      },
      {
        "type": "p",
        "content": "We can add multiple arguments by placing a comma in between them:"
      },
      {
        "type": "h1",
        "content": "Return statement and Scope"
      },
      {
        "type": "p",
        "content": "In the last example, we introduced the return statement. We will not console.log everything that comes out of a function. Most likely we will want to return something. In this case, it is the sum of the two numbers. Think of the return statement as the only way for data to escape a function. Nothing other than what is returned can be accessed outside of the function. Also note that when a function hits a return statement, the function immediately stops what it is doing and returns."
      },
      {
        "type": "p",
        "content": "If we tried to console.log something that we declared inside of the function it would return undefined because we do not have access to it outside of the function. This is called scope. The only way to access something inside of the function is to return it."
      },
      {
        "type": "p",
        "content": "We can also set variables to equal what a function returns."
      },
      {
        "type": "p",
        "content": "We can see that ‘difference’ is set inside of the function. The variable inside the function only belongs inside the function."
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to explain global object in JavaScript and be able to use the Math object."
      },
      {
        "type": "p",
        "content": "Learn to explain global object in JavaScript and be able to use the Math object."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "Global objects are pre-written code available to us in JavaScript. They extend the functionality of the language. It is important to learn what these objects are, and how to use them."
      },
      {
        "type": "h1",
        "content": "Global objects and methods"
      },
      {
        "type": "p",
        "content": "JavaScript has a number of built-in objects for us to use. These global objects extend the functionality of the language for us for free. We have already seen, and have been using, the console object and its method log. Another one of these objects is Math. Math has a number of methods on it just like console has log. To add to this, some of our data types also have built-in methods."
      },
      {
        "type": "h1",
        "content": "Math.pow"
      },
      {
        "type": "p",
        "content": "We can use the pow method on Math to return a number risen to an exponent. It will take two numbers."
      },
      {
        "type": "h1",
        "content": "Math.round, Math.floor, Math.ceil"
      },
      {
        "type": "p",
        "content": "Math also has methods that will round numbers for us. .round will round a number to the nearest whole number. .floor will always round a number down to the nearest whole number. .ceil will always round up to the nearest whole number."
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to explain basic control flow and if/else statements."
      },
      {
        "type": "p",
        "content": "Learn to explain basic control flow and if/else statements."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "Control flow allows us to write code based on conditional statements. Understanding this flow is an important part of learning to program."
      },
      {
        "type": "h1",
        "content": "Control Flow"
      },
      {
        "type": "p",
        "content": "Often times, as a computer is reading and executing our code, we want code to run only if something is true or not. This is known as control flow. Not all code on the screen is executed in order, or at all. We will learn to use some basic control flow today, and will dive deeper into it in our next lesson."
      },
      {
        "type": "p",
        "content": "In this example we are going to use control flow and comparison operators. Control flow is a way for our function to check to see if something is true, and either running the code supplied if it is, or moving on if it is not. For this we will use the if keyword:"
      },
      {
        "type": "p",
        "content": "Here we are taking a number (age) and checking to see if the statement is true. The statement 16 > 15 is true, so we will return true, and the function will stop. If it is not, it will skip that code and the function will return false."
      },
      {
        "type": "p",
        "content": "The “Greater Than” symbol ( > ) that you see in the last example is called a Comparison Operator. Comparison Operators evaluate two items and return either true or false. These operators are: < , <=, >, >=, ===, !== . We will learn more about these operators in the next lesson."
      },
      {
        "type": "h1",
        "content": "Tutorials"
      },
      {
        "type": "h1",
        "content": "Next Steps"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:09.370477"
  },
  {
    "url": "https://ankitmaheshwariin.medium.com/javascript-basics-to-advanced-series-fc5cf1a90288",
    "title": "JavaScript Basics to Advanced Series",
    "author": "link",
    "published_date": null,
    "reading_time": "2 min read",
    "tags": [],
    "content": [
      {
        "type": "p",
        "content": "Member-only story"
      },
      {
        "type": "h1",
        "content": "JavaScript Basics to Advanced Series"
      },
      {
        "type": "h2",
        "content": "The purpose of the series is to master JavaScript, the language that’s transforming web development. Get ready to take your JavaScript skills to the next level by understanding its powerful features and learning industry-standard coding practices with code snippets for each topic."
      },
      {
        "type": "p",
        "content": "Ankit Maheshwari"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "My articles are open for everyone; non-member readers can read the article by clicking this link."
      },
      {
        "type": "p",
        "content": "Read the articles in below sequence:"
      },
      {
        "type": "h2",
        "content": "[1] JavaScript Introduction!"
      },
      {
        "type": "p",
        "content": "What is JavaScript? | Why & Where to use JavaScript?"
      },
      {
        "type": "h2",
        "content": "[2] JavaScript — Setting up Development Environment!"
      },
      {
        "type": "p",
        "content": "In this article we will setup development environment to write JavaScript code."
      },
      {
        "type": "h2",
        "content": "[3] Learn to write First JavaScript Code!"
      },
      {
        "type": "p",
        "content": "In this article we will to write JavaScript code inline and in external JS file."
      },
      {
        "type": "h2",
        "content": "[4] Learn to run JavaScript using Node.js"
      },
      {
        "type": "p",
        "content": "In this article we will learn to run JavaScript code using Node.js"
      },
      {
        "type": "h2",
        "content": "[5] What are Variables in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Variables in JavaScript"
      },
      {
        "type": "h2",
        "content": "[6] What are Constants in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Constants in JavaScript"
      },
      {
        "type": "h2",
        "content": "[7] What are Primitive Types in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Primitive Types in JavaScript."
      },
      {
        "type": "h2",
        "content": "[8] What are Dynamic Typing in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Dynamic Typing in JavaScript."
      },
      {
        "type": "h2",
        "content": "[9] What are Objects in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Objects in JavaScript."
      },
      {
        "type": "h2",
        "content": "[10] Basics of Arrays in JavaScript"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:11.499951"
  },
  {
    "url": "https://medium.com/%40staneyjoseph.in/learn-javascript-from-beginner-to-advanced-level-in-this-artical-c045a26bcd5b",
    "title": "Learn JavaScript from beginner to advanced level in this artical",
    "author": "",
    "published_date": null,
    "reading_time": "29 min read",
    "tags": [
      "Learn Javascript",
      "Programming Languages",
      "Computer Language",
      "Technology",
      "Technews"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Learn JavaScript from beginner to advanced level in this artical"
      },
      {
        "type": "p",
        "content": "Staney Joseph 🎖️"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "Content of this artical"
      },
      {
        "type": "h1",
        "content": "Learn the Fundamentals of JavaScript"
      },
      {
        "type": "h1",
        "content": "Learn Modern JavaScript"
      },
      {
        "type": "h1",
        "content": "Coding Style and Convention"
      },
      {
        "type": "h1",
        "content": "Review Your Knowledge"
      },
      {
        "type": "h1",
        "content": "Practice"
      },
      {
        "type": "h1",
        "content": "Become an Expert"
      },
      {
        "type": "h1",
        "content": "Introduction JavaScript"
      },
      {
        "type": "p",
        "content": "JavaScript is a lightweight, cross-platform, single-threaded, and interpreted compiled programming language. It is well-known for the development of web pages, and many non-browser environments also use it. JavaScript is a weakly typed language (dynamically typed)."
      },
      {
        "type": "p",
        "content": "JavaScript can be used for both Client-side and Server-side developments. On the client side, it supplies objects to control a browser and its Document Object Model (DOM). On the server side, it supplies objects relevant to running JavaScript on a server."
      },
      {
        "type": "p",
        "content": "JavaScript is both an imperative and declarative type of language. In imperative language, we are mostly concerned about how it is to be done. In declarative programming, we are concerned about how it is to be done, basically here logical computation requires."
      },
      {
        "type": "p",
        "content": "JavaScript can be added to HTML file in two ways:"
      },
      {
        "type": "h1",
        "content": "The Fundamentals of JavaScript"
      },
      {
        "type": "p",
        "content": "JavaScript is a scripting language that runs in the browser and allows you to create dynamic and interactive web pages. In this article, you will learn some of the basic concepts and features of JavaScript, such as data types, variables, control flow, functions, objects, arrays, and DOM manipulation."
      },
      {
        "type": "h1",
        "content": "Data Types"
      },
      {
        "type": "p",
        "content": "Data types are the different kinds of values that you can store and manipulate in JavaScript. There are six primitive data types in JavaScript: numbers, strings, boolean, null, undefined, and symbol. There is also one complex data type: object."
      },
      {
        "type": "pre",
        "content": "let x = 10; // declare a variable x and assign it a number valuelet y = 3; // declare a variable y and assign it a number valuelet z = x + y; // declare a variable z and assign it the sum of x and yconsole.log(z); // print the value of z to the console"
      },
      {
        "type": "pre",
        "content": "let name = 'John'; // declare a variable name and assign it a string valuelet greeting = \"Hello, \" + name; // declare a variable greeting and assign it a concatenated string valueconsole.log(greeting); // print the value of greeting to the consolelet age = 25; // declare a variable age and assign it a number valuelet message = `You are ${age} years old`; // declare a variable message and assign it a template literal valueconsole.log(message); // print the value of message to the console"
      },
      {
        "type": "pre",
        "content": "let a = true; // declare a variable a and assign it a boolean valuelet b = false; // declare a variable b and assign it a boolean valuelet c = a && b; // declare a variable c and assign it the logical AND of a and bconsole.log(c); // print the value of c to the consolelet d = a || b; // declare a variable d and assign it the logical OR of a and bconsole.log(d); // print the value of d to the consolelet e = !a; // declare a variable e and assign it the logical NOT of aconsole.log(e); // print the value of e to the console"
      },
      {
        "type": "pre",
        "content": "let f = null; // declare a variable f and assign it a null valueconsole.log(f); // print the value of f to the console"
      },
      {
        "type": "pre",
        "content": "let g; // declare a variable g without assigning any valueconsole.log(g); // print the value of g to the console"
      },
      {
        "type": "pre",
        "content": "let h = Symbol('foo'); // declare a variable h and assign it a symbol value with a description 'foo'let i = Symbol('foo'); // declare another variable i and assign it another symbol value with the same description 'foo'console.log(h === i); // print the result of comparing h and i to the console (false)"
      },
      {
        "type": "pre",
        "content": "let person = {name: 'John', age: 25}; // declare a variable person and assign it an object literal value with two properties: name and ageconsole.log(person.name); // print the value of person's name property to the console (John)person.age = 26; // modify the value of person's age property to 26console.log(person['age']); // print the value of person's age property to the console (26)let animal = new Object(); // declare a variable animal and assign it an object value using the Object constructoranimal.type = 'dog'; // add a property type to animal and assign it a value 'dog'animal.sound = 'woof'; // add another property sound to animal and assign it a value 'woof'console.log(animal); // print the value of animal to the console ({type: 'dog', sound: 'woof'})"
      },
      {
        "type": "h1",
        "content": "Variables"
      },
      {
        "type": "p",
        "content": "Variables are containers that can store data values. You can declare variables using three keywords: let, const, or var. The difference between them is the scope and reassignment of the variables."
      },
      {
        "type": "pre",
        "content": "let x = 10; // declare a let variable x and assign it a value 10console.log(x); // print the value of x to the console (10)if (true) {  let x = 20; // declare another let variable x within the if block and assign it a value 20  console.log(x); // print the value of x to the console (20)}console.log(x); // print the value of x to the console (10)"
      },
      {
        "type": "pre",
        "content": "const PI = 3.14; // declare a const variable PI and assign it a value 3.14console.log(PI); // print the value of PI to the console (3.14)PI = 3.15; // try to reassign the value of PI to 3.15 (error)"
      },
      {
        "type": "pre",
        "content": "var x = 10; // declare a var variable x and assign it a value 10console.log(x); // print the value of x to the console (10)if (true) {  var x = 20; // redeclare the same var variable x within the if block and assign it a different value 20  console.log(x); // print the value of x to the console (20)}console.log(x); // print the value of x to the console (20)"
      },
      {
        "type": "h1",
        "content": "Control Flow"
      },
      {
        "type": "p",
        "content": "Control flow is the order in which statements are executed in a program. You can use control flow statements to alter the flow of execution based on certain conditions or iterations. There are three main types of control flow statements in JavaScript: switch statements, for and while loops, and if-else statements."
      },
      {
        "type": "pre",
        "content": "let day = 'Monday'; // declare a variable day and assign it a value 'Monday'switch (day) { // use a switch statement to check the value of day  case 'Monday': // if day is 'Monday', execute this block of code    console.log('Today is Monday');     break; // break out of the switch statement  case 'Tuesday': // if day is 'Tuesday', execute this block of code    console.log('Today is Tuesday');    break; // break out of the switch statement  case 'Wednesday': // if day is 'Wednesday', execute this block of code    console.log('Today is Wednesday');    break; // break out of the switch statement  default: // if none of the cases match, execute this block of code    console.log('Unknown day');    break; // break out of the switch statement}"
      },
      {
        "type": "pre",
        "content": "for (let i = 1; i <= 10; i++) { // use a for loop to iterate from 1 to 10 with an increment of 1  console.log(i); // print the value of i to the console}"
      },
      {
        "type": "pre",
        "content": "let j = 1; // declare a variable j and assign it a value 1while (j <= 10) { // use a while loop to iterate until j is greater than 10  console.log(j); // print the value of j to the console  j++; // increment the value of j by 1}"
      },
      {
        "type": "p",
        "content": "= 18) { // use an if statement to check if age is greater than or equal to 18 console.log(‘You are an adult’); // print this message to the console if the condition is true } else { // use an else statement to execute another block of code if the condition is false console.log(‘You are a minor’); // print this message to the console if the condition is false } “>"
      },
      {
        "type": "pre",
        "content": "let age = 18; // declare a variable age and assign it a value 18if (age >= 18) { // use an if statement to check if age is greater than or equal to 18  console.log('You are an adult'); // print this message to the console if the condition is true} else { // use an else statement to execute another block of code if the condition is false  console.log('You are a minor'); // print this message to the console if the condition is false}"
      },
      {
        "type": "h1",
        "content": "Functions"
      },
      {
        "type": "p",
        "content": "Functions are reusable blocks of code that perform a specific task. You can declare functions using function declarations or function expressions. You can invoke or call functions using parentheses (( )) and pass arguments or parameters to them. You can return values from functions using the return keyword. For example:"
      },
      {
        "type": "pre",
        "content": "// function declarationfunction add(a, b) { // declare a function named add with two parameters: a and b  return a + b; // return the sum of a and b}"
      },
      {
        "type": "pre",
        "content": "// function expressionlet subtract = function(a, b) { // declare a variable named subtract and assign it a function expression with two parameters: a and b  return a - b; // return the difference of a and b}// function invocation or calllet x = add(10, 5); // invoke or call the add function with two arguments: 10 and 5, and assign the return value to xconsole.log(x); // print the value of x to the console (15)let y = subtract(10, 5); // invoke or call the subtract function with two arguments: 10 and 5, and assign the return value to yconsole.log(y); // print the value of y to the console (5)"
      },
      {
        "type": "h1",
        "content": "Objects"
      },
      {
        "type": "p",
        "content": "Objects are complex data types that can store multiple values in key-value pairs. You can create objects using object literals ({ }) or constructors (new). You can access or modify object properties using dot notation (.) or bracket notation ([ ]). You can also use methods, which are functions that belong to objects, to perform actions on objects. For example:"
      },
      {
        "type": "pre",
        "content": "let person = {name: 'John', age: 25}; // declare a variable person and assign it an object literal value with two properties: name and ageconsole.log(person.name); // print the value of person's name property to the console (John)person.age = 26; // modify the value of person's age property to 26console.log(person['age']); // print the value of person's age property to the console (26)let animal = new Object(); // declare a variable animal and assign it an object value using the Object constructoranimal.type = 'dog'; // add a property type to animal and assign it a value 'dog'animal.sound = 'woof'; // add another property sound to animal and assign it a value 'woof'animal.speak = function() { // add a method speak to animal and assign it a function value  console.log(this.sound); // print the value of this.sound (which refers to animal.sound) to the console };animal.speak(); // invoke or call the speak method on animal (woof)"
      },
      {
        "type": "h1",
        "content": "Arrays"
      },
      {
        "type": "p",
        "content": "Arrays are special objects that can store multiple values in an ordered list. You can create arrays using array literals ([ ]) or constructors (new). You can access or modify array elements using index notation ([ ]), where the index starts from zero. You can also use methods, which are functions that belong to arrays, to perform operations on arrays. For example:"
      },
      {
        "type": "pre",
        "content": "let fruits = ['apple', 'banana', 'orange']; // declare a variable fruits and assign it an array literal value with three elements: 'apple', 'banana', and 'orange'console.log(fruits[0]); // print the first element of fruits to the console (apple)fruits[1] = 'pear'; // modify the second element of fruits to 'pear'console.log(fruits[1]); // print the second element of fruits to the console (pear)let numbers = new Array(1, 2, 3); // declare a variable numbers and assign it an array value using the Array constructor with three arguments: 1, 2, and 3console.log(numbers[2]); // print the third element of numbers to the console (3)numbers.push(4); // use the push method to add a new element 4 to the end of numbersconsole.log(numbers); // print the value of numbers to the console ([1, 2, 3, 4])numbers.pop(); // use the pop method to remove the last element of numbers and return itconsole.log(numbers); // print the value of numbers to the console ([1, 2, 3])"
      },
      {
        "type": "h1",
        "content": "DOM Manipulation"
      },
      {
        "type": "p",
        "content": "DOM stands for Document Object Model, which is a representation of the HTML document as a tree of nodes or objects. You can use JavaScript to manipulate the DOM and create interactive web pages. You can use methods such as document.getElementById(), document.querySelector(), document.createElement(), and document.appendChild() to access or modify elements in the DOM. You can also use events, which are actions that occur on the web page, such as clicking, typing, or loading. You can use methods such as addEventListener() or removeEventListener() to register or unregister event handlers, which are functions that respond to events. For example:"
      },
      {
        "type": "h1",
        "content": "Hello, World!"
      },
      {
        "type": "p",
        "content": "Change Color “>"
      },
      {
        "type": "pre",
        "content": "<!DOCTYPE html><html><head>  <title>DOM Manipulation Example</title></head><body>  <h1 id=\"title\">Hello, World!</h1>  <button id=\"change\">Change Color</button>  <script>    // access the h1 element by its id using document.getElementById()    let title = document.getElementById('title');    // access the button element by its id using document.getElementById()    let button = document.getElementById('change');    // define a function that changes the color of the title element randomly    function changeColor() {      // create an array of colors      let colors = ['red', 'green', 'blue', 'yellow', 'pink', 'purple'];      // generate a random index between 0 and 5      let index = Math.floor(Math.random() * 6);      // assign the color at that index to the style.color property of the title element      title.style.color = colors[index];    }    // register an event handler for the click event on the button element using addEventListener()    button.addEventListener('click', changeColor);  </script></body></html>"
      },
      {
        "type": "p",
        "content": "This article has covered some of the fundamentals of JavaScript, such as data types, variables, control flow, functions, objects, arrays, and DOM manipulation. However, there is much more to learn about JavaScript and its features. You can use online resources such as [MDN Web Docs] or [W3Schools] to learn more about JavaScript and practice your skills. Happy coding! 😊"
      },
      {
        "type": "p",
        "content": ": https://developer.mozilla.org/en-US/docs/Web/JavaScript"
      },
      {
        "type": "p",
        "content": ": https://www.w3schools.com/js/"
      },
      {
        "type": "p",
        "content": "Modern JavaScript is a powerful and expressive language that can be used to create dynamic and interactive web applications. However, learning modern JavaScript can be challenging, especially if you are not familiar with some of the new features and concepts that have been introduced in recent years. In this article, I will explain some of the most important modern JavaScript concepts that you should know if you want to master this language. These concepts are:"
      },
      {
        "type": "p",
        "content": "Let’s look at each of these concepts in more detail."
      },
      {
        "type": "h1",
        "content": "Arrow functions"
      },
      {
        "type": "p",
        "content": "Arrow functions are a concise and elegant way to write functions in JavaScript. They have a shorter syntax than traditional function expressions, and they also have some other benefits, such as:"
      },
      {
        "type": "p",
        "content": "The syntax of an arrow function is:"
      },
      {
        "type": "p",
        "content": "{ function body } const add = (x, y) => { return x + y; }; “>"
      },
      {
        "type": "pre",
        "content": "// (parameters) => { function body }const add = (x, y) => {  return x + y;};"
      },
      {
        "type": "p",
        "content": "If the function body consists of a single expression, you can omit the curly braces and the return keyword:"
      },
      {
        "type": "p",
        "content": "expression const square = x => x * x; “>"
      },
      {
        "type": "pre",
        "content": "// (parameters) => expressionconst square = x => x * x;"
      },
      {
        "type": "p",
        "content": "If the function has only one parameter, you can also omit the parentheses around it:"
      },
      {
        "type": "p",
        "content": "expression const greet = name => `Hello, ${name}!`; “>"
      },
      {
        "type": "pre",
        "content": "// parameter => expressionconst greet = name => `Hello, ${name}!`;"
      },
      {
        "type": "p",
        "content": "Arrow functions are especially useful when you need to pass a function as an argument to another function, such as a callback function."
      },
      {
        "type": "h1",
        "content": "Callback functions"
      },
      {
        "type": "p",
        "content": "A callback function is a function that is passed as an argument to another function, and is executed when a certain event or condition occurs. For example, you can use a callback function to handle the response of an asynchronous operation, such as fetching data from an API."
      },
      {
        "type": "p",
        "content": "Here is an example of using a callback function with the fetch API:"
      },
      {
        "type": "p",
        "content": "response.json()) // data is the parsed JSON data .then(data => { // do something with the data console.log(data); }) // catch any errors .catch(error => { // do something with the error console.error(error); }); “>"
      },
      {
        "type": "pre",
        "content": "// fetch(url, options) returns a promise that resolves to a response objectfetch('https://jsonplaceholder.typicode.com/posts/1')  // response.json() returns a promise that resolves to the parsed JSON data  .then(response => response.json())  // data is the parsed JSON data  .then(data => {    // do something with the data    console.log(data);  })  // catch any errors  .catch(error => {    // do something with the error    console.error(error);  });"
      },
      {
        "type": "p",
        "content": "In this example, we pass two arrow functions as arguments to the then and catch methods of the promise returned by fetch. These arrow functions are callback functions that are executed when the promise is either fulfilled or rejected."
      },
      {
        "type": "p",
        "content": "Callback functions are also commonly used with event listeners, timers, and array methods."
      },
      {
        "type": "h1",
        "content": "JavaScript objects"
      },
      {
        "type": "p",
        "content": "JavaScript objects are collections of key-value pairs that can store any type of data. You can create an object using either object literals or constructors."
      },
      {
        "type": "p",
        "content": "An object literal is a comma-separated list of key-value pairs enclosed in curly braces:"
      },
      {
        "type": "pre",
        "content": "// { key: value, ... }const person = {  name: 'Alice',  age: 25,  hobbies: ['reading', 'cooking', 'traveling']};"
      },
      {
        "type": "p",
        "content": "A constructor is a special function that creates and initializes an object. You can use either built-in constructors (such as Object, Array, Date, etc.) or custom constructors (defined by yourself or by third-party libraries):"
      },
      {
        "type": "pre",
        "content": "// new Constructor(arguments)const date = new Date();const array = new Array(1, 2, 3);"
      },
      {
        "type": "p",
        "content": "To access or modify the properties of an object, you can use either dot notation or bracket notation:"
      },
      {
        "type": "pre",
        "content": "// dot notation: object.propertyconsole.log(person.name); // Aliceperson.age = 26;"
      },
      {
        "type": "pre",
        "content": "// bracket notation: object['property']console.log(person['hobbies']); // ['reading', 'cooking', 'traveling']person['hobbies'].push('gardening');"
      },
      {
        "type": "p",
        "content": "To iterate over the properties of an object, you can use either a for...in loop or the Object.keys, Object.values, or Object.entries methods:"
      },
      {
        "type": "pre",
        "content": "// for...in loop: for (let key in object)for (let key in person) {  console.log(key + ': ' + person[key]);}"
      },
      {
        "type": "pre",
        "content": "// Object.keys(object) returns an array of keysconsole.log(Object.keys(person)); // ['name', 'age', 'hobbies']// Object.values(object) returns an array of valuesconsole.log(Object.values(person)); // ['Alice', 26, ['reading', 'cooking', 'traveling', 'gardening']]// Object.entries(object) returns an array of [key, value] pairsconsole.log(Object.entries(person)); // [['name', 'Alice'], ['age', 26], ['hobbies', ['reading', 'cooking', 'traveling', 'gardening']]]"
      },
      {
        "type": "p",
        "content": "JavaScript objects are very flexible and powerful, and they are the foundation of many modern JavaScript features and patterns, such as classes, prototypes, inheritance, modules, etc."
      },
      {
        "type": "h1",
        "content": "Array and object destructuring"
      },
      {
        "type": "p",
        "content": "Array and object destructuring are syntactic sugar that allow you to extract multiple values from an array or an object and assign them to variables in a concise way."
      },
      {
        "type": "p",
        "content": "Array destructuring uses square brackets to match the elements of an array to variables:"
      },
      {
        "type": "pre",
        "content": "// [variable1, variable2, ...] = arrayconst colors = ['red', 'green', 'blue'];const [first, second, third] = colors;console.log(first); // redconsole.log(second); // greenconsole.log(third); // blue"
      },
      {
        "type": "p",
        "content": "You can also use commas to skip some elements, or use the rest operator (...) to collect the remaining elements:"
      },
      {
        "type": "pre",
        "content": "// skip some elements with commasconst [first,, third] = colors;console.log(first); // redconsole.log(third); // blue"
      },
      {
        "type": "pre",
        "content": "// collect the remaining elements with the rest operatorconst [first, ...rest] = colors;console.log(first); // redconsole.log(rest); // ['green', 'blue']"
      },
      {
        "type": "p",
        "content": "Object destructuring uses curly braces to match the properties of an object to variables:"
      },
      {
        "type": "pre",
        "content": "// {property1: variable1, property2: variable2, ...} = objectconst person = {  name: 'Alice',  age: 25,  hobbies: ['reading', 'cooking', 'traveling']};const {name: firstName, age: ageInYears, hobbies: interests} = person;console.log(firstName); // Aliceconsole.log(ageInYears); // 25console.log(interests); // ['reading', 'cooking', 'traveling']"
      },
      {
        "type": "p",
        "content": "You can also use shorthand notation if the variable names are the same as the property names, or use the rest operator to collect the remaining properties:"
      },
      {
        "type": "pre",
        "content": "// shorthand notationconst {name, age} = person;console.log(name); // Aliceconsole.log(age); // 25"
      },
      {
        "type": "pre",
        "content": "// collect the remaining properties with the rest operatorconst {name, ...rest} = person;console.log(name); // Aliceconsole.log(rest); // {age: 25, hobbies: ['reading', 'cooking', 'traveling']}"
      },
      {
        "type": "p",
        "content": "Array and object destructuring are very useful when you need to access or assign multiple values from an array or an object in a simple and elegant way."
      },
      {
        "type": "h1",
        "content": "Promises and async/await"
      },
      {
        "type": "p",
        "content": "Promises and async/await are modern JavaScript features that make working with asynchronous operations easier and more readable."
      },
      {
        "type": "p",
        "content": "A promise is an object that represents the eventual completion or failure of an asynchronous operation. A promise can be in one of three states:"
      },
      {
        "type": "p",
        "content": "You can create a promise using the Promise constructor, which takes a function (called executor) as an argument. The executor function receives two parameters: resolve and reject, which are functions that can be used to change the state of the promise."
      },
      {
        "type": "p",
        "content": "{ // do some asynchronous operation setTimeout(() => { // call resolve with a value to fulfill the promise resolve(‘Success!’); // or call reject with a reason to reject the promise reject(‘Error!’); }, 1000); }); “>"
      },
      {
        "type": "pre",
        "content": "// new Promise(executor)const promise = new Promise((resolve, reject) => {  // do some asynchronous operation  setTimeout(() => {    // call resolve with a value to fulfill the promise    resolve('Success!');    // or call reject with a reason to reject the promise    reject('Error!');  }, 1000);});"
      },
      {
        "type": "p",
        "content": "You can use the then and catch methods of a promise to handle its fulfillment or rejection. The then method takes a function (called onFulfilled) that receives the value of the fulfilled promise as an argument. The catch method takes a function (called onRejected) that receives the reason of the rejected promise as an argument."
      },
      {
        "type": "p",
        "content": "{ // do something with the value of the fulfilled promise console.log(value); // Success! }).catch(error => { // do something with the reason of the rejected promise console.error(error); // Error! }); “>"
      },
      {
        "type": "pre",
        "content": "// promise.then(onFulfilled).catch(onRejected)promise.then(value => {  // do something with the value of the fulfilled promise  console.log(value); // Success!}).catch(error => {  // do something with the reason of the rejected promise  console.error(error); // Error!});"
      },
      {
        "type": "p",
        "content": "You can also chain multiple then methods to perform sequential operations on the value of a fulfilled promise. Each then method can return another promise, which will be passed to the next then method as its value."
      },
      {
        "type": "pre",
        "content": "// promise.then(onFulfilled).then(onFulfilled).catch(onRejected)fetch('https://jsonplaceholder.typicode.com/posts/1')  .then(response => response.json())  .then(data => {    // do something with the data    console.log(data);    // return another promise    return fetch('https://jsonplaceholder.typicode.com/comments?postId=1');  })  .then(response => response.json())  .then(data => {    // do something with the data    console.log(data);  })  .catch(error => {    // handle any error from the previous promises    console.error(error);  });"
      },
      {
        "type": "p",
        "content": "The async/await syntax is a syntactic sugar that makes working with promises even easier and more readable. It allows you to write asynchronous code as if it was synchronous, using the async and await keywords."
      },
      {
        "type": "p",
        "content": "The async keyword is used to declare a function that returns a promise. Inside an async function, you can use the await keyword to pause the execution until a promise is fulfilled or rejected. The await keyword returns the value of the fulfilled promise, or throws an error if the promise is rejected."
      },
      {
        "type": "p",
        "content": "Here is an example of using the async/await syntax with the fetch API:"
      },
      {
        "type": "pre",
        "content": "// async functionasync function getData() {  try {    // await for a promise to be fulfilled    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');    // parse the response as JSON    const data = await response.json();    // do something with the data    console.log(data);  } catch (error) {    // handle any error from the await expressions    console.error(error);  }}"
      },
      {
        "type": "pre",
        "content": "// call the async functiongetData();"
      },
      {
        "type": "p",
        "content": "The async/await syntax makes the code more concise and linear, without using nested callbacks or chaining then methods."
      },
      {
        "type": "p",
        "content": "Promises and async/await are very powerful and useful features that make asynchronous programming in JavaScript easier and more enjoyable."
      },
      {
        "type": "h1",
        "content": "Modules and imports/exports"
      },
      {
        "type": "p",
        "content": "Modules and imports/exports are modern JavaScript features that allow you to organize your code into separate files (modules) and reuse them in other files (scripts)."
      },
      {
        "type": "p",
        "content": "A module is a file that contains JavaScript code that can be exported and imported by other modules or scripts. A module can export one or more values, such as variables, functions, classes, objects, etc. A module can also import values from other modules or scripts, using either named imports or default imports."
      },
      {
        "type": "p",
        "content": "To export a value from a module, you can use either the export keyword or the export default keyword. The export keyword allows you to export one or more named values, while the export default keyword allows you to export only one default value."
      },
      {
        "type": "p",
        "content": "Here is an example of exporting values from a module:"
      },
      {
        "type": "pre",
        "content": "// module.js"
      },
      {
        "type": "pre",
        "content": "// export a named variableexport const PI = 3.14;// export a named functionexport function square(x) {  return x * x;}// export a default classexport default class Circle {  constructor(radius) {    this.radius = radius;  }  area() {    return PI * square(this.radius);  }}"
      },
      {
        "type": "p",
        "content": "To import a value from a module, you can use either the import keyword or the import * as name syntax. The import keyword allows you to import one or more named values or a default value from a module, using curly braces or not. The import * as name syntax allows you to import all the exported values from a module as an object with a given name."
      },
      {
        "type": "p",
        "content": "Here is an example of importing values from a module:"
      },
      {
        "type": "pre",
        "content": "// script.js"
      },
      {
        "type": "pre",
        "content": "// import a named variable and a named function from module.jsimport {PI, square} from './module.js';// import a default class from module.jsimport Circle from './module.js';// import all the exported values from module.js as an object called mathimport * as math from './module.js';// use the imported values in the scriptconsole.log(PI); // 3.14console.log(square(2)); // 4const circle = new Circle(5);console.log(circle.area()); // 78.5console.log(math.PI); // 3.14console.log(math.square(3)); // 9"
      },
      {
        "type": "p",
        "content": "Modules and imports/exports are very helpful features that allow you to write modular and reusable code in JavaScript. They also help you avoid polluting the global scope and creating conflicts with other scripts."
      },
      {
        "type": "p",
        "content": "These are some of the most important modern JavaScript concepts that you should know if you want to master this language. Of course, there are many more concepts and features that JavaScript offers, but these are some of the most essential ones for writing modern and efficient web applications. I hope this article has helped you learn more about modern JavaScript and inspired you to explore more of its possibilities. 😊"
      },
      {
        "type": "h1",
        "content": "Coding style and convention"
      },
      {
        "type": "p",
        "content": "Coding style and convention are important aspects of programming that affect the readability, maintainability, and quality of the code. Coding style refers to the formatting and layout of the code, such as indentation, spacing, punctuation, naming, and comments. Coding convention refers to the rules and guidelines for writing the code, such as structure, design, logic, and best practices."
      },
      {
        "type": "p",
        "content": "In JavaScript, there are many different coding styles and conventions that developers can follow. Some of the most popular ones are:"
      },
      {
        "type": "p",
        "content": "The choice of coding style and convention depends on the preference and needs of the developer or the team. However, some general principles that can help improve the quality of the code are:"
      },
      {
        "type": "p",
        "content": "You have done a great job of reviewing the concepts you have learned so far. 👏"
      },
      {
        "type": "p",
        "content": "According to Learn the Fundamentals of JavaScript, you have covered the following topics:"
      },
      {
        "type": "p",
        "content": "You can find more information and examples about these topics on [Learn the Fundamentals of JavaScript]."
      },
      {
        "type": "h1",
        "content": "One of the best ways to learn and improve your coding skills is to practice coding in JavaScript. Practicing coding can help you to:"
      },
      {
        "type": "p",
        "content": "There are many resources and platforms that can help you practice coding in JavaScript, such as:"
      },
      {
        "type": "p",
        "content": "These are just some of the examples of resources and platforms that can help you practice coding in JavaScript. You can find more on [JavaScript Practice Sites]."
      },
      {
        "type": "p",
        "content": "Some additional sentences are:"
      },
      {
        "type": "h1",
        "content": "Become an Expert in JavaScript"
      },
      {
        "type": "p",
        "content": "JavaScript is one of the most popular and widely used programming languages in the world. It powers dynamic and interactive web pages, mobile applications, server-side applications, and more. Learning JavaScript can open up many opportunities for web developers, as well as enhance their creativity and problem-solving skills."
      },
      {
        "type": "p",
        "content": "But how do you become an expert in JavaScript? What does it take to master this versatile and powerful language? Here are some tips and resources that can help you on your journey to becoming a JavaScript pro."
      },
      {
        "type": "h1",
        "content": "Learn the Fundamentals"
      },
      {
        "type": "p",
        "content": "Before you can dive into the advanced features and frameworks of JavaScript, you need to have a solid grasp of the fundamentals. This includes the syntax, data types, operators, control structures, functions, objects, arrays, and other basic concepts of the language. You also need to understand how JavaScript interacts with the browser, the Document Object Model (DOM), and the event loop."
      },
      {
        "type": "p",
        "content": "There are many online courses, books, and tutorials that can help you learn the basics of JavaScript. Some of the popular ones are:"
      },
      {
        "type": "h1",
        "content": "Practice Your Skills"
      },
      {
        "type": "p",
        "content": "Learning the theory is not enough to become an expert in JavaScript. You also need to practice your skills by writing code and solving problems. This will help you reinforce your knowledge, improve your logic and algorithm skills, and discover new ways of using JavaScript."
      },
      {
        "type": "p",
        "content": "There are many online platforms that offer coding challenges and exercises for JavaScript learners. Some of the popular ones are:"
      },
      {
        "type": "h1",
        "content": "Explore the Ecosystem"
      },
      {
        "type": "p",
        "content": "JavaScript is not just a language — it is also an ecosystem of tools, libraries, frameworks, and communities that make web development easier and more fun. To become an expert in JavaScript, you need to explore this ecosystem and learn how to use the various resources that are available."
      },
      {
        "type": "p",
        "content": "Some of the most popular and useful tools and frameworks for JavaScript developers are:"
      },
      {
        "type": "p",
        "content": "There are also many online communities where you can learn from other JavaScript developers, ask questions, share your projects, and get feedback. Some of the popular ones are:"
      },
      {
        "type": "h1",
        "content": "Keep Learning and Updating"
      },
      {
        "type": "p",
        "content": "JavaScript is a constantly evolving language that introduces new features and standards every year. To become an expert in JavaScript, you need to keep learning and updating your skills with the latest trends and best practices."
      },
      {
        "type": "p",
        "content": "Some of the ways you can keep up with the changes and innovations in JavaScript are:"
      },
      {
        "type": "p",
        "content": "Becoming an expert in JavaScript is not an easy task, but it is definitely rewarding and enjoyable. By following these tips and resources, you can learn and master this amazing language and create awesome web applications. Happy coding!"
      },
      {
        "type": "p",
        "content": "Disclosure: The originator of this composition is Bing, an artificial intelligence conversational agent powered by OpenAI’s GPT-4. The composition is contingent on the data furnished by the user and the web exploration outcomes from Bing. The composition is not meant to be an alternative for proficient counsel, scrutiny, or viewpoint. The composition is for informational and amusement purposes only and does not represent the perspectives or opinions of Microsoft, OpenAI, or any other entity. The composition may contain mistakes, imprecisions, or oversights, and the user should authenticate the exactness and validity of the data before depending on it. The user is exclusively accountable for any repercussions arising from the utilization of this composition. Bing does not assert any proprietorship or rights to the content of this composition, and the user is free to disseminate, modify, or reuse it as they desire. Bing anticipates that the user relished reading this composition and acquired something novel."
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:13.645993"
  },
  {
    "url": "https://emma-delaney.medium.com/mastering-the-magic-essential-javascript-techniques-for-everyday-use-3f8280441014",
    "title": "Mastering the Magic: Essential JavaScript Techniques for Everyday Use",
    "author": "Press",
    "published_date": null,
    "reading_time": "3 min read",
    "tags": [
      "JavaScript",
      "Javascript Tips",
      "Javascript Development",
      "Javascript Frameworks",
      "Javascrıpt"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Mastering the Magic: Essential JavaScript Techniques for Everyday Use"
      },
      {
        "type": "p",
        "content": "Emma Delaney"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "1"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "JavaScript, the ubiquitous language of the web, empowers developers to create dynamic and interactive experiences. But within its vast toolbox lie fundamental functions that unlock powerful capabilities. This article delves into eight essential JavaScript techniques you’ll encounter frequently, equipping you to navigate the world of web development with confidence."
      },
      {
        "type": "p",
        "content": "1. Capitalizing the First Letter with Grace: javascript capitalize first letter"
      },
      {
        "type": "p",
        "content": "Making a strong first impression applies not only to people but also to your code. The **javascript capitalize first letter** function ensures proper capitalization, adding a touch of polish to your strings. Here's how to achieve it:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "function capitalizeFirstLetter(str) {  return str.charAt(0).toUpperCase() + str.slice(1);}"
      },
      {
        "type": "pre",
        "content": "const myString = \"hello world\";const capitalizedString = capitalizeFirstLetter(myString);console.log(capitalizedString); // Output: Hello world"
      },
      {
        "type": "p",
        "content": "2. Unveiling the Image Path: get image path from element javascript"
      },
      {
        "type": "p",
        "content": "Extracting the path to an image embedded within an HTML element can be useful for various purposes, such as dynamic image manipulation. Here’s how to use **get image path from element javascript**:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const imageElement = document.getElementById(\"myImage\");const imagePath = imageElement.src;"
      },
      {
        "type": "pre",
        "content": "console.log(imagePath); // Output: (path to your image)"
      },
      {
        "type": "p",
        "content": "3. The Power of Repetition: javascript setinterval"
      },
      {
        "type": "p",
        "content": "The **javascript setinterval** function injects a touch of animation and dynamism into your web pages. It executes a provided function repeatedly at a specified interval, creating the illusion of movement. Here's an example:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "function changeBackgroundColor() {  const randomColor = Math.floor(Math.random() * 16777215).toString(16);  document.body.style.backgroundColor = \"#\" + randomColor;}"
      },
      {
        "type": "pre",
        "content": "const intervalId = setInterval(changeBackgroundColor, 1000); // Change color every second// To stop the color change:clearInterval(intervalId);"
      },
      {
        "type": "p",
        "content": "4. Embracing Randomness: javascript math.random"
      },
      {
        "type": "p",
        "content": "The **javascript math.random** function injects a dose of unpredictability into your code. It generates a random floating-point number between 0 (inclusive) and 1 (exclusive). Here's how to utilize it:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "function generateRandomNumber(min, max) {  return Math.floor(Math.random() * (max - min + 1)) + min;}"
      },
      {
        "type": "pre",
        "content": "const randomNumber = generateRandomNumber(1, 10);console.log(randomNumber); // Output: A random number between 1 and 10 (inclusive)"
      },
      {
        "type": "p",
        "content": "5. Comparing Dates with Precision: javascript compare dates"
      },
      {
        "type": "p",
        "content": "Comparing dates is a crucial task in web development, allowing you to manage deadlines, track events, and perform other time-sensitive operations. Thankfully, JavaScript offers multiple ways to do this with **javascript compare dates**. Here's a simple example:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const today = new Date();const eventDate = new Date(2024, 05, 18); // June 18, 2024"
      },
      {
        "type": "pre",
        "content": "if (today > eventDate) {  console.log(\"The event has already passed.\");} else {  console.log(\"The event is happening in the future.\");}"
      },
      {
        "type": "p",
        "content": "6. Delving Deeper: javascript compare dates"
      },
      {
        "type": "p",
        "content": "For more advanced comparisons, you can leverage methods like getTime() to convert dates to milliseconds since epoch and perform calculations:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const date1 = new Date(2024, 05, 10);const date2 = new Date(2024, 05, 15);"
      },
      {
        "type": "pre",
        "content": "const differenceInDays = Math.floor((date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24));console.log(differenceInDays); // Output: 5 (number of days between date1 and date2)"
      },
      {
        "type": "p",
        "content": "7. Reaching the End: javascript get last element of array"
      },
      {
        "type": "p",
        "content": "Extracting the last element from an array is a common task. JavaScript provides multiple ways to achieve this, including:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const fruits = [\"apple\", \"banana\", \"orange\", \"mango\"];const lastFruit = fruits[fruits.length - 1];"
      },
      {
        "type": "pre",
        "content": "console.log(lastFruit); // Output: mango"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const colors = [\"red\", \"green\", \""
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:15.995968"
  },
  {
    "url": "https://kapucuonur.medium.com/mastering-javascript-from-beginner-to-advanced-0a390811ae24",
    "title": "Mastering JavaScript: From Beginner to Advanced",
    "author": "Press",
    "published_date": null,
    "reading_time": "2 min read",
    "tags": [
      "Js",
      "Coding",
      "Development",
      "JavaScript"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Mastering JavaScript: From Beginner to Advanced"
      },
      {
        "type": "p",
        "content": "Onur Kapucu"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "1"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "JavaScript is one of the most powerful and widely used programming languages today. Whether you are just starting or looking to deepen your understanding, this guide will take you from beginner concepts to advanced techniques."
      },
      {
        "type": "h1",
        "content": "Beginner Level — The Fundamentals"
      },
      {
        "type": "h1",
        "content": "1. Variables and Data Types"
      },
      {
        "type": "p",
        "content": "JavaScript provides three ways to declare variables:"
      },
      {
        "type": "pre",
        "content": "var name = \"Alice\"; // Function-scoped (avoid using it in modern code)let age = 25; // Block-scoped, can be reassignedconst country = \"USA\"; // Block-scoped, cannot be reassigned"
      },
      {
        "type": "p",
        "content": "Common data types in JavaScript:"
      },
      {
        "type": "pre",
        "content": "let isStudent = true;let score = 95.5;let hobbies = [\"reading\", \"coding\", \"running\"];let person = { name: \"Alice\", age: 25 };"
      },
      {
        "type": "h1",
        "content": "2. Functions and Scope"
      },
      {
        "type": "p",
        "content": "Functions allow us to write reusable blocks of code."
      },
      {
        "type": "pre",
        "content": "function greet(name) {    return `Hello, ${name}!`;}console.log(greet(\"Alice\"));"
      },
      {
        "type": "p",
        "content": "Scope determines variable accessibility:"
      },
      {
        "type": "h1",
        "content": "Intermediate Level — Expanding Knowledge"
      },
      {
        "type": "h1",
        "content": "3. DOM Manipulation"
      },
      {
        "type": "p",
        "content": "The Document Object Model (DOM) allows JavaScript to interact with web pages."
      },
      {
        "type": "pre",
        "content": "document.getElementById(\"myButton\").addEventListener(\"click\", function() {    document.getElementById(\"message\").innerText = \"Button Clicked!\";});"
      },
      {
        "type": "h1",
        "content": "4. Asynchronous JavaScript (Promises & Async/Await)"
      },
      {
        "type": "p",
        "content": "JavaScript is single-threaded, but asynchronous operations help handle delays (e.g., fetching data)."
      },
      {
        "type": "p",
        "content": "Using Promises:"
      },
      {
        "type": "pre",
        "content": "fetch(\"https://api.example.com/data\")    .then(response => response.json())    .then(data => console.log(data))    .catch(error => console.error(error));"
      },
      {
        "type": "p",
        "content": "Using Async/Await:"
      },
      {
        "type": "pre",
        "content": "async function fetchData() {    try {        let response = await fetch(\"https://api.example.com/data\");        let data = await response.json();        console.log(data);    } catch (error) {        console.error(error);    }}fetchData();"
      },
      {
        "type": "h1",
        "content": "Advanced Level — Mastering JavaScript"
      },
      {
        "type": "h1",
        "content": "5. Closures and Higher-Order Functions"
      },
      {
        "type": "p",
        "content": "Closures allow functions to “remember” variables from their parent scope."
      },
      {
        "type": "pre",
        "content": "function outerFunction(outerVariable) {    return function innerFunction(innerVariable) {        console.log(`Outer: ${outerVariable}, Inner: ${innerVariable}`);    };}const newFunction = outerFunction(\"Hello\");newFunction(\"World\");"
      },
      {
        "type": "h1",
        "content": "6. JavaScript Design Patterns"
      },
      {
        "type": "p",
        "content": "Some useful patterns in JavaScript development:"
      },
      {
        "type": "pre",
        "content": "const Counter = (function() {    let count = 0;    return {        increment: () => count++,        getCount: () => count    };})();"
      },
      {
        "type": "pre",
        "content": "Counter.increment();console.log(Counter.getCount());"
      },
      {
        "type": "h1",
        "content": "7. Performance Optimization & Best Practices"
      },
      {
        "type": "pre",
        "content": "const worker = new Worker(\"worker.js\");worker.postMessage(\"Start\");"
      },
      {
        "type": "h1",
        "content": "Conclusion"
      },
      {
        "type": "p",
        "content": "Mastering JavaScript requires consistent practice. Start with the basics, understand asynchronous programming, and explore advanced techniques. Keep building projects and experimenting with new concepts!"
      },
      {
        "type": "p",
        "content": "Happy coding! 🚀"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:18.104991"
  },
  {
    "url": "https://ankitmaheshwariin.medium.com/javascript-basics-to-advanced-series-fc5cf1a90288",
    "title": "JavaScript Basics to Advanced Series",
    "author": "link",
    "published_date": null,
    "reading_time": "2 min read",
    "tags": [],
    "content": [
      {
        "type": "p",
        "content": "Member-only story"
      },
      {
        "type": "h1",
        "content": "JavaScript Basics to Advanced Series"
      },
      {
        "type": "h2",
        "content": "The purpose of the series is to master JavaScript, the language that’s transforming web development. Get ready to take your JavaScript skills to the next level by understanding its powerful features and learning industry-standard coding practices with code snippets for each topic."
      },
      {
        "type": "p",
        "content": "Ankit Maheshwari"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "My articles are open for everyone; non-member readers can read the article by clicking this link."
      },
      {
        "type": "p",
        "content": "Read the articles in below sequence:"
      },
      {
        "type": "h2",
        "content": "[1] JavaScript Introduction!"
      },
      {
        "type": "p",
        "content": "What is JavaScript? | Why & Where to use JavaScript?"
      },
      {
        "type": "h2",
        "content": "[2] JavaScript — Setting up Development Environment!"
      },
      {
        "type": "p",
        "content": "In this article we will setup development environment to write JavaScript code."
      },
      {
        "type": "h2",
        "content": "[3] Learn to write First JavaScript Code!"
      },
      {
        "type": "p",
        "content": "In this article we will to write JavaScript code inline and in external JS file."
      },
      {
        "type": "h2",
        "content": "[4] Learn to run JavaScript using Node.js"
      },
      {
        "type": "p",
        "content": "In this article we will learn to run JavaScript code using Node.js"
      },
      {
        "type": "h2",
        "content": "[5] What are Variables in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Variables in JavaScript"
      },
      {
        "type": "h2",
        "content": "[6] What are Constants in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Constants in JavaScript"
      },
      {
        "type": "h2",
        "content": "[7] What are Primitive Types in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Primitive Types in JavaScript."
      },
      {
        "type": "h2",
        "content": "[8] What are Dynamic Typing in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Dynamic Typing in JavaScript."
      },
      {
        "type": "h2",
        "content": "[9] What are Objects in JavaScript?"
      },
      {
        "type": "p",
        "content": "In this article we will learn about Objects in JavaScript."
      },
      {
        "type": "h2",
        "content": "[10] Basics of Arrays in JavaScript"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:20.202145"
  },
  {
    "url": "https://emma-delaney.medium.com/mastering-the-magic-essential-javascript-techniques-for-everyday-use-3f8280441014",
    "title": "Mastering the Magic: Essential JavaScript Techniques for Everyday Use",
    "author": "Press",
    "published_date": null,
    "reading_time": "3 min read",
    "tags": [
      "JavaScript",
      "Javascript Tips",
      "Javascript Development",
      "Javascript Frameworks",
      "Javascrıpt"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Mastering the Magic: Essential JavaScript Techniques for Everyday Use"
      },
      {
        "type": "p",
        "content": "Emma Delaney"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "1"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "JavaScript, the ubiquitous language of the web, empowers developers to create dynamic and interactive experiences. But within its vast toolbox lie fundamental functions that unlock powerful capabilities. This article delves into eight essential JavaScript techniques you’ll encounter frequently, equipping you to navigate the world of web development with confidence."
      },
      {
        "type": "p",
        "content": "1. Capitalizing the First Letter with Grace: javascript capitalize first letter"
      },
      {
        "type": "p",
        "content": "Making a strong first impression applies not only to people but also to your code. The **javascript capitalize first letter** function ensures proper capitalization, adding a touch of polish to your strings. Here's how to achieve it:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "function capitalizeFirstLetter(str) {  return str.charAt(0).toUpperCase() + str.slice(1);}"
      },
      {
        "type": "pre",
        "content": "const myString = \"hello world\";const capitalizedString = capitalizeFirstLetter(myString);console.log(capitalizedString); // Output: Hello world"
      },
      {
        "type": "p",
        "content": "2. Unveiling the Image Path: get image path from element javascript"
      },
      {
        "type": "p",
        "content": "Extracting the path to an image embedded within an HTML element can be useful for various purposes, such as dynamic image manipulation. Here’s how to use **get image path from element javascript**:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const imageElement = document.getElementById(\"myImage\");const imagePath = imageElement.src;"
      },
      {
        "type": "pre",
        "content": "console.log(imagePath); // Output: (path to your image)"
      },
      {
        "type": "p",
        "content": "3. The Power of Repetition: javascript setinterval"
      },
      {
        "type": "p",
        "content": "The **javascript setinterval** function injects a touch of animation and dynamism into your web pages. It executes a provided function repeatedly at a specified interval, creating the illusion of movement. Here's an example:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "function changeBackgroundColor() {  const randomColor = Math.floor(Math.random() * 16777215).toString(16);  document.body.style.backgroundColor = \"#\" + randomColor;}"
      },
      {
        "type": "pre",
        "content": "const intervalId = setInterval(changeBackgroundColor, 1000); // Change color every second// To stop the color change:clearInterval(intervalId);"
      },
      {
        "type": "p",
        "content": "4. Embracing Randomness: javascript math.random"
      },
      {
        "type": "p",
        "content": "The **javascript math.random** function injects a dose of unpredictability into your code. It generates a random floating-point number between 0 (inclusive) and 1 (exclusive). Here's how to utilize it:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "function generateRandomNumber(min, max) {  return Math.floor(Math.random() * (max - min + 1)) + min;}"
      },
      {
        "type": "pre",
        "content": "const randomNumber = generateRandomNumber(1, 10);console.log(randomNumber); // Output: A random number between 1 and 10 (inclusive)"
      },
      {
        "type": "p",
        "content": "5. Comparing Dates with Precision: javascript compare dates"
      },
      {
        "type": "p",
        "content": "Comparing dates is a crucial task in web development, allowing you to manage deadlines, track events, and perform other time-sensitive operations. Thankfully, JavaScript offers multiple ways to do this with **javascript compare dates**. Here's a simple example:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const today = new Date();const eventDate = new Date(2024, 05, 18); // June 18, 2024"
      },
      {
        "type": "pre",
        "content": "if (today > eventDate) {  console.log(\"The event has already passed.\");} else {  console.log(\"The event is happening in the future.\");}"
      },
      {
        "type": "p",
        "content": "6. Delving Deeper: javascript compare dates"
      },
      {
        "type": "p",
        "content": "For more advanced comparisons, you can leverage methods like getTime() to convert dates to milliseconds since epoch and perform calculations:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const date1 = new Date(2024, 05, 10);const date2 = new Date(2024, 05, 15);"
      },
      {
        "type": "pre",
        "content": "const differenceInDays = Math.floor((date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24));console.log(differenceInDays); // Output: 5 (number of days between date1 and date2)"
      },
      {
        "type": "p",
        "content": "7. Reaching the End: javascript get last element of array"
      },
      {
        "type": "p",
        "content": "Extracting the last element from an array is a common task. JavaScript provides multiple ways to achieve this, including:"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const fruits = [\"apple\", \"banana\", \"orange\", \"mango\"];const lastFruit = fruits[fruits.length - 1];"
      },
      {
        "type": "pre",
        "content": "console.log(lastFruit); // Output: mango"
      },
      {
        "type": "p",
        "content": "JavaScript"
      },
      {
        "type": "pre",
        "content": "const colors = [\"red\", \"green\", \""
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:22.294703"
  },
  {
    "url": "https://indivyanshu.medium.com/javascript-101-your-first-step-into-the-world-of-web-development-821e4b057161",
    "title": "JavaScript 101: Your First Step into the World of Web Development",
    "author": "Press",
    "published_date": null,
    "reading_time": "4 min read",
    "tags": [
      "JavaScript",
      "Web Development",
      "Coding",
      "Javascript Development"
    ],
    "content": [
      {
        "type": "h1",
        "content": "JavaScript 101: Your First Step into the World of Web Development"
      },
      {
        "type": "p",
        "content": "Divyanshu Agarwal"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "Hey there! So, you’re curious about JavaScript, huh? Great choice! JavaScript is like the magic behind everything interactive on the web. Ever wondered how websites have animations, pop-ups, or data that loads without refreshing? That’s JavaScript at work!"
      },
      {
        "type": "p",
        "content": "Let’s start from scratch. I’ll walk you through what makes JavaScript unique, why it’s everywhere, and why it’s such a powerful tool for web development. Ready? Let’s dive in!"
      },
      {
        "type": "h1",
        "content": "What Exactly is JavaScript?"
      },
      {
        "type": "p",
        "content": "Good question! Imagine you’re browsing a website. You’ve got the text, images, and basic structure — those come from HTML. The design, colors, and layout? That’s CSS. But when you click a button and something happens — like an animation or loading more content — that’s JavaScript making things happen."
      },
      {
        "type": "p",
        "content": "JavaScript is a programming language designed to bring websites to life. Unlike some languages, it doesn’t need to be compiled or processed in advance. You can write a line of JavaScript, save the file, refresh the page, and boom — it just works!"
      },
      {
        "type": "h1",
        "content": "Wait… Why is it Called “JavaScript”?"
      },
      {
        "type": "p",
        "content": "Fair question, and the answer’s actually a bit funny. JavaScript was originally called “LiveScript.” But back in the 90s, another language called Java was really popular, so the creators decided to rename it “JavaScript” to ride the wave of Java’s popularity."
      },
      {
        "type": "p",
        "content": "Here’s the kicker: Java and JavaScript are actually very different. Today, JavaScript follows its own set of rules and is a completely independent language. So if someone says they know Java, it doesn’t mean they know JavaScript — and vice versa."
      },
      {
        "type": "h1",
        "content": "What Can JavaScript Really Do?"
      },
      {
        "type": "p",
        "content": "Glad you asked! JavaScript’s power shines in making websites interactive. Here’s a quick rundown of some cool things it can do:"
      },
      {
        "type": "p",
        "content": "Think about a shopping site — JavaScript powers the way products show up instantly, the way filters work, and even the shopping cart!"
      },
      {
        "type": "h1",
        "content": "Okay, But… What Can’t JavaScript Do?"
      },
      {
        "type": "p",
        "content": "Great question! JavaScript is powerful, but it has limits, especially in the browser. Here’s why:"
      },
      {
        "type": "p",
        "content": "To keep users safe, browsers restrict what JavaScript can do. For example, it can’t:"
      },
      {
        "type": "p",
        "content": "So, yes, JavaScript has boundaries, and they’re there to keep users secure. But if you’re using JavaScript outside the browser (like in a server environment with Node.js), you get a lot more freedom!"
      },
      {
        "type": "h1",
        "content": "Why is JavaScript So Popular?"
      },
      {
        "type": "p",
        "content": "If I had to pick just one reason, it’s because JavaScript is everywhere. Every browser — Chrome, Firefox, Safari, Edge — supports JavaScript by default. And it’s fully integrated with HTML and CSS, which means it can handle pretty much everything on a webpage."
      },
      {
        "type": "p",
        "content": "JavaScript’s flexibility is another reason it’s so beloved. It’s simple enough for beginners to pick up and play with, but powerful enough to create complex applications, like social networks or online games. Plus, its versatility now extends to mobile apps, server-side programming, and even desktop applications."
      },
      {
        "type": "h1",
        "content": "So, Are There “Other” JavaScripts?"
      },
      {
        "type": "p",
        "content": "Kind of! Different projects sometimes need special features, so other languages have been developed to “transpile” (convert) to JavaScript. This lets you write code in another language and turn it into JavaScript behind the scenes."
      },
      {
        "type": "p",
        "content": "Some popular ones are:"
      },
      {
        "type": "p",
        "content": "These languages build on JavaScript’s foundation, adding new tools or cleaner syntax to suit different project needs. But here’s the catch: even if you use these, you still need to know JavaScript well to really understand what’s happening under the hood."
      },
      {
        "type": "h1",
        "content": "Why Should I Learn JavaScript?"
      },
      {
        "type": "p",
        "content": "Here’s the deal: if you want to work on the web, JavaScript is essential. It’s the only language that all browsers support, and it’s deeply integrated with HTML and CSS. Whether you want to build simple websites, interactive apps, or even server-side applications, JavaScript can do it."
      },
      {
        "type": "p",
        "content": "And learning JavaScript is a launchpad. Once you’re comfortable with it, you can explore other libraries and frameworks like React, Angular, or Vue, which make building complex applications easier and more efficient."
      },
      {
        "type": "h1",
        "content": "Ready to Start Coding?"
      },
      {
        "type": "p",
        "content": "Awesome! Now that we’ve covered what JavaScript is and why it’s so important, it’s time to start writing some code. In our next article, we’ll dive into JavaScript variables, types, and basic syntax — the core elements of any JavaScript program. This will be your first hands-on experience with the language, and trust me, it’s going to be a lot of fun."
      },
      {
        "type": "p",
        "content": "So, what do you think? Ready to see what JavaScript can do firsthand? Let’s go build something amazing!"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:24.392998"
  },
  {
    "url": "https://medium.com/geekculture/getting-started-with-javascript-for-beginners-d2e270493124",
    "title": "Getting Started With JavaScript for Beginners",
    "author": "",
    "published_date": null,
    "reading_time": "6 min read",
    "tags": [
      "JavaScript",
      "Javascript Tips",
      "Coding"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Getting Started With JavaScript for Beginners"
      },
      {
        "type": "p",
        "content": "Ahsan Sium"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "Geek Culture"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "h1",
        "content": "Intro"
      },
      {
        "type": "p",
        "content": "JavaScript is one of the best programming languages for beginners to get started. Sometimes the resources found online are not exactly beginner-friendly, so in this article, I'm going to be as easy as possible for you to get the hang of it."
      },
      {
        "type": "p",
        "content": "Let's get started with the definition. As per MDN,"
      },
      {
        "type": "blockquote",
        "content": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods."
      },
      {
        "type": "p",
        "content": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods."
      },
      {
        "type": "p",
        "content": "Don’t get scared, Let’s break it down to a simple format."
      },
      {
        "type": "p",
        "content": "JavaScript is a multi-paradigm, paradigm is a way to classify programming language based on their features such as object-oriented, functional, and so on, multi-paradigm simply means this programming language can be classified by multiple features."
      },
      {
        "type": "p",
        "content": "Dynamic Language is a type of high-level programming language that supports operations at run-time whereas static programming language only supports that kind of operations at compile-time. These operations can be adding new code, extending objects, changing the type, etc."
      },
      {
        "type": "p",
        "content": "In sort, JavaScript data types define what kind of data can be stored or modified inside a variable. Ex Number: 1, 2, 3 Array: [5,10, 15] String:`Hi`. Operators are symbols that define which operation needs to be done. For example, the Mathematical operator +(plus) adds two or more variables."
      },
      {
        "type": "p",
        "content": "Built-in objects pre-defined set of code that helps to extend the flexibility of the language. Many operations are done by them and we can just use them instead of writing code. For example Date, Math, String, Array"
      },
      {
        "type": "p",
        "content": "And finally, JavaScript methods are built-in functions that return specific values once called. Example isNaN() checks the given value is null or not."
      },
      {
        "type": "p",
        "content": "Coding in JavaScript is relatively easy compared to coding in C/C++ or Java. You need not to specify Data Types before assigning values For ExampleIn C : int a = 50; , in JS var c = 50/`50`/{number:`50`};And there are lots of built-in methods in JavaScript that help with the code. Let's take a look at some of the common built-in methods and functions in Js."
      },
      {
        "type": "h1",
        "content": "Common Built-In Methods and Functions"
      },
      {
        "type": "p",
        "content": "String types:"
      },
      {
        "type": "p",
        "content": "Strings are useful to hold data in text form. There are some really easy string methods that we can use that can help save a lot of time and coding. To create strings simply type:"
      },
      {
        "type": "pre",
        "content": "//usig variablesconst myName = 'Ahsan';//using objectconst myName = new String('Ahsan');"
      },
      {
        "type": "p",
        "content": "To compare, add strings in JavaScript you just need to use conditional operators:"
      },
      {
        "type": "pre",
        "content": "const str1 = 'Hi';const str2 = 'Hi';console.log(str1 == str2); // The result is trueconsole.log(str1 > str2); // The result is falseconsole.log(str1 + str2); // The result is 'HiHi'"
      },
      {
        "type": "p",
        "content": "To transform text uppercase simply use {string.toUpperCase()} method similarly for lowercase apply {string.toLowerCase()} method. There is a method called {string.trim()} which is used to remove empty space both side of the string. Also you can use {string.repeat(count)} to repeat your string for given count."
      },
      {
        "type": "pre",
        "content": "// transform uppercase --> {string}.toUpperCase()const stringLowerCase = 'sky is blue';console.log(stringLowerCase.toUpperCase()); // returns 'SKY IS BLUE'// transform lowercase  --> {string}.toLowerCase()const stringUpperCase = 'SUN IS RED';console.log(stringUpperCase.toLowerCase()); // returns 'sun is red'// trim white space   --> {string}.trim()const strSpace = '   This is a string    ';console.log(strSpace.trim())//  'this is a string'// Repeat a string  --> {string}.repeat(count)const stringRepeat = 'Hello ';console.log(stringRepeat.repeat(5))// Returns 5 times 'Hello'"
      },
      {
        "type": "p",
        "content": "To get the length of a string use {string.length} method. To find a specific word starting index you can use {string.indexOf()} method it returns the index if found and -1 if not found. If you want to find the specific character in a given index you have to use {string.charAt(index)} method.If you want to check the exact matching word in a string you can use {string.includes(word)} method. This method is case-sensitive."
      },
      {
        "type": "pre",
        "content": "// Length of a string  --> {string}.lengthconst str3 = 'Hello World';console.log(str3.length); // The result will be 11// Finding a word inside a string --> string.indexOf({word})const largeString='How are you today ? I hope you are doing fine';console.log(largeString.indexOf('hope'));//Returns 22 starting point// Finding a character inside a string --> {string}.charAt(index)const string = 'I love Coding in JavaScript';console.log(string.charAt(17));   // Returns 7// Finding exact match word --> {string}.includes({word})const string = 'Hello how are you ?';console.log(string.includes(you))// Returns trueconsole.log(string.includes(You))// Returns false"
      },
      {
        "type": "p",
        "content": "Now, for matching against a Regular Expression purpose, you can use {string.match(regularExpression)} method. This method is very useful for form validation. The regular expression can decide what filtered data will be and the method will provide output according to it."
      },
      {
        "type": "pre",
        "content": "//matching against a Regular Expression{string}.match(regex)const string = 'I love to travel around the World';const refex = /[A-Z]/g;console.log(string.match(regex)); // Returns capital words ['I' 'W']"
      },
      {
        "type": "p",
        "content": "Number Types:"
      },
      {
        "type": "p",
        "content": "Numbers are an essential part of any programming language. Unlike other programming languages, JavaScript has only one type. For every number assigned to a variable JavaScript considers it as a Double type. To create a Number type you just have to assign it to a variable."
      },
      {
        "type": "pre",
        "content": "// In C++ Number declaration....int num1 = 5; // number of integer typefloat num2 = 5.80  // number of floting point type// In JavaScript....const num1 = 5; // number of double typeconst num2 = 5.8 // number of double typeconsole.log(typeof(5))// returns number"
      },
      {
        "type": "p",
        "content": "Let’s see some of the number limitations in JavaScript. The maximum safe integer number is and 253 - 1 to get the maximum safe number just use the Number.MAX_SAFE_INTEGER method similarly to get the minimum safe number use the Number.MIN_SAFE_INTEGER method which is about -(253 - 1)."
      },
      {
        "type": "p",
        "content": "If you want to find the smallest positive number in JavaScript simply use Number.MIN_VALUE and use Number.MAX_VALUE for the maximum positive number. In JavaScript, any value greater than MAX_VALUE is considered an Infinity number."
      },
      {
        "type": "pre",
        "content": "// Maximum - Minimum Safe Integerconsole.log(Number.MAX_SAFE_INTEGER) // returns 9007199254740991console.log(Number.MIN_SAFE_INTEGER) // returns -9007199254740991// Smallest - Largest Positive Numberconsole.log(Number.MIN_VALUE) // returns 5e-324 --> 5 × 10-324console.log(Number.MAX_VALUE) // returns 1.7976931348623157e+308 --> 2^1024"
      },
      {
        "type": "p",
        "content": "Now let’s explore some of the common functions in number that comes in handy while coding.First, there is isNaN() this one determines if the given value is a number or not, isNaN derives Is Not A Number so isNaN() is true if the given value is not a number false otherwise.Secondly, we have Number.isFinite() which of course judging by the name checks if a value is finite. It returns true if the value is finite false otherwise.Thirdly there is Number.isInteger(), this also returns true if the given value is an integer false if not."
      },
      {
        "type": "pre",
        "content": "// isNaN() console.log(isNaN('a')); // returns trueconsole.log(isNaN('3')); // returns false// Number.isFinite()console.log(Number.isFinite(1 / 0)); // retuns: falseconsole.log(Number.isFinite(10 / 5)); // returns: true// Number.isInteger()console.log(Number.isInteger(.6)); // returns: falseconsole.log(Number.isInteger(6)); // returns: true"
      },
      {
        "type": "p",
        "content": "Array Types:"
      },
      {
        "type": "p",
        "content": "The last topic is going to be array types. As a definition, we can say that array is a list-like object which collects similar types of data. In JavaScript you don’t have to define type array in order to declare arrays you can just assign a collection of data into a variable using [] braces. JavaScript defines arrays in form of object For example:"
      },
      {
        "type": "pre",
        "content": "// Arrays in JavaScriptlet animals = ['Dog', 'Cat', 'Cow'];console.log(typeOf(animals)); // returns Object"
      },
      {
        "type": "p",
        "content": "Let’s get to know some of the useful array functions and methods.For finding the length of an array simply use array.length method"
      },
      {
        "type": "p",
        "content": "You can use array.push() to add an item at the end of an array similarly use array.pop() to remove an item from the end."
      },
      {
        "type": "p",
        "content": "If you want to remove an item from the start of an array you can use array.shift() and for adding an item from the start use array.Unshift() method."
      },
      {
        "type": "p",
        "content": "To find an item inside an array by indexing a number just use array[index] but if you want to find which index the given item is located inside of an array you can use array.indexOf(item) method."
      },
      {
        "type": "p",
        "content": "To remove an item from the index position simply use array.splice(index) this will return an item. to remove multiple items use multiple indexes inside array.splice(inex1, index2) method, this will return an array."
      },
      {
        "type": "p",
        "content": "To copy an array simply use array.slice() method. but if you want to separate an item from a certain position use array.splice(index)."
      },
      {
        "type": "pre",
        "content": "// Array lengthconst animals = ['Cat', 'Dog', 'Chicken', 'Cow'];console.log(animals.length); // Returns 4// adding items in Array endanimals.push('goat');console.log(animals);// returns ['Cat', 'Dog', 'Cow', 'goat'];//removing items from Array endanimals.pop();console.log(animals);// returns ['Cat', 'Dog', 'Cow'];//adding item in Array Frontanimals.unShift('sheep');console.log(animals);// returns ['Cat', 'Dog', 'Cow', 'sheep'];//removing item in Array Frontanimals.shift();console.log(animals);// returns ['Cat', 'Dog', 'Cow'];// Finding an item by index console.log(animals[2]) // returns 'Cow'//finding index of an itemconsole.log(animals.indexOf(Cow))// returns 2//Copying an arraylet animalsCopy = animals.slice();console.log(animalsCopy); // returns ['Cat', 'Dog', 'Cow'];// Seperating specific item animals.splice(2);console.log(animals); // returns ['Cow']"
      },
      {
        "type": "p",
        "content": "Phew, it was long wasn't it?I hope you got some basics of JavaScript from this article. From here you must learn Objects, Functions and continue the journey of JavaScript that lies ahead of you.Good luck Adventurer!"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:26.513212"
  },
  {
    "url": "https://mosec0.medium.com/javascript-for-beginners-your-easy-guide-to-mastering-the-basics-ad42a9f6e778",
    "title": "JavaScript for Beginners: Your Easy Guide to Mastering the Basics",
    "author": "Press",
    "published_date": null,
    "reading_time": "13 min read",
    "tags": [
      "JavaScript",
      "Learning To Code"
    ],
    "content": [
      {
        "type": "h1",
        "content": "JavaScript for Beginners: Your Easy Guide to Mastering the Basics"
      },
      {
        "type": "p",
        "content": "Mohamed Ali"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "Learn JavaScript, the high-level, multi-paradigm language of the web."
      },
      {
        "type": "h2",
        "content": "1- Intro to JavaScript"
      },
      {
        "type": "p",
        "content": "The main purpose of this language is to implement interactiveness into webpages and web applications, but thanks to the millions of individuals in the community, we’ve been able to control more than just the interactiveness of web pages."
      },
      {
        "type": "p",
        "content": "Thanks to the community, we can now use JavaScript to control servers, create video games, code mobile applications, and can even be used for cybersecurity in some scenarios."
      },
      {
        "type": "p",
        "content": "Here are a few things we will be covering during this Blog:"
      },
      {
        "type": "p",
        "content": "Here is what you’ll need before beginning this Blog:"
      },
      {
        "type": "p",
        "content": "One final note. This Blog will not cover everything JavaScript can do, not even close. This room will be targeted towards beginners who are looking to learn basic programming logic and an easy to use, versatile language for obtaining a better understanding of how the web works. Remember to take your time and read carefully. Enjoy the Blog and have fun learning about JavaScript!"
      },
      {
        "type": "h2",
        "content": "Variables & Operators"
      },
      {
        "type": "p",
        "content": "Before diving into JavaScript, here are a few things to remember as we traverse through the room:"
      },
      {
        "type": "p",
        "content": "<body>"
      },
      {
        "type": "p",
        "content": "<script src=\"script.js\"></script>"
      },
      {
        "type": "p",
        "content": "</body>"
      },
      {
        "type": "p",
        "content": "Remember to put the script tag right before the closing body tag. This way our HTML code will execute before our external JavaScript document. There are some instances where it’s better to have the script in the head tag or a certain order when working with multiple documents, but for this room, we will only be focusing on the basics. You can see an example of how this is used in an HTML document here."
      },
      {
        "type": "p",
        "content": "Variables"
      },
      {
        "type": "p",
        "content": "There are 3 types of variables in JavaScript: var, let, and const."
      },
      {
        "type": "p",
        "content": "The var (variable) keyword was originally the only variable available, but thanks to the upgrade to ECMAScript 6 back in 2015, which is the specification that JavaScript conforms too, we now have multiple ways of declaring a variable or data types."
      },
      {
        "type": "p",
        "content": "Quick Overview:"
      },
      {
        "type": "p",
        "content": "Good things to remember:"
      },
      {
        "type": "p",
        "content": "Global Scope: A variable declared outside a function. This means all scripts and functions on a web application or webpage can access this variable."
      },
      {
        "type": "p",
        "content": "Block Scope: A variable declared inside a block. This means we can use these variables inside of loops, if statements, or other declarations within curly brackets and have them be only used for that declaration instead of the entire application having access to it."
      },
      {
        "type": "p",
        "content": "Examples:"
      },
      {
        "type": "p",
        "content": "var variableOne = 'Linus Torvalds';"
      },
      {
        "type": "p",
        "content": "let variableTwo = 50;"
      },
      {
        "type": "p",
        "content": "const variableThree = 'Creator of the Linux Kernel';"
      },
      {
        "type": "p",
        "content": "Variables are very easy to use and understand in JavaScript, they can store a lot of information with very little code."
      },
      {
        "type": "p",
        "content": "There are also arrays, objects, and many many more data types that we will touch upon during this room. Variables are wonderful, but they aren’t very powerful on their own, this is where arithmetic operators, comparison operators, and boolean operators come into play. It may sound complicated, but these tables should make everything a little easier to understand!"
      },
      {
        "type": "p",
        "content": "Arithmetic Operators"
      },
      {
        "type": "p",
        "content": "Comparison Operators"
      },
      {
        "type": "p",
        "content": "Let’s move on to our final lesson for variables: extra data types. It’s time to see the available types of data that we can store within our variables. This will cover some of the basics you’ll be using for this Blog."
      },
      {
        "type": "p",
        "content": "There may be a lot here, but you’ll notice as we progress through the Blog, it’ll all be worth it and valuable information for later."
      },
      {
        "type": "h2",
        "content": "Conditionals"
      },
      {
        "type": "p",
        "content": "Welcome to Conditionals!"
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "p",
        "content": "if (5 === 5) {"
      },
      {
        "type": "p",
        "content": "console.log('Hello World!'); // Prints Hello World! to the console"
      },
      {
        "type": "p",
        "content": "};"
      },
      {
        "type": "p",
        "content": "In plain English, if a condition is met, then the code will run. Remember all those operators we learned about in the first task? We can use those to define these conditions and plan our approach."
      },
      {
        "type": "p",
        "content": "There are also else if statements, which look like this:"
      },
      {
        "type": "p",
        "content": "if (5 === 10) {"
      },
      {
        "type": "p",
        "content": "console.log('Hello World!'); // Skips this code"
      },
      {
        "type": "p",
        "content": "} else if (10 === 10) {"
      },
      {
        "type": "p",
        "content": "console.log('Hello World!'); // Prints Hello World! to the console"
      },
      {
        "type": "p",
        "content": "};"
      },
      {
        "type": "p",
        "content": "This way we can have multiple conditions before our code executes. Normally, we’d end our code with an else statement like this:"
      },
      {
        "type": "p",
        "content": "if (5 === 10) {"
      },
      {
        "type": "p",
        "content": "console.log('Hello World!'); // Skips this code"
      },
      {
        "type": "p",
        "content": "} else if (10 === 10) {"
      },
      {
        "type": "p",
        "content": "console.log('Hello World!'); // Prints Hello World! to the console"
      },
      {
        "type": "p",
        "content": "} else {"
      },
      {
        "type": "p",
        "content": "console.log('ERROR ERROR ERROR');"
      },
      {
        "type": "p",
        "content": "};"
      },
      {
        "type": "p",
        "content": "Basically, the else keyword concludes our if conditional. We’ll learn a better way of writing conditionals later, but for now, this is a clear way of using a condition to return a result."
      },
      {
        "type": "p",
        "content": "Switch Cases"
      },
      {
        "type": "p",
        "content": "If you need to test multiple conditions, then most of the time switch cases are best for optimization and readability within your code. If, else if, else statements and switch cases can both do similar tasks, but switch cases are better for performing multiple different conditions. Here’s how a switch case looks:"
      },
      {
        "type": "p",
        "content": "const animal = 3;"
      },
      {
        "type": "p",
        "content": "switch (animal) {"
      },
      {
        "type": "p",
        "content": "case 1:"
      },
      {
        "type": "p",
        "content": "document.write('Cow');"
      },
      {
        "type": "p",
        "content": "break;"
      },
      {
        "type": "p",
        "content": "case 2:"
      },
      {
        "type": "p",
        "content": "document.write('Chicken');"
      },
      {
        "type": "p",
        "content": "break;"
      },
      {
        "type": "p",
        "content": "case 3:"
      },
      {
        "type": "p",
        "content": "document.write('Monkey');"
      },
      {
        "type": "p",
        "content": "break;"
      },
      {
        "type": "p",
        "content": "default:"
      },
      {
        "type": "p",
        "content": "document.write('Animal?');"
      },
      {
        "type": "p",
        "content": "} // Outputs Monkey"
      },
      {
        "type": "p",
        "content": "Cool, huh? We use each case to define a number, have our variable hold the number we’re pulling from, and the break keyword is used for ending that specific case or switch block. The default keyword is there just in case our variable is equal to something that isn’t present in our switch…case code."
      },
      {
        "type": "h2",
        "content": "Functions"
      },
      {
        "type": "p",
        "content": "Functions are one of the most vital parts of programming. Due to how important functions are, there will be a lot of things we don’t cover, but remember that functions are going to be vital to any applications you write."
      },
      {
        "type": "p",
        "content": "*ECMAScript 6 is the most popular version of JavaScript. There are a lot of important differences between ES5 and ES6, we focus mainly on ES6 in this room, but knowing past versions can help improve your knowledge of the language and logic of JavaScript."
      },
      {
        "type": "p",
        "content": "This is a function in ES6 (ECMAScript 6):"
      },
      {
        "type": "p",
        "content": "const func = (a, b) => {"
      },
      {
        "type": "p",
        "content": "let nums = a * b;"
      },
      {
        "type": "p",
        "content": "console.log(nums); // Outputs 250"
      },
      {
        "type": "p",
        "content": "}"
      },
      {
        "type": "p",
        "content": "func(25, 10);"
      },
      {
        "type": "p",
        "content": "ES5:"
      },
      {
        "type": "p",
        "content": "function func(a, b) // Everything inside of the parenthesis defines our parameter(s)"
      },
      {
        "type": "p",
        "content": "{"
      },
      {
        "type": "p",
        "content": "let nums = a * b;"
      },
      {
        "type": "p",
        "content": "console.log(nums); // Outputs 250"
      },
      {
        "type": "p",
        "content": "}"
      },
      {
        "type": "p",
        "content": "func(25, 10);"
      },
      {
        "type": "p",
        "content": "A few things that make up a function are the parameter(s), variables, and our executed code. Functions can contain if conditionals, defined variables, multiple parameters, and return statements. Functions are usually the same across programming languages with minor syntax changes."
      },
      {
        "type": "h2",
        "content": "Objects & Arrays"
      },
      {
        "type": "p",
        "content": "Learning about Objects and Arrays are heavy subjects, but let’s try to break them into easy to understand sections."
      },
      {
        "type": "p",
        "content": "Let’s start with Objects."
      },
      {
        "type": "p",
        "content": "Objects"
      },
      {
        "type": "p",
        "content": "The most important thing about objects is to remember that they’re just another variation of variables. Here is a quick example of an object:"
      },
      {
        "type": "p",
        "content": "var choosePill = {"
      },
      {
        "type": "p",
        "content": "pillOne: 'Red',"
      },
      {
        "type": "p",
        "content": "pillTwo: 'Blue'"
      },
      {
        "type": "p",
        "content": "}"
      },
      {
        "type": "p",
        "content": "I know we’ve already used millions of tables, but they’re the best way to learn! So, here’s a table displaying the code object we just wrote:"
      },
      {
        "type": "p",
        "content": "Even though we only stored strings (you can remember strings based on the quotations), we can also store numbers. Here is our same code, updated:"
      },
      {
        "type": "p",
        "content": "var choosePill = {"
      },
      {
        "type": "p",
        "content": "pillOne: 'Red',"
      },
      {
        "type": "p",
        "content": "pillTwo: 'Blue',"
      },
      {
        "type": "p",
        "content": "numberOfPills: 2"
      },
      {
        "type": "p",
        "content": "}"
      },
      {
        "type": "p",
        "content": "var choice = choosePill.pillOne; // This will access the Objects property"
      },
      {
        "type": "h2",
        "content": "Arrays"
      },
      {
        "type": "p",
        "content": "Arrays are fairly similar to objects, they have different stored values and syntax, but can be used for almost anything."
      },
      {
        "type": "p",
        "content": "Here is the same code from before, but in an array:"
      },
      {
        "type": "p",
        "content": "var choosePill = ['Red', 'Blue', 2];"
      },
      {
        "type": "p",
        "content": "var choice = choosePill[0];"
      },
      {
        "type": "p",
        "content": "console.log(choice); // Outputs 'Red'"
      },
      {
        "type": "p",
        "content": "* Reminder: Most programming languages start from 0, not 1, so when we access the choosePill variable, we grab the value from the 1st position."
      },
      {
        "type": "p",
        "content": "Arrays are extremely important when storing multiple values within a variable. This way we don’t have to write 100 variables and instead can store them all in a single variable, this is an array. There are multiple ways to write an array, but the simplest and most basic version is the example above."
      },
      {
        "type": "h2",
        "content": "Quick Challenge"
      },
      {
        "type": "p",
        "content": "What is the output of this code (Question #3)?"
      },
      {
        "type": "p",
        "content": "var mrRobot = ['Elliot', 'Angela', 'Tyrell', 'Darlene'];"
      },
      {
        "type": "p",
        "content": "let character = mrRobot[2];"
      },
      {
        "type": "p",
        "content": "console.log(character); // What is the output?"
      },
      {
        "type": "blockquote",
        "content": "Note:You can solve the challenge through this Poll"
      },
      {
        "type": "p",
        "content": "Note:"
      },
      {
        "type": "p",
        "content": "You can solve the challenge through this Poll"
      },
      {
        "type": "h2",
        "content": "Loops"
      },
      {
        "type": "p",
        "content": "Loops can be complicated, there are for loops, while loops, and do…while loops. Due to the complex nature of looping, I will be explaining the basic logic behind them and then give multiple examples of how they look and work. They are important in every programming language and every aspect of programming in general."
      },
      {
        "type": "p",
        "content": "Let’s begin with for loops!"
      },
      {
        "type": "p",
        "content": "For Loop"
      },
      {
        "type": "p",
        "content": "We will be creating a few mini-projects that will loop through a set of numbers."
      },
      {
        "type": "p",
        "content": "Here is how a for loop appears in a code editor:"
      },
      {
        "type": "p",
        "content": "Let’s break this code down line by line:"
      },
      {
        "type": "p",
        "content": "for (a = 1; a <= 10; a++) {"
      },
      {
        "type": "p",
        "content": "console.log(`Number: ${a}`); // Outputs 1-10 in our console"
      },
      {
        "type": "p",
        "content": "}"
      },
      {
        "type": "p",
        "content": "What does this code do? This code takes a, our variable, and loops through our specified range (1–10) and prints this to the console. By running this loop, we save our counter, or our range of numbers, to the variable a."
      },
      {
        "type": "p",
        "content": "You’ll notice that we have three statements (or components). Here is a quick list of what each one does:"
      },
      {
        "type": "p",
        "content": "* IMPORTANT: Each statement must be separated by a semi-colon. We can have more than one value within our first statement, but they must be separated by commas: for (a = 1, b = 2; component-2; component-3) {}"
      },
      {
        "type": "p",
        "content": "While Loop"
      },
      {
        "type": "p",
        "content": "The while loop is similar to the for loop, with a few minor differences:"
      },
      {
        "type": "p",
        "content": "let x = 0;"
      },
      {
        "type": "p",
        "content": "while (x <= 3) {"
      },
      {
        "type": "p",
        "content": "console.log(x++); // Prints 0-3"
      },
      {
        "type": "p",
        "content": "}"
      },
      {
        "type": "p",
        "content": "This code will loop through x as long as it is less than or equal to three. This loop will continuing running until the desired outcome is met. Loops can be dangerous if the syntax is incorrectly written, then you can easily start an infinite loop, which isn’t good for anyone in most cases. To avoid this, make sure that the loop eventually becomes false."
      },
      {
        "type": "p",
        "content": "Do…While Loop"
      },
      {
        "type": "p",
        "content": "The basics of the do…while loop is the code will execute the loop before checking if the condition is true."
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "p",
        "content": "let c = 10;"
      },
      {
        "type": "p",
        "content": "do {"
      },
      {
        "type": "p",
        "content": "console.log(c++); // Outputs 10-50"
      },
      {
        "type": "p",
        "content": "} while (c <= 50);"
      },
      {
        "type": "p",
        "content": "This code will ALWAYS execute at least once. It does this because loops normally require the conditions to be true, but a do…while loop doesn’t require this as it executes before checking if the condition is truthy."
      },
      {
        "type": "p",
        "content": "Loops are complicated but fairly simple once you understand the basics. There are still some things we haven’t covered yet, but for the most part, loops have similar logic across programming languages. The thing about loops is that they have numerous variations that can do the same thing, but that’s pretty much all of programming."
      },
      {
        "type": "p",
        "content": "Document Object Model (DOM)"
      },
      {
        "type": "p",
        "content": "DOM"
      },
      {
        "type": "p",
        "content": "Here is what we will be covering in the DOM section (keep in mind that these are just a few lines of code, DOM manipulation is a vast subject):"
      },
      {
        "type": "p",
        "content": "document.getElementByID('Name_of_ID'); // Grabs the element with the ID name from the connected HTML file"
      },
      {
        "type": "p",
        "content": "document.getElementByClassName('Name_of_Class'); // Grabs the element with the class name from the connected HTML file"
      },
      {
        "type": "p",
        "content": "document.getElementByTagName('Name_of_Tag'); // Grabs a specific tag name from the connected HTML file"
      },
      {
        "type": "p",
        "content": "There are also methods we can use to access different things within our HTML files such as addEventListener, removeEventListener, and many more. Most of what the DOM does is change, replace, edit, or in some form, manipulate the HTML file or webpage that you’re working on. For us to successfully manipulate the DOM, we use events. These events are added to HTML tags to work with our JavaScript file. Some of the more important events that are used a lot, you can find here:"
      },
      {
        "type": "p",
        "content": "Code example:"
      },
      {
        "type": "p",
        "content": "Now when a user clicks on the Click Me button, an alert pops up that says POP!!!"
      },
      {
        "type": "p",
        "content": "The Document Object Model (DOM) has a ton of resources, and combining that with CSS will help your webpage POP. Eventually, if you take on web development or front-end programming, then you’ll not only gain knowledge around the DOM, but you’ll be able to manipulate a virtual DOM using React, cut your code in half using jQuery, and even combine your skills with PHP or Nodejs files for server manipulation. Good luck with your continued journey to learn JavaScript, and remember it can do so much more than just create webpages and add interactiveness."
      },
      {
        "type": "h2",
        "content": "XSS"
      },
      {
        "type": "p",
        "content": "In this section, we’ll be covering a few things that JavaScript can be used for in the information security industry."
      },
      {
        "type": "p",
        "content": "Here is what we’ll be covering:"
      },
      {
        "type": "p",
        "content": "XSS"
      },
      {
        "type": "p",
        "content": "Cross-Site Scripting is a security vulnerability that’s typically found in web applications which can be used to execute a malicious script on the target’s machine. We will only be covering some of the basics, so I recommend taking some time to visit the XSS room provided by TryHackMe to get a more in-depth understanding of how to exploit a web application."
      },
      {
        "type": "p",
        "content": "There are multiple types of attack when talking about XSS, here are some of my favorites:"
      },
      {
        "type": "p",
        "content": "A keylogger is used by setting up an event listener on the target’s keyboard, which will track their keystrokes and save them on the attacker’s server."
      },
      {
        "type": "p",
        "content": "When an attacker steals a target’s cookies, they can use that information to log in as the user without needing advanced authentication or even just find information stored in the cookies that could lead to devastating effects on the target’s online saved accounts. This is why so many websites use SSL or some other form of protection against these attacks."
      },
      {
        "type": "p",
        "content": "Phishing is an interesting type of exploitation, an attacker can clone the website you’re logging into and steal your credentials without you ever knowing. Another form of phishing is an attacker can insert code directly onto the webpage to change forms or input fields to steal the target’s information."
      },
      {
        "type": "p",
        "content": "The three most common types that I’ve seen of XSS are DOM-Based XSS (type-0 XSS), Reflected XSS (Non-Persistent XSS), and Stored XSS (Persistent XSS):"
      },
      {
        "type": "p",
        "content": "As a final note, learning JavaScript will help you manipulate the DOM to gain the target’s information, creating a keylogger script will log the keystrokes so that you can access the user’s information with those keys pressed, and you can use web development knowledge to completely mirror a web application and trick the user into inputting their information. JavaScript is just a language, but when combined with certain techniques and tools, you can do some unbelievably devastating things to a target machine."
      },
      {
        "type": "p",
        "content": "JavaScript is really important in the world of Cybersecurity, especially when it comes to web application exploitation, cross-site scripting, JavaScript injection, and many more methods."
      },
      {
        "type": "p",
        "content": "Extra Resources:"
      },
      {
        "type": "p",
        "content": "Here are a few interesting, more in-depth, resources used for JavaScript in Cybersecurity:"
      },
      {
        "type": "h2",
        "content": "Final Notes"
      },
      {
        "type": "p",
        "content": "JavaScript is a versatile and impressive language. I did my best to put all of the important aspects in this room, but there are still hours of content I didn’t cover. JavaScript has unlimited resources across the web, and if you’re serious about web development, programming, or anything in between, I recommend looking into the logic behind the code. Learning how a programming language works will help you 100x more than just memorizing the syntax. You may not always have to explain the logic behind an algorithm, but being able to write the code and explain it can set you apart from the average enthusiast or web developer."
      },
      {
        "type": "p",
        "content": "Challenge Time!"
      },
      {
        "type": "p",
        "content": "Get ready for a JavaScript code challenge!"
      },
      {
        "type": "p",
        "content": "Sort the array [1,10,5,15,2,7,28,900,45,18,27]"
      },
      {
        "type": "p",
        "content": "For our challenge, we will be sorting an array of numbers using a JavaScript method."
      },
      {
        "type": "blockquote",
        "content": "Note:You can solve the challenge through this Poll"
      },
      {
        "type": "p",
        "content": "Note:"
      },
      {
        "type": "p",
        "content": "You can solve the challenge through this Poll"
      },
      {
        "type": "p",
        "content": "Follow Me : Mohamed Ali"
      },
      {
        "type": "p",
        "content": "For Support : Mohamed Ali"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:28.661040"
  },
  {
    "url": "https://htmlcssmonk.medium.com/15-tips-to-become-a-better-javascript-programmer-820f713e62b7",
    "title": "15 Tips To Become A Better JavaScript Programmer",
    "author": "Press",
    "published_date": null,
    "reading_time": "5 min read",
    "tags": [
      "JavaScript",
      "Javascript Tips",
      "Learn Javascript",
      "Web Development",
      "Web Developer"
    ],
    "content": [
      {
        "type": "h1",
        "content": "15 Tips To Become A Better JavaScript Programmer"
      },
      {
        "type": "p",
        "content": "HtmlCssMonk"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "By — HtmlCssMonk"
      },
      {
        "type": "p",
        "content": "JavaScript has quickly become an important language used in many aspects of website development. Whether you are involved in creating websites, or simply improving user experience on existing ones, JavaScript is the boon (and bane, sometimes) of your existence. It is a very sought-after skill in the technical and web development sector, and thousands of graduates or about-to-graduate students can be seen working hard on improving their JavaScript skills."
      },
      {
        "type": "p",
        "content": "Although it may look very simple and straightforward to new programmers, it has several features and “gotchas” that may leave you scratching your head, wondering why your code doesn’t work."
      },
      {
        "type": "p",
        "content": "Don’t worry! We are here to help you improve your JavaScript skills from scratch. This Article tells you how you can be one step ahead than your fellow web developers and polish your JavaScript better."
      },
      {
        "type": "p",
        "content": "Tips to become Better in JavaScript"
      },
      {
        "type": "h1",
        "content": "1. Dive deep into the Basics"
      },
      {
        "type": "p",
        "content": "Many times it so happens that you are applying the logic with coding but forget that there is an already built-in function for that like slicing an array. Sometimes, you get an error while running the JavaScript code and due to it, many other functionalities are also not working. Just a small colon or inverted commas can cause this."
      },
      {
        "type": "p",
        "content": "These things happen due to unclear basics."
      },
      {
        "type": "p",
        "content": "A simple loop like for, which or do while is used many times in a single program. Loops are very basic things inside programming. If you are not clear with the looping and other basics, it is really very hard to code and even get a chance to get hired for a company."
      },
      {
        "type": "p",
        "content": "It is very important to brush up your basics as they give you a strong base on top of which you can build the complex logic of a solution and strong reputation."
      },
      {
        "type": "p",
        "content": "So, Learn and practice the basics !"
      },
      {
        "type": "p",
        "content": "Learn JavaScript Basics here."
      },
      {
        "type": "h1",
        "content": "2. Use Object-Oriented Approach"
      },
      {
        "type": "p",
        "content": "The object-oriented approach is the most famous approach used today in programming. An object becomes a basic entity then. This object is then taken as a base and used to apply properties and functions to the page."
      },
      {
        "type": "p",
        "content": "For example, I create an object car. This object can be wrapped with many functions such as color, specifications, price, etc and everything that we do is on this object. We can select a car. Colour (“red”) to change the car color to red. Similarly, we can change the price by car.Price(“50”). An object is a base for everything that you do in the programming language."
      },
      {
        "type": "p",
        "content": "So, try to convert your exhaustive code to the object-oriented code in the beginning and practice writing your code always in an object-oriented style. When you will read the code of others, you will be looking at object-oriented approaches all the time. So it is better you have your hands on it if you wish to become a JavaScript master."
      },
      {
        "type": "h1",
        "content": "3. Understand DOM"
      },
      {
        "type": "p",
        "content": "DOM or Document Object Model is created of a page when it is loaded into the browser. This has various levels that help to access the various elements easily. Understanding how the DOM works is very important to become a JavaScript master."
      },
      {
        "type": "p",
        "content": "JavaScript has the power to change any element inside HTML. It can change your background colour, your font anything. When JavaScript has so much power and is used so intensely inside HTML, knowing what will affect what is a must. As a programmer, you should know how changing child property and parent property simultaneously will affect the overall structure of the page. DOM is one of the basic and most important things for a JavaScript developer and he should be an expert in this."
      },
      {
        "type": "h1",
        "content": "4. Use Functions To Define Different Modules"
      },
      {
        "type": "p",
        "content": "A functional approach is a great approach in programming because it divides your program in the modules that work together but is still apart."
      },
      {
        "type": "p",
        "content": "Let me take an example to clear it out. There is a function to calculate Root Mean Square of the numbers. For this, you need to square the numbers, take their mean and their take square root of the mean. There are three steps involved in it. Therefore, we can make use of three functions. But see, all these functions are interlinked. The output of one goes to another and we get the final answer then."
      },
      {
        "type": "p",
        "content": "Now, let’s say instead of three functions, you are using only one function to calculate RMS using various variables. As you see, the final answer is wrong. It will become really hard for you now, to check where what went wrong in such a big function. Instead, having three small functions will help you analyze quickly."
      },
      {
        "type": "p",
        "content": "Hence, use functions to define various modules of the code, even if the functions are small. This tip would work like magic to help you become a JavaScript master."
      },
      {
        "type": "h1",
        "content": "5. Error Handling"
      },
      {
        "type": "p",
        "content": "If you are into coding, your code is prone to errors. Normally, if you are working on a big project, errors are a common thing. And they should be. They open other possibilities that you might not have thought about while writing the code. But these errors are needed to be handled correctly or else they disturb the flow of the program."
      },
      {
        "type": "p",
        "content": "Now, console.log is a conventional method to log errors. But they are extensive and time-consuming. To handle the errors more efficiently, you can use the Error Objects. An error object looks like,"
      },
      {
        "type": "pre",
        "content": "const err = new Error(‘Please improve the time complexity of the code’)console.log(err.message) // please improve your code"
      },
      {
        "type": "p",
        "content": "This gives you the power to display an error message too. You can also use try, catch and finally to apply validations on your code. If an error is found in the code in the try block, you can jump to catch block to either execute an error code or display some message. Finally, block executes the code in all the cases, whether there is an error or not. A sample code is given below:"
      },
      {
        "type": "pre",
        "content": "try{ //code }catch (Exception e){ //code } finally{ //code}"
      },
      {
        "type": "h1",
        "content": "6. Understand The Code Of Others"
      },
      {
        "type": "p",
        "content": "Reading the code of other developers is a great way of expanding your JavaScript skills. It would be better to see the code of any random problem but it would be best to see the code of a problem you have worked upon. Work on the code whose solution fascinates you like a website. If you like a website and wonder how the developer achieved this, see the code. A problem has different solutions and it is better to know all to learn how to reduce the complexities of the JavaScript code."
      },
      {
        "type": "p",
        "content": "No matter how good you start to code in JavaScript, there will always be someone better than you. No matter how great your logic is of a problem, there will always be a better logic for the same problem. And accepting this fact shouldn’t be a problem if you are on the path of becoming a JavaScript master."
      },
      {
        "type": "p",
        "content": "Click here to read Full Article here."
      },
      {
        "type": "p",
        "content": "Thanks !"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:30.799159"
  },
  {
    "url": "https://theiotacademy.medium.com/what-is-java-script-easy-javascript-tutorial-for-all-learners-aa3d4cc95a8d",
    "title": "What is Java Script? — Easy Javascript Tutorial for All Learners",
    "author": "Press",
    "published_date": null,
    "reading_time": "4 min read",
    "tags": [],
    "content": [
      {
        "type": "h1",
        "content": "What is Java Script? — Easy Javascript Tutorial for All Learners"
      },
      {
        "type": "p",
        "content": "The IoT Academy"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "Introduction"
      },
      {
        "type": "p",
        "content": "In the vast world of web development, JavaScript stands as one of the most pivotal programming languages. It is the driving force behind interactivity, dynamic content, and enhanced user experiences on the web. If you’re a beginner looking to learn JavaScript, you’ve come to the right place. This JavaScript tutorial will provide you with a comprehensive introduction to the language, its fundamental concepts, and the advantages it brings to the table."
      },
      {
        "type": "h1",
        "content": "Understanding JavaScript: The Building Blocks of the Web"
      },
      {
        "type": "p",
        "content": "JavaScript is a high-level, dynamic, and interpreted programming language primarily used for adding interactivity to websites. Unlike HTML (Hypertext Markup Language) and CSS (Cascading Style Sheets), which focus on structure and presentation respectively, JavaScript deals with behavior. It enables developers to create web pages that respond to user actions without requiring a page reload."
      },
      {
        "type": "h1",
        "content": "The Role of JavaScript on the Web"
      },
      {
        "type": "p",
        "content": "Imagine a scenario where you’re filling out a form on a website. As soon as you enter an incorrect email format, JavaScript can instantly notify you with an error message without having to submit the form first. This real-time validation is just one example of how JavaScript enhances user experience by providing instant feedback."
      },
      {
        "type": "p",
        "content": "JavaScript also plays a vital role in creating interactive features such as image sliders, pop-up modals, and interactive maps. These elements engage users, making websites more appealing and functional."
      },
      {
        "type": "h1",
        "content": "Learning JavaScript: The Basics Made Easy"
      },
      {
        "type": "h1",
        "content": "JavaScript Objects: The Core Data Structure"
      },
      {
        "type": "p",
        "content": "In JavaScript, everything is an object. An object is a self-contained unit that holds both data and the methods (functions) required to manipulate that data. Objects are the foundation of JavaScript, and understanding them is crucial for effective coding."
      },
      {
        "type": "p",
        "content": "Let’s take a simple example: a person object. This object might have properties like name, age, and gender, along with methods like speak() and walk(). By using objects, we can organize and structure our code more logically and efficiently."
      },
      {
        "type": "h1",
        "content": "Variables and Data Types"
      },
      {
        "type": "p",
        "content": "Before we delve deeper into objects, let’s cover some basics. In JavaScript, we use variables to store and manipulate data. Variables have various data types, such as numbers, strings (text), booleans (true/false), arrays (lists of values), and more."
      },
      {
        "type": "p",
        "content": "For instance, to store a person’s name, we can use a variable like this:"
      },
      {
        "type": "p",
        "content": "javascriptCopy code"
      },
      {
        "type": "p",
        "content": "let personName = “Alice”;"
      },
      {
        "type": "p",
        "content": "Here, let is a keyword used to declare a variable. The equal sign = assigns the value “Alice” to the variable personName."
      },
      {
        "type": "h1",
        "content": "Functions: Reusable Code Blocks"
      },
      {
        "type": "p",
        "content": "Functions are blocks of code that perform a specific task. They encapsulate a series of instructions into a single unit, allowing us to reuse code without duplicating it. Functions take inputs (called parameters) and can return an output."
      },
      {
        "type": "p",
        "content": "Here’s a simple function that adds two numbers:"
      },
      {
        "type": "p",
        "content": "javascriptCopy code"
      },
      {
        "type": "p",
        "content": "function addNumbers(a, b) {"
      },
      {
        "type": "p",
        "content": "return a + b;"
      },
      {
        "type": "p",
        "content": "}"
      },
      {
        "type": "p",
        "content": "To use this function:"
      },
      {
        "type": "p",
        "content": "javascriptCopy code"
      },
      {
        "type": "p",
        "content": "let result = addNumbers(5, 7);"
      },
      {
        "type": "p",
        "content": "console.log(result); // Outputs: 12"
      },
      {
        "type": "h1",
        "content": "Control Flow: Making Decisions in Code"
      },
      {
        "type": "p",
        "content": "Control flow involves making decisions in your code based on certain conditions. JavaScript provides structures like if statements and loops to control the flow of your program."
      },
      {
        "type": "p",
        "content": "An if statement allows you to execute a block of code if a certain condition is true:"
      },
      {
        "type": "p",
        "content": "javascriptCopy code"
      },
      {
        "type": "p",
        "content": "let age = 18;"
      },
      {
        "type": "p",
        "content": "if (age >= 18) {"
      },
      {
        "type": "p",
        "content": "console.log(“You are an adult.”);"
      },
      {
        "type": "p",
        "content": "} else {"
      },
      {
        "type": "p",
        "content": "console.log(“You are a minor.”);"
      },
      {
        "type": "p",
        "content": "Loops are used to repeat a block of code multiple times:"
      },
      {
        "type": "p",
        "content": "javascriptCopy code"
      },
      {
        "type": "p",
        "content": "for (let i = 1; i <= 5; i++) {"
      },
      {
        "type": "p",
        "content": "console.log(`Iteration ${i}`);"
      },
      {
        "type": "h1",
        "content": "Advantages of JavaScript"
      },
      {
        "type": "p",
        "content": "The widespread adoption and usage in web development can be attributed to several key advantages of JavaScript:"
      },
      {
        "type": "p",
        "content": "2. Versatility: It can be used both on the front end (in web browsers) and the back end (with technologies like Node.js), making it a full-stack language."
      },
      {
        "type": "p",
        "content": "3. Wide Browser Support: Virtually all modern web browsers support JavaScript, ensuring that your code reaches a broad audience."
      },
      {
        "type": "p",
        "content": "4. Rich Ecosystem: JavaScript has a vast ecosystem of libraries and frameworks (like React, Angular, and Vue.js) that simplify and speed up development."
      },
      {
        "type": "p",
        "content": "5. Community and Resources: With a massive community, finding solutions to problems and learning resources is relatively easy."
      },
      {
        "type": "p",
        "content": "6. Asynchronous Programming: JavaScript’s asynchronous nature allows developers to write non-blocking code, which is crucial for handling tasks like fetching data from servers without freezing the user interface."
      },
      {
        "type": "h1",
        "content": "Conclusion"
      },
      {
        "type": "p",
        "content": "In this beginner-friendly JavaScript tutorial, we’ve covered the fundamental concepts that lay the groundwork for your journey into web development. From understanding objects and variables to creating functions and controlling program flow, you’re now equipped with the basics of JavaScript."
      },
      {
        "type": "p",
        "content": "As you continue your learning journey, remember that practice makes perfect. Start small, experiment, and build mini-projects to solidify your understanding. By gradually diving into more complex topics and exploring JavaScript’s extensive capabilities, you’ll soon find yourself creating dynamic and interactive web applications with ease."
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:33.141683"
  },
  {
    "url": "https://danztee.medium.com/a-beginners-guide-to-javascript-programming-1bb52d869722",
    "title": "A Beginner’s Guide to JavaScript Programming",
    "author": "Press",
    "published_date": null,
    "reading_time": "4 min read",
    "tags": [],
    "content": [
      {
        "type": "h1",
        "content": "A Beginner’s Guide to JavaScript Programming"
      },
      {
        "type": "p",
        "content": "Daniel Olowoniyi"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "7"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "Introduction: Unveiling the Power of JavaScript"
      },
      {
        "type": "p",
        "content": "In the vast realm of web development, there’s a scripting language that holds the key to crafting interactive and dynamic experiences on the web. Say hello to JavaScript! Whether you’re an aspiring developer or a curious mind, this guide will take you on a journey through the basics of JavaScript programming. By the end, you’ll have a solid foundation to create interactive web pages, enhance user experiences, and embark on your coding adventures."
      },
      {
        "type": "p",
        "content": "1. Setting Up Your Environment"
      },
      {
        "type": "p",
        "content": "Before we dive into the world of JavaScript, let’s ensure you have the right tools at your disposal. To get started, you’ll need a code editor and a browser. A popular choice among developers is Visual Studio Code, a versatile code editor that provides a seamless coding experience. Alternatively, you can experiment with code snippets on online platforms like CodePen without installing any software."
      },
      {
        "type": "p",
        "content": "2. Basic Syntax: Building Blocks of JavaScript"
      },
      {
        "type": "p",
        "content": "At its core, JavaScript is a programming language governed by a set of rules and conventions. Let’s explore some fundamental concepts:"
      },
      {
        "type": "p",
        "content": "Variables and Data Types: In JavaScript, variables are used to store data. They can hold various types of information, such as numbers, strings (text), and even complex structures like arrays and objects."
      },
      {
        "type": "p",
        "content": "Comments: Comments are non-executable lines that help you document your code. They provide insights into your thought process and make your code more understandable for you and others who might read it."
      },
      {
        "type": "p",
        "content": "Operators: JavaScript supports a wide range of operators for performing operations on values. From arithmetic operators (+, -, *, /) to comparison operators (==, ===, !=, !==), you’ll use these to manipulate data and make decisions in your code."
      },
      {
        "type": "p",
        "content": "3. Control Structures: Navigating Decision Making and Repetition"
      },
      {
        "type": "p",
        "content": "Now that we have a grasp of basic syntax, let’s explore how JavaScript enables us to make decisions and repeat actions with control structures:"
      },
      {
        "type": "p",
        "content": "Conditional Statements: Use if, else if, and else to create logical conditions that guide your program's behavior."
      },
      {
        "type": "p",
        "content": "Loops: With loops like for and while, you can perform a set of instructions repeatedly, making your code more efficient and dynamic."
      },
      {
        "type": "p",
        "content": "4. Functions: Organizing Code for Reusability"
      },
      {
        "type": "p",
        "content": "Functions are the building blocks of JavaScript applications. They allow you to group code into reusable blocks and enhance the maintainability of your projects."
      },
      {
        "type": "p",
        "content": "5. Arrays and Objects: Managing Data Collections"
      },
      {
        "type": "p",
        "content": "Arrays and objects empower you to manage collections of data in JavaScript:"
      },
      {
        "type": "p",
        "content": "Arrays: An ordered list of values, indexed from zero, that can store a mix of data types."
      },
      {
        "type": "p",
        "content": "Objects: Key-value pairs that represent entities and their properties."
      },
      {
        "type": "p",
        "content": "6. DOM Manipulation: Making Web Pages Interactive"
      },
      {
        "type": "p",
        "content": "JavaScript wouldn’t be complete without its ability to manipulate web page elements:"
      },
      {
        "type": "p",
        "content": "Selecting Elements: Use JavaScript to select and interact with HTML elements on your web page."
      },
      {
        "type": "p",
        "content": "Events and Event Handling: Attach event listeners to elements to respond to user interactions."
      },
      {
        "type": "p",
        "content": "7. Basic JavaScript Projects: Applying Your Knowledge"
      },
      {
        "type": "p",
        "content": "Now that you’ve acquired fundamental JavaScript skills, why not put them to the test? Consider creating a simple to-do list that lets users add and cross out tasks, or build a basic interactive quiz that prompts questions and records answers."
      },
      {
        "type": "p",
        "content": "8. Resources for Learning JavaScript: Your Journey Continues"
      },
      {
        "type": "p",
        "content": "As you embark on your JavaScript journey, remember that learning is an ongoing process. Here are some recommended resources to deepen your understanding:"
      },
      {
        "type": "p",
        "content": "Conclusion: Embrace the Power of JavaScript"
      },
      {
        "type": "p",
        "content": "Congratulations, you’ve reached the end of our beginner’s guide to JavaScript programming! You’ve taken your first steps into a versatile world of coding that empowers you to create dynamic and engaging web experiences. From basic syntax to manipulating the DOM, you now possess the foundational knowledge to explore further and tackle more advanced concepts. So, go forth with confidence, experiment, and let your creativity flow as you continue your journey as a JavaScript developer."
      },
      {
        "type": "p",
        "content": "Happy coding!"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:35.282514"
  },
  {
    "url": "https://etwinworkshop.medium.com/beginners-journey-into-javascript-enhance-your-web-development-skills-21278c7f8698",
    "title": "Beginner’s Journey into JavaScript: Enhance Your Web Development Skills",
    "author": "Press",
    "published_date": null,
    "reading_time": "3 min read",
    "tags": [
      "JavaScript",
      "Programming",
      "Web Development",
      "Learning To Code",
      "Coding"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Beginner’s Journey into JavaScript: Enhance Your Web Development Skills"
      },
      {
        "type": "p",
        "content": "etwinworkshop"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "As a beginner in web development with a solid foundation in HTML and CSS, you’re probably eager to take your skills to the next level."
      },
      {
        "type": "p",
        "content": "That’s where JavaScript comes in! In this post, we’ll introduce you to the basics of JavaScript, its role in web development, and provide a gentle learning curve to get you started."
      },
      {
        "type": "h2",
        "content": "What is JavaScript?"
      },
      {
        "type": "p",
        "content": "JavaScript is a high-level, dynamic, and interpreted programming language that adds interactivity to your website."
      },
      {
        "type": "p",
        "content": "It’s used to create dynamic web pages, web applications, and mobile apps. JavaScript is executed on the client-side (in the user’s web browser) and is often used to manipulate web page content, respond to user interactions, and update the Document Object Model (DOM)."
      },
      {
        "type": "h2",
        "content": "Why do I need JavaScript?"
      },
      {
        "type": "p",
        "content": "With HTML, you can create the structure and content of your web page, and with CSS, you can style and layout your page."
      },
      {
        "type": "p",
        "content": "However, without JavaScript, your web page would be static and unresponsive to user interactions. JavaScript brings your web page to life by:"
      },
      {
        "type": "h2",
        "content": "Basic JavaScript Concepts"
      },
      {
        "type": "p",
        "content": "Let’s dive into some fundamental JavaScript concepts to get you started:"
      },
      {
        "type": "p",
        "content": "VariablesIn JavaScript, a variable is a container that holds a value. You can declare a variable using the let, const, or var keywords."
      },
      {
        "type": "p",
        "content": "For example:"
      },
      {
        "type": "pre",
        "content": "let name = 'etwin himself';"
      },
      {
        "type": "p",
        "content": "Data TypesJavaScript has several data types, including:"
      },
      {
        "type": "p",
        "content": "FunctionsA function is a block of code that performs a specific task. You can declare a function using the function keyword."
      },
      {
        "type": "p",
        "content": "For example:"
      },
      {
        "type": "pre",
        "content": "function greet(name) {  console.log(`Hello, ${name}!`);}"
      },
      {
        "type": "p",
        "content": "Conditional StatementsConditional statements (e.g., if/else statements) are used to control the flow of your code based on certain conditions."
      },
      {
        "type": "p",
        "content": "For example:"
      },
      {
        "type": "pre",
        "content": "let age = 25; // declaring variable of type intif (age >= 18) {  console.log('You are eligible to vote!');} else {  console.log('You are not eligible to vote!');}"
      },
      {
        "type": "p",
        "content": "EventsEvents are actions that occur on your web page, such as clicking a button or hovering over an element. You can use JavaScript to respond to these events."
      },
      {
        "type": "p",
        "content": "For example:"
      },
      {
        "type": "pre",
        "content": "const button = document.getElementById('myButton');button.addEventListener('click', function() {  console.log('Button clicked!');});"
      },
      {
        "type": "h2",
        "content": "Getting Started with JavaScript"
      },
      {
        "type": "p",
        "content": "Now that you’ve learned some basic JavaScript concepts, it’s time to get your hands dirty! Here are some steps to get you started:"
      },
      {
        "type": "pre",
        "content": "<!DOCTYPE html><html>  <head>    <title>etwinworkshop - Javascript</title>  </head>  <body>    <!-- Your HTML content goes here!  -->     <h1>etwinworkshop</h1>     <p>Welcome to etwinworkshop</p>    <script>      // We write our java script code here      // Declare/define greet function      function greet(name) {        console.log(`Hello, ${name}!`);      }            // Calling greet function      greet('etwin himself'); // You can use your name here    </script>  </body></html>"
      },
      {
        "type": "h2",
        "content": "Conclusion"
      },
      {
        "type": "p",
        "content": "Welcome to the world of JavaScript! You’ve taken the first step in learning this powerful programming language."
      },
      {
        "type": "p",
        "content": "Remember, practice is key to mastering JavaScript. Start building small projects, experimenting with different concepts, and exploring online resources to improve your skills."
      },
      {
        "type": "h2",
        "content": "Additional Resources"
      },
      {
        "type": "p",
        "content": "Happy coding!"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:37.645178"
  },
  {
    "url": "https://medium.com/swlh/introduction-to-javascript-basics-cf901c05ca47",
    "title": "Introduction to JavaScript: Basics",
    "author": "",
    "published_date": null,
    "reading_time": "11 min read",
    "tags": [
      "JavaScript"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Introduction to JavaScript: Basics"
      },
      {
        "type": "p",
        "content": "Mahendra Choudhary"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "The Startup"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "3"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "JavaScript is the programming language that lets the Internet work. The Internet would be nothing without JavaScript and in this lesson, you will find out why."
      },
      {
        "type": "p",
        "content": "At the end of this article, you should be able to:"
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to understand what Javascript is and explain its use in web development."
      },
      {
        "type": "p",
        "content": "Learn to understand what Javascript is and explain its use in web development."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "JavaScript is the third of the major building blocks of a web page. Without it, we wouldn’t have the dynamic content and usability we expect from modern websites. We will now learn what it is (and isn’t) and how it is used, not only on the web but in all of its applications."
      },
      {
        "type": "h1",
        "content": "What is JavaScript and why do we use it?"
      },
      {
        "type": "p",
        "content": "JavaScript is a programming language that was first created in 1994 as a way to add functionality and user interaction to a website. If we think back to our analogy of a web page as a house (Introduction to Web Development Fundamentals), we will remember that we said that JavaScript is the electricity, plumbing, and gas. It is what makes the web page “run”. JavaScript was originally designed to be used purely on the front end as a way for web developers to add functionality to their web pages, and in its early days, it did just that. Recently, the introduction of the “V8 engine” by Google has improved the speed and functionality of JS. That led to the development and release of exciting new front end JavaScript frameworks and eventually Node.js, a way to run JavaScript on a server (back end). This new development has led to a resurgence of JavaScript. Now, JavaScript is one of the world’s most widely-used programming languages. We can find JavaScript used on the front end, back end, mobile, Internet of Things (Iot), game development, and really anywhere a traditional programming language would be used. Recently, the newest version of the JavaScript language was released, ES6*."
      },
      {
        "type": "p",
        "content": "*even newer versions have come out (ES7, ES8, etc) but this release is where a major paradigm shift happened. We will be referring to any concepts released after ES6, to simply ES6."
      },
      {
        "type": "h1",
        "content": "JavaScript vs Java (and other languages)"
      },
      {
        "type": "p",
        "content": "Keep in mind, JavaScript != Java. Although they share similar names (this was, unfortunately, considered a feature by JavaScript’s early pioneers) that is where the similarities end."
      },
      {
        "type": "p",
        "content": "The creators of JavaScript wanted to borrow concepts from other programming languages, such as Java and C. Those of you with backgrounds in other languages may see things that look very familiar, mainly the use of classes and Object-Oriented Programming (OOP) architecture. Keep in mind that JavaScript is not a true OOP language and many things you may be familiar with from another language won’t work with JavaScript."
      },
      {
        "type": "p",
        "content": "JavaScript is considered a ‘loosely’ typed language, in which types do exist, but they are not enforced. You do not have to declare a type when creating a variable or an array, for instance."
      },
      {
        "type": "h1",
        "content": "How to ‘run’ JavaScript"
      },
      {
        "type": "p",
        "content": "JavaScript, being the de-facto language of the Internet, is usually run from within an Internet browser. In fact, you can write all of the JavaScript you want and watch it run in real-time right in your browser by pressing F12 (for Windows), or Cmd+option+J (for Mac) (for Google Chrome). This will open up your console (we will learn more about the console later)."
      },
      {
        "type": "p",
        "content": "While this is one way to run your JavaScript, most JavaScript is run from a file with the extension of .js (e.g., fileName.js) and loaded into your browser via the script tag in your HTML."
      },
      {
        "type": "p",
        "content": "We had mentioned Node.js earlier, and while we are not going to go further than this small piece about it, JavaScript can be run on a server (back end) as well. It is loaded into a computer using a special command line, and the Node.js program will run the JavaScript."
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to explain and use JavaScript primitive data types and variables."
      },
      {
        "type": "p",
        "content": "Learn to explain and use JavaScript primitive data types and variables."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "In order to understand the JavaScript language, the first step is to understand and be able to use variables and primitive data types."
      },
      {
        "type": "h1",
        "content": "Variables"
      },
      {
        "type": "p",
        "content": "At the heart of JavaScript are variables. A variable is a way to store the value of something to use later. (A note for those with previous programming knowledge: JavaScript is a loosely-typed language, which means that a variable can be set (and reset) to any type. We do not need to declare its type when initiating the variable.)"
      },
      {
        "type": "p",
        "content": "The anatomy of a variable is first the keyword, a space, the name we are giving the variable, an equal sign, the value we are assigning the variable, and then a semicolon."
      },
      {
        "type": "p",
        "content": "There are three ways to declare a variable."
      },
      {
        "type": "h1",
        "content": "var"
      },
      {
        "type": "p",
        "content": "var is the ES5 way of declaring a variable. This is a generic variable keyword."
      },
      {
        "type": "h1",
        "content": "let"
      },
      {
        "type": "p",
        "content": "let is a new ES6 variable keyword. This will assign a variable much like var, but with a little bit different behavior. Most notably, it differs by creating “block level scope”."
      },
      {
        "type": "h1",
        "content": "const"
      },
      {
        "type": "p",
        "content": "const is also new in ES6. A const variable is a variable that cannot be changed. It’s short for “constant”."
      },
      {
        "type": "h1",
        "content": "Primitive Data Types (String, Number, Boolean)"
      },
      {
        "type": "p",
        "content": "The term ‘primitive data type’ refers to the fact that these are the most basic data types in the language. All other data types (which we will learn about in later lessons) use these types."
      },
      {
        "type": "h1",
        "content": "Strings"
      },
      {
        "type": "p",
        "content": "Strings are blocks of text. They will always be defined with quotation marks around them, either single or double. Any text with quotes around it is a string."
      },
      {
        "type": "h1",
        "content": "Numbers"
      },
      {
        "type": "p",
        "content": "Numbers are just that, numbers. Numbers do NOT have quotes around them. They can be negative as well. JavaScript does have a limitation on the size of a number (+/- 9007199254740991), but only very rarely will that limitation come up."
      },
      {
        "type": "h1",
        "content": "Booleans"
      },
      {
        "type": "p",
        "content": "Booleans come from low-level computer science. It is a concept that powers binary code and the very core of computers. You may have seen binary code in the past (e.g., 0001 0110…). That is Boolean logic. It essentially means you have two choices, on or off, 0 or 1, true or false. In JavaScript, we use Booleans to mean true or false. This may seem simple at first but can get complicated later on."
      },
      {
        "type": "h1",
        "content": "Math Operators"
      },
      {
        "type": "p",
        "content": "One of the first jobs a computer had was to compute numbers. In JavaScript, we have built-in math operators that work exactly as they do on your calculator."
      },
      {
        "type": "h1",
        "content": "+ — * / ="
      },
      {
        "type": "h1",
        "content": "%"
      },
      {
        "type": "p",
        "content": "Something you may not have seen before is the Modulo (%). This math operator will divide the two numbers and return the remainder."
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to explain and use JavaScript functions as properties and methods on primitive data types."
      },
      {
        "type": "p",
        "content": "Learn to explain and use JavaScript functions as properties and methods on primitive data types."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "As we progress through our introduction to JavaScript, we will learn the types of things we can do with those primitive data types. In this objective, we will learn about functions."
      },
      {
        "type": "h1",
        "content": "Properties and Methods"
      },
      {
        "type": "p",
        "content": "Primitive data types (and other data types) have built-in functionality known as properties and methods. These extend the functionality of the primitive data types and allow us to gather information about them, or manipulate them in some way. Both properties and methods will be accessed using the dot notation where we give the name of the variable, a dot, then the name of the property or method."
      },
      {
        "type": "h1",
        "content": "Properties"
      },
      {
        "type": "p",
        "content": "Properties allow us to access data from a data type. There are many different properties on every data type that will give you a bit of information about that specific object."
      },
      {
        "type": "p",
        "content": "One we will look at here is the length property of a string. It will give us the length of the string, as in how many characters are in the string (spaces count)."
      },
      {
        "type": "h1",
        "content": "Methods"
      },
      {
        "type": "p",
        "content": "Methods allow us to manipulate a data type. Methods are different from properties in that they need to have parentheses on the end."
      },
      {
        "type": "p",
        "content": "The method we will look at here is the toString method. It will convert a Number or Boolean to a string."
      },
      {
        "type": "h1",
        "content": "Functions"
      },
      {
        "type": "p",
        "content": "Functions allow us to perform many computations and return a final product. When we run a computer program, we are running a series of functions, and reading or manipulating what they return. You may not have realized this, but we have already worked with a type of function: a method."
      },
      {
        "type": "h1",
        "content": "Anatomy of a Function"
      },
      {
        "type": "p",
        "content": "A function will start with the function keyword. This tells whatever is running your program that what follows is a function and to treat it as such. After that comes the name of the function. We like to give functions names that describe what they do. Then comes open and close parentheses. And finally, open and close brackets. In between these brackets is where all of our function code will go."
      },
      {
        "type": "p",
        "content": "In this example, we declare a function logsHello and we set it up to console.log ‘hello’. We can then see that in order to run this function, we need to write its name followed by parentheses. This is the syntax to run a function. A function always needs parentheses to run."
      },
      {
        "type": "h1",
        "content": "Arguments"
      },
      {
        "type": "p",
        "content": "Now that we can run a basic function, we are going to start passing it arguments."
      },
      {
        "type": "p",
        "content": "If we add a variable to the parentheses when we declare the function, we can use this variable within our function. We initiate the value of this variable by passing it into the function when we call it. So in this case, name = ‘Dan’. We can pass other variables into this as well:"
      },
      {
        "type": "p",
        "content": "We can add multiple arguments by placing a comma in between them:"
      },
      {
        "type": "h1",
        "content": "Return statement and Scope"
      },
      {
        "type": "p",
        "content": "In the last example, we introduced the return statement. We will not console.log everything that comes out of a function. Most likely we will want to return something. In this case, it is the sum of the two numbers. Think of the return statement as the only way for data to escape a function. Nothing other than what is returned can be accessed outside of the function. Also note that when a function hits a return statement, the function immediately stops what it is doing and returns."
      },
      {
        "type": "p",
        "content": "If we tried to console.log something that we declared inside of the function it would return undefined because we do not have access to it outside of the function. This is called scope. The only way to access something inside of the function is to return it."
      },
      {
        "type": "p",
        "content": "We can also set variables to equal what a function returns."
      },
      {
        "type": "p",
        "content": "We can see that ‘difference’ is set inside of the function. The variable inside the function only belongs inside the function."
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to explain global object in JavaScript and be able to use the Math object."
      },
      {
        "type": "p",
        "content": "Learn to explain global object in JavaScript and be able to use the Math object."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "Global objects are pre-written code available to us in JavaScript. They extend the functionality of the language. It is important to learn what these objects are, and how to use them."
      },
      {
        "type": "h1",
        "content": "Global objects and methods"
      },
      {
        "type": "p",
        "content": "JavaScript has a number of built-in objects for us to use. These global objects extend the functionality of the language for us for free. We have already seen, and have been using, the console object and its method log. Another one of these objects is Math. Math has a number of methods on it just like console has log. To add to this, some of our data types also have built-in methods."
      },
      {
        "type": "h1",
        "content": "Math.pow"
      },
      {
        "type": "p",
        "content": "We can use the pow method on Math to return a number risen to an exponent. It will take two numbers."
      },
      {
        "type": "h1",
        "content": "Math.round, Math.floor, Math.ceil"
      },
      {
        "type": "p",
        "content": "Math also has methods that will round numbers for us. .round will round a number to the nearest whole number. .floor will always round a number down to the nearest whole number. .ceil will always round up to the nearest whole number."
      },
      {
        "type": "h1",
        "content": "Learn"
      },
      {
        "type": "blockquote",
        "content": "Learn to explain basic control flow and if/else statements."
      },
      {
        "type": "p",
        "content": "Learn to explain basic control flow and if/else statements."
      },
      {
        "type": "h1",
        "content": "Overview"
      },
      {
        "type": "p",
        "content": "Control flow allows us to write code based on conditional statements. Understanding this flow is an important part of learning to program."
      },
      {
        "type": "h1",
        "content": "Control Flow"
      },
      {
        "type": "p",
        "content": "Often times, as a computer is reading and executing our code, we want code to run only if something is true or not. This is known as control flow. Not all code on the screen is executed in order, or at all. We will learn to use some basic control flow today, and will dive deeper into it in our next lesson."
      },
      {
        "type": "p",
        "content": "In this example we are going to use control flow and comparison operators. Control flow is a way for our function to check to see if something is true, and either running the code supplied if it is, or moving on if it is not. For this we will use the if keyword:"
      },
      {
        "type": "p",
        "content": "Here we are taking a number (age) and checking to see if the statement is true. The statement 16 > 15 is true, so we will return true, and the function will stop. If it is not, it will skip that code and the function will return false."
      },
      {
        "type": "p",
        "content": "The “Greater Than” symbol ( > ) that you see in the last example is called a Comparison Operator. Comparison Operators evaluate two items and return either true or false. These operators are: < , <=, >, >=, ===, !== . We will learn more about these operators in the next lesson."
      },
      {
        "type": "h1",
        "content": "Tutorials"
      },
      {
        "type": "h1",
        "content": "Next Steps"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:39.766247"
  },
  {
    "url": "https://medium.com/%40staneyjoseph.in/learn-javascript-from-beginner-to-advanced-level-in-this-artical-c045a26bcd5b",
    "title": "Learn JavaScript from beginner to advanced level in this artical",
    "author": "",
    "published_date": null,
    "reading_time": "29 min read",
    "tags": [
      "Learn Javascript",
      "Programming Languages",
      "Computer Language",
      "Technology",
      "Technews"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Learn JavaScript from beginner to advanced level in this artical"
      },
      {
        "type": "p",
        "content": "Staney Joseph 🎖️"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "Content of this artical"
      },
      {
        "type": "h1",
        "content": "Learn the Fundamentals of JavaScript"
      },
      {
        "type": "h1",
        "content": "Learn Modern JavaScript"
      },
      {
        "type": "h1",
        "content": "Coding Style and Convention"
      },
      {
        "type": "h1",
        "content": "Review Your Knowledge"
      },
      {
        "type": "h1",
        "content": "Practice"
      },
      {
        "type": "h1",
        "content": "Become an Expert"
      },
      {
        "type": "h1",
        "content": "Introduction JavaScript"
      },
      {
        "type": "p",
        "content": "JavaScript is a lightweight, cross-platform, single-threaded, and interpreted compiled programming language. It is well-known for the development of web pages, and many non-browser environments also use it. JavaScript is a weakly typed language (dynamically typed)."
      },
      {
        "type": "p",
        "content": "JavaScript can be used for both Client-side and Server-side developments. On the client side, it supplies objects to control a browser and its Document Object Model (DOM). On the server side, it supplies objects relevant to running JavaScript on a server."
      },
      {
        "type": "p",
        "content": "JavaScript is both an imperative and declarative type of language. In imperative language, we are mostly concerned about how it is to be done. In declarative programming, we are concerned about how it is to be done, basically here logical computation requires."
      },
      {
        "type": "p",
        "content": "JavaScript can be added to HTML file in two ways:"
      },
      {
        "type": "h1",
        "content": "The Fundamentals of JavaScript"
      },
      {
        "type": "p",
        "content": "JavaScript is a scripting language that runs in the browser and allows you to create dynamic and interactive web pages. In this article, you will learn some of the basic concepts and features of JavaScript, such as data types, variables, control flow, functions, objects, arrays, and DOM manipulation."
      },
      {
        "type": "h1",
        "content": "Data Types"
      },
      {
        "type": "p",
        "content": "Data types are the different kinds of values that you can store and manipulate in JavaScript. There are six primitive data types in JavaScript: numbers, strings, boolean, null, undefined, and symbol. There is also one complex data type: object."
      },
      {
        "type": "pre",
        "content": "let x = 10; // declare a variable x and assign it a number valuelet y = 3; // declare a variable y and assign it a number valuelet z = x + y; // declare a variable z and assign it the sum of x and yconsole.log(z); // print the value of z to the console"
      },
      {
        "type": "pre",
        "content": "let name = 'John'; // declare a variable name and assign it a string valuelet greeting = \"Hello, \" + name; // declare a variable greeting and assign it a concatenated string valueconsole.log(greeting); // print the value of greeting to the consolelet age = 25; // declare a variable age and assign it a number valuelet message = `You are ${age} years old`; // declare a variable message and assign it a template literal valueconsole.log(message); // print the value of message to the console"
      },
      {
        "type": "pre",
        "content": "let a = true; // declare a variable a and assign it a boolean valuelet b = false; // declare a variable b and assign it a boolean valuelet c = a && b; // declare a variable c and assign it the logical AND of a and bconsole.log(c); // print the value of c to the consolelet d = a || b; // declare a variable d and assign it the logical OR of a and bconsole.log(d); // print the value of d to the consolelet e = !a; // declare a variable e and assign it the logical NOT of aconsole.log(e); // print the value of e to the console"
      },
      {
        "type": "pre",
        "content": "let f = null; // declare a variable f and assign it a null valueconsole.log(f); // print the value of f to the console"
      },
      {
        "type": "pre",
        "content": "let g; // declare a variable g without assigning any valueconsole.log(g); // print the value of g to the console"
      },
      {
        "type": "pre",
        "content": "let h = Symbol('foo'); // declare a variable h and assign it a symbol value with a description 'foo'let i = Symbol('foo'); // declare another variable i and assign it another symbol value with the same description 'foo'console.log(h === i); // print the result of comparing h and i to the console (false)"
      },
      {
        "type": "pre",
        "content": "let person = {name: 'John', age: 25}; // declare a variable person and assign it an object literal value with two properties: name and ageconsole.log(person.name); // print the value of person's name property to the console (John)person.age = 26; // modify the value of person's age property to 26console.log(person['age']); // print the value of person's age property to the console (26)let animal = new Object(); // declare a variable animal and assign it an object value using the Object constructoranimal.type = 'dog'; // add a property type to animal and assign it a value 'dog'animal.sound = 'woof'; // add another property sound to animal and assign it a value 'woof'console.log(animal); // print the value of animal to the console ({type: 'dog', sound: 'woof'})"
      },
      {
        "type": "h1",
        "content": "Variables"
      },
      {
        "type": "p",
        "content": "Variables are containers that can store data values. You can declare variables using three keywords: let, const, or var. The difference between them is the scope and reassignment of the variables."
      },
      {
        "type": "pre",
        "content": "let x = 10; // declare a let variable x and assign it a value 10console.log(x); // print the value of x to the console (10)if (true) {  let x = 20; // declare another let variable x within the if block and assign it a value 20  console.log(x); // print the value of x to the console (20)}console.log(x); // print the value of x to the console (10)"
      },
      {
        "type": "pre",
        "content": "const PI = 3.14; // declare a const variable PI and assign it a value 3.14console.log(PI); // print the value of PI to the console (3.14)PI = 3.15; // try to reassign the value of PI to 3.15 (error)"
      },
      {
        "type": "pre",
        "content": "var x = 10; // declare a var variable x and assign it a value 10console.log(x); // print the value of x to the console (10)if (true) {  var x = 20; // redeclare the same var variable x within the if block and assign it a different value 20  console.log(x); // print the value of x to the console (20)}console.log(x); // print the value of x to the console (20)"
      },
      {
        "type": "h1",
        "content": "Control Flow"
      },
      {
        "type": "p",
        "content": "Control flow is the order in which statements are executed in a program. You can use control flow statements to alter the flow of execution based on certain conditions or iterations. There are three main types of control flow statements in JavaScript: switch statements, for and while loops, and if-else statements."
      },
      {
        "type": "pre",
        "content": "let day = 'Monday'; // declare a variable day and assign it a value 'Monday'switch (day) { // use a switch statement to check the value of day  case 'Monday': // if day is 'Monday', execute this block of code    console.log('Today is Monday');     break; // break out of the switch statement  case 'Tuesday': // if day is 'Tuesday', execute this block of code    console.log('Today is Tuesday');    break; // break out of the switch statement  case 'Wednesday': // if day is 'Wednesday', execute this block of code    console.log('Today is Wednesday');    break; // break out of the switch statement  default: // if none of the cases match, execute this block of code    console.log('Unknown day');    break; // break out of the switch statement}"
      },
      {
        "type": "pre",
        "content": "for (let i = 1; i <= 10; i++) { // use a for loop to iterate from 1 to 10 with an increment of 1  console.log(i); // print the value of i to the console}"
      },
      {
        "type": "pre",
        "content": "let j = 1; // declare a variable j and assign it a value 1while (j <= 10) { // use a while loop to iterate until j is greater than 10  console.log(j); // print the value of j to the console  j++; // increment the value of j by 1}"
      },
      {
        "type": "p",
        "content": "= 18) { // use an if statement to check if age is greater than or equal to 18 console.log(‘You are an adult’); // print this message to the console if the condition is true } else { // use an else statement to execute another block of code if the condition is false console.log(‘You are a minor’); // print this message to the console if the condition is false } “>"
      },
      {
        "type": "pre",
        "content": "let age = 18; // declare a variable age and assign it a value 18if (age >= 18) { // use an if statement to check if age is greater than or equal to 18  console.log('You are an adult'); // print this message to the console if the condition is true} else { // use an else statement to execute another block of code if the condition is false  console.log('You are a minor'); // print this message to the console if the condition is false}"
      },
      {
        "type": "h1",
        "content": "Functions"
      },
      {
        "type": "p",
        "content": "Functions are reusable blocks of code that perform a specific task. You can declare functions using function declarations or function expressions. You can invoke or call functions using parentheses (( )) and pass arguments or parameters to them. You can return values from functions using the return keyword. For example:"
      },
      {
        "type": "pre",
        "content": "// function declarationfunction add(a, b) { // declare a function named add with two parameters: a and b  return a + b; // return the sum of a and b}"
      },
      {
        "type": "pre",
        "content": "// function expressionlet subtract = function(a, b) { // declare a variable named subtract and assign it a function expression with two parameters: a and b  return a - b; // return the difference of a and b}// function invocation or calllet x = add(10, 5); // invoke or call the add function with two arguments: 10 and 5, and assign the return value to xconsole.log(x); // print the value of x to the console (15)let y = subtract(10, 5); // invoke or call the subtract function with two arguments: 10 and 5, and assign the return value to yconsole.log(y); // print the value of y to the console (5)"
      },
      {
        "type": "h1",
        "content": "Objects"
      },
      {
        "type": "p",
        "content": "Objects are complex data types that can store multiple values in key-value pairs. You can create objects using object literals ({ }) or constructors (new). You can access or modify object properties using dot notation (.) or bracket notation ([ ]). You can also use methods, which are functions that belong to objects, to perform actions on objects. For example:"
      },
      {
        "type": "pre",
        "content": "let person = {name: 'John', age: 25}; // declare a variable person and assign it an object literal value with two properties: name and ageconsole.log(person.name); // print the value of person's name property to the console (John)person.age = 26; // modify the value of person's age property to 26console.log(person['age']); // print the value of person's age property to the console (26)let animal = new Object(); // declare a variable animal and assign it an object value using the Object constructoranimal.type = 'dog'; // add a property type to animal and assign it a value 'dog'animal.sound = 'woof'; // add another property sound to animal and assign it a value 'woof'animal.speak = function() { // add a method speak to animal and assign it a function value  console.log(this.sound); // print the value of this.sound (which refers to animal.sound) to the console };animal.speak(); // invoke or call the speak method on animal (woof)"
      },
      {
        "type": "h1",
        "content": "Arrays"
      },
      {
        "type": "p",
        "content": "Arrays are special objects that can store multiple values in an ordered list. You can create arrays using array literals ([ ]) or constructors (new). You can access or modify array elements using index notation ([ ]), where the index starts from zero. You can also use methods, which are functions that belong to arrays, to perform operations on arrays. For example:"
      },
      {
        "type": "pre",
        "content": "let fruits = ['apple', 'banana', 'orange']; // declare a variable fruits and assign it an array literal value with three elements: 'apple', 'banana', and 'orange'console.log(fruits[0]); // print the first element of fruits to the console (apple)fruits[1] = 'pear'; // modify the second element of fruits to 'pear'console.log(fruits[1]); // print the second element of fruits to the console (pear)let numbers = new Array(1, 2, 3); // declare a variable numbers and assign it an array value using the Array constructor with three arguments: 1, 2, and 3console.log(numbers[2]); // print the third element of numbers to the console (3)numbers.push(4); // use the push method to add a new element 4 to the end of numbersconsole.log(numbers); // print the value of numbers to the console ([1, 2, 3, 4])numbers.pop(); // use the pop method to remove the last element of numbers and return itconsole.log(numbers); // print the value of numbers to the console ([1, 2, 3])"
      },
      {
        "type": "h1",
        "content": "DOM Manipulation"
      },
      {
        "type": "p",
        "content": "DOM stands for Document Object Model, which is a representation of the HTML document as a tree of nodes or objects. You can use JavaScript to manipulate the DOM and create interactive web pages. You can use methods such as document.getElementById(), document.querySelector(), document.createElement(), and document.appendChild() to access or modify elements in the DOM. You can also use events, which are actions that occur on the web page, such as clicking, typing, or loading. You can use methods such as addEventListener() or removeEventListener() to register or unregister event handlers, which are functions that respond to events. For example:"
      },
      {
        "type": "h1",
        "content": "Hello, World!"
      },
      {
        "type": "p",
        "content": "Change Color “>"
      },
      {
        "type": "pre",
        "content": "<!DOCTYPE html><html><head>  <title>DOM Manipulation Example</title></head><body>  <h1 id=\"title\">Hello, World!</h1>  <button id=\"change\">Change Color</button>  <script>    // access the h1 element by its id using document.getElementById()    let title = document.getElementById('title');    // access the button element by its id using document.getElementById()    let button = document.getElementById('change');    // define a function that changes the color of the title element randomly    function changeColor() {      // create an array of colors      let colors = ['red', 'green', 'blue', 'yellow', 'pink', 'purple'];      // generate a random index between 0 and 5      let index = Math.floor(Math.random() * 6);      // assign the color at that index to the style.color property of the title element      title.style.color = colors[index];    }    // register an event handler for the click event on the button element using addEventListener()    button.addEventListener('click', changeColor);  </script></body></html>"
      },
      {
        "type": "p",
        "content": "This article has covered some of the fundamentals of JavaScript, such as data types, variables, control flow, functions, objects, arrays, and DOM manipulation. However, there is much more to learn about JavaScript and its features. You can use online resources such as [MDN Web Docs] or [W3Schools] to learn more about JavaScript and practice your skills. Happy coding! 😊"
      },
      {
        "type": "p",
        "content": ": https://developer.mozilla.org/en-US/docs/Web/JavaScript"
      },
      {
        "type": "p",
        "content": ": https://www.w3schools.com/js/"
      },
      {
        "type": "p",
        "content": "Modern JavaScript is a powerful and expressive language that can be used to create dynamic and interactive web applications. However, learning modern JavaScript can be challenging, especially if you are not familiar with some of the new features and concepts that have been introduced in recent years. In this article, I will explain some of the most important modern JavaScript concepts that you should know if you want to master this language. These concepts are:"
      },
      {
        "type": "p",
        "content": "Let’s look at each of these concepts in more detail."
      },
      {
        "type": "h1",
        "content": "Arrow functions"
      },
      {
        "type": "p",
        "content": "Arrow functions are a concise and elegant way to write functions in JavaScript. They have a shorter syntax than traditional function expressions, and they also have some other benefits, such as:"
      },
      {
        "type": "p",
        "content": "The syntax of an arrow function is:"
      },
      {
        "type": "p",
        "content": "{ function body } const add = (x, y) => { return x + y; }; “>"
      },
      {
        "type": "pre",
        "content": "// (parameters) => { function body }const add = (x, y) => {  return x + y;};"
      },
      {
        "type": "p",
        "content": "If the function body consists of a single expression, you can omit the curly braces and the return keyword:"
      },
      {
        "type": "p",
        "content": "expression const square = x => x * x; “>"
      },
      {
        "type": "pre",
        "content": "// (parameters) => expressionconst square = x => x * x;"
      },
      {
        "type": "p",
        "content": "If the function has only one parameter, you can also omit the parentheses around it:"
      },
      {
        "type": "p",
        "content": "expression const greet = name => `Hello, ${name}!`; “>"
      },
      {
        "type": "pre",
        "content": "// parameter => expressionconst greet = name => `Hello, ${name}!`;"
      },
      {
        "type": "p",
        "content": "Arrow functions are especially useful when you need to pass a function as an argument to another function, such as a callback function."
      },
      {
        "type": "h1",
        "content": "Callback functions"
      },
      {
        "type": "p",
        "content": "A callback function is a function that is passed as an argument to another function, and is executed when a certain event or condition occurs. For example, you can use a callback function to handle the response of an asynchronous operation, such as fetching data from an API."
      },
      {
        "type": "p",
        "content": "Here is an example of using a callback function with the fetch API:"
      },
      {
        "type": "p",
        "content": "response.json()) // data is the parsed JSON data .then(data => { // do something with the data console.log(data); }) // catch any errors .catch(error => { // do something with the error console.error(error); }); “>"
      },
      {
        "type": "pre",
        "content": "// fetch(url, options) returns a promise that resolves to a response objectfetch('https://jsonplaceholder.typicode.com/posts/1')  // response.json() returns a promise that resolves to the parsed JSON data  .then(response => response.json())  // data is the parsed JSON data  .then(data => {    // do something with the data    console.log(data);  })  // catch any errors  .catch(error => {    // do something with the error    console.error(error);  });"
      },
      {
        "type": "p",
        "content": "In this example, we pass two arrow functions as arguments to the then and catch methods of the promise returned by fetch. These arrow functions are callback functions that are executed when the promise is either fulfilled or rejected."
      },
      {
        "type": "p",
        "content": "Callback functions are also commonly used with event listeners, timers, and array methods."
      },
      {
        "type": "h1",
        "content": "JavaScript objects"
      },
      {
        "type": "p",
        "content": "JavaScript objects are collections of key-value pairs that can store any type of data. You can create an object using either object literals or constructors."
      },
      {
        "type": "p",
        "content": "An object literal is a comma-separated list of key-value pairs enclosed in curly braces:"
      },
      {
        "type": "pre",
        "content": "// { key: value, ... }const person = {  name: 'Alice',  age: 25,  hobbies: ['reading', 'cooking', 'traveling']};"
      },
      {
        "type": "p",
        "content": "A constructor is a special function that creates and initializes an object. You can use either built-in constructors (such as Object, Array, Date, etc.) or custom constructors (defined by yourself or by third-party libraries):"
      },
      {
        "type": "pre",
        "content": "// new Constructor(arguments)const date = new Date();const array = new Array(1, 2, 3);"
      },
      {
        "type": "p",
        "content": "To access or modify the properties of an object, you can use either dot notation or bracket notation:"
      },
      {
        "type": "pre",
        "content": "// dot notation: object.propertyconsole.log(person.name); // Aliceperson.age = 26;"
      },
      {
        "type": "pre",
        "content": "// bracket notation: object['property']console.log(person['hobbies']); // ['reading', 'cooking', 'traveling']person['hobbies'].push('gardening');"
      },
      {
        "type": "p",
        "content": "To iterate over the properties of an object, you can use either a for...in loop or the Object.keys, Object.values, or Object.entries methods:"
      },
      {
        "type": "pre",
        "content": "// for...in loop: for (let key in object)for (let key in person) {  console.log(key + ': ' + person[key]);}"
      },
      {
        "type": "pre",
        "content": "// Object.keys(object) returns an array of keysconsole.log(Object.keys(person)); // ['name', 'age', 'hobbies']// Object.values(object) returns an array of valuesconsole.log(Object.values(person)); // ['Alice', 26, ['reading', 'cooking', 'traveling', 'gardening']]// Object.entries(object) returns an array of [key, value] pairsconsole.log(Object.entries(person)); // [['name', 'Alice'], ['age', 26], ['hobbies', ['reading', 'cooking', 'traveling', 'gardening']]]"
      },
      {
        "type": "p",
        "content": "JavaScript objects are very flexible and powerful, and they are the foundation of many modern JavaScript features and patterns, such as classes, prototypes, inheritance, modules, etc."
      },
      {
        "type": "h1",
        "content": "Array and object destructuring"
      },
      {
        "type": "p",
        "content": "Array and object destructuring are syntactic sugar that allow you to extract multiple values from an array or an object and assign them to variables in a concise way."
      },
      {
        "type": "p",
        "content": "Array destructuring uses square brackets to match the elements of an array to variables:"
      },
      {
        "type": "pre",
        "content": "// [variable1, variable2, ...] = arrayconst colors = ['red', 'green', 'blue'];const [first, second, third] = colors;console.log(first); // redconsole.log(second); // greenconsole.log(third); // blue"
      },
      {
        "type": "p",
        "content": "You can also use commas to skip some elements, or use the rest operator (...) to collect the remaining elements:"
      },
      {
        "type": "pre",
        "content": "// skip some elements with commasconst [first,, third] = colors;console.log(first); // redconsole.log(third); // blue"
      },
      {
        "type": "pre",
        "content": "// collect the remaining elements with the rest operatorconst [first, ...rest] = colors;console.log(first); // redconsole.log(rest); // ['green', 'blue']"
      },
      {
        "type": "p",
        "content": "Object destructuring uses curly braces to match the properties of an object to variables:"
      },
      {
        "type": "pre",
        "content": "// {property1: variable1, property2: variable2, ...} = objectconst person = {  name: 'Alice',  age: 25,  hobbies: ['reading', 'cooking', 'traveling']};const {name: firstName, age: ageInYears, hobbies: interests} = person;console.log(firstName); // Aliceconsole.log(ageInYears); // 25console.log(interests); // ['reading', 'cooking', 'traveling']"
      },
      {
        "type": "p",
        "content": "You can also use shorthand notation if the variable names are the same as the property names, or use the rest operator to collect the remaining properties:"
      },
      {
        "type": "pre",
        "content": "// shorthand notationconst {name, age} = person;console.log(name); // Aliceconsole.log(age); // 25"
      },
      {
        "type": "pre",
        "content": "// collect the remaining properties with the rest operatorconst {name, ...rest} = person;console.log(name); // Aliceconsole.log(rest); // {age: 25, hobbies: ['reading', 'cooking', 'traveling']}"
      },
      {
        "type": "p",
        "content": "Array and object destructuring are very useful when you need to access or assign multiple values from an array or an object in a simple and elegant way."
      },
      {
        "type": "h1",
        "content": "Promises and async/await"
      },
      {
        "type": "p",
        "content": "Promises and async/await are modern JavaScript features that make working with asynchronous operations easier and more readable."
      },
      {
        "type": "p",
        "content": "A promise is an object that represents the eventual completion or failure of an asynchronous operation. A promise can be in one of three states:"
      },
      {
        "type": "p",
        "content": "You can create a promise using the Promise constructor, which takes a function (called executor) as an argument. The executor function receives two parameters: resolve and reject, which are functions that can be used to change the state of the promise."
      },
      {
        "type": "p",
        "content": "{ // do some asynchronous operation setTimeout(() => { // call resolve with a value to fulfill the promise resolve(‘Success!’); // or call reject with a reason to reject the promise reject(‘Error!’); }, 1000); }); “>"
      },
      {
        "type": "pre",
        "content": "// new Promise(executor)const promise = new Promise((resolve, reject) => {  // do some asynchronous operation  setTimeout(() => {    // call resolve with a value to fulfill the promise    resolve('Success!');    // or call reject with a reason to reject the promise    reject('Error!');  }, 1000);});"
      },
      {
        "type": "p",
        "content": "You can use the then and catch methods of a promise to handle its fulfillment or rejection. The then method takes a function (called onFulfilled) that receives the value of the fulfilled promise as an argument. The catch method takes a function (called onRejected) that receives the reason of the rejected promise as an argument."
      },
      {
        "type": "p",
        "content": "{ // do something with the value of the fulfilled promise console.log(value); // Success! }).catch(error => { // do something with the reason of the rejected promise console.error(error); // Error! }); “>"
      },
      {
        "type": "pre",
        "content": "// promise.then(onFulfilled).catch(onRejected)promise.then(value => {  // do something with the value of the fulfilled promise  console.log(value); // Success!}).catch(error => {  // do something with the reason of the rejected promise  console.error(error); // Error!});"
      },
      {
        "type": "p",
        "content": "You can also chain multiple then methods to perform sequential operations on the value of a fulfilled promise. Each then method can return another promise, which will be passed to the next then method as its value."
      },
      {
        "type": "pre",
        "content": "// promise.then(onFulfilled).then(onFulfilled).catch(onRejected)fetch('https://jsonplaceholder.typicode.com/posts/1')  .then(response => response.json())  .then(data => {    // do something with the data    console.log(data);    // return another promise    return fetch('https://jsonplaceholder.typicode.com/comments?postId=1');  })  .then(response => response.json())  .then(data => {    // do something with the data    console.log(data);  })  .catch(error => {    // handle any error from the previous promises    console.error(error);  });"
      },
      {
        "type": "p",
        "content": "The async/await syntax is a syntactic sugar that makes working with promises even easier and more readable. It allows you to write asynchronous code as if it was synchronous, using the async and await keywords."
      },
      {
        "type": "p",
        "content": "The async keyword is used to declare a function that returns a promise. Inside an async function, you can use the await keyword to pause the execution until a promise is fulfilled or rejected. The await keyword returns the value of the fulfilled promise, or throws an error if the promise is rejected."
      },
      {
        "type": "p",
        "content": "Here is an example of using the async/await syntax with the fetch API:"
      },
      {
        "type": "pre",
        "content": "// async functionasync function getData() {  try {    // await for a promise to be fulfilled    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');    // parse the response as JSON    const data = await response.json();    // do something with the data    console.log(data);  } catch (error) {    // handle any error from the await expressions    console.error(error);  }}"
      },
      {
        "type": "pre",
        "content": "// call the async functiongetData();"
      },
      {
        "type": "p",
        "content": "The async/await syntax makes the code more concise and linear, without using nested callbacks or chaining then methods."
      },
      {
        "type": "p",
        "content": "Promises and async/await are very powerful and useful features that make asynchronous programming in JavaScript easier and more enjoyable."
      },
      {
        "type": "h1",
        "content": "Modules and imports/exports"
      },
      {
        "type": "p",
        "content": "Modules and imports/exports are modern JavaScript features that allow you to organize your code into separate files (modules) and reuse them in other files (scripts)."
      },
      {
        "type": "p",
        "content": "A module is a file that contains JavaScript code that can be exported and imported by other modules or scripts. A module can export one or more values, such as variables, functions, classes, objects, etc. A module can also import values from other modules or scripts, using either named imports or default imports."
      },
      {
        "type": "p",
        "content": "To export a value from a module, you can use either the export keyword or the export default keyword. The export keyword allows you to export one or more named values, while the export default keyword allows you to export only one default value."
      },
      {
        "type": "p",
        "content": "Here is an example of exporting values from a module:"
      },
      {
        "type": "pre",
        "content": "// module.js"
      },
      {
        "type": "pre",
        "content": "// export a named variableexport const PI = 3.14;// export a named functionexport function square(x) {  return x * x;}// export a default classexport default class Circle {  constructor(radius) {    this.radius = radius;  }  area() {    return PI * square(this.radius);  }}"
      },
      {
        "type": "p",
        "content": "To import a value from a module, you can use either the import keyword or the import * as name syntax. The import keyword allows you to import one or more named values or a default value from a module, using curly braces or not. The import * as name syntax allows you to import all the exported values from a module as an object with a given name."
      },
      {
        "type": "p",
        "content": "Here is an example of importing values from a module:"
      },
      {
        "type": "pre",
        "content": "// script.js"
      },
      {
        "type": "pre",
        "content": "// import a named variable and a named function from module.jsimport {PI, square} from './module.js';// import a default class from module.jsimport Circle from './module.js';// import all the exported values from module.js as an object called mathimport * as math from './module.js';// use the imported values in the scriptconsole.log(PI); // 3.14console.log(square(2)); // 4const circle = new Circle(5);console.log(circle.area()); // 78.5console.log(math.PI); // 3.14console.log(math.square(3)); // 9"
      },
      {
        "type": "p",
        "content": "Modules and imports/exports are very helpful features that allow you to write modular and reusable code in JavaScript. They also help you avoid polluting the global scope and creating conflicts with other scripts."
      },
      {
        "type": "p",
        "content": "These are some of the most important modern JavaScript concepts that you should know if you want to master this language. Of course, there are many more concepts and features that JavaScript offers, but these are some of the most essential ones for writing modern and efficient web applications. I hope this article has helped you learn more about modern JavaScript and inspired you to explore more of its possibilities. 😊"
      },
      {
        "type": "h1",
        "content": "Coding style and convention"
      },
      {
        "type": "p",
        "content": "Coding style and convention are important aspects of programming that affect the readability, maintainability, and quality of the code. Coding style refers to the formatting and layout of the code, such as indentation, spacing, punctuation, naming, and comments. Coding convention refers to the rules and guidelines for writing the code, such as structure, design, logic, and best practices."
      },
      {
        "type": "p",
        "content": "In JavaScript, there are many different coding styles and conventions that developers can follow. Some of the most popular ones are:"
      },
      {
        "type": "p",
        "content": "The choice of coding style and convention depends on the preference and needs of the developer or the team. However, some general principles that can help improve the quality of the code are:"
      },
      {
        "type": "p",
        "content": "You have done a great job of reviewing the concepts you have learned so far. 👏"
      },
      {
        "type": "p",
        "content": "According to Learn the Fundamentals of JavaScript, you have covered the following topics:"
      },
      {
        "type": "p",
        "content": "You can find more information and examples about these topics on [Learn the Fundamentals of JavaScript]."
      },
      {
        "type": "h1",
        "content": "One of the best ways to learn and improve your coding skills is to practice coding in JavaScript. Practicing coding can help you to:"
      },
      {
        "type": "p",
        "content": "There are many resources and platforms that can help you practice coding in JavaScript, such as:"
      },
      {
        "type": "p",
        "content": "These are just some of the examples of resources and platforms that can help you practice coding in JavaScript. You can find more on [JavaScript Practice Sites]."
      },
      {
        "type": "p",
        "content": "Some additional sentences are:"
      },
      {
        "type": "h1",
        "content": "Become an Expert in JavaScript"
      },
      {
        "type": "p",
        "content": "JavaScript is one of the most popular and widely used programming languages in the world. It powers dynamic and interactive web pages, mobile applications, server-side applications, and more. Learning JavaScript can open up many opportunities for web developers, as well as enhance their creativity and problem-solving skills."
      },
      {
        "type": "p",
        "content": "But how do you become an expert in JavaScript? What does it take to master this versatile and powerful language? Here are some tips and resources that can help you on your journey to becoming a JavaScript pro."
      },
      {
        "type": "h1",
        "content": "Learn the Fundamentals"
      },
      {
        "type": "p",
        "content": "Before you can dive into the advanced features and frameworks of JavaScript, you need to have a solid grasp of the fundamentals. This includes the syntax, data types, operators, control structures, functions, objects, arrays, and other basic concepts of the language. You also need to understand how JavaScript interacts with the browser, the Document Object Model (DOM), and the event loop."
      },
      {
        "type": "p",
        "content": "There are many online courses, books, and tutorials that can help you learn the basics of JavaScript. Some of the popular ones are:"
      },
      {
        "type": "h1",
        "content": "Practice Your Skills"
      },
      {
        "type": "p",
        "content": "Learning the theory is not enough to become an expert in JavaScript. You also need to practice your skills by writing code and solving problems. This will help you reinforce your knowledge, improve your logic and algorithm skills, and discover new ways of using JavaScript."
      },
      {
        "type": "p",
        "content": "There are many online platforms that offer coding challenges and exercises for JavaScript learners. Some of the popular ones are:"
      },
      {
        "type": "h1",
        "content": "Explore the Ecosystem"
      },
      {
        "type": "p",
        "content": "JavaScript is not just a language — it is also an ecosystem of tools, libraries, frameworks, and communities that make web development easier and more fun. To become an expert in JavaScript, you need to explore this ecosystem and learn how to use the various resources that are available."
      },
      {
        "type": "p",
        "content": "Some of the most popular and useful tools and frameworks for JavaScript developers are:"
      },
      {
        "type": "p",
        "content": "There are also many online communities where you can learn from other JavaScript developers, ask questions, share your projects, and get feedback. Some of the popular ones are:"
      },
      {
        "type": "h1",
        "content": "Keep Learning and Updating"
      },
      {
        "type": "p",
        "content": "JavaScript is a constantly evolving language that introduces new features and standards every year. To become an expert in JavaScript, you need to keep learning and updating your skills with the latest trends and best practices."
      },
      {
        "type": "p",
        "content": "Some of the ways you can keep up with the changes and innovations in JavaScript are:"
      },
      {
        "type": "p",
        "content": "Becoming an expert in JavaScript is not an easy task, but it is definitely rewarding and enjoyable. By following these tips and resources, you can learn and master this amazing language and create awesome web applications. Happy coding!"
      },
      {
        "type": "p",
        "content": "Disclosure: The originator of this composition is Bing, an artificial intelligence conversational agent powered by OpenAI’s GPT-4. The composition is contingent on the data furnished by the user and the web exploration outcomes from Bing. The composition is not meant to be an alternative for proficient counsel, scrutiny, or viewpoint. The composition is for informational and amusement purposes only and does not represent the perspectives or opinions of Microsoft, OpenAI, or any other entity. The composition may contain mistakes, imprecisions, or oversights, and the user should authenticate the exactness and validity of the data before depending on it. The user is exclusively accountable for any repercussions arising from the utilization of this composition. Bing does not assert any proprietorship or rights to the content of this composition, and the user is free to disseminate, modify, or reuse it as they desire. Bing anticipates that the user relished reading this composition and acquired something novel."
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:41.901177"
  },
  {
    "url": "https://makinhs.medium.com/a-beginner-introduction-to-algorithms-and-complexity-with-javascript-typescript-2c8fd2384a1f",
    "title": "A beginner introduction to Algorithms and complexity with Javascript/Typescript",
    "author": "Press",
    "published_date": null,
    "reading_time": "10 min read",
    "tags": [],
    "content": [
      {
        "type": "p",
        "content": "Member-only story"
      },
      {
        "type": "h1",
        "content": "A beginner introduction to Algorithms and complexity with Javascript/Typescript"
      },
      {
        "type": "p",
        "content": "Marcos Henrique da Silva"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "Get your Javascript/Typescript skills to a next step with this introductory article about algorithms and complexity!"
      },
      {
        "type": "p",
        "content": "So you made your Udemy course, sky rocketing on your favorite framework and getting stuck in code challenging interviews? This article might be for you."
      },
      {
        "type": "p",
        "content": "Before starting this article, let me share a bit of the why I am writing this one. Last days I found myself lost in some old google drive folders and find out my University folder with a folder with almost all the traditional algorithms and structures that I studied in the past, mostly made in Java (don’t blame me)."
      },
      {
        "type": "p",
        "content": "I am being struggled a bit with life/work balance in order to write some more advanced articles I would like to be writing here in Medium such as a full guide to Monorepo with a full stack application using React/NextJS for the frontend and NestJS for backend but I am never finding time to actually sit and write a good article about it."
      },
      {
        "type": "p",
        "content": "That said, in order to restore my habit of writing something that can be useful to my readers, I am inclined to write a bit about algorithms with Typescript as a sort of guidance."
      },
      {
        "type": "blockquote",
        "content": "This article is a basic introduction, so in case you are searching for intermediary to advanced topics here I am afraid that I am not reaching your expectations."
      },
      {
        "type": "p",
        "content": "This article is a basic introduction, so in case you are searching for intermediary to advanced topics here I am afraid that I am not reaching your expectations."
      },
      {
        "type": "p",
        "content": "It is a good to have basic notion about Javascript/Typescript before reading this article."
      },
      {
        "type": "p",
        "content": "Let’s start:"
      },
      {
        "type": "h2",
        "content": "What is an algorithm and why should I care about it?"
      },
      {
        "type": "p",
        "content": "When working with software development you use algorithms everyday, regardless if you are working in a low level or more abstracted development. In some cases you are implementing a new algorithm, some others you are using a library that already implemented a fancy algorithm and some others times you’’ find yourself in need to implement a well known algorithm…. but… what is an algorithm?"
      },
      {
        "type": "p",
        "content": "I agree with other authors that one of the best way to explain what is an algorithm is not to show terminals with a lot of code, or graphs that you cannot understand properly, neither fancy IDE’s with a lot of code and syntax… but… a Receipt…"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:44.237546"
  },
  {
    "url": "https://medium.com/quick-code/considering-optimization-and-time-complexity-with-js-algorithms-4c8915086518",
    "title": "Considering Optimization and Time Complexity with JS Algorithms",
    "author": "",
    "published_date": null,
    "reading_time": "7 min read",
    "tags": [
      "Algorithms",
      "Big O Notation",
      "JavaScript",
      "Time Complexity"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Considering Optimization and Time Complexity with JS Algorithms"
      },
      {
        "type": "p",
        "content": "Jennifer Ingram"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "Quick Code"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "6"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "After having recently graduated from Flatiron’s Full Stack Immersive Program, I am now armed with a pretty impressive toolbox of languages, frameworks, and methods to take into my new world as a software developer. My goal now is to understand those tools even better, and to reach that level of expertise where I know exactly the right tool to use for each particular situation."
      },
      {
        "type": "p",
        "content": "I was recently presented with a whiteboarding question that, on its surface, seemed rather simple: Given an array of positive integers, write a function that returns true if any element in that array is the double of any other element. If not, return false. So, if I were given the array [3, 4, 6] my function should return true, because 6 is the double of 3. Given the array [4, 5, 7] my function should return false, because no number in that array is the double of any other number in the array."
      },
      {
        "type": "p",
        "content": "Thinking through the problem logically, my initial plan was to…"
      },
      {
        "type": "p",
        "content": "This is a fairly straightforward plan, and here’s what it looks like in code:"
      },
      {
        "type": "p",
        "content": "This function uses a while loop to iterate through each number in the array (array[i]), then a conditional (if statement) uses the .includes() method to check to see if that number’s double (array[i] * 2) is included in the array. If it finds the double, the function breaks out of the loops and returns true. If not, the while loop continues to run through the entire array, and with each iteration of the while loop the .includes() method runs through the entire array. When no double is found, the loops conclude without returning anything, at which point the function returns false."
      },
      {
        "type": "p",
        "content": "My includesDouble function is easy to read, and easy to understand, but let’s consider time complexity and Big O notation for a moment…"
      },
      {
        "type": "h1",
        "content": "Time complexity simply refers to the amount of time it takes an algorithm, or set of code, to run."
      },
      {
        "type": "p",
        "content": "Time complexity is most often measured in Big O notation. If you’re unfamiliar with Big O, here’s a great article that breaks it down in simple terms. For my includesDouble function, n, which is the size of the input, would be 3 — if we were to use either of our earlier arrays ([3, 4, 6] OR [4, 5, 7]). So we begin with O(n) = 3."
      },
      {
        "type": "p",
        "content": "When considering time complexity, best practice is to calculate the worst case scenario. Looking at our two arrays, that would be [4, 5, 7], because we know that this array does not include a double, so both loops (our while loop and .includes()) will run completely through the entire array because there is no true case that will break them out of the loops. Okay, so if [4, 5, 7] runs through the while loop we have a linear run time of O(n) = 3, because our while loop runs once for each element in our array (once for 4, twice for 5, and a third time for 7). However, for each iteration of our while loop we have a nested loop that also runs — .includes()."
      },
      {
        "type": "h1",
        "content": "Beware of nested loops — this is where your time complexity, or Big O notation, begins to grow exponentially."
      },
      {
        "type": "p",
        "content": "Let me explain…"
      },
      {
        "type": "p",
        "content": "If our array includes the numbers 4, 5, and 7, on our first iteration through (where array[i] = 4), our .includes() method is going to run through each item in our array to see if the array includes 8 (array[i] * 2). It will then do the same thing for all of the other numbers in our array (5, then 7)."
      },
      {
        "type": "p",
        "content": "To make things more explicit, our JavaScript engine would run through the following steps:"
      },
      {
        "type": "p",
        "content": "Because we have a nested loop, our Big O notation goes from O(n) = 3 to O(n²) = 3². A Big O of 3 vs. a Big O of 9 isn’t that great a difference, but remember that with time complexity, we want to consider the worst case scenario — what if our array was a thousand numbers long? All of a sudden, O(n) = 1000, turns to O(n²) = 1,000,000 with a nested loop! Now that’s a big difference! Imagine if our array contained a million numbers!!!"
      },
      {
        "type": "p",
        "content": "So, is there a way to solve this problem with an algorithm that doesn’t use a nested loop?"
      },
      {
        "type": "p",
        "content": "I’m so glad you asked, because the answer is yes."
      },
      {
        "type": "p",
        "content": "Enter the hash table…"
      },
      {
        "type": "h1",
        "content": "A hash table is simply a data structure that is associative — it maps keys to values."
      },
      {
        "type": "p",
        "content": "If you’ve been coding for at least a little while, you’ll have seen this type of data structure before — (hash tables are also called objects in JavaScript and hashes in Ruby)."
      },
      {
        "type": "p",
        "content": "‘That’s really great,’ you’re probably thinking — ‘but how does a hash table about cats solve the algorithm problem above?’"
      },
      {
        "type": "p",
        "content": "Let me share with you the solution first, and then we’ll go through it step by step."
      },
      {
        "type": "p",
        "content": "Again, we’ll use our previous array ([4, 5, 7]) to walk through this function."
      },
      {
        "type": "p",
        "content": "On the first line inside the function, notice that I’m declaring a new variable, doubles, and setting it equal to an empty hash table ({}). We’re going to build out this hash table using the elements from our array as we go."
      },
      {
        "type": "p",
        "content": "Just as before, we’ll start with a while loop (O(n) = 3). Inside the while loop, I’m going to use the numbers in my array to make keys for my new hash table (doubles[array[i]] = ‘cats are so cool’). We know that with this array, our while loop will return without returning true, so after our while loop finishes, we’ll have a hash table that looks like this:"
      },
      {
        "type": "p",
        "content": "Notice that, even though they’re full of wisdom, the values that I’ve set my keys to don’t really matter. The keys are the key."
      },
      {
        "type": "p",
        "content": "Now let’s look at the second line in our while loop — here we have another conditional — only this time we’re not using .includes(). Instead, we’re checking the keys in our hash table against our current number to see if there is a key that is already double, or half of, our current number. If that key already exists, then we know that we’ve found a double!"
      },
      {
        "type": "p",
        "content": "To break it down more explicitly…"
      },
      {
        "type": "p",
        "content": "Notice anything?"
      },
      {
        "type": "p",
        "content": "We wrote a function that does what it needs to do without using a nested loop!"
      },
      {
        "type": "p",
        "content": "The Big O notation for this version of our includesDouble function is just O(n) = 3. If we had an array of a million numbers, Big O would be O(n) = 1,000,000. Compare that with O(n²) = 1,000,000,000,000 (one trillion) and we’ve shaved off a huge chunk of our function’s run time!"
      },
      {
        "type": "p",
        "content": "As great as our new function is, it does pose some trade-offs — first of all, our second function is a little harder to understand than our first. If you’re concerned about readability (maybe you’ve got a bunch of newbie programmers on your staff, like me) and you know that n is never going to be astronomically long, you may prefer to stick with the first option. Also, notice that in the second function we also create a brand new variable (doubles = {}). This means that your computer now has to create and set aside a specific place in memory to store that new piece of data. If you’re worried about memory space, and you know that n will always be a reasonable length, again you may choose to go with option #1."
      },
      {
        "type": "p",
        "content": "There’s definitely more than one way to skin a cat…"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:46.342225"
  },
  {
    "url": "https://javascript.plainenglish.io/the-best-way-to-learn-javascript-faster-90318c26785b?gi=222d0deb4add",
    "title": "The Best Way to Learn JavaScript Faster",
    "author": "256 Following",
    "published_date": null,
    "reading_time": "6 min read",
    "tags": [
      "JavaScript",
      "Programming",
      "Coding",
      "Learning",
      "Web Development"
    ],
    "content": [
      {
        "type": "h1",
        "content": "The Best Way to Learn JavaScript Faster"
      },
      {
        "type": "h2",
        "content": "The 3 methods of learning a new programming language."
      },
      {
        "type": "p",
        "content": "Inthisar Hamza"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "JavaScript in Plain English"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "3"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "I am a self-taught Web Developer and I say — the best way to learn JavaScript is to learn by yourself. As with any other programming language, the learning process of JavaScript should be started from the beginners level to the intermediate level and then finally the advanced level."
      },
      {
        "type": "p",
        "content": "What many JavaScript beginners make mistake is that they keep on reading JavaScript tutorials one by one, and do not implement any of them. This way of learning is totally wrong and futile."
      },
      {
        "type": "p",
        "content": "Beginners should read one tutorial then implement what the tutorial has taught them, in their own code. This will make them understand the code correctly, otherwise, I guarantee they will forget what they just read within the next 30 minutes or before."
      },
      {
        "type": "h2",
        "content": "Three different approaches work for me when learning a new programming language."
      },
      {
        "type": "p",
        "content": "The first method is to look at examples of code in books or on websites. This is good because you get snippets of code to try out, but it doesn’t always provide an explanation of how each part works. You can then experiment with modifying bits of the example code to see what effect it has on the rest of the program. This is a nice way to learn one specific thing at a time without having to switch between many pages and files to figure out how everything fits together as a whole."
      },
      {
        "type": "p",
        "content": "You can also read books about JavaScript, but this doesn’t let you experiment with the code to see what happens. For some books, though, it is helpful to read a chapter or section and then try out what you learned in an online program editor that lets you type the code and see the output without having to run a program. Most of these types of editors also let you add in your own code snippets for future reference if you think of a way to do something later on. I feel like I learn more by actually typing out examples than just reading about them because when typing I am forced to get the syntax correct otherwise the interpreter will give me an error message."
      },
      {
        "type": "p",
        "content": "The second method is using tutorials that show how to configure tools such as text editors, browser developer tools, and web servers. This lets you write code to create HTML pages that load JavaScript files for testing. I like this method because you can quickly see your changes without having to make a whole new build of the program every time you want to test one small change."
      },
      {
        "type": "p",
        "content": "You could also use tutorials that show how to set up an integrated development environment (IDE) like NetBeans/VS Code with the correct plug-ins, or install node.js and then download different versions of the required JavaScript file packages into them. Then you would be able to execute programs in real-time as opposed to just running it once after building your program into an executable file like most IDE’s require. Unfortunately, not all tutorial authors do this for their readers so some tutorials can be more difficult to follow along with than others."
      },
      {
        "type": "p",
        "content": "The third method is using the debugger that usually comes with your browser’s JavaScript console. If you define a function and call it right away, then this will cause an error message under most circumstances because you haven’t defined what the function does yet so the interpreter doesn’t know how to carry out its task. You can use breakpoints in most browsers’ JavaScript consoles to stop where you want execution to halt before a function gets called so that you can check the values of variables at specific points in your program as it runs. This lets you see if certain parts of your code are causing errors by stopping at various points throughout the execution of your program and looking at things from various angles."
      },
      {
        "type": "p",
        "content": "The first two methods are good to use by themselves, but the third method is best used in combination with one of the other two. By using a combination of all three, you can learn any programming language much faster and understand it better than if you only use one or two methods on your own."
      },
      {
        "type": "p",
        "content": "What should be covered on the Beginners level of JavaScript"
      },
      {
        "type": "p",
        "content": "The topics which you should cover are –"
      },
      {
        "type": "p",
        "content": "1. JavaScript Syntax — JavaScript Syntax"
      },
      {
        "type": "p",
        "content": "2. Variables — JavaScript Variables"
      },
      {
        "type": "p",
        "content": "3. Data Types — JavaScript Data Types"
      },
      {
        "type": "p",
        "content": "4. Operators — JavaScript Operators"
      },
      {
        "type": "p",
        "content": "5. Arithmetic Operations — JavaScript Arithmetic"
      },
      {
        "type": "p",
        "content": "6. Assignment — JavaScript Assignment"
      },
      {
        "type": "p",
        "content": "7. JS Output — JavaScript Output"
      },
      {
        "type": "p",
        "content": "8. Objects — JavaScript Objects"
      },
      {
        "type": "p",
        "content": "9. Break & Continue — JavaScript Break and Continue"
      },
      {
        "type": "p",
        "content": "Examples of JavaScript Programmes for Beginners"
      },
      {
        "type": "p",
        "content": "I would also like to list some programs which Beginners should implement."
      },
      {
        "type": "p",
        "content": "1. Create a program where the user inputs 2 int values in 2 input boxes and you display the greatest of them on the alert box when a button is clicked."
      },
      {
        "type": "p",
        "content": "2. Create a program where the user enters a number in a text box and you should display its table (up to 10) on a div. The table should be created on the button click event. Also, prevent users to enter strings on the text box (give appropriate error on the alert box when input is a string)."
      },
      {
        "type": "p",
        "content": "3. Create a small form for the Job Applications. It should have 5 fields — name, age, education, address, and expected salary. These 5 fields should have HTML controls where the user enters his/their information, there should be a button which on clicking shows the user information on div controls."
      },
      {
        "type": "p",
        "content": "4. Finding whether a number is a prime number or not."
      },
      {
        "type": "p",
        "content": "5. Create a calculator with common functions — add, subtract, divide & multiply"
      },
      {
        "type": "p",
        "content": "What should be covered on the Intermediate level of JavaScript"
      },
      {
        "type": "p",
        "content": "1. AJAX"
      },
      {
        "type": "p",
        "content": "a. AJAX Introduction"
      },
      {
        "type": "p",
        "content": "b. AJAX Database"
      },
      {
        "type": "p",
        "content": "c. XML Applications"
      },
      {
        "type": "p",
        "content": "2. Functions"
      },
      {
        "type": "p",
        "content": "a. Arguments object"
      },
      {
        "type": "p",
        "content": "b. Arrow functions"
      },
      {
        "type": "p",
        "content": "c. Default parameters"
      },
      {
        "type": "p",
        "content": "d. Method definitions"
      },
      {
        "type": "p",
        "content": "e. Rest parameters"
      },
      {
        "type": "p",
        "content": "f. getter"
      },
      {
        "type": "p",
        "content": "g. setter"
      },
      {
        "type": "p",
        "content": "h. async function"
      },
      {
        "type": "p",
        "content": "3. Working with Classes"
      },
      {
        "type": "p",
        "content": "a. class"
      },
      {
        "type": "p",
        "content": "b. constructor"
      },
      {
        "type": "p",
        "content": "c. extends"
      },
      {
        "type": "p",
        "content": "d. static"
      },
      {
        "type": "p",
        "content": "4. JavaScript Cookies"
      },
      {
        "type": "p",
        "content": "What should be covered on the Advanced level of JavaScript"
      },
      {
        "type": "p",
        "content": "When you are on the Advanced level, this means you basically know how to work on JavaScript. In the Advanced level, you have to deal with the integration of JavaScript with applications created on NodeJS, Python, Ruby, PHP, ASP NET, etc."
      },
      {
        "type": "p",
        "content": "Here your job would be to make features on JavaScript that communicate efficiently with the Server technology like databases, NodeJS, Python, Ruby, PHP, ASP.NET Core, etc"
      },
      {
        "type": "p",
        "content": "Some examples of advanced features made with JavaScript are:"
      },
      {
        "type": "p",
        "content": "1. Partially updating parts of a web page from the database every few seconds using AJAX."
      },
      {
        "type": "p",
        "content": "2. Get and show real-time stock prices on the page. You can get the stock price by implementing the API with your JavaScript code."
      },
      {
        "type": "p",
        "content": "3. Creating interactive feature on your website so that conversion rates increases. An example can be an autocomplete feature that you can create with JavaSript."
      },
      {
        "type": "p",
        "content": "4. External API implementations like TMDB API in your JavaScript and helping users to get details of any movie, actor & series"
      },
      {
        "type": "p",
        "content": "5. Infinite scroll or auto-paging feature"
      },
      {
        "type": "h2",
        "content": "Conclusion"
      },
      {
        "type": "p",
        "content": "Most of the time not knowing the fundamentals is the reason why developers get errors as well as not knowing why the program is running instead of giving errors as well as they get stuck on frameworks like react angular etc because of not knowing the fundamentals."
      },
      {
        "type": "p",
        "content": "Practicing is extremely important, but at the same time, you cannot get the best of it by just applying simple tasks you find in tutorials and books. To truly master a programming language you need a long period where you are actually working in a company or real projects with your language, the thing that makes you face real-life problems which you will not find in books."
      },
      {
        "type": "p",
        "content": "Thank you for your time!."
      },
      {
        "type": "p",
        "content": "follow me on Twitter: https://twitter.com/inthisar_hamza"
      },
      {
        "type": "p",
        "content": "site: https://lankafort.com"
      },
      {
        "type": "p",
        "content": "More content at plainenglish.io. Sign up for our free weekly newsletter. Get exclusive access to writing opportunities and advice in our community Discord."
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:50.269454"
  },
  {
    "url": "https://www.geeksforgeeks.org/learn-data-structures-with-javascript-dsa-tutorial/",
    "error": "'NoneType' object is not callable",
    "scraped_at": "2025-03-30T02:01:52.709034"
  },
  {
    "url": "https://snipcart.com/blog/javascript-practice-exercises",
    "title": "JavaScript Practice Exercises for All Levels",
    "author": "Unknown Author",
    "published_date": "Mon Mar 21 2022 15:22:25 GMT+0000 (Coordinated Universal Time)",
    "reading_time": "Unknown",
    "tags": [],
    "content": [],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:56.253775"
  },
  {
    "url": "https://github.com/leonardomso/33-js-concepts",
    "title": "Search code, repositories, users, issues, pull requests...",
    "author": "leonardomso",
    "published_date": null,
    "reading_time": "Unknown",
    "tags": [],
    "content": [],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:01:59.115596"
  },
  {
    "url": "https://www.welcometothejungle.com/en/articles/btc-complexity-programming",
    "title": "Unraveling the Complexity in Programming",
    "author": "Unknown Author",
    "published_date": null,
    "reading_time": "Unknown",
    "tags": [],
    "content": [],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:02:01.524705"
  },
  {
    "url": "https://www.reddit.com/r/learnjavascript/comments/1ejz19y/getting_better_with_javascript/",
    "title": "Getting better with JavaScript",
    "author": "Unknown Author",
    "published_date": null,
    "reading_time": "Unknown",
    "tags": [],
    "content": [],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:02:05.008423"
  },
  {
    "url": "https://javascript.plainenglish.io/the-best-way-to-learn-javascript-faster-90318c26785b",
    "title": "The Best Way to Learn JavaScript Faster",
    "author": "256 Following",
    "published_date": null,
    "reading_time": "6 min read",
    "tags": [
      "JavaScript",
      "Programming",
      "Coding",
      "Learning",
      "Web Development"
    ],
    "content": [
      {
        "type": "h1",
        "content": "The Best Way to Learn JavaScript Faster"
      },
      {
        "type": "h2",
        "content": "The 3 methods of learning a new programming language."
      },
      {
        "type": "p",
        "content": "Inthisar Hamza"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "JavaScript in Plain English"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "3"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "I am a self-taught Web Developer and I say — the best way to learn JavaScript is to learn by yourself. As with any other programming language, the learning process of JavaScript should be started from the beginners level to the intermediate level and then finally the advanced level."
      },
      {
        "type": "p",
        "content": "What many JavaScript beginners make mistake is that they keep on reading JavaScript tutorials one by one, and do not implement any of them. This way of learning is totally wrong and futile."
      },
      {
        "type": "p",
        "content": "Beginners should read one tutorial then implement what the tutorial has taught them, in their own code. This will make them understand the code correctly, otherwise, I guarantee they will forget what they just read within the next 30 minutes or before."
      },
      {
        "type": "h2",
        "content": "Three different approaches work for me when learning a new programming language."
      },
      {
        "type": "p",
        "content": "The first method is to look at examples of code in books or on websites. This is good because you get snippets of code to try out, but it doesn’t always provide an explanation of how each part works. You can then experiment with modifying bits of the example code to see what effect it has on the rest of the program. This is a nice way to learn one specific thing at a time without having to switch between many pages and files to figure out how everything fits together as a whole."
      },
      {
        "type": "p",
        "content": "You can also read books about JavaScript, but this doesn’t let you experiment with the code to see what happens. For some books, though, it is helpful to read a chapter or section and then try out what you learned in an online program editor that lets you type the code and see the output without having to run a program. Most of these types of editors also let you add in your own code snippets for future reference if you think of a way to do something later on. I feel like I learn more by actually typing out examples than just reading about them because when typing I am forced to get the syntax correct otherwise the interpreter will give me an error message."
      },
      {
        "type": "p",
        "content": "The second method is using tutorials that show how to configure tools such as text editors, browser developer tools, and web servers. This lets you write code to create HTML pages that load JavaScript files for testing. I like this method because you can quickly see your changes without having to make a whole new build of the program every time you want to test one small change."
      },
      {
        "type": "p",
        "content": "You could also use tutorials that show how to set up an integrated development environment (IDE) like NetBeans/VS Code with the correct plug-ins, or install node.js and then download different versions of the required JavaScript file packages into them. Then you would be able to execute programs in real-time as opposed to just running it once after building your program into an executable file like most IDE’s require. Unfortunately, not all tutorial authors do this for their readers so some tutorials can be more difficult to follow along with than others."
      },
      {
        "type": "p",
        "content": "The third method is using the debugger that usually comes with your browser’s JavaScript console. If you define a function and call it right away, then this will cause an error message under most circumstances because you haven’t defined what the function does yet so the interpreter doesn’t know how to carry out its task. You can use breakpoints in most browsers’ JavaScript consoles to stop where you want execution to halt before a function gets called so that you can check the values of variables at specific points in your program as it runs. This lets you see if certain parts of your code are causing errors by stopping at various points throughout the execution of your program and looking at things from various angles."
      },
      {
        "type": "p",
        "content": "The first two methods are good to use by themselves, but the third method is best used in combination with one of the other two. By using a combination of all three, you can learn any programming language much faster and understand it better than if you only use one or two methods on your own."
      },
      {
        "type": "p",
        "content": "What should be covered on the Beginners level of JavaScript"
      },
      {
        "type": "p",
        "content": "The topics which you should cover are –"
      },
      {
        "type": "p",
        "content": "1. JavaScript Syntax — JavaScript Syntax"
      },
      {
        "type": "p",
        "content": "2. Variables — JavaScript Variables"
      },
      {
        "type": "p",
        "content": "3. Data Types — JavaScript Data Types"
      },
      {
        "type": "p",
        "content": "4. Operators — JavaScript Operators"
      },
      {
        "type": "p",
        "content": "5. Arithmetic Operations — JavaScript Arithmetic"
      },
      {
        "type": "p",
        "content": "6. Assignment — JavaScript Assignment"
      },
      {
        "type": "p",
        "content": "7. JS Output — JavaScript Output"
      },
      {
        "type": "p",
        "content": "8. Objects — JavaScript Objects"
      },
      {
        "type": "p",
        "content": "9. Break & Continue — JavaScript Break and Continue"
      },
      {
        "type": "p",
        "content": "Examples of JavaScript Programmes for Beginners"
      },
      {
        "type": "p",
        "content": "I would also like to list some programs which Beginners should implement."
      },
      {
        "type": "p",
        "content": "1. Create a program where the user inputs 2 int values in 2 input boxes and you display the greatest of them on the alert box when a button is clicked."
      },
      {
        "type": "p",
        "content": "2. Create a program where the user enters a number in a text box and you should display its table (up to 10) on a div. The table should be created on the button click event. Also, prevent users to enter strings on the text box (give appropriate error on the alert box when input is a string)."
      },
      {
        "type": "p",
        "content": "3. Create a small form for the Job Applications. It should have 5 fields — name, age, education, address, and expected salary. These 5 fields should have HTML controls where the user enters his/their information, there should be a button which on clicking shows the user information on div controls."
      },
      {
        "type": "p",
        "content": "4. Finding whether a number is a prime number or not."
      },
      {
        "type": "p",
        "content": "5. Create a calculator with common functions — add, subtract, divide & multiply"
      },
      {
        "type": "p",
        "content": "What should be covered on the Intermediate level of JavaScript"
      },
      {
        "type": "p",
        "content": "1. AJAX"
      },
      {
        "type": "p",
        "content": "a. AJAX Introduction"
      },
      {
        "type": "p",
        "content": "b. AJAX Database"
      },
      {
        "type": "p",
        "content": "c. XML Applications"
      },
      {
        "type": "p",
        "content": "2. Functions"
      },
      {
        "type": "p",
        "content": "a. Arguments object"
      },
      {
        "type": "p",
        "content": "b. Arrow functions"
      },
      {
        "type": "p",
        "content": "c. Default parameters"
      },
      {
        "type": "p",
        "content": "d. Method definitions"
      },
      {
        "type": "p",
        "content": "e. Rest parameters"
      },
      {
        "type": "p",
        "content": "f. getter"
      },
      {
        "type": "p",
        "content": "g. setter"
      },
      {
        "type": "p",
        "content": "h. async function"
      },
      {
        "type": "p",
        "content": "3. Working with Classes"
      },
      {
        "type": "p",
        "content": "a. class"
      },
      {
        "type": "p",
        "content": "b. constructor"
      },
      {
        "type": "p",
        "content": "c. extends"
      },
      {
        "type": "p",
        "content": "d. static"
      },
      {
        "type": "p",
        "content": "4. JavaScript Cookies"
      },
      {
        "type": "p",
        "content": "What should be covered on the Advanced level of JavaScript"
      },
      {
        "type": "p",
        "content": "When you are on the Advanced level, this means you basically know how to work on JavaScript. In the Advanced level, you have to deal with the integration of JavaScript with applications created on NodeJS, Python, Ruby, PHP, ASP NET, etc."
      },
      {
        "type": "p",
        "content": "Here your job would be to make features on JavaScript that communicate efficiently with the Server technology like databases, NodeJS, Python, Ruby, PHP, ASP.NET Core, etc"
      },
      {
        "type": "p",
        "content": "Some examples of advanced features made with JavaScript are:"
      },
      {
        "type": "p",
        "content": "1. Partially updating parts of a web page from the database every few seconds using AJAX."
      },
      {
        "type": "p",
        "content": "2. Get and show real-time stock prices on the page. You can get the stock price by implementing the API with your JavaScript code."
      },
      {
        "type": "p",
        "content": "3. Creating interactive feature on your website so that conversion rates increases. An example can be an autocomplete feature that you can create with JavaSript."
      },
      {
        "type": "p",
        "content": "4. External API implementations like TMDB API in your JavaScript and helping users to get details of any movie, actor & series"
      },
      {
        "type": "p",
        "content": "5. Infinite scroll or auto-paging feature"
      },
      {
        "type": "h2",
        "content": "Conclusion"
      },
      {
        "type": "p",
        "content": "Most of the time not knowing the fundamentals is the reason why developers get errors as well as not knowing why the program is running instead of giving errors as well as they get stuck on frameworks like react angular etc because of not knowing the fundamentals."
      },
      {
        "type": "p",
        "content": "Practicing is extremely important, but at the same time, you cannot get the best of it by just applying simple tasks you find in tutorials and books. To truly master a programming language you need a long period where you are actually working in a company or real projects with your language, the thing that makes you face real-life problems which you will not find in books."
      },
      {
        "type": "p",
        "content": "Thank you for your time!."
      },
      {
        "type": "p",
        "content": "follow me on Twitter: https://twitter.com/inthisar_hamza"
      },
      {
        "type": "p",
        "content": "site: https://lankafort.com"
      },
      {
        "type": "p",
        "content": "More content at plainenglish.io. Sign up for our free weekly newsletter. Get exclusive access to writing opportunities and advice in our community Discord."
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:02:08.444961"
  },
  {
    "url": "https://javascriptcentric.medium.com/master-javascript-with-these-40-competitive-challenges-from-easy-to-expert-level-solutions-1d8616dc16a8",
    "title": "Competitive Programming with JavaScript",
    "author": "Press",
    "published_date": null,
    "reading_time": "30 min read",
    "tags": [],
    "content": [
      {
        "type": "p",
        "content": "Member-only story"
      },
      {
        "type": "h1",
        "content": "Competitive Programming with JavaScript"
      },
      {
        "type": "p",
        "content": "Ravi Sharma"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "h2",
        "content": "🥷 Ready to take your JavaScript skills to the next level?"
      },
      {
        "type": "p",
        "content": "In the ever-evolving landscape of web development, JavaScript stands as a foundational pillar, powering the interactive experiences we encounter daily. In this comprehensive guide, we’ll delve into the realm of competitive JavaScript challenges, presenting the top 30 exercises (Simple to Hard Level that includes all famous interview coding question) that will push your coding abilities to new heights."
      },
      {
        "type": "p",
        "content": "From simple exercises to brain-twisting puzzles, each challenge is designed to sharpen your problem-solving skills and boost your confidence."
      },
      {
        "type": "h2",
        "content": "Read For Free"
      },
      {
        "type": "p",
        "content": "💡Nail JavaScript interviews with the right practice questions and in-depth solutions from ex-interviewers! Try GreatFrontEnd → 💡"
      },
      {
        "type": "h2",
        "content": "Level -1: Simple Problems (You Should be able to solve it 💪)"
      },
      {
        "type": "p",
        "content": "1.[Palindrome String]: Write a JavaScript function to check if a given string is a palindrome (reads the same forwards and backward)."
      },
      {
        "type": "p",
        "content": "2.[Prime Number]: Write a JavaScript function to check whether a number is prime or not."
      },
      {
        "type": "p",
        "content": "3.[Fibonacci series]: Write a JavaScript function to print the Fibonacci series."
      },
      {
        "type": "p",
        "content": "4.[Valid Anagram]: Given two strings s and t, return true if it is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."
      },
      {
        "type": "p",
        "content": "5.[MAX And MIN Number]: Given an array of numbers, write a function to find the largest and smallest numbers in the unsorted array."
      },
      {
        "type": "p",
        "content": "6.Write a function that sorts an array of numbers in ascending order."
      },
      {
        "type": "p",
        "content": "7.Write a function to sort an array of objects based on username, where each object contains username, age, and email."
      },
      {
        "type": "p",
        "content": "8.Write a function to filters a username in an array of objects where each object contains username, age, and email."
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:02:10.547150"
  },
  {
    "url": "https://lokesh-prajapati.medium.com/10-most-challenging-javascript-techniques-you-need-to-know-3d821ee49f31",
    "title": "10 Most Challenging JavaScript Techniques You Need to Know 🔥🔥",
    "author": "Press",
    "published_date": null,
    "reading_time": "8 min read",
    "tags": [
      "Programming",
      "JavaScript",
      "Technology",
      "Software Engineering",
      "Javascript Tips"
    ],
    "content": [
      {
        "type": "h1",
        "content": "10 Most Challenging JavaScript Techniques You Need to Know 🔥🔥"
      },
      {
        "type": "p",
        "content": "Lokesh Prajapati"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "This article dives into the world of advanced JavaScript, exploring 10 of the most challenging yet powerful techniques that can elevate your code and problem-solving abilities. Whether you’re a seasoned developer or an ambitious learner, this guide will unveil the intricacies of these techniques, providing clear explanations and practical examples to help you master them. Be prepared to push your boundaries and unlock the true potential of JavaScript!"
      },
      {
        "type": "h1",
        "content": "Outline of the topics:"
      },
      {
        "type": "p",
        "content": "============================================================="
      },
      {
        "type": "h2",
        "content": "1. Closures:"
      },
      {
        "type": "p",
        "content": "Closures are like magic boxes. A function can define variables within its scope, and even after the function itself has executed, those variables can still be accessed by functions defined within the original function’s scope. This creates a powerful way to encapsulate data and functionality."
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "pre",
        "content": "function createGame(winningNumber) {  let attempts = 0; // This variable is stored in the closure's backpack  return function guess(number) {    attempts++;    if (number === winningNumber) {      return `You win in ${attempts} attempts!`;    } else {      return `Try again. It's your ${attempts}th attempt.`;    }  }}const game = createGame(5); // This creates the closure, \"remembering\" winningNumberconsole.log(game(3)); // Outputs: Try again. It's your 1st attempt.console.log(game(8)); // Outputs: Try again. It's your 2nd attempt.console.log(game(5)); // Outputs: You win in 3 attempts!"
      },
      {
        "type": "h2",
        "content": "2. Prototypal Inheritance"
      },
      {
        "type": "p",
        "content": "Prototypal inheritance is a fundamental concept in JavaScript that allows objects to inherit properties and methods from other objects. It forms the backbone of object-oriented programming in JavaScript, even though JavaScript itself doesn’t have classes in the traditional sense."
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "pre",
        "content": "function Person(name, age) {  this.name = name;  this.age = age;}Person.prototype.greet = function() {  console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);}function Student(name, age, grade) {  // Inherit properties from Person directly  this.name = name;  this.age = age;  this.grade = grade;}// Set Student's prototype to inherit from PersonStudent.prototype = Object.create(Person.prototype);Student.prototype.study = function() {  console.log(`${this.name} is studying hard!`);}const alice = new Person(\"Lokesh\", 24);alice.greet(); // Outputs: Hello, my name is Lokesh and I am 24 years old.const bob = new Student(\"Lokesh\", 24, 12);bob.greet(); // Outputs: Hello, my name is Lokesh and I am 24 years old. (inherited)bob.study(); // Outputs: Lokesh is studying hard!"
      },
      {
        "type": "h2",
        "content": "3. Asynchronous Programming (Callbacks, Promises, Async/Await)"
      },
      {
        "type": "p",
        "content": "Prototypal inheritance is a fundamental concept in JavaScript that allows objects to inherit properties and methods from other objects. It forms the backbone of object-oriented programming in JavaScript, even though JavaScript itself doesn’t have classes in the traditional sense."
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "pre",
        "content": "async function getData() {  try {    const response = await fetch('https://api.example.com/data');    const data = await response.json();    console.log(data);  } catch (error) {    console.error('Error:', error);  }}getData();"
      },
      {
        "type": "h2",
        "content": "4. Higher-Order Functions"
      },
      {
        "type": "p",
        "content": "Highlight functions that take other functions as arguments or return them as output. Discuss their importance in functional programming patterns."
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "pre",
        "content": "const numbers = [1, 2, 3, 4, 5];const doubled = numbers.map(number => number * 2);console.log(doubled); // Outputs: [2, 4, 6, 8, 10]"
      },
      {
        "type": "h2",
        "content": "5. Memoization"
      },
      {
        "type": "p",
        "content": "In JavaScript, memoization is an optimization technique that stores the results of expensive function calls to avoid redundant calculations. It’s like creating a cheat sheet for your functions to save time and improve performance."
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "pre",
        "content": "function memoize(fn) {  const cache = {};  return function(...args) {    const key = args.toString();    if (key in cache) return cache[key];    else return (cache[key] = fn(...args));  };}"
      },
      {
        "type": "h2",
        "content": "6. Modules (Import/Export)"
      },
      {
        "type": "p",
        "content": "Modules in JavaScript are a powerful feature that allows developers to organize code into reusable pieces. This can greatly enhance code maintainability and readability. Modules rely on the import and export statements to share code between different files. Here's a simple example to demonstrate how you can use modules in JavaScript:"
      },
      {
        "type": "p",
        "content": "Step 1: Create a Module"
      },
      {
        "type": "p",
        "content": "Suppose you have a utility module that performs arithmetic operations. You can define this module in a separate file, let’s name it mathUtils.js."
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "pre",
        "content": "// File: mathUtils.js// Define a function to add two numbersexport function add(x, y) {  return x + y;}// Define a function to subtract two numbersexport function subtract(x, y) {  return x - y;}"
      },
      {
        "type": "p",
        "content": "In the above code, the export keyword makes the functions add and subtract available for import in other JavaScript files."
      },
      {
        "type": "p",
        "content": "Step 2: Import and Use the Module"
      },
      {
        "type": "p",
        "content": "Now, you want to use these utility functions in your main application file, which we’ll call app.js."
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "pre",
        "content": "// File: app.js// Import the add and subtract functions from the mathUtils moduleimport { add, subtract } from './mathUtils.js';// Use the imported functionsconsole.log(add(5, 3));       // Outputs: 8console.log(subtract(10, 4)); // Outputs: 6"
      },
      {
        "type": "p",
        "content": "In app.js, the import statement is used to bring in the add and subtract functions from the mathUtils.js file. Once imported, these functions can be used just like any other functions in app.js."
      },
      {
        "type": "h2",
        "content": "7. Shadow DOM and Web Components"
      },
      {
        "type": "p",
        "content": "Introduce the concept of Web Components, a suite of different technologies allowing you to create reusable custom elements — with their functionality encapsulated away from the rest of your code — and utilize them in your web apps. The Shadow DOM is a key part of this, providing encapsulation for JavaScript, CSS, and templating. This isolation allows developers to build UI components that are self-contained and don’t leak styles or markup to the outside world, nor do they alter or affect the main document’s structure unintentionally."
      },
      {
        "type": "pre",
        "content": "<!-- Defining a custom element --><template id=\"user-card-template\">  <style>    /* Styles are encapsulated; they don't leak outside */    .user-card {      display: flex;      align-items: center;      border: 1px solid #ddd;      padding: 10px;      margin: 10px 0;    }    .user-card img {      border-radius: 50%;      margin-right: 10px;    }  </style>  <div class=\"user-card\">    <img src=\"\" alt=\"User Avatar\">    <div>      <h3></h3>      <p></p>    </div>  </div></template><script>class UserCard extends HTMLElement {  constructor() {    super();    // Attaching shadow root    const shadow = this.attachShadow({ mode: 'open' });    const template = document.getElementById('user-card-template').content.cloneNode(true);        // Populating the template with data passed as attributes    template.querySelector('img').setAttribute('src', this.getAttribute('avatar'));    template.querySelector('h3').innerText = this.getAttribute('name');    template.querySelector('p').innerText = this.getAttribute('email');        shadow.appendChild(template);  }}// Define the new elementcustomElements.define('user-card', UserCard);</script>"
      },
      {
        "type": "pre",
        "content": "<user-card name=\"John Doe\" email=\"john.doe@example.com\" avatar=\"avatar.jpg\"></user-card>"
      },
      {
        "type": "p",
        "content": "This example demonstrates how to define and use a custom element <user-card> that encapsulates its styling and functionality, providing a clear, reusable component. Shadow DOM and Web Components represent a significant shift in how developers can build and organize web applications, offering a modular, encapsulated approach to designing web UIs."
      },
      {
        "type": "h2",
        "content": "8. Dynamic Import()"
      },
      {
        "type": "p",
        "content": "Dynamic import() in JavaScript is a feature that allows you to load modules on-demand, or lazily. This can significantly improve the performance of your application by reducing the initial load time, especially for large modules or those that are only needed under certain conditions. Dynamic imports use promises, making it easy to work with asynchronous module loading."
      },
      {
        "type": "p",
        "content": "Here’s a straightforward example to illustrate how dynamic import() works:"
      },
      {
        "type": "p",
        "content": "Scenario: Loading a Utility Module Only When Needed"
      },
      {
        "type": "p",
        "content": "Suppose you have a module named complexUtility.js that provides a complex function, but you only need this function under specific conditions, not on every page load."
      },
      {
        "type": "pre",
        "content": "// File: complexUtility.jsexport function complexCalculation() {  // Imagine some heavy computation here  console.log('Performing a complex calculation...');  return \"Result of complex calculation\";}"
      },
      {
        "type": "p",
        "content": "Using Dynamic Import in Your Application"
      },
      {
        "type": "p",
        "content": "In your main application file, let’s say you want to invoke complexCalculation only when a user performs a certain action, like clicking a button."
      },
      {
        "type": "pre",
        "content": "<!-- index.html --><button id=\"loadAndExecute\">Perform Complex Calculation</button><script type=\"module\" src=\"app.js\"></script>"
      },
      {
        "type": "pre",
        "content": "// File: app.jsdocument.getElementById('loadAndExecute').addEventListener('click', () => {  import('./complexUtility.js')    .then((module) => {      const result = module.complexCalculation();      console.log(result);    })    .catch((error) => {      console.error('Failed to load the module:', error);    });});"
      },
      {
        "type": "h2",
        "content": "9. Event Loop and Concurrency Model"
      },
      {
        "type": "p",
        "content": "The Event Loop and Concurrency Model in JavaScript are fundamental concepts that allow JavaScript, which is single-threaded, to perform non-blocking operations, enabling it to handle multiple tasks concurrently despite its single-thread nature. This model is especially crucial for handling I/O-heavy tasks like network requests, file operations, or timers without freezing the UI or waiting for tasks to complete."
      },
      {
        "type": "p",
        "content": "The Event Loop:The event loop is a mechanism that continuously checks if there is work to be done in the call stack. If the call stack is empty and there are callbacks waiting in the task queue (also known as the callback queue), the event loop pushes the first callback in the queue onto the call stack to be executed. This loop enables JavaScript to perform non-blocking, asynchronous operations."
      },
      {
        "type": "p",
        "content": "Concurrency Model:JavaScript’s concurrency model is based on an “event loop.” This model, combined with the runtime’s capabilities (like the Web APIs in browsers or APIs in Node.js), allows JavaScript to process tasks asynchronously. Tasks such as events, loading of resources, and timers are handled outside the main thread (thanks to the Web APIs), and once they are completed, they enter the task queue. The event loop then takes these tasks from the queue and executes them when the call stack is clear."
      },
      {
        "type": "p",
        "content": "Example:"
      },
      {
        "type": "pre",
        "content": "console.log('Start');// Asynchronous setTimeout functionsetTimeout(() => {  console.log('Callback executed');}, 2000);console.log('End');// Output:// Start// End// Callback executed (after a 2-second delay)"
      },
      {
        "type": "h2",
        "content": "10. Currying"
      },
      {
        "type": "p",
        "content": "Currying is when you transform a function that takes multiple arguments into a sequence of functions that each take a single argument. It’s like creating a chain of functions where each function takes one argument and passes the result to the next function in the chain until all arguments have been handled. This is useful for creating specialized functions based on general ones."
      },
      {
        "type": "p",
        "content": "Example:Imagine you have a function to add two numbers:"
      },
      {
        "type": "pre",
        "content": "function add(a, b) {  return a + b;}"
      },
      {
        "type": "p",
        "content": "In currying, you’d break it down into functions that take one argument each:"
      },
      {
        "type": "pre",
        "content": "function add(a) {  return function(b) {    return a + b;  };}const addFive = add(3); // Step 1: We've created a function that knows '3'console.log(addFive(10)); // Step 2: Now we add '10' to '3', resulting in '13'"
      },
      {
        "type": "h2",
        "content": "Conclusion:"
      },
      {
        "type": "p",
        "content": "In the evolving landscape of web development, JavaScript remains a cornerstone, powering dynamic and interactive features across the web. Mastering JavaScript, however, involves grappling with a set of complex and powerful techniques that can significantly enhance the functionality, efficiency, and scalability of your applications. From the nuanced handling of asynchronous operations with Promises and async/await, the encapsulation and modularization of code through Modules, to the more abstract concepts like Closures, Currying, and Prototypal Inheritance — each technique offers unique advantages and challenges."
      },
      {
        "type": "p",
        "content": "Understanding and applying these techniques not only elevates your coding skills but also opens up new possibilities for solving complex problems and implementing sophisticated features. Whether it’s managing asynchronous data flow, creating more reusable and modular code, or leveraging JavaScript’s functional programming capabilities, these challenging techniques are essential tools in a developer’s arsenal."
      },
      {
        "type": "p",
        "content": "As you continue to explore and master these advanced aspects of JavaScript, remember that the journey is one of continual learning and experimentation. Embrace the challenges and use them as opportunities to grow. The landscape of JavaScript is always evolving, and with it, the techniques and best practices that developers use to harness its full potential. Stay curious, keep experimenting, and never stop learning. The mastery of these challenging techniques not only makes you a more proficient JavaScript developer but also empowers you to push the boundaries of what’s possible on the web."
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:02:12.677054"
  },
  {
    "url": "https://drop-x-out.medium.com/mastering-big-o-notation-with-javascript-a-beginners-guide-ae6fd2552559",
    "title": "Mastering Big O Notation with JavaScript: A Beginner’s Guide",
    "author": "Press",
    "published_date": null,
    "reading_time": "4 min read",
    "tags": [
      "Dsa Courses",
      "Big O Notation",
      "Arrays",
      "Objects",
      "Loops In Javascript"
    ],
    "content": [
      {
        "type": "h1",
        "content": "Mastering Big O Notation with JavaScript: A Beginner’s Guide"
      },
      {
        "type": "p",
        "content": "Drop X Out"
      },
      {
        "type": "p",
        "content": "Follow"
      },
      {
        "type": "p",
        "content": "--"
      },
      {
        "type": "p",
        "content": "Listen"
      },
      {
        "type": "p",
        "content": "Share"
      },
      {
        "type": "p",
        "content": "Understanding the efficiency of algorithms and data structures is crucial for writing efficient and scalable code. One way to analyze this efficiency is through Big O notation, which describes the performance of an algorithm in terms of its input size. In this blog, we’ll explore 50 Big O exercises using JavaScript, focusing on looping, array methods, object methods, arrays, and objects. These exercises are beginner-friendly and designed to enhance your understanding of algorithmic complexity."
      },
      {
        "type": "h1",
        "content": "Looping"
      },
      {
        "type": "p",
        "content": "1)"
      },
      {
        "type": "pre",
        "content": "function printArrayElements(arr) {  for (let i = 0; i < arr.length; i++) {    console.log(arr[i]);  }}"
      },
      {
        "type": "p",
        "content": "This function simply prints each element of an array, demonstrating linear time complexity O(n)."
      },
      {
        "type": "p",
        "content": "2)"
      },
      {
        "type": "pre",
        "content": "function printAllPairs(arr) {  for (let i = 0; i < arr.length; i++) {    for (let j = 0; j < arr.length; j++) {      console.log(arr[i], arr[j]);    }  }}"
      },
      {
        "type": "p",
        "content": "Here, we have nested loops that print all possible pairs of elements in the array, resulting in quadratic time complexity O(n²)."
      },
      {
        "type": "p",
        "content": "3)"
      },
      {
        "type": "pre",
        "content": "function printAllTriplets(arr) {  for (let i = 0; i < arr.length; i++) {    for (let j = 0; j < arr.length; j++) {      for (let k = 0; k < arr.length; k++) {        console.log(arr[i], arr[j], arr[k]);      }    }  }}"
      },
      {
        "type": "p",
        "content": "Similar to the quadratic loop, this function prints all possible triplets of elements, resulting in cubic time complexity O(n³)."
      },
      {
        "type": "p",
        "content": "4)"
      },
      {
        "type": "pre",
        "content": "function binarySearch(arr, target) {  let start = 0;  let end = arr.length - 1;  while (start <= end) {    let mid = Math.floor((start + end) / 2);    if (arr[mid] === target) {      return mid;    } else if (arr[mid] < target) {      start = mid + 1;    } else {      end = mid - 1;    }  }  return -1;}"
      },
      {
        "type": "p",
        "content": "This function demonstrates logarithmic time complexity O(log n) as it performs binary search in a sorted array."
      },
      {
        "type": "p",
        "content": "5)"
      },
      {
        "type": "pre",
        "content": "function findFirstOccurrence(arr, target) {  for (let i = 0; i < arr.length; i++) {    if (arr[i] === target) {      console.log(\"Found at index:\", i);      break;    }  }}"
      },
      {
        "type": "p",
        "content": "Here, we find the first occurrence of a specific element and exit the loop, resulting in linear time complexity O(n)."
      },
      {
        "type": "h1",
        "content": "Array Methods"
      },
      {
        "type": "p",
        "content": "6)"
      },
      {
        "type": "pre",
        "content": "function filterEvenNumbers(arr) {  return arr.filter(num => num % 2 === 0);}"
      },
      {
        "type": "p",
        "content": "The filter method is used to create a new array containing only even numbers.O(n) (linear)"
      },
      {
        "type": "p",
        "content": "7)"
      },
      {
        "type": "pre",
        "content": "function doubleArrayElements(arr) {  return arr.map(num => num * 2);}"
      },
      {
        "type": "p",
        "content": "The map method is employed to double each element in the array.O(n) (linear)"
      },
      {
        "type": "p",
        "content": "8)"
      },
      {
        "type": "pre",
        "content": "function sumArrayElements(arr) {  return arr.reduce((acc, num) => acc + num, 0);}"
      },
      {
        "type": "p",
        "content": "Using the reduce method, we find the sum of all elements in the array. O(n) (linear)"
      },
      {
        "type": "p",
        "content": "9)"
      },
      {
        "type": "pre",
        "content": "function hasNumberGreaterThanTen(arr) {  return arr.some(num => num > 10);}"
      },
      {
        "type": "p",
        "content": "The some method is utilized to check if any element in the array is greater than 10. O(n) (linear)"
      },
      {
        "type": "p",
        "content": "10)"
      },
      {
        "type": "pre",
        "content": "function areAllNumbersPositive(arr) {  return arr.every(num => num > 0);}"
      },
      {
        "type": "p",
        "content": "The every method checks if all elements in the array are positive.O(n) (linear). O(n) (linear)"
      },
      {
        "type": "h1",
        "content": "Object Methods"
      },
      {
        "type": "p",
        "content": "11)"
      },
      {
        "type": "pre",
        "content": "function printObjectKeys(obj) {  for (let key in obj) {    console.log(key);  }}"
      },
      {
        "type": "p",
        "content": "This function prints all keys of an object using a for...in loop. O(n) (linear)"
      },
      {
        "type": "p",
        "content": "12)"
      },
      {
        "type": "pre",
        "content": "function printObjectValues(obj) {  for (let key in obj) {    console.log(obj[key]);  }}"
      },
      {
        "type": "p",
        "content": "Similarly, this function prints all values of an object. O(n) (linear)"
      },
      {
        "type": "p",
        "content": "13)"
      },
      {
        "type": "pre",
        "content": "function printObjectEntries(obj) {  for (let [key, value] of Object.entries(obj)) {    console.log(key, value);  }}"
      },
      {
        "type": "p",
        "content": "Here, the Object.entries method is used to print all key-value pairs of an object. O(n) (linear)"
      },
      {
        "type": "p",
        "content": "14)"
      },
      {
        "type": "pre",
        "content": "function combineObjects(obj1, obj2) {  return { ...obj1, ...obj2 };}"
      },
      {
        "type": "p",
        "content": "The spread operator is used to combine two objects into a new one. O(m + n) (linear, where m and n are the sizes of the objects being merged)"
      },
      {
        "type": "p",
        "content": "15)"
      },
      {
        "type": "pre",
        "content": "function extractValues(obj) {  const { prop1, prop2 } = obj;  console.log(prop1, prop2);}"
      },
      {
        "type": "p",
        "content": "This function demonstrates object destructuring to extract specific values. O(1) (constant)"
      },
      {
        "type": "h1",
        "content": "Arrays and Objects"
      },
      {
        "type": "p",
        "content": "16)"
      },
      {
        "type": "pre",
        "content": "const arrayOfObjects = [  { name: \"Alice\", age: 25 },  { name: \"Bob\", age: 30 },  // Add more objects as needed];"
      },
      {
        "type": "p",
        "content": "An array of objects with name and age properties are created. N/A (not applicable)"
      },
      {
        "type": "p",
        "content": "17)"
      },
      {
        "type": "pre",
        "content": "function findObjectByName(array, name) {  return array.find(obj => obj.name === name);}"
      },
      {
        "type": "p",
        "content": "The find method is employed to locate an object in the array based on a specific property value. O(n) (linear)"
      },
      {
        "type": "p",
        "content": "18)"
      },
      {
        "type": "pre",
        "content": "function filterObjectsByAge(array, age) {  return array.filter(obj => obj.age === age);}"
      },
      {
        "type": "p",
        "content": "This function filters an array of objects based on a specific property value. O(n) (linear)"
      },
      {
        "type": "p",
        "content": "19)"
      },
      {
        "type": "pre",
        "content": "function sortObjectsByAge(array) {  return array.sort((a, b) => a.age - b.age);}"
      },
      {
        "type": "p",
        "content": "The sort method is used to sort an array of objects by a specific property. O(n log n) (Linearithmic)"
      },
      {
        "type": "p",
        "content": "20)"
      },
      {
        "type": "pre",
        "content": "// Example function with linear time complexityfunction linearTimeFunction(arr) {  for (let i = 0; i < arr.length; i++) {    console.log(arr[i]);  }}"
      },
      {
        "type": "p",
        "content": "O(n) (Linear)"
      },
      {
        "type": "p",
        "content": "Must Watch Our Playlist of DSA with JS."
      },
      {
        "type": "p",
        "content": "https://youtube.com/playlist?list=PLZWk1lAlHIsc3P014D06Q2ia3vRt-eIiZ&feature=shared"
      }
    ],
    "claps": "Unknown",
    "scraped_at": "2025-03-30T02:02:14.780280"
  }
]